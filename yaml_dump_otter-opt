(lp0
(dp1
S'description'
p2
S''
p3
sS'subblocks'
p4
(lp5
(dp6
S'description'
p7
g3
sS'subblocks'
p8
(lp9
(dp10
S'description'
p11
g3
sS'subblocks'
p12
NsS'parameters'
p13
(lp14
(dp15
S'description'
p16
S'The block id where this object lives.\n'
p17
sS'cpp_type'
p18
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19
sS'default'
p20
g3
sS'name'
p21
S'block'
p22
sS'required'
p23
I00
sS'group_name'
p24
Nsa(dp25
S'description'
p26
S'A string representing the Moose Object that will be built by this Action\n'
p27
sS'cpp_type'
p28
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29
sS'default'
p30
g3
sS'name'
p31
S'type'
p32
sS'required'
p33
I01
sS'group_name'
p34
NsasS'name'
p35
S'/Adaptivity/Indicators/*'
p36
sa(dp37
S'description'
p38
g3
sS'subblocks'
p39
NsS'parameters'
p40
(lp41
(dp42
S'description'
p43
S'block ID or name where the object works\n'
p44
sS'cpp_type'
p45
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p46
sS'default'
p47
S'ANY_BLOCK_ID'
p48
sS'name'
p49
S'block'
p50
sS'required'
p51
I00
sS'group_name'
p52
Nsa(dp53
S'description'
p54
S'The analytic solution to compare against\n'
p55
sS'cpp_type'
p56
S'FunctionName'
p57
sS'default'
p58
g3
sS'name'
p59
S'function'
p60
sS'required'
p61
I01
sS'group_name'
p62
Nsa(dp63
S'description'
p64
S'Determines whether this object is calculated using an implicit or explicit form\n'
p65
sS'cpp_type'
p66
S'bool'
p67
sS'default'
p68
S'1'
p69
sS'name'
p70
S'implicit'
p71
sS'required'
p72
I00
sS'group_name'
p73
S'Advanced'
p74
sa(dp75
S'description'
p76
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p77
sS'cpp_type'
p78
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p79
sS'default'
p80
g3
sS'name'
p81
S'outputs'
p82
sS'required'
p83
I00
sS'group_name'
p84
Nsa(dp85
S'description'
p86
g3
sS'cpp_type'
p87
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p88
sS'default'
p89
S'AnalyticalIndicator'
p90
sS'name'
p91
S'type'
p92
sS'required'
p93
I00
sS'group_name'
p94
Nsa(dp95
S'description'
p96
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p97
sS'cpp_type'
p98
S'bool'
p99
sS'default'
p100
S'0'
p101
sS'name'
p102
S'use_displaced_mesh'
p103
sS'required'
p104
I00
sS'group_name'
p105
S'Advanced'
p106
sa(dp107
S'description'
p108
S'The name of the variable that this Indicator operates on\n'
p109
sS'cpp_type'
p110
S'VariableName'
p111
sS'default'
p112
g3
sS'name'
p113
S'variable'
p114
sS'required'
p115
I01
sS'group_name'
p116
NsasS'name'
p117
S'/Adaptivity/Indicators/AnalyticalIndicator'
p118
sa(dp119
S'description'
p120
g3
sS'subblocks'
p121
NsS'parameters'
p122
(lp123
(dp124
S'description'
p125
S'The list of block ids (SubdomainID) that this object will be applied\n'
p126
sS'cpp_type'
p127
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p128
sS'default'
p129
g3
sS'name'
p130
S'block'
p131
sS'required'
p132
I00
sS'group_name'
p133
Nsa(dp134
S'description'
p135
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p136
sS'cpp_type'
p137
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p138
sS'default'
p139
g3
sS'name'
p140
S'outputs'
p141
sS'required'
p142
I00
sS'group_name'
p143
Nsa(dp144
S'description'
p145
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p146
sS'cpp_type'
p147
S'bool'
p148
sS'default'
p149
S'0'
p150
sS'name'
p151
S'scale_by_flux_faces'
p152
sS'required'
p153
I00
sS'group_name'
p154
Nsa(dp155
S'description'
p156
g3
sS'cpp_type'
p157
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p158
sS'default'
p159
S'GradientJumpIndicator'
p160
sS'name'
p161
S'type'
p162
sS'required'
p163
I00
sS'group_name'
p164
Nsa(dp165
S'description'
p166
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p167
sS'cpp_type'
p168
S'bool'
p169
sS'default'
p170
S'0'
p171
sS'name'
p172
S'use_displaced_mesh'
p173
sS'required'
p174
I00
sS'group_name'
p175
S'Advanced'
p176
sa(dp177
S'description'
p178
S'The name of the variable that this side indicator applies to\n'
p179
sS'cpp_type'
p180
S'VariableName'
p181
sS'default'
p182
g3
sS'name'
p183
S'variable'
p184
sS'required'
p185
I01
sS'group_name'
p186
NsasS'name'
p187
S'/Adaptivity/Indicators/GradientJumpIndicator'
p188
sa(dp189
S'description'
p190
g3
sS'subblocks'
p191
NsS'parameters'
p192
(lp193
(dp194
S'description'
p195
S'The list of block ids (SubdomainID) that this object will be applied\n'
p196
sS'cpp_type'
p197
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p198
sS'default'
p199
g3
sS'name'
p200
S'block'
p201
sS'required'
p202
I00
sS'group_name'
p203
Nsa(dp204
S'description'
p205
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p206
sS'cpp_type'
p207
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p208
sS'default'
p209
g3
sS'name'
p210
S'outputs'
p211
sS'required'
p212
I00
sS'group_name'
p213
Nsa(dp214
S'description'
p215
S'Whether or not to scale the error values by the number of flux faces.  This attempts to not penalize elements on boundaries for having less neighbors.\n'
p216
sS'cpp_type'
p217
S'bool'
p218
sS'default'
p219
S'0'
p220
sS'name'
p221
S'scale_by_flux_faces'
p222
sS'required'
p223
I00
sS'group_name'
p224
Nsa(dp225
S'description'
p226
g3
sS'cpp_type'
p227
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p228
sS'default'
p229
S'LaplacianJumpIndicator'
p230
sS'name'
p231
S'type'
p232
sS'required'
p233
I00
sS'group_name'
p234
Nsa(dp235
S'description'
p236
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p237
sS'cpp_type'
p238
S'bool'
p239
sS'default'
p240
S'0'
p241
sS'name'
p242
S'use_displaced_mesh'
p243
sS'required'
p244
I00
sS'group_name'
p245
S'Advanced'
p246
sa(dp247
S'description'
p248
S'The name of the variable that this side indicator applies to\n'
p249
sS'cpp_type'
p250
S'VariableName'
p251
sS'default'
p252
g3
sS'name'
p253
S'variable'
p254
sS'required'
p255
I01
sS'group_name'
p256
NsasS'name'
p257
S'/Adaptivity/Indicators/LaplacianJumpIndicator'
p258
sasS'parameters'
p259
NsS'name'
p260
S'/Adaptivity/Indicators'
p261
sa(dp262
S'description'
p263
g3
sS'subblocks'
p264
(lp265
(dp266
S'description'
p267
g3
sS'subblocks'
p268
NsS'parameters'
p269
(lp270
(dp271
S'description'
p272
S'The block id where this object lives.\n'
p273
sS'cpp_type'
p274
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p275
sS'default'
p276
g3
sS'name'
p277
S'block'
p278
sS'required'
p279
I00
sS'group_name'
p280
Nsa(dp281
S'description'
p282
S'A string representing the Moose Object that will be built by this Action\n'
p283
sS'cpp_type'
p284
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p285
sS'default'
p286
g3
sS'name'
p287
S'type'
p288
sS'required'
p289
I01
sS'group_name'
p290
NsasS'name'
p291
S'/Adaptivity/Markers/*'
p292
sa(dp293
S'description'
p294
g3
sS'subblocks'
p295
NsS'parameters'
p296
(lp297
(dp298
S'description'
p299
S'The list of block ids (SubdomainID) that this object will be applied\n'
p300
sS'cpp_type'
p301
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p302
sS'default'
p303
g3
sS'name'
p304
S'block'
p305
sS'required'
p306
I00
sS'group_name'
p307
Nsa(dp308
S'description'
p309
S'The bottom left point (in x,y,z with spaces in-between).\n'
p310
sS'cpp_type'
p311
S'libMesh::VectorValue<double>'
p312
sS'default'
p313
g3
sS'name'
p314
S'bottom_left'
p315
sS'required'
p316
I01
sS'group_name'
p317
Nsa(dp318
S'name'
p319
S'inside'
p320
sS'cpp_type'
p321
S'MooseEnum'
p322
sS'default'
p323
g3
sS'description'
p324
S'How to mark elements inside the box.\n'
p325
sS'required'
p326
I01
sS'options'
p327
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p328
sS'group_name'
p329
Nsa(dp330
S'description'
p331
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p332
sS'cpp_type'
p333
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p334
sS'default'
p335
g3
sS'name'
p336
S'outputs'
p337
sS'required'
p338
I00
sS'group_name'
p339
Nsa(dp340
S'name'
p341
S'outside'
p342
sS'cpp_type'
p343
S'MooseEnum'
p344
sS'default'
p345
g3
sS'description'
p346
S'How to mark elements outside the box.\n'
p347
sS'required'
p348
I01
sS'options'
p349
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p350
sS'group_name'
p351
Nsa(dp352
S'description'
p353
S'The bottom left point (in x,y,z with spaces in-between).\n'
p354
sS'cpp_type'
p355
S'libMesh::VectorValue<double>'
p356
sS'default'
p357
g3
sS'name'
p358
S'top_right'
p359
sS'required'
p360
I01
sS'group_name'
p361
Nsa(dp362
S'description'
p363
g3
sS'cpp_type'
p364
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p365
sS'default'
p366
S'BoxMarker'
p367
sS'name'
p368
S'type'
p369
sS'required'
p370
I00
sS'group_name'
p371
Nsa(dp372
S'description'
p373
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p374
sS'cpp_type'
p375
S'bool'
p376
sS'default'
p377
S'0'
p378
sS'name'
p379
S'use_displaced_mesh'
p380
sS'required'
p381
I00
sS'group_name'
p382
S'Advanced'
p383
sasS'name'
p384
S'/Adaptivity/Markers/BoxMarker'
p385
sa(dp386
S'description'
p387
g3
sS'subblocks'
p388
NsS'parameters'
p389
(lp390
(dp391
S'description'
p392
S'The list of block ids (SubdomainID) that this object will be applied\n'
p393
sS'cpp_type'
p394
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p395
sS'default'
p396
g3
sS'name'
p397
S'block'
p398
sS'required'
p399
I00
sS'group_name'
p400
Nsa(dp401
S'description'
p402
S'The Markers to combine.\n'
p403
sS'cpp_type'
p404
S'std::__1::vector<MarkerName, std::__1::allocator<MarkerName> >'
p405
sS'default'
p406
g3
sS'name'
p407
S'markers'
p408
sS'required'
p409
I01
sS'group_name'
p410
Nsa(dp411
S'description'
p412
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p413
sS'cpp_type'
p414
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p415
sS'default'
p416
g3
sS'name'
p417
S'outputs'
p418
sS'required'
p419
I00
sS'group_name'
p420
Nsa(dp421
S'description'
p422
g3
sS'cpp_type'
p423
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p424
sS'default'
p425
S'ComboMarker'
p426
sS'name'
p427
S'type'
p428
sS'required'
p429
I00
sS'group_name'
p430
Nsa(dp431
S'description'
p432
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p433
sS'cpp_type'
p434
S'bool'
p435
sS'default'
p436
S'0'
p437
sS'name'
p438
S'use_displaced_mesh'
p439
sS'required'
p440
I00
sS'group_name'
p441
S'Advanced'
p442
sasS'name'
p443
S'/Adaptivity/Markers/ComboMarker'
p444
sa(dp445
S'description'
p446
g3
sS'subblocks'
p447
NsS'parameters'
p448
(lp449
(dp450
S'description'
p451
S'The list of block ids (SubdomainID) that this object will be applied\n'
p452
sS'cpp_type'
p453
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p454
sS'default'
p455
g3
sS'name'
p456
S'block'
p457
sS'required'
p458
I00
sS'group_name'
p459
Nsa(dp460
S'description'
p461
S'Elements within this percentage of the min error will be coarsened.  Must be between 0 and 1!\n'
p462
sS'cpp_type'
p463
S'double'
p464
sS'default'
p465
S'0'
p466
sS'name'
p467
S'coarsen'
p468
sS'required'
p469
I00
sS'group_name'
p470
Nsa(dp471
S'description'
p472
S'The name of the Indicator that this Marker uses.\n'
p473
sS'cpp_type'
p474
S'IndicatorName'
p475
sS'default'
p476
g3
sS'name'
p477
S'indicator'
p478
sS'required'
p479
I01
sS'group_name'
p480
Nsa(dp481
S'description'
p482
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p483
sS'cpp_type'
p484
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p485
sS'default'
p486
g3
sS'name'
p487
S'outputs'
p488
sS'required'
p489
I00
sS'group_name'
p490
Nsa(dp491
S'description'
p492
S'Elements within this percentage of the max error will be refined.  Must be between 0 and 1!\n'
p493
sS'cpp_type'
p494
S'double'
p495
sS'default'
p496
S'0'
p497
sS'name'
p498
S'refine'
p499
sS'required'
p500
I00
sS'group_name'
p501
Nsa(dp502
S'description'
p503
g3
sS'cpp_type'
p504
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p505
sS'default'
p506
S'ErrorFractionMarker'
p507
sS'name'
p508
S'type'
p509
sS'required'
p510
I00
sS'group_name'
p511
Nsa(dp512
S'description'
p513
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p514
sS'cpp_type'
p515
S'bool'
p516
sS'default'
p517
S'0'
p518
sS'name'
p519
S'use_displaced_mesh'
p520
sS'required'
p521
I00
sS'group_name'
p522
S'Advanced'
p523
sasS'name'
p524
S'/Adaptivity/Markers/ErrorFractionMarker'
p525
sa(dp526
S'description'
p527
g3
sS'subblocks'
p528
NsS'parameters'
p529
(lp530
(dp531
S'description'
p532
S'The list of block ids (SubdomainID) that this object will be applied\n'
p533
sS'cpp_type'
p534
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p535
sS'default'
p536
g3
sS'name'
p537
S'block'
p538
sS'required'
p539
I00
sS'group_name'
p540
Nsa(dp541
S'description'
p542
S'Elements with error less than this will be coarsened.\n'
p543
sS'cpp_type'
p544
S'double'
p545
sS'default'
p546
S'0'
p547
sS'name'
p548
S'coarsen'
p549
sS'required'
p550
I00
sS'group_name'
p551
Nsa(dp552
S'description'
p553
S'The name of the Indicator that this Marker uses.\n'
p554
sS'cpp_type'
p555
S'IndicatorName'
p556
sS'default'
p557
g3
sS'name'
p558
S'indicator'
p559
sS'required'
p560
I01
sS'group_name'
p561
Nsa(dp562
S'description'
p563
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p564
sS'cpp_type'
p565
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p566
sS'default'
p567
g3
sS'name'
p568
S'outputs'
p569
sS'required'
p570
I00
sS'group_name'
p571
Nsa(dp572
S'description'
p573
S'Elements with error more than this will be refined.\n'
p574
sS'cpp_type'
p575
S'double'
p576
sS'default'
p577
S'1.79769e+308'
p578
sS'name'
p579
S'refine'
p580
sS'required'
p581
I00
sS'group_name'
p582
Nsa(dp583
S'description'
p584
g3
sS'cpp_type'
p585
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p586
sS'default'
p587
S'ErrorToleranceMarker'
p588
sS'name'
p589
S'type'
p590
sS'required'
p591
I00
sS'group_name'
p592
Nsa(dp593
S'description'
p594
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p595
sS'cpp_type'
p596
S'bool'
p597
sS'default'
p598
S'0'
p599
sS'name'
p600
S'use_displaced_mesh'
p601
sS'required'
p602
I00
sS'group_name'
p603
S'Advanced'
p604
sasS'name'
p605
S'/Adaptivity/Markers/ErrorToleranceMarker'
p606
sa(dp607
S'description'
p608
S'Marks inside and outside a box that can have arbitrary orientation and center point\n'
p609
sS'subblocks'
p610
NsS'parameters'
p611
(lp612
(dp613
S'description'
p614
S'The list of block ids (SubdomainID) that this object will be applied\n'
p615
sS'cpp_type'
p616
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p617
sS'default'
p618
g3
sS'name'
p619
S'block'
p620
sS'required'
p621
I00
sS'group_name'
p622
Nsa(dp623
S'description'
p624
S"The center (many people spell this 'center') of the box.\n"
p625
sS'cpp_type'
p626
S'libMesh::Point'
p627
sS'default'
p628
g3
sS'name'
p629
S'center'
p630
sS'required'
p631
I01
sS'group_name'
p632
Nsa(dp633
S'description'
p634
S'The height of the box\n'
p635
sS'cpp_type'
p636
S'double'
p637
sS'default'
p638
g3
sS'name'
p639
S'height'
p640
sS'required'
p641
I01
sS'group_name'
p642
Nsa(dp643
S'name'
p644
S'inside'
p645
sS'cpp_type'
p646
S'MooseEnum'
p647
sS'default'
p648
g3
sS'description'
p649
S'How to mark elements inside the box.\n'
p650
sS'required'
p651
I01
sS'options'
p652
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p653
sS'group_name'
p654
Nsa(dp655
S'description'
p656
S'The length of the box\n'
p657
sS'cpp_type'
p658
S'double'
p659
sS'default'
p660
g3
sS'name'
p661
S'length'
p662
sS'required'
p663
I01
sS'group_name'
p664
Nsa(dp665
S'description'
p666
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p667
sS'cpp_type'
p668
S'libMesh::VectorValue<double>'
p669
sS'default'
p670
g3
sS'name'
p671
S'length_direction'
p672
sS'required'
p673
I01
sS'group_name'
p674
Nsa(dp675
S'description'
p676
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p677
sS'cpp_type'
p678
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p679
sS'default'
p680
g3
sS'name'
p681
S'outputs'
p682
sS'required'
p683
I00
sS'group_name'
p684
Nsa(dp685
S'name'
p686
S'outside'
p687
sS'cpp_type'
p688
S'MooseEnum'
p689
sS'default'
p690
g3
sS'description'
p691
S'How to mark elements outside the box.\n'
p692
sS'required'
p693
I01
sS'options'
p694
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p695
sS'group_name'
p696
Nsa(dp697
S'description'
p698
g3
sS'cpp_type'
p699
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p700
sS'default'
p701
S'OrientedBoxMarker'
p702
sS'name'
p703
S'type'
p704
sS'required'
p705
I00
sS'group_name'
p706
Nsa(dp707
S'description'
p708
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p709
sS'cpp_type'
p710
S'bool'
p711
sS'default'
p712
S'0'
p713
sS'name'
p714
S'use_displaced_mesh'
p715
sS'required'
p716
I00
sS'group_name'
p717
S'Advanced'
p718
sa(dp719
S'description'
p720
S'The width of the box\n'
p721
sS'cpp_type'
p722
S'double'
p723
sS'default'
p724
g3
sS'name'
p725
S'width'
p726
sS'required'
p727
I01
sS'group_name'
p728
Nsa(dp729
S'description'
p730
S'The direction along which the width is oriented.\n'
p731
sS'cpp_type'
p732
S'libMesh::VectorValue<double>'
p733
sS'default'
p734
g3
sS'name'
p735
S'width_direction'
p736
sS'required'
p737
I01
sS'group_name'
p738
NsasS'name'
p739
S'/Adaptivity/Markers/OrientedBoxMarker'
p740
sa(dp741
S'description'
p742
g3
sS'subblocks'
p743
NsS'parameters'
p744
(lp745
(dp746
S'description'
p747
S'The list of block ids (SubdomainID) that this object will be applied\n'
p748
sS'cpp_type'
p749
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p750
sS'default'
p751
g3
sS'name'
p752
S'block'
p753
sS'required'
p754
I00
sS'group_name'
p755
Nsa(dp756
S'name'
p757
S'mark'
p758
sS'cpp_type'
p759
S'MooseEnum'
p760
sS'default'
p761
g3
sS'description'
p762
S'How to mark elements.\n'
p763
sS'required'
p764
I01
sS'options'
p765
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p766
sS'group_name'
p767
Nsa(dp768
S'description'
p769
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p770
sS'cpp_type'
p771
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p772
sS'default'
p773
g3
sS'name'
p774
S'outputs'
p775
sS'required'
p776
I00
sS'group_name'
p777
Nsa(dp778
S'description'
p779
g3
sS'cpp_type'
p780
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p781
sS'default'
p782
S'UniformMarker'
p783
sS'name'
p784
S'type'
p785
sS'required'
p786
I00
sS'group_name'
p787
Nsa(dp788
S'description'
p789
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p790
sS'cpp_type'
p791
S'bool'
p792
sS'default'
p793
S'0'
p794
sS'name'
p795
S'use_displaced_mesh'
p796
sS'required'
p797
I00
sS'group_name'
p798
S'Advanced'
p799
sasS'name'
p800
S'/Adaptivity/Markers/UniformMarker'
p801
sa(dp802
S'description'
p803
g3
sS'subblocks'
p804
NsS'parameters'
p805
(lp806
(dp807
S'description'
p808
S'The list of block ids (SubdomainID) that this object will be applied\n'
p809
sS'cpp_type'
p810
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p811
sS'default'
p812
g3
sS'name'
p813
S'block'
p814
sS'required'
p815
I00
sS'group_name'
p816
Nsa(dp817
S'description'
p818
S'A buffer zone value added to both ends of the range where a third_state marker can be returned.\n'
p819
sS'cpp_type'
p820
S'double'
p821
sS'default'
p822
S'0'
p823
sS'name'
p824
S'buffer_size'
p825
sS'required'
p826
I00
sS'group_name'
p827
Nsa(dp828
S'description'
p829
S'If this is true then values inside the range will be coarsened, and values outside the range will be refined.\n'
p830
sS'cpp_type'
p831
S'bool'
p832
sS'default'
p833
S'0'
p834
sS'name'
p835
S'invert'
p836
sS'required'
p837
I00
sS'group_name'
p838
Nsa(dp839
S'description'
p840
S'The lower bound value for the range.\n'
p841
sS'cpp_type'
p842
S'double'
p843
sS'default'
p844
g3
sS'name'
p845
S'lower_bound'
p846
sS'required'
p847
I01
sS'group_name'
p848
Nsa(dp849
S'description'
p850
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p851
sS'cpp_type'
p852
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p853
sS'default'
p854
g3
sS'name'
p855
S'outputs'
p856
sS'required'
p857
I00
sS'group_name'
p858
Nsa(dp859
S'name'
p860
S'third_state'
p861
sS'cpp_type'
p862
S'MooseEnum'
p863
sS'default'
p864
S'DONT_MARK'
p865
sS'description'
p866
S'The Marker state to apply to values in the buffer zone (both ends of the range).\n'
p867
sS'required'
p868
I00
sS'options'
p869
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p870
sS'group_name'
p871
Nsa(dp872
S'description'
p873
g3
sS'cpp_type'
p874
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p875
sS'default'
p876
S'ValueRangeMarker'
p877
sS'name'
p878
S'type'
p879
sS'required'
p880
I00
sS'group_name'
p881
Nsa(dp882
S'description'
p883
S'The upper bound value for the range.\n'
p884
sS'cpp_type'
p885
S'double'
p886
sS'default'
p887
g3
sS'name'
p888
S'upper_bound'
p889
sS'required'
p890
I01
sS'group_name'
p891
Nsa(dp892
S'description'
p893
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p894
sS'cpp_type'
p895
S'bool'
p896
sS'default'
p897
S'0'
p898
sS'name'
p899
S'use_displaced_mesh'
p900
sS'required'
p901
I00
sS'group_name'
p902
S'Advanced'
p903
sa(dp904
S'description'
p905
S'The variable whose values are used in this marker.\n'
p906
sS'cpp_type'
p907
S'std::vector<VariableName>'
p908
sS'default'
p909
g3
sS'name'
p910
S'variable'
p911
sS'required'
p912
I01
sS'group_name'
p913
NsasS'name'
p914
S'/Adaptivity/Markers/ValueRangeMarker'
p915
sa(dp916
S'description'
p917
g3
sS'subblocks'
p918
NsS'parameters'
p919
(lp920
(dp921
S'description'
p922
S'The list of block ids (SubdomainID) that this object will be applied\n'
p923
sS'cpp_type'
p924
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p925
sS'default'
p926
g3
sS'name'
p927
S'block'
p928
sS'required'
p929
I00
sS'group_name'
p930
Nsa(dp931
S'description'
p932
S'The threshold value for coarsening.  Elements with variable values beyond this will be marked for coarsening.\n'
p933
sS'cpp_type'
p934
S'double'
p935
sS'default'
p936
g3
sS'name'
p937
S'coarsen'
p938
sS'required'
p939
I00
sS'group_name'
p940
Nsa(dp941
S'description'
p942
S"If this is true then values _below_ 'refine' will be refined and _above_ 'coarsen' will be coarsened.\n"
p943
sS'cpp_type'
p944
S'bool'
p945
sS'default'
p946
S'0'
p947
sS'name'
p948
S'invert'
p949
sS'required'
p950
I00
sS'group_name'
p951
Nsa(dp952
S'description'
p953
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p954
sS'cpp_type'
p955
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p956
sS'default'
p957
g3
sS'name'
p958
S'outputs'
p959
sS'required'
p960
I00
sS'group_name'
p961
Nsa(dp962
S'description'
p963
S'The threshold value for refinement.  Elements with variable values beyond this will be marked for refinement.\n'
p964
sS'cpp_type'
p965
S'double'
p966
sS'default'
p967
g3
sS'name'
p968
S'refine'
p969
sS'required'
p970
I00
sS'group_name'
p971
Nsa(dp972
S'name'
p973
S'third_state'
p974
sS'cpp_type'
p975
S'MooseEnum'
p976
sS'default'
p977
S'DONT_MARK'
p978
sS'description'
p979
S'The Marker state to apply to values falling in-between the coarsen and refine thresholds.\n'
p980
sS'required'
p981
I00
sS'options'
p982
S'DONT_MARK COARSEN DO_NOTHING REFINE'
p983
sS'group_name'
p984
Nsa(dp985
S'description'
p986
g3
sS'cpp_type'
p987
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p988
sS'default'
p989
S'ValueThresholdMarker'
p990
sS'name'
p991
S'type'
p992
sS'required'
p993
I00
sS'group_name'
p994
Nsa(dp995
S'description'
p996
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p997
sS'cpp_type'
p998
S'bool'
p999
sS'default'
p1000
S'0'
p1001
sS'name'
p1002
S'use_displaced_mesh'
p1003
sS'required'
p1004
I00
sS'group_name'
p1005
S'Advanced'
p1006
sa(dp1007
S'description'
p1008
S"The values of this variable will be compared to 'refine' and 'coarsen' to see what should be done with the element\n"
p1009
sS'cpp_type'
p1010
S'std::vector<VariableName>'
p1011
sS'default'
p1012
g3
sS'name'
p1013
S'variable'
p1014
sS'required'
p1015
I01
sS'group_name'
p1016
NsasS'name'
p1017
S'/Adaptivity/Markers/ValueThresholdMarker'
p1018
sasS'parameters'
p1019
NsS'name'
p1020
S'/Adaptivity/Markers'
p1021
sasS'parameters'
p1022
(lp1023
(dp1024
S'description'
p1025
S'The number of adaptive steps to use when on each timestep during a Transient simulation.\n'
p1026
sS'cpp_type'
p1027
S'unsigned int'
p1028
sS'default'
p1029
S'1'
p1030
sS'name'
p1031
S'cycles_per_step'
p1032
sS'required'
p1033
I00
sS'group_name'
p1034
Nsa(dp1035
S'description'
p1036
S'The name of the Marker to use to adapt the mesh during initial refinement.\n'
p1037
sS'cpp_type'
p1038
S'MarkerName'
p1039
sS'default'
p1040
g3
sS'name'
p1041
S'initial_marker'
p1042
sS'required'
p1043
I00
sS'group_name'
p1044
Nsa(dp1045
S'description'
p1046
S'The number of adaptive steps to do based on the initial condition.\n'
p1047
sS'cpp_type'
p1048
S'unsigned int'
p1049
sS'default'
p1050
S'0'
p1051
sS'name'
p1052
S'initial_steps'
p1053
sS'required'
p1054
I00
sS'group_name'
p1055
Nsa(dp1056
S'description'
p1057
S'The name of the Marker to use to actually adapt the mesh.\n'
p1058
sS'cpp_type'
p1059
S'MarkerName'
p1060
sS'default'
p1061
g3
sS'name'
p1062
S'marker'
p1063
sS'required'
p1064
I00
sS'group_name'
p1065
Nsa(dp1066
S'description'
p1067
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p1068
sS'cpp_type'
p1069
S'unsigned int'
p1070
sS'default'
p1071
S'0'
p1072
sS'name'
p1073
S'max_h_level'
p1074
sS'required'
p1075
I00
sS'group_name'
p1076
Nsa(dp1077
S'description'
p1078
S'The time that adaptivity will be active after.\n'
p1079
sS'cpp_type'
p1080
S'double'
p1081
sS'default'
p1082
S'-1.79769e+308'
p1083
sS'name'
p1084
S'start_time'
p1085
sS'required'
p1086
I00
sS'group_name'
p1087
Nsa(dp1088
S'description'
p1089
S'The number of adaptive steps to use when doing a Steady simulation.\n'
p1090
sS'cpp_type'
p1091
S'unsigned int'
p1092
sS'default'
p1093
S'0'
p1094
sS'name'
p1095
S'steps'
p1096
sS'required'
p1097
I00
sS'group_name'
p1098
Nsa(dp1099
S'description'
p1100
S'The time after which adaptivity will no longer be active.\n'
p1101
sS'cpp_type'
p1102
S'double'
p1103
sS'default'
p1104
S'1.79769e+308'
p1105
sS'name'
p1106
S'stop_time'
p1107
sS'required'
p1108
I00
sS'group_name'
p1109
NsasS'name'
p1110
S'/Adaptivity'
p1111
sa(dp1112
S'description'
p1113
g3
sS'subblocks'
p1114
(lp1115
(dp1116
S'description'
p1117
g3
sS'subblocks'
p1118
NsS'parameters'
p1119
(lp1120
(dp1121
S'description'
p1122
S'A string representing the Moose Object that will be built by this Action\n'
p1123
sS'cpp_type'
p1124
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1125
sS'default'
p1126
g3
sS'name'
p1127
S'type'
p1128
sS'required'
p1129
I01
sS'group_name'
p1130
NsasS'name'
p1131
S'/AuxKernels/*'
p1132
sa(dp1133
S'description'
p1134
S'Calculate location of grain boundaries in a polycrystalline sample\n'
p1135
sS'subblocks'
p1136
NsS'parameters'
p1137
(lp1138
(dp1139
S'description'
p1140
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1141
sS'cpp_type'
p1142
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1143
sS'default'
p1144
g3
sS'name'
p1145
S'block'
p1146
sS'required'
p1147
I00
sS'group_name'
p1148
Nsa(dp1149
S'description'
p1150
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1151
sS'cpp_type'
p1152
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1153
sS'default'
p1154
g3
sS'name'
p1155
S'boundary'
p1156
sS'required'
p1157
I00
sS'group_name'
p1158
Nsa(dp1159
S'name'
p1160
S'execute_on'
p1161
sS'cpp_type'
p1162
S'MultiMooseEnum'
p1163
sS'default'
p1164
S'LINEAR'
p1165
sS'description'
p1166
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1167
sS'required'
p1168
I00
sS'options'
p1169
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1170
sS'group_name'
p1171
Nsa(dp1172
S'description'
p1173
S'Array of coupled variables (num_name)\n'
p1174
sS'cpp_type'
p1175
S'unsigned int'
p1176
sS'default'
p1177
g3
sS'name'
p1178
S'op_num'
p1179
sS'required'
p1180
I00
sS'group_name'
p1181
Nsa(dp1182
S'description'
p1183
S'The seed for the master random number generator\n'
p1184
sS'cpp_type'
p1185
S'unsigned int'
p1186
sS'default'
p1187
S'0'
p1188
sS'name'
p1189
S'seed'
p1190
sS'required'
p1191
I00
sS'group_name'
p1192
S'Advanced'
p1193
sa(dp1194
S'description'
p1195
g3
sS'cpp_type'
p1196
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1197
sS'default'
p1198
S'BndsCalcAux'
p1199
sS'name'
p1200
S'type'
p1201
sS'required'
p1202
I00
sS'group_name'
p1203
Nsa(dp1204
S'description'
p1205
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1206
sS'cpp_type'
p1207
S'bool'
p1208
sS'default'
p1209
S'0'
p1210
sS'name'
p1211
S'use_displaced_mesh'
p1212
sS'required'
p1213
I00
sS'group_name'
p1214
S'Advanced'
p1215
sa(dp1216
S'description'
p1217
S'Array of coupled variables\n'
p1218
sS'cpp_type'
p1219
S'std::vector<VariableName>'
p1220
sS'default'
p1221
g3
sS'name'
p1222
S'v'
p1223
sS'required'
p1224
I01
sS'group_name'
p1225
Nsa(dp1226
S'description'
p1227
S'Array of coupled variables (base_name)\n'
p1228
sS'cpp_type'
p1229
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1230
sS'default'
p1231
g3
sS'name'
p1232
S'var_name_base'
p1233
sS'required'
p1234
I00
sS'group_name'
p1235
Nsa(dp1236
S'description'
p1237
S'The name of the variable that this object applies to\n'
p1238
sS'cpp_type'
p1239
S'AuxVariableName'
p1240
sS'default'
p1241
g3
sS'name'
p1242
S'variable'
p1243
sS'required'
p1244
I01
sS'group_name'
p1245
NsasS'name'
p1246
S'/AuxKernels/BndsCalcAux'
p1247
sa(dp1248
S'description'
p1249
g3
sS'subblocks'
p1250
NsS'parameters'
p1251
(lp1252
(dp1253
S'description'
p1254
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1255
sS'cpp_type'
p1256
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1257
sS'default'
p1258
g3
sS'name'
p1259
S'block'
p1260
sS'required'
p1261
I00
sS'group_name'
p1262
Nsa(dp1263
S'description'
p1264
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1265
sS'cpp_type'
p1266
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1267
sS'default'
p1268
g3
sS'name'
p1269
S'boundary'
p1270
sS'required'
p1271
I00
sS'group_name'
p1272
Nsa(dp1273
S'description'
p1274
S'The variable to be bounded\n'
p1275
sS'cpp_type'
p1276
S'std::vector<VariableName>'
p1277
sS'default'
p1278
g3
sS'name'
p1279
S'bounded_variable'
p1280
sS'required'
p1281
I01
sS'group_name'
p1282
Nsa(dp1283
S'name'
p1284
S'execute_on'
p1285
sS'cpp_type'
p1286
S'MultiMooseEnum'
p1287
sS'default'
p1288
S'LINEAR'
p1289
sS'description'
p1290
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1291
sS'required'
p1292
I00
sS'options'
p1293
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1294
sS'group_name'
p1295
Nsa(dp1296
S'description'
p1297
S'The lower bound for the variable\n'
p1298
sS'cpp_type'
p1299
S'double'
p1300
sS'default'
p1301
g3
sS'name'
p1302
S'lower'
p1303
sS'required'
p1304
I00
sS'group_name'
p1305
Nsa(dp1306
S'description'
p1307
S'The seed for the master random number generator\n'
p1308
sS'cpp_type'
p1309
S'unsigned int'
p1310
sS'default'
p1311
S'0'
p1312
sS'name'
p1313
S'seed'
p1314
sS'required'
p1315
I00
sS'group_name'
p1316
S'Advanced'
p1317
sa(dp1318
S'description'
p1319
g3
sS'cpp_type'
p1320
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1321
sS'default'
p1322
S'BoundsAux'
p1323
sS'name'
p1324
S'type'
p1325
sS'required'
p1326
I00
sS'group_name'
p1327
Nsa(dp1328
S'description'
p1329
S'The upper bound for the variable\n'
p1330
sS'cpp_type'
p1331
S'double'
p1332
sS'default'
p1333
g3
sS'name'
p1334
S'upper'
p1335
sS'required'
p1336
I00
sS'group_name'
p1337
Nsa(dp1338
S'description'
p1339
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1340
sS'cpp_type'
p1341
S'bool'
p1342
sS'default'
p1343
S'0'
p1344
sS'name'
p1345
S'use_displaced_mesh'
p1346
sS'required'
p1347
I00
sS'group_name'
p1348
S'Advanced'
p1349
sa(dp1350
S'description'
p1351
S'The name of the variable that this object applies to\n'
p1352
sS'cpp_type'
p1353
S'AuxVariableName'
p1354
sS'default'
p1355
g3
sS'name'
p1356
S'variable'
p1357
sS'required'
p1358
I01
sS'group_name'
p1359
NsasS'name'
p1360
S'/AuxKernels/BoundsAux'
p1361
sa(dp1362
S'description'
p1363
g3
sS'subblocks'
p1364
NsS'parameters'
p1365
(lp1366
(dp1367
S'description'
p1368
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1369
sS'cpp_type'
p1370
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1371
sS'default'
p1372
g3
sS'name'
p1373
S'block'
p1374
sS'required'
p1375
I00
sS'group_name'
p1376
Nsa(dp1377
S'description'
p1378
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1379
sS'cpp_type'
p1380
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1381
sS'default'
p1382
g3
sS'name'
p1383
S'boundary'
p1384
sS'required'
p1385
I00
sS'group_name'
p1386
Nsa(dp1387
S'name'
p1388
S'execute_on'
p1389
sS'cpp_type'
p1390
S'MultiMooseEnum'
p1391
sS'default'
p1392
S'LINEAR'
p1393
sS'description'
p1394
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1395
sS'required'
p1396
I00
sS'options'
p1397
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1398
sS'group_name'
p1399
Nsa(dp1400
S'description'
p1401
S'The seed for the master random number generator\n'
p1402
sS'cpp_type'
p1403
S'unsigned int'
p1404
sS'default'
p1405
S'0'
p1406
sS'name'
p1407
S'seed'
p1408
sS'required'
p1409
I00
sS'group_name'
p1410
S'Advanced'
p1411
sa(dp1412
S'description'
p1413
g3
sS'cpp_type'
p1414
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1415
sS'default'
p1416
S'ConstantAux'
p1417
sS'name'
p1418
S'type'
p1419
sS'required'
p1420
I00
sS'group_name'
p1421
Nsa(dp1422
S'description'
p1423
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1424
sS'cpp_type'
p1425
S'bool'
p1426
sS'default'
p1427
S'0'
p1428
sS'name'
p1429
S'use_displaced_mesh'
p1430
sS'required'
p1431
I00
sS'group_name'
p1432
S'Advanced'
p1433
sa(dp1434
S'description'
p1435
S'Some constant value that can be read from the input file\n'
p1436
sS'cpp_type'
p1437
S'double'
p1438
sS'default'
p1439
S'0'
p1440
sS'name'
p1441
S'value'
p1442
sS'required'
p1443
I00
sS'group_name'
p1444
Nsa(dp1445
S'description'
p1446
S'The name of the variable that this object applies to\n'
p1447
sS'cpp_type'
p1448
S'AuxVariableName'
p1449
sS'default'
p1450
g3
sS'name'
p1451
S'variable'
p1452
sS'required'
p1453
I01
sS'group_name'
p1454
NsasS'name'
p1455
S'/AuxKernels/ConstantAux'
p1456
sa(dp1457
S'description'
p1458
g3
sS'subblocks'
p1459
NsS'parameters'
p1460
(lp1461
(dp1462
S'description'
p1463
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1464
sS'cpp_type'
p1465
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1466
sS'default'
p1467
g3
sS'name'
p1468
S'block'
p1469
sS'required'
p1470
I00
sS'group_name'
p1471
Nsa(dp1472
S'description'
p1473
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1474
sS'cpp_type'
p1475
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1476
sS'default'
p1477
g3
sS'name'
p1478
S'boundary'
p1479
sS'required'
p1480
I00
sS'group_name'
p1481
Nsa(dp1482
S'description'
p1483
S'The variable that is being debugged.\n'
p1484
sS'cpp_type'
p1485
S'NonlinearVariableName'
p1486
sS'default'
p1487
g3
sS'name'
p1488
S'debug_variable'
p1489
sS'required'
p1490
I01
sS'group_name'
p1491
Nsa(dp1492
S'name'
p1493
S'execute_on'
p1494
sS'cpp_type'
p1495
S'MultiMooseEnum'
p1496
sS'default'
p1497
S'LINEAR'
p1498
sS'description'
p1499
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1500
sS'required'
p1501
I00
sS'options'
p1502
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1503
sS'group_name'
p1504
Nsa(dp1505
S'description'
p1506
S'The seed for the master random number generator\n'
p1507
sS'cpp_type'
p1508
S'unsigned int'
p1509
sS'default'
p1510
S'0'
p1511
sS'name'
p1512
S'seed'
p1513
sS'required'
p1514
I00
sS'group_name'
p1515
S'Advanced'
p1516
sa(dp1517
S'description'
p1518
g3
sS'cpp_type'
p1519
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1520
sS'default'
p1521
S'DebugResidualAux'
p1522
sS'name'
p1523
S'type'
p1524
sS'required'
p1525
I00
sS'group_name'
p1526
Nsa(dp1527
S'description'
p1528
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1529
sS'cpp_type'
p1530
S'bool'
p1531
sS'default'
p1532
S'0'
p1533
sS'name'
p1534
S'use_displaced_mesh'
p1535
sS'required'
p1536
I00
sS'group_name'
p1537
S'Advanced'
p1538
sa(dp1539
S'description'
p1540
S'The name of the variable that this object applies to\n'
p1541
sS'cpp_type'
p1542
S'AuxVariableName'
p1543
sS'default'
p1544
g3
sS'name'
p1545
S'variable'
p1546
sS'required'
p1547
I01
sS'group_name'
p1548
NsasS'name'
p1549
S'/AuxKernels/DebugResidualAux'
p1550
sa(dp1551
S'description'
p1552
g3
sS'subblocks'
p1553
NsS'parameters'
p1554
(lp1555
(dp1556
S'description'
p1557
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1558
sS'cpp_type'
p1559
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1560
sS'default'
p1561
g3
sS'name'
p1562
S'block'
p1563
sS'required'
p1564
I00
sS'group_name'
p1565
Nsa(dp1566
S'description'
p1567
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1568
sS'cpp_type'
p1569
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1570
sS'default'
p1571
g3
sS'name'
p1572
S'boundary'
p1573
sS'required'
p1574
I00
sS'group_name'
p1575
Nsa(dp1576
S'name'
p1577
S'execute_on'
p1578
sS'cpp_type'
p1579
S'MultiMooseEnum'
p1580
sS'default'
p1581
S'LINEAR'
p1582
sS'description'
p1583
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1584
sS'required'
p1585
I00
sS'options'
p1586
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1587
sS'group_name'
p1588
Nsa(dp1589
S'description'
p1590
S'The function to use as the value\n'
p1591
sS'cpp_type'
p1592
S'FunctionName'
p1593
sS'default'
p1594
g3
sS'name'
p1595
S'function'
p1596
sS'required'
p1597
I01
sS'group_name'
p1598
Nsa(dp1599
S'description'
p1600
S'The seed for the master random number generator\n'
p1601
sS'cpp_type'
p1602
S'unsigned int'
p1603
sS'default'
p1604
S'0'
p1605
sS'name'
p1606
S'seed'
p1607
sS'required'
p1608
I00
sS'group_name'
p1609
S'Advanced'
p1610
sa(dp1611
S'description'
p1612
g3
sS'cpp_type'
p1613
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1614
sS'default'
p1615
S'FunctionAux'
p1616
sS'name'
p1617
S'type'
p1618
sS'required'
p1619
I00
sS'group_name'
p1620
Nsa(dp1621
S'description'
p1622
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1623
sS'cpp_type'
p1624
S'bool'
p1625
sS'default'
p1626
S'0'
p1627
sS'name'
p1628
S'use_displaced_mesh'
p1629
sS'required'
p1630
I00
sS'group_name'
p1631
S'Advanced'
p1632
sa(dp1633
S'description'
p1634
S'The name of the variable that this object applies to\n'
p1635
sS'cpp_type'
p1636
S'AuxVariableName'
p1637
sS'default'
p1638
g3
sS'name'
p1639
S'variable'
p1640
sS'required'
p1641
I01
sS'group_name'
p1642
NsasS'name'
p1643
S'/AuxKernels/FunctionAux'
p1644
sa(dp1645
S'description'
p1646
g3
sS'subblocks'
p1647
NsS'parameters'
p1648
(lp1649
(dp1650
S'description'
p1651
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1652
sS'cpp_type'
p1653
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1654
sS'default'
p1655
g3
sS'name'
p1656
S'block'
p1657
sS'required'
p1658
I00
sS'group_name'
p1659
Nsa(dp1660
S'description'
p1661
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1662
sS'cpp_type'
p1663
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1664
sS'default'
p1665
g3
sS'name'
p1666
S'boundary'
p1667
sS'required'
p1668
I00
sS'group_name'
p1669
Nsa(dp1670
S'name'
p1671
S'execute_on'
p1672
sS'cpp_type'
p1673
S'MultiMooseEnum'
p1674
sS'default'
p1675
S'LINEAR'
p1676
sS'description'
p1677
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1678
sS'required'
p1679
I00
sS'options'
p1680
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1681
sS'group_name'
p1682
Nsa(dp1683
S'description'
p1684
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p1685
sS'cpp_type'
p1686
S'double'
p1687
sS'default'
p1688
g3
sS'name'
p1689
S'normal_smoothing_distance'
p1690
sS'required'
p1691
I00
sS'group_name'
p1692
Nsa(dp1693
S'description'
p1694
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p1695
sS'cpp_type'
p1696
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1697
sS'default'
p1698
g3
sS'name'
p1699
S'normal_smoothing_method'
p1700
sS'required'
p1701
I00
sS'group_name'
p1702
Nsa(dp1703
S'name'
p1704
S'order'
p1705
sS'cpp_type'
p1706
S'MooseEnum'
p1707
sS'default'
p1708
S'FIRST'
p1709
sS'description'
p1710
S'The finite element order\n'
p1711
sS'required'
p1712
I00
sS'options'
p1713
S'FIRST SECOND THIRD FOURTH'
p1714
sS'group_name'
p1715
Nsa(dp1716
S'description'
p1717
S'The boundary on the other side of a gap.\n'
p1718
sS'cpp_type'
p1719
S'BoundaryName'
p1720
sS'default'
p1721
g3
sS'name'
p1722
S'paired_boundary'
p1723
sS'required'
p1724
I01
sS'group_name'
p1725
Nsa(dp1726
S'description'
p1727
S'The variable to get the value of.\n'
p1728
sS'cpp_type'
p1729
S'VariableName'
p1730
sS'default'
p1731
g3
sS'name'
p1732
S'paired_variable'
p1733
sS'required'
p1734
I01
sS'group_name'
p1735
Nsa(dp1736
S'description'
p1737
S'The seed for the master random number generator\n'
p1738
sS'cpp_type'
p1739
S'unsigned int'
p1740
sS'default'
p1741
S'0'
p1742
sS'name'
p1743
S'seed'
p1744
sS'required'
p1745
I00
sS'group_name'
p1746
S'Advanced'
p1747
sa(dp1748
S'description'
p1749
S'Tangential distance to extend edges of contact surfaces\n'
p1750
sS'cpp_type'
p1751
S'double'
p1752
sS'default'
p1753
g3
sS'name'
p1754
S'tangential_tolerance'
p1755
sS'required'
p1756
I00
sS'group_name'
p1757
Nsa(dp1758
S'description'
p1759
g3
sS'cpp_type'
p1760
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1761
sS'default'
p1762
S'GapValueAux'
p1763
sS'name'
p1764
S'type'
p1765
sS'required'
p1766
I00
sS'group_name'
p1767
Nsa(dp1768
S'description'
p1769
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1770
sS'cpp_type'
p1771
S'bool'
p1772
sS'default'
p1773
S'1'
p1774
sS'name'
p1775
S'use_displaced_mesh'
p1776
sS'required'
p1777
I00
sS'group_name'
p1778
S'Advanced'
p1779
sa(dp1780
S'description'
p1781
S'The name of the variable that this object applies to\n'
p1782
sS'cpp_type'
p1783
S'AuxVariableName'
p1784
sS'default'
p1785
g3
sS'name'
p1786
S'variable'
p1787
sS'required'
p1788
I01
sS'group_name'
p1789
Nsa(dp1790
S'description'
p1791
S'Whether to output warning messages concerning nodes not being found\n'
p1792
sS'cpp_type'
p1793
S'bool'
p1794
sS'default'
p1795
S'0'
p1796
sS'name'
p1797
S'warnings'
p1798
sS'required'
p1799
I00
sS'group_name'
p1800
NsasS'name'
p1801
S'/AuxKernels/GapValueAux'
p1802
sa(dp1803
S'description'
p1804
g3
sS'subblocks'
p1805
NsS'parameters'
p1806
(lp1807
(dp1808
S'description'
p1809
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1810
sS'cpp_type'
p1811
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1812
sS'default'
p1813
g3
sS'name'
p1814
S'block'
p1815
sS'required'
p1816
I00
sS'group_name'
p1817
Nsa(dp1818
S'description'
p1819
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1820
sS'cpp_type'
p1821
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1822
sS'default'
p1823
g3
sS'name'
p1824
S'boundary'
p1825
sS'required'
p1826
I00
sS'group_name'
p1827
Nsa(dp1828
S'name'
p1829
S'execute_on'
p1830
sS'cpp_type'
p1831
S'MultiMooseEnum'
p1832
sS'default'
p1833
S'LINEAR'
p1834
sS'description'
p1835
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1836
sS'required'
p1837
I00
sS'options'
p1838
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1839
sS'group_name'
p1840
Nsa(dp1841
S'description'
p1842
S'The factor by which to multiply your material property for visualization\n'
p1843
sS'cpp_type'
p1844
S'double'
p1845
sS'default'
p1846
S'1'
p1847
sS'name'
p1848
S'factor'
p1849
sS'required'
p1850
I00
sS'group_name'
p1851
Nsa(dp1852
S'description'
p1853
S'The offset to add to your material property for visualization\n'
p1854
sS'cpp_type'
p1855
S'double'
p1856
sS'default'
p1857
S'0'
p1858
sS'name'
p1859
S'offset'
p1860
sS'required'
p1861
I00
sS'group_name'
p1862
Nsa(dp1863
S'description'
p1864
S'The scalar material property name\n'
p1865
sS'cpp_type'
p1866
S'MaterialPropertyName'
p1867
sS'default'
p1868
g3
sS'name'
p1869
S'property'
p1870
sS'required'
p1871
I01
sS'group_name'
p1872
Nsa(dp1873
S'description'
p1874
S'The seed for the master random number generator\n'
p1875
sS'cpp_type'
p1876
S'unsigned int'
p1877
sS'default'
p1878
S'0'
p1879
sS'name'
p1880
S'seed'
p1881
sS'required'
p1882
I00
sS'group_name'
p1883
S'Advanced'
p1884
sa(dp1885
S'description'
p1886
g3
sS'cpp_type'
p1887
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p1888
sS'default'
p1889
S'MaterialRealAux'
p1890
sS'name'
p1891
S'type'
p1892
sS'required'
p1893
I00
sS'group_name'
p1894
Nsa(dp1895
S'description'
p1896
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p1897
sS'cpp_type'
p1898
S'bool'
p1899
sS'default'
p1900
S'0'
p1901
sS'name'
p1902
S'use_displaced_mesh'
p1903
sS'required'
p1904
I00
sS'group_name'
p1905
S'Advanced'
p1906
sa(dp1907
S'description'
p1908
S'The name of the variable that this object applies to\n'
p1909
sS'cpp_type'
p1910
S'AuxVariableName'
p1911
sS'default'
p1912
g3
sS'name'
p1913
S'variable'
p1914
sS'required'
p1915
I01
sS'group_name'
p1916
NsasS'name'
p1917
S'/AuxKernels/MaterialRealAux'
p1918
sa(dp1919
S'description'
p1920
g3
sS'subblocks'
p1921
NsS'parameters'
p1922
(lp1923
(dp1924
S'description'
p1925
S'The list of block ids (SubdomainID) that this object will be applied\n'
p1926
sS'cpp_type'
p1927
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p1928
sS'default'
p1929
g3
sS'name'
p1930
S'block'
p1931
sS'required'
p1932
I00
sS'group_name'
p1933
Nsa(dp1934
S'description'
p1935
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p1936
sS'cpp_type'
p1937
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p1938
sS'default'
p1939
g3
sS'name'
p1940
S'boundary'
p1941
sS'required'
p1942
I00
sS'group_name'
p1943
Nsa(dp1944
S'description'
p1945
S'The column component to consider for this kernel\n'
p1946
sS'cpp_type'
p1947
S'unsigned int'
p1948
sS'default'
p1949
S'0'
p1950
sS'name'
p1951
S'column'
p1952
sS'required'
p1953
I00
sS'group_name'
p1954
Nsa(dp1955
S'name'
p1956
S'execute_on'
p1957
sS'cpp_type'
p1958
S'MultiMooseEnum'
p1959
sS'default'
p1960
S'LINEAR'
p1961
sS'description'
p1962
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p1963
sS'required'
p1964
I00
sS'options'
p1965
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p1966
sS'group_name'
p1967
Nsa(dp1968
S'description'
p1969
S'The factor by which to multiply your material property for visualization\n'
p1970
sS'cpp_type'
p1971
S'double'
p1972
sS'default'
p1973
S'1'
p1974
sS'name'
p1975
S'factor'
p1976
sS'required'
p1977
I00
sS'group_name'
p1978
Nsa(dp1979
S'description'
p1980
S'The offset to add to your material property for visualization\n'
p1981
sS'cpp_type'
p1982
S'double'
p1983
sS'default'
p1984
S'0'
p1985
sS'name'
p1986
S'offset'
p1987
sS'required'
p1988
I00
sS'group_name'
p1989
Nsa(dp1990
S'description'
p1991
S'The scalar material property name\n'
p1992
sS'cpp_type'
p1993
S'MaterialPropertyName'
p1994
sS'default'
p1995
g3
sS'name'
p1996
S'property'
p1997
sS'required'
p1998
I01
sS'group_name'
p1999
Nsa(dp2000
S'description'
p2001
S'The row component to consider for this kernel\n'
p2002
sS'cpp_type'
p2003
S'unsigned int'
p2004
sS'default'
p2005
S'0'
p2006
sS'name'
p2007
S'row'
p2008
sS'required'
p2009
I00
sS'group_name'
p2010
Nsa(dp2011
S'description'
p2012
S'The seed for the master random number generator\n'
p2013
sS'cpp_type'
p2014
S'unsigned int'
p2015
sS'default'
p2016
S'0'
p2017
sS'name'
p2018
S'seed'
p2019
sS'required'
p2020
I00
sS'group_name'
p2021
S'Advanced'
p2022
sa(dp2023
S'description'
p2024
g3
sS'cpp_type'
p2025
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2026
sS'default'
p2027
S'MaterialRealDenseMatrixAux'
p2028
sS'name'
p2029
S'type'
p2030
sS'required'
p2031
I00
sS'group_name'
p2032
Nsa(dp2033
S'description'
p2034
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2035
sS'cpp_type'
p2036
S'bool'
p2037
sS'default'
p2038
S'0'
p2039
sS'name'
p2040
S'use_displaced_mesh'
p2041
sS'required'
p2042
I00
sS'group_name'
p2043
S'Advanced'
p2044
sa(dp2045
S'description'
p2046
S'The name of the variable that this object applies to\n'
p2047
sS'cpp_type'
p2048
S'AuxVariableName'
p2049
sS'default'
p2050
g3
sS'name'
p2051
S'variable'
p2052
sS'required'
p2053
I01
sS'group_name'
p2054
NsasS'name'
p2055
S'/AuxKernels/MaterialRealDenseMatrixAux'
p2056
sa(dp2057
S'description'
p2058
g3
sS'subblocks'
p2059
NsS'parameters'
p2060
(lp2061
(dp2062
S'description'
p2063
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2064
sS'cpp_type'
p2065
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2066
sS'default'
p2067
g3
sS'name'
p2068
S'block'
p2069
sS'required'
p2070
I00
sS'group_name'
p2071
Nsa(dp2072
S'description'
p2073
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2074
sS'cpp_type'
p2075
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2076
sS'default'
p2077
g3
sS'name'
p2078
S'boundary'
p2079
sS'required'
p2080
I00
sS'group_name'
p2081
Nsa(dp2082
S'description'
p2083
S'The column component to consider for this kernel\n'
p2084
sS'cpp_type'
p2085
S'unsigned int'
p2086
sS'default'
p2087
S'0'
p2088
sS'name'
p2089
S'column'
p2090
sS'required'
p2091
I00
sS'group_name'
p2092
Nsa(dp2093
S'name'
p2094
S'execute_on'
p2095
sS'cpp_type'
p2096
S'MultiMooseEnum'
p2097
sS'default'
p2098
S'LINEAR'
p2099
sS'description'
p2100
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2101
sS'required'
p2102
I00
sS'options'
p2103
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2104
sS'group_name'
p2105
Nsa(dp2106
S'description'
p2107
S'The factor by which to multiply your material property for visualization\n'
p2108
sS'cpp_type'
p2109
S'double'
p2110
sS'default'
p2111
S'1'
p2112
sS'name'
p2113
S'factor'
p2114
sS'required'
p2115
I00
sS'group_name'
p2116
Nsa(dp2117
S'description'
p2118
S'The offset to add to your material property for visualization\n'
p2119
sS'cpp_type'
p2120
S'double'
p2121
sS'default'
p2122
S'0'
p2123
sS'name'
p2124
S'offset'
p2125
sS'required'
p2126
I00
sS'group_name'
p2127
Nsa(dp2128
S'description'
p2129
S'The scalar material property name\n'
p2130
sS'cpp_type'
p2131
S'MaterialPropertyName'
p2132
sS'default'
p2133
g3
sS'name'
p2134
S'property'
p2135
sS'required'
p2136
I01
sS'group_name'
p2137
Nsa(dp2138
S'description'
p2139
S'The row component to consider for this kernel\n'
p2140
sS'cpp_type'
p2141
S'unsigned int'
p2142
sS'default'
p2143
S'0'
p2144
sS'name'
p2145
S'row'
p2146
sS'required'
p2147
I00
sS'group_name'
p2148
Nsa(dp2149
S'description'
p2150
S'The seed for the master random number generator\n'
p2151
sS'cpp_type'
p2152
S'unsigned int'
p2153
sS'default'
p2154
S'0'
p2155
sS'name'
p2156
S'seed'
p2157
sS'required'
p2158
I00
sS'group_name'
p2159
S'Advanced'
p2160
sa(dp2161
S'description'
p2162
g3
sS'cpp_type'
p2163
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2164
sS'default'
p2165
S'MaterialRealTensorValueAux'
p2166
sS'name'
p2167
S'type'
p2168
sS'required'
p2169
I00
sS'group_name'
p2170
Nsa(dp2171
S'description'
p2172
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2173
sS'cpp_type'
p2174
S'bool'
p2175
sS'default'
p2176
S'0'
p2177
sS'name'
p2178
S'use_displaced_mesh'
p2179
sS'required'
p2180
I00
sS'group_name'
p2181
S'Advanced'
p2182
sa(dp2183
S'description'
p2184
S'The name of the variable that this object applies to\n'
p2185
sS'cpp_type'
p2186
S'AuxVariableName'
p2187
sS'default'
p2188
g3
sS'name'
p2189
S'variable'
p2190
sS'required'
p2191
I01
sS'group_name'
p2192
NsasS'name'
p2193
S'/AuxKernels/MaterialRealTensorValueAux'
p2194
sa(dp2195
S'description'
p2196
g3
sS'subblocks'
p2197
NsS'parameters'
p2198
(lp2199
(dp2200
S'description'
p2201
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2202
sS'cpp_type'
p2203
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2204
sS'default'
p2205
g3
sS'name'
p2206
S'block'
p2207
sS'required'
p2208
I00
sS'group_name'
p2209
Nsa(dp2210
S'description'
p2211
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2212
sS'cpp_type'
p2213
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2214
sS'default'
p2215
g3
sS'name'
p2216
S'boundary'
p2217
sS'required'
p2218
I00
sS'group_name'
p2219
Nsa(dp2220
S'description'
p2221
S'The vector component to consider for this kernel\n'
p2222
sS'cpp_type'
p2223
S'unsigned int'
p2224
sS'default'
p2225
S'0'
p2226
sS'name'
p2227
S'component'
p2228
sS'required'
p2229
I00
sS'group_name'
p2230
Nsa(dp2231
S'name'
p2232
S'execute_on'
p2233
sS'cpp_type'
p2234
S'MultiMooseEnum'
p2235
sS'default'
p2236
S'LINEAR'
p2237
sS'description'
p2238
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2239
sS'required'
p2240
I00
sS'options'
p2241
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2242
sS'group_name'
p2243
Nsa(dp2244
S'description'
p2245
S'The factor by which to multiply your material property for visualization\n'
p2246
sS'cpp_type'
p2247
S'double'
p2248
sS'default'
p2249
S'1'
p2250
sS'name'
p2251
S'factor'
p2252
sS'required'
p2253
I00
sS'group_name'
p2254
Nsa(dp2255
S'description'
p2256
S'The offset to add to your material property for visualization\n'
p2257
sS'cpp_type'
p2258
S'double'
p2259
sS'default'
p2260
S'0'
p2261
sS'name'
p2262
S'offset'
p2263
sS'required'
p2264
I00
sS'group_name'
p2265
Nsa(dp2266
S'description'
p2267
S'The scalar material property name\n'
p2268
sS'cpp_type'
p2269
S'MaterialPropertyName'
p2270
sS'default'
p2271
g3
sS'name'
p2272
S'property'
p2273
sS'required'
p2274
I01
sS'group_name'
p2275
Nsa(dp2276
S'description'
p2277
S'The seed for the master random number generator\n'
p2278
sS'cpp_type'
p2279
S'unsigned int'
p2280
sS'default'
p2281
S'0'
p2282
sS'name'
p2283
S'seed'
p2284
sS'required'
p2285
I00
sS'group_name'
p2286
S'Advanced'
p2287
sa(dp2288
S'description'
p2289
g3
sS'cpp_type'
p2290
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2291
sS'default'
p2292
S'MaterialRealVectorValueAux'
p2293
sS'name'
p2294
S'type'
p2295
sS'required'
p2296
I00
sS'group_name'
p2297
Nsa(dp2298
S'description'
p2299
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2300
sS'cpp_type'
p2301
S'bool'
p2302
sS'default'
p2303
S'0'
p2304
sS'name'
p2305
S'use_displaced_mesh'
p2306
sS'required'
p2307
I00
sS'group_name'
p2308
S'Advanced'
p2309
sa(dp2310
S'description'
p2311
S'The name of the variable that this object applies to\n'
p2312
sS'cpp_type'
p2313
S'AuxVariableName'
p2314
sS'default'
p2315
g3
sS'name'
p2316
S'variable'
p2317
sS'required'
p2318
I01
sS'group_name'
p2319
NsasS'name'
p2320
S'/AuxKernels/MaterialRealVectorValueAux'
p2321
sa(dp2322
S'description'
p2323
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p2324
sS'subblocks'
p2325
NsS'parameters'
p2326
(lp2327
(dp2328
S'description'
p2329
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2330
sS'cpp_type'
p2331
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2332
sS'default'
p2333
g3
sS'name'
p2334
S'block'
p2335
sS'required'
p2336
I00
sS'group_name'
p2337
Nsa(dp2338
S'description'
p2339
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2340
sS'cpp_type'
p2341
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2342
sS'default'
p2343
g3
sS'name'
p2344
S'boundary'
p2345
sS'required'
p2346
I00
sS'group_name'
p2347
Nsa(dp2348
S'name'
p2349
S'execute_on'
p2350
sS'cpp_type'
p2351
S'MultiMooseEnum'
p2352
sS'default'
p2353
S'LINEAR'
p2354
sS'description'
p2355
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2356
sS'required'
p2357
I00
sS'options'
p2358
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2359
sS'group_name'
p2360
Nsa(dp2361
S'description'
p2362
S'The factor by which to multiply your material property for visualization\n'
p2363
sS'cpp_type'
p2364
S'double'
p2365
sS'default'
p2366
S'1'
p2367
sS'name'
p2368
S'factor'
p2369
sS'required'
p2370
I00
sS'group_name'
p2371
Nsa(dp2372
S'description'
p2373
S'The index to consider for this kernel\n'
p2374
sS'cpp_type'
p2375
S'unsigned int'
p2376
sS'default'
p2377
S'0'
p2378
sS'name'
p2379
S'index'
p2380
sS'required'
p2381
I00
sS'group_name'
p2382
Nsa(dp2383
S'description'
p2384
S'The offset to add to your material property for visualization\n'
p2385
sS'cpp_type'
p2386
S'double'
p2387
sS'default'
p2388
S'0'
p2389
sS'name'
p2390
S'offset'
p2391
sS'required'
p2392
I00
sS'group_name'
p2393
Nsa(dp2394
S'description'
p2395
S'The scalar material property name\n'
p2396
sS'cpp_type'
p2397
S'MaterialPropertyName'
p2398
sS'default'
p2399
g3
sS'name'
p2400
S'property'
p2401
sS'required'
p2402
I01
sS'group_name'
p2403
Nsa(dp2404
S'description'
p2405
S'The seed for the master random number generator\n'
p2406
sS'cpp_type'
p2407
S'unsigned int'
p2408
sS'default'
p2409
S'0'
p2410
sS'name'
p2411
S'seed'
p2412
sS'required'
p2413
I00
sS'group_name'
p2414
S'Advanced'
p2415
sa(dp2416
S'description'
p2417
g3
sS'cpp_type'
p2418
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2419
sS'default'
p2420
S'MaterialStdVectorAux'
p2421
sS'name'
p2422
S'type'
p2423
sS'required'
p2424
I00
sS'group_name'
p2425
Nsa(dp2426
S'description'
p2427
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2428
sS'cpp_type'
p2429
S'bool'
p2430
sS'default'
p2431
S'0'
p2432
sS'name'
p2433
S'use_displaced_mesh'
p2434
sS'required'
p2435
I00
sS'group_name'
p2436
S'Advanced'
p2437
sa(dp2438
S'description'
p2439
S'The name of the variable that this object applies to\n'
p2440
sS'cpp_type'
p2441
S'AuxVariableName'
p2442
sS'default'
p2443
g3
sS'name'
p2444
S'variable'
p2445
sS'required'
p2446
I01
sS'group_name'
p2447
NsasS'name'
p2448
S'/AuxKernels/MaterialStdVectorAux'
p2449
sa(dp2450
S'description'
p2451
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p2452
sS'subblocks'
p2453
NsS'parameters'
p2454
(lp2455
(dp2456
S'description'
p2457
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2458
sS'cpp_type'
p2459
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2460
sS'default'
p2461
g3
sS'name'
p2462
S'block'
p2463
sS'required'
p2464
I00
sS'group_name'
p2465
Nsa(dp2466
S'description'
p2467
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2468
sS'cpp_type'
p2469
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2470
sS'default'
p2471
g3
sS'name'
p2472
S'boundary'
p2473
sS'required'
p2474
I00
sS'group_name'
p2475
Nsa(dp2476
S'description'
p2477
S'The gradient component to be extracted for this kernel\n'
p2478
sS'cpp_type'
p2479
S'unsigned int'
p2480
sS'default'
p2481
S'0'
p2482
sS'name'
p2483
S'component'
p2484
sS'required'
p2485
I00
sS'group_name'
p2486
Nsa(dp2487
S'name'
p2488
S'execute_on'
p2489
sS'cpp_type'
p2490
S'MultiMooseEnum'
p2491
sS'default'
p2492
S'LINEAR'
p2493
sS'description'
p2494
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2495
sS'required'
p2496
I00
sS'options'
p2497
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2498
sS'group_name'
p2499
Nsa(dp2500
S'description'
p2501
S'The factor by which to multiply your material property for visualization\n'
p2502
sS'cpp_type'
p2503
S'double'
p2504
sS'default'
p2505
S'1'
p2506
sS'name'
p2507
S'factor'
p2508
sS'required'
p2509
I00
sS'group_name'
p2510
Nsa(dp2511
S'description'
p2512
S'The index to consider for this kernel\n'
p2513
sS'cpp_type'
p2514
S'unsigned int'
p2515
sS'default'
p2516
S'0'
p2517
sS'name'
p2518
S'index'
p2519
sS'required'
p2520
I00
sS'group_name'
p2521
Nsa(dp2522
S'description'
p2523
S'The offset to add to your material property for visualization\n'
p2524
sS'cpp_type'
p2525
S'double'
p2526
sS'default'
p2527
S'0'
p2528
sS'name'
p2529
S'offset'
p2530
sS'required'
p2531
I00
sS'group_name'
p2532
Nsa(dp2533
S'description'
p2534
S'The scalar material property name\n'
p2535
sS'cpp_type'
p2536
S'MaterialPropertyName'
p2537
sS'default'
p2538
g3
sS'name'
p2539
S'property'
p2540
sS'required'
p2541
I01
sS'group_name'
p2542
Nsa(dp2543
S'description'
p2544
S'The seed for the master random number generator\n'
p2545
sS'cpp_type'
p2546
S'unsigned int'
p2547
sS'default'
p2548
S'0'
p2549
sS'name'
p2550
S'seed'
p2551
sS'required'
p2552
I00
sS'group_name'
p2553
S'Advanced'
p2554
sa(dp2555
S'description'
p2556
g3
sS'cpp_type'
p2557
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2558
sS'default'
p2559
S'MaterialStdVectorRealGradientAux'
p2560
sS'name'
p2561
S'type'
p2562
sS'required'
p2563
I00
sS'group_name'
p2564
Nsa(dp2565
S'description'
p2566
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2567
sS'cpp_type'
p2568
S'bool'
p2569
sS'default'
p2570
S'0'
p2571
sS'name'
p2572
S'use_displaced_mesh'
p2573
sS'required'
p2574
I00
sS'group_name'
p2575
S'Advanced'
p2576
sa(dp2577
S'description'
p2578
S'The name of the variable that this object applies to\n'
p2579
sS'cpp_type'
p2580
S'AuxVariableName'
p2581
sS'default'
p2582
g3
sS'name'
p2583
S'variable'
p2584
sS'required'
p2585
I01
sS'group_name'
p2586
NsasS'name'
p2587
S'/AuxKernels/MaterialStdVectorRealGradientAux'
p2588
sa(dp2589
S'description'
p2590
g3
sS'subblocks'
p2591
NsS'parameters'
p2592
(lp2593
(dp2594
S'description'
p2595
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2596
sS'cpp_type'
p2597
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2598
sS'default'
p2599
g3
sS'name'
p2600
S'block'
p2601
sS'required'
p2602
I00
sS'group_name'
p2603
Nsa(dp2604
S'description'
p2605
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2606
sS'cpp_type'
p2607
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2608
sS'default'
p2609
g3
sS'name'
p2610
S'boundary'
p2611
sS'required'
p2612
I00
sS'group_name'
p2613
Nsa(dp2614
S'name'
p2615
S'execute_on'
p2616
sS'cpp_type'
p2617
S'MultiMooseEnum'
p2618
sS'default'
p2619
S'LINEAR'
p2620
sS'description'
p2621
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2622
sS'required'
p2623
I00
sS'options'
p2624
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2625
sS'group_name'
p2626
Nsa(dp2627
S'description'
p2628
S'The boundary to find the distance to.\n'
p2629
sS'cpp_type'
p2630
S'BoundaryName'
p2631
sS'default'
p2632
g3
sS'name'
p2633
S'paired_boundary'
p2634
sS'required'
p2635
I01
sS'group_name'
p2636
Nsa(dp2637
S'description'
p2638
S'The seed for the master random number generator\n'
p2639
sS'cpp_type'
p2640
S'unsigned int'
p2641
sS'default'
p2642
S'0'
p2643
sS'name'
p2644
S'seed'
p2645
sS'required'
p2646
I00
sS'group_name'
p2647
S'Advanced'
p2648
sa(dp2649
S'description'
p2650
g3
sS'cpp_type'
p2651
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2652
sS'default'
p2653
S'NearestNodeDistanceAux'
p2654
sS'name'
p2655
S'type'
p2656
sS'required'
p2657
I00
sS'group_name'
p2658
Nsa(dp2659
S'description'
p2660
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2661
sS'cpp_type'
p2662
S'bool'
p2663
sS'default'
p2664
S'1'
p2665
sS'name'
p2666
S'use_displaced_mesh'
p2667
sS'required'
p2668
I00
sS'group_name'
p2669
S'Advanced'
p2670
sa(dp2671
S'description'
p2672
S'The name of the variable that this object applies to\n'
p2673
sS'cpp_type'
p2674
S'AuxVariableName'
p2675
sS'default'
p2676
g3
sS'name'
p2677
S'variable'
p2678
sS'required'
p2679
I01
sS'group_name'
p2680
NsasS'name'
p2681
S'/AuxKernels/NearestNodeDistanceAux'
p2682
sa(dp2683
S'description'
p2684
g3
sS'subblocks'
p2685
NsS'parameters'
p2686
(lp2687
(dp2688
S'description'
p2689
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2690
sS'cpp_type'
p2691
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2692
sS'default'
p2693
g3
sS'name'
p2694
S'block'
p2695
sS'required'
p2696
I00
sS'group_name'
p2697
Nsa(dp2698
S'description'
p2699
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2700
sS'cpp_type'
p2701
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2702
sS'default'
p2703
g3
sS'name'
p2704
S'boundary'
p2705
sS'required'
p2706
I00
sS'group_name'
p2707
Nsa(dp2708
S'name'
p2709
S'execute_on'
p2710
sS'cpp_type'
p2711
S'MultiMooseEnum'
p2712
sS'default'
p2713
S'LINEAR'
p2714
sS'description'
p2715
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2716
sS'required'
p2717
I00
sS'options'
p2718
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2719
sS'group_name'
p2720
Nsa(dp2721
S'description'
p2722
S'The boundary to get the value from.\n'
p2723
sS'cpp_type'
p2724
S'BoundaryName'
p2725
sS'default'
p2726
g3
sS'name'
p2727
S'paired_boundary'
p2728
sS'required'
p2729
I01
sS'group_name'
p2730
Nsa(dp2731
S'description'
p2732
S'The variable to get the value of.\n'
p2733
sS'cpp_type'
p2734
S'std::vector<VariableName>'
p2735
sS'default'
p2736
g3
sS'name'
p2737
S'paired_variable'
p2738
sS'required'
p2739
I01
sS'group_name'
p2740
Nsa(dp2741
S'description'
p2742
S'The seed for the master random number generator\n'
p2743
sS'cpp_type'
p2744
S'unsigned int'
p2745
sS'default'
p2746
S'0'
p2747
sS'name'
p2748
S'seed'
p2749
sS'required'
p2750
I00
sS'group_name'
p2751
S'Advanced'
p2752
sa(dp2753
S'description'
p2754
g3
sS'cpp_type'
p2755
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2756
sS'default'
p2757
S'NearestNodeValueAux'
p2758
sS'name'
p2759
S'type'
p2760
sS'required'
p2761
I00
sS'group_name'
p2762
Nsa(dp2763
S'description'
p2764
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2765
sS'cpp_type'
p2766
S'bool'
p2767
sS'default'
p2768
S'1'
p2769
sS'name'
p2770
S'use_displaced_mesh'
p2771
sS'required'
p2772
I00
sS'group_name'
p2773
S'Advanced'
p2774
sa(dp2775
S'description'
p2776
S'The name of the variable that this object applies to\n'
p2777
sS'cpp_type'
p2778
S'AuxVariableName'
p2779
sS'default'
p2780
g3
sS'name'
p2781
S'variable'
p2782
sS'required'
p2783
I01
sS'group_name'
p2784
NsasS'name'
p2785
S'/AuxKernels/NearestNodeValueAux'
p2786
sa(dp2787
S'description'
p2788
g3
sS'subblocks'
p2789
NsS'parameters'
p2790
(lp2791
(dp2792
S'description'
p2793
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2794
sS'cpp_type'
p2795
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2796
sS'default'
p2797
g3
sS'name'
p2798
S'block'
p2799
sS'required'
p2800
I00
sS'group_name'
p2801
Nsa(dp2802
S'description'
p2803
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2804
sS'cpp_type'
p2805
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2806
sS'default'
p2807
g3
sS'name'
p2808
S'boundary'
p2809
sS'required'
p2810
I00
sS'group_name'
p2811
Nsa(dp2812
S'name'
p2813
S'execute_on'
p2814
sS'cpp_type'
p2815
S'MultiMooseEnum'
p2816
sS'default'
p2817
S'LINEAR'
p2818
sS'description'
p2819
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2820
sS'required'
p2821
I00
sS'options'
p2822
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2823
sS'group_name'
p2824
Nsa(dp2825
S'description'
p2826
S'The normalization factor\n'
p2827
sS'cpp_type'
p2828
S'double'
p2829
sS'default'
p2830
S'1'
p2831
sS'name'
p2832
S'normal_factor'
p2833
sS'required'
p2834
I00
sS'group_name'
p2835
Nsa(dp2836
S'description'
p2837
S'The postprocessor on the source\n'
p2838
sS'cpp_type'
p2839
S'PostprocessorName'
p2840
sS'default'
p2841
g3
sS'name'
p2842
S'normalization'
p2843
sS'required'
p2844
I01
sS'group_name'
p2845
Nsa(dp2846
S'description'
p2847
S'The seed for the master random number generator\n'
p2848
sS'cpp_type'
p2849
S'unsigned int'
p2850
sS'default'
p2851
S'0'
p2852
sS'name'
p2853
S'seed'
p2854
sS'required'
p2855
I00
sS'group_name'
p2856
S'Advanced'
p2857
sa(dp2858
S'description'
p2859
S'The variable to be normalized\n'
p2860
sS'cpp_type'
p2861
S'std::vector<VariableName>'
p2862
sS'default'
p2863
g3
sS'name'
p2864
S'source_variable'
p2865
sS'required'
p2866
I01
sS'group_name'
p2867
Nsa(dp2868
S'description'
p2869
g3
sS'cpp_type'
p2870
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p2871
sS'default'
p2872
S'NormalizationAux'
p2873
sS'name'
p2874
S'type'
p2875
sS'required'
p2876
I00
sS'group_name'
p2877
Nsa(dp2878
S'description'
p2879
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p2880
sS'cpp_type'
p2881
S'bool'
p2882
sS'default'
p2883
S'0'
p2884
sS'name'
p2885
S'use_displaced_mesh'
p2886
sS'required'
p2887
I00
sS'group_name'
p2888
S'Advanced'
p2889
sa(dp2890
S'description'
p2891
S'The name of the variable that this object applies to\n'
p2892
sS'cpp_type'
p2893
S'AuxVariableName'
p2894
sS'default'
p2895
g3
sS'name'
p2896
S'variable'
p2897
sS'required'
p2898
I01
sS'group_name'
p2899
NsasS'name'
p2900
S'/AuxKernels/NormalizationAux'
p2901
sa(dp2902
S'description'
p2903
S'Parsed function AuxKernel.\n'
p2904
sS'subblocks'
p2905
NsS'parameters'
p2906
(lp2907
(dp2908
S'description'
p2909
S'coupled variables\n'
p2910
sS'cpp_type'
p2911
S'std::vector<VariableName>'
p2912
sS'default'
p2913
g3
sS'name'
p2914
S'args'
p2915
sS'required'
p2916
I00
sS'group_name'
p2917
Nsa(dp2918
S'description'
p2919
S'The list of block ids (SubdomainID) that this object will be applied\n'
p2920
sS'cpp_type'
p2921
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p2922
sS'default'
p2923
g3
sS'name'
p2924
S'block'
p2925
sS'required'
p2926
I00
sS'group_name'
p2927
Nsa(dp2928
S'description'
p2929
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p2930
sS'cpp_type'
p2931
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p2932
sS'default'
p2933
g3
sS'name'
p2934
S'boundary'
p2935
sS'required'
p2936
I00
sS'group_name'
p2937
Nsa(dp2938
S'description'
p2939
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p2940
sS'cpp_type'
p2941
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2942
sS'default'
p2943
g3
sS'name'
p2944
S'constant_expressions'
p2945
sS'required'
p2946
I00
sS'group_name'
p2947
Nsa(dp2948
S'description'
p2949
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p2950
sS'cpp_type'
p2951
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p2952
sS'default'
p2953
g3
sS'name'
p2954
S'constant_names'
p2955
sS'required'
p2956
I00
sS'group_name'
p2957
Nsa(dp2958
S'description'
p2959
S'Disable the function parser algebraic optimizer\n'
p2960
sS'cpp_type'
p2961
S'bool'
p2962
sS'default'
p2963
S'0'
p2964
sS'name'
p2965
S'disable_fpoptimizer'
p2966
sS'required'
p2967
I00
sS'group_name'
p2968
Nsa(dp2969
S'description'
p2970
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p2971
sS'cpp_type'
p2972
S'bool'
p2973
sS'default'
p2974
S'1'
p2975
sS'name'
p2976
S'enable_jit'
p2977
sS'required'
p2978
I00
sS'group_name'
p2979
Nsa(dp2980
S'name'
p2981
S'execute_on'
p2982
sS'cpp_type'
p2983
S'MultiMooseEnum'
p2984
sS'default'
p2985
S'LINEAR'
p2986
sS'description'
p2987
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p2988
sS'required'
p2989
I00
sS'options'
p2990
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p2991
sS'group_name'
p2992
Nsa(dp2993
S'description'
p2994
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p2995
sS'cpp_type'
p2996
S'bool'
p2997
sS'default'
p2998
S'0'
p2999
sS'name'
p3000
S'fail_on_evalerror'
p3001
sS'required'
p3002
I00
sS'group_name'
p3003
Nsa(dp3004
S'description'
p3005
S'function expression\n'
p3006
sS'cpp_type'
p3007
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3008
sS'default'
p3009
g3
sS'name'
p3010
S'function'
p3011
sS'required'
p3012
I01
sS'group_name'
p3013
Nsa(dp3014
S'description'
p3015
S'The seed for the master random number generator\n'
p3016
sS'cpp_type'
p3017
S'unsigned int'
p3018
sS'default'
p3019
S'0'
p3020
sS'name'
p3021
S'seed'
p3022
sS'required'
p3023
I00
sS'group_name'
p3024
S'Advanced'
p3025
sa(dp3026
S'description'
p3027
g3
sS'cpp_type'
p3028
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3029
sS'default'
p3030
S'ParsedAux'
p3031
sS'name'
p3032
S'type'
p3033
sS'required'
p3034
I00
sS'group_name'
p3035
Nsa(dp3036
S'description'
p3037
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3038
sS'cpp_type'
p3039
S'bool'
p3040
sS'default'
p3041
S'0'
p3042
sS'name'
p3043
S'use_displaced_mesh'
p3044
sS'required'
p3045
I00
sS'group_name'
p3046
S'Advanced'
p3047
sa(dp3048
S'description'
p3049
S'The name of the variable that this object applies to\n'
p3050
sS'cpp_type'
p3051
S'AuxVariableName'
p3052
sS'default'
p3053
g3
sS'name'
p3054
S'variable'
p3055
sS'required'
p3056
I01
sS'group_name'
p3057
NsasS'name'
p3058
S'/AuxKernels/ParsedAux'
p3059
sa(dp3060
S'description'
p3061
g3
sS'subblocks'
p3062
NsS'parameters'
p3063
(lp3064
(dp3065
S'description'
p3066
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3067
sS'cpp_type'
p3068
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3069
sS'default'
p3070
g3
sS'name'
p3071
S'block'
p3072
sS'required'
p3073
I00
sS'group_name'
p3074
Nsa(dp3075
S'description'
p3076
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3077
sS'cpp_type'
p3078
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3079
sS'default'
p3080
g3
sS'name'
p3081
S'boundary'
p3082
sS'required'
p3083
I00
sS'group_name'
p3084
Nsa(dp3085
S'name'
p3086
S'execute_on'
p3087
sS'cpp_type'
p3088
S'MultiMooseEnum'
p3089
sS'default'
p3090
S'LINEAR'
p3091
sS'description'
p3092
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3093
sS'required'
p3094
I00
sS'options'
p3095
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3096
sS'group_name'
p3097
Nsa(dp3098
S'description'
p3099
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p3100
sS'cpp_type'
p3101
S'double'
p3102
sS'default'
p3103
g3
sS'name'
p3104
S'normal_smoothing_distance'
p3105
sS'required'
p3106
I00
sS'group_name'
p3107
Nsa(dp3108
S'description'
p3109
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p3110
sS'cpp_type'
p3111
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3112
sS'default'
p3113
g3
sS'name'
p3114
S'normal_smoothing_method'
p3115
sS'required'
p3116
I00
sS'group_name'
p3117
Nsa(dp3118
S'name'
p3119
S'order'
p3120
sS'cpp_type'
p3121
S'MooseEnum'
p3122
sS'default'
p3123
S'FIRST'
p3124
sS'description'
p3125
S'The finite element order\n'
p3126
sS'required'
p3127
I00
sS'options'
p3128
S'FIRST SECOND THIRD FOURTH'
p3129
sS'group_name'
p3130
Nsa(dp3131
S'description'
p3132
S'The boundary to be penetrated\n'
p3133
sS'cpp_type'
p3134
S'BoundaryName'
p3135
sS'default'
p3136
g3
sS'name'
p3137
S'paired_boundary'
p3138
sS'required'
p3139
I01
sS'group_name'
p3140
Nsa(dp3141
S'name'
p3142
S'quantity'
p3143
sS'cpp_type'
p3144
S'MooseEnum'
p3145
sS'default'
p3146
S'distance'
p3147
sS'description'
p3148
S'The quantity to recover from the available penetration information\n'
p3149
sS'required'
p3150
I00
sS'options'
p3151
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p3152
sS'group_name'
p3153
Nsa(dp3154
S'description'
p3155
S'The seed for the master random number generator\n'
p3156
sS'cpp_type'
p3157
S'unsigned int'
p3158
sS'default'
p3159
S'0'
p3160
sS'name'
p3161
S'seed'
p3162
sS'required'
p3163
I00
sS'group_name'
p3164
S'Advanced'
p3165
sa(dp3166
S'description'
p3167
S'Tangential distance to extend edges of contact surfaces\n'
p3168
sS'cpp_type'
p3169
S'double'
p3170
sS'default'
p3171
g3
sS'name'
p3172
S'tangential_tolerance'
p3173
sS'required'
p3174
I00
sS'group_name'
p3175
Nsa(dp3176
S'description'
p3177
g3
sS'cpp_type'
p3178
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3179
sS'default'
p3180
S'PenetrationAux'
p3181
sS'name'
p3182
S'type'
p3183
sS'required'
p3184
I00
sS'group_name'
p3185
Nsa(dp3186
S'description'
p3187
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3188
sS'cpp_type'
p3189
S'bool'
p3190
sS'default'
p3191
S'1'
p3192
sS'name'
p3193
S'use_displaced_mesh'
p3194
sS'required'
p3195
I00
sS'group_name'
p3196
S'Advanced'
p3197
sa(dp3198
S'description'
p3199
S'The name of the variable that this object applies to\n'
p3200
sS'cpp_type'
p3201
S'AuxVariableName'
p3202
sS'default'
p3203
g3
sS'name'
p3204
S'variable'
p3205
sS'required'
p3206
I01
sS'group_name'
p3207
NsasS'name'
p3208
S'/AuxKernels/PenetrationAux'
p3209
sa(dp3210
S'description'
p3211
g3
sS'subblocks'
p3212
NsS'parameters'
p3213
(lp3214
(dp3215
S'description'
p3216
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3217
sS'cpp_type'
p3218
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3219
sS'default'
p3220
g3
sS'name'
p3221
S'block'
p3222
sS'required'
p3223
I00
sS'group_name'
p3224
Nsa(dp3225
S'description'
p3226
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3227
sS'cpp_type'
p3228
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3229
sS'default'
p3230
g3
sS'name'
p3231
S'boundary'
p3232
sS'required'
p3233
I00
sS'group_name'
p3234
Nsa(dp3235
S'name'
p3236
S'execute_on'
p3237
sS'cpp_type'
p3238
S'MultiMooseEnum'
p3239
sS'default'
p3240
S'LINEAR'
p3241
sS'description'
p3242
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3243
sS'required'
p3244
I00
sS'options'
p3245
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3246
sS'group_name'
p3247
Nsa(dp3248
S'description'
p3249
S'The seed for the master random number generator\n'
p3250
sS'cpp_type'
p3251
S'unsigned int'
p3252
sS'default'
p3253
S'0'
p3254
sS'name'
p3255
S'seed'
p3256
sS'required'
p3257
I00
sS'group_name'
p3258
S'Advanced'
p3259
sa(dp3260
S'description'
p3261
g3
sS'cpp_type'
p3262
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3263
sS'default'
p3264
S'ProcessorIDAux'
p3265
sS'name'
p3266
S'type'
p3267
sS'required'
p3268
I00
sS'group_name'
p3269
Nsa(dp3270
S'description'
p3271
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3272
sS'cpp_type'
p3273
S'bool'
p3274
sS'default'
p3275
S'0'
p3276
sS'name'
p3277
S'use_displaced_mesh'
p3278
sS'required'
p3279
I00
sS'group_name'
p3280
S'Advanced'
p3281
sa(dp3282
S'description'
p3283
S'The name of the variable that this object applies to\n'
p3284
sS'cpp_type'
p3285
S'AuxVariableName'
p3286
sS'default'
p3287
g3
sS'name'
p3288
S'variable'
p3289
sS'required'
p3290
I01
sS'group_name'
p3291
NsasS'name'
p3292
S'/AuxKernels/ProcessorIDAux'
p3293
sa(dp3294
S'description'
p3295
g3
sS'subblocks'
p3296
NsS'parameters'
p3297
(lp3298
(dp3299
S'description'
p3300
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3301
sS'cpp_type'
p3302
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3303
sS'default'
p3304
g3
sS'name'
p3305
S'block'
p3306
sS'required'
p3307
I00
sS'group_name'
p3308
Nsa(dp3309
S'description'
p3310
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3311
sS'cpp_type'
p3312
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3313
sS'default'
p3314
g3
sS'name'
p3315
S'boundary'
p3316
sS'required'
p3317
I00
sS'group_name'
p3318
Nsa(dp3319
S'description'
p3320
S'The downstairs of the quotient variable\n'
p3321
sS'cpp_type'
p3322
S'std::vector<VariableName>'
p3323
sS'default'
p3324
g3
sS'name'
p3325
S'denominator'
p3326
sS'required'
p3327
I00
sS'group_name'
p3328
Nsa(dp3329
S'name'
p3330
S'execute_on'
p3331
sS'cpp_type'
p3332
S'MultiMooseEnum'
p3333
sS'default'
p3334
S'LINEAR'
p3335
sS'description'
p3336
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3337
sS'required'
p3338
I00
sS'options'
p3339
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3340
sS'group_name'
p3341
Nsa(dp3342
S'description'
p3343
S'The upstairs of the quotient variable\n'
p3344
sS'cpp_type'
p3345
S'std::vector<VariableName>'
p3346
sS'default'
p3347
g3
sS'name'
p3348
S'numerator'
p3349
sS'required'
p3350
I00
sS'group_name'
p3351
Nsa(dp3352
S'description'
p3353
S'The seed for the master random number generator\n'
p3354
sS'cpp_type'
p3355
S'unsigned int'
p3356
sS'default'
p3357
S'0'
p3358
sS'name'
p3359
S'seed'
p3360
sS'required'
p3361
I00
sS'group_name'
p3362
S'Advanced'
p3363
sa(dp3364
S'description'
p3365
g3
sS'cpp_type'
p3366
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3367
sS'default'
p3368
S'QuotientAux'
p3369
sS'name'
p3370
S'type'
p3371
sS'required'
p3372
I00
sS'group_name'
p3373
Nsa(dp3374
S'description'
p3375
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3376
sS'cpp_type'
p3377
S'bool'
p3378
sS'default'
p3379
S'0'
p3380
sS'name'
p3381
S'use_displaced_mesh'
p3382
sS'required'
p3383
I00
sS'group_name'
p3384
S'Advanced'
p3385
sa(dp3386
S'description'
p3387
S'The name of the variable that this object applies to\n'
p3388
sS'cpp_type'
p3389
S'AuxVariableName'
p3390
sS'default'
p3391
g3
sS'name'
p3392
S'variable'
p3393
sS'required'
p3394
I01
sS'group_name'
p3395
NsasS'name'
p3396
S'/AuxKernels/QuotientAux'
p3397
sa(dp3398
S'description'
p3399
g3
sS'subblocks'
p3400
NsS'parameters'
p3401
(lp3402
(dp3403
S'description'
p3404
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3405
sS'cpp_type'
p3406
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3407
sS'default'
p3408
g3
sS'name'
p3409
S'block'
p3410
sS'required'
p3411
I00
sS'group_name'
p3412
Nsa(dp3413
S'description'
p3414
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3415
sS'cpp_type'
p3416
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3417
sS'default'
p3418
g3
sS'name'
p3419
S'boundary'
p3420
sS'required'
p3421
I00
sS'group_name'
p3422
Nsa(dp3423
S'name'
p3424
S'execute_on'
p3425
sS'cpp_type'
p3426
S'MultiMooseEnum'
p3427
sS'default'
p3428
S'LINEAR'
p3429
sS'description'
p3430
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3431
sS'required'
p3432
I00
sS'options'
p3433
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3434
sS'group_name'
p3435
Nsa(dp3436
S'description'
p3437
S'The seed for the master random number generator\n'
p3438
sS'cpp_type'
p3439
S'unsigned int'
p3440
sS'default'
p3441
S'0'
p3442
sS'name'
p3443
S'seed'
p3444
sS'required'
p3445
I00
sS'group_name'
p3446
S'Advanced'
p3447
sa(dp3448
S'description'
p3449
g3
sS'cpp_type'
p3450
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3451
sS'default'
p3452
S'SelfAux'
p3453
sS'name'
p3454
S'type'
p3455
sS'required'
p3456
I00
sS'group_name'
p3457
Nsa(dp3458
S'description'
p3459
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3460
sS'cpp_type'
p3461
S'bool'
p3462
sS'default'
p3463
S'0'
p3464
sS'name'
p3465
S'use_displaced_mesh'
p3466
sS'required'
p3467
I00
sS'group_name'
p3468
S'Advanced'
p3469
sa(dp3470
S'description'
p3471
S'The name of the variable that this object applies to\n'
p3472
sS'cpp_type'
p3473
S'AuxVariableName'
p3474
sS'default'
p3475
g3
sS'name'
p3476
S'variable'
p3477
sS'required'
p3478
I01
sS'group_name'
p3479
NsasS'name'
p3480
S'/AuxKernels/SelfAux'
p3481
sa(dp3482
S'description'
p3483
g3
sS'subblocks'
p3484
NsS'parameters'
p3485
(lp3486
(dp3487
S'description'
p3488
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p3489
sS'cpp_type'
p3490
S'double'
p3491
sS'default'
p3492
S'0'
p3493
sS'name'
p3494
S'add_factor'
p3495
sS'required'
p3496
I00
sS'group_name'
p3497
Nsa(dp3498
S'description'
p3499
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3500
sS'cpp_type'
p3501
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3502
sS'default'
p3503
g3
sS'name'
p3504
S'block'
p3505
sS'required'
p3506
I00
sS'group_name'
p3507
Nsa(dp3508
S'description'
p3509
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3510
sS'cpp_type'
p3511
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3512
sS'default'
p3513
g3
sS'name'
p3514
S'boundary'
p3515
sS'required'
p3516
I00
sS'group_name'
p3517
Nsa(dp3518
S'description'
p3519
S'If true the meshes must be the same and then the values are simply copied over.\n'
p3520
sS'cpp_type'
p3521
S'bool'
p3522
sS'default'
p3523
S'0'
p3524
sS'name'
p3525
S'direct'
p3526
sS'required'
p3527
I00
sS'group_name'
p3528
Nsa(dp3529
S'name'
p3530
S'execute_on'
p3531
sS'cpp_type'
p3532
S'MultiMooseEnum'
p3533
sS'default'
p3534
S'LINEAR'
p3535
sS'description'
p3536
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3537
sS'required'
p3538
I00
sS'options'
p3539
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3540
sS'group_name'
p3541
Nsa(dp3542
S'description'
p3543
S'The name of the variable to extract from the file\n'
p3544
sS'cpp_type'
p3545
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3546
sS'default'
p3547
g3
sS'name'
p3548
S'from_variable'
p3549
sS'required'
p3550
I00
sS'group_name'
p3551
Nsa(dp3552
S'description'
p3553
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p3554
sS'cpp_type'
p3555
S'double'
p3556
sS'default'
p3557
S'1'
p3558
sS'name'
p3559
S'scale_factor'
p3560
sS'required'
p3561
I00
sS'group_name'
p3562
Nsa(dp3563
S'description'
p3564
S'The seed for the master random number generator\n'
p3565
sS'cpp_type'
p3566
S'unsigned int'
p3567
sS'default'
p3568
S'0'
p3569
sS'name'
p3570
S'seed'
p3571
sS'required'
p3572
I00
sS'group_name'
p3573
S'Advanced'
p3574
sa(dp3575
S'description'
p3576
S'The name of the SolutionUserObject\n'
p3577
sS'cpp_type'
p3578
S'UserObjectName'
p3579
sS'default'
p3580
g3
sS'name'
p3581
S'solution'
p3582
sS'required'
p3583
I01
sS'group_name'
p3584
Nsa(dp3585
S'description'
p3586
g3
sS'cpp_type'
p3587
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3588
sS'default'
p3589
S'SolutionAux'
p3590
sS'name'
p3591
S'type'
p3592
sS'required'
p3593
I00
sS'group_name'
p3594
Nsa(dp3595
S'description'
p3596
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3597
sS'cpp_type'
p3598
S'bool'
p3599
sS'default'
p3600
S'0'
p3601
sS'name'
p3602
S'use_displaced_mesh'
p3603
sS'required'
p3604
I00
sS'group_name'
p3605
S'Advanced'
p3606
sa(dp3607
S'description'
p3608
S'The name of the variable that this object applies to\n'
p3609
sS'cpp_type'
p3610
S'AuxVariableName'
p3611
sS'default'
p3612
g3
sS'name'
p3613
S'variable'
p3614
sS'required'
p3615
I01
sS'group_name'
p3616
NsasS'name'
p3617
S'/AuxKernels/SolutionAux'
p3618
sa(dp3619
S'description'
p3620
g3
sS'subblocks'
p3621
NsS'parameters'
p3622
(lp3623
(dp3624
S'description'
p3625
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3626
sS'cpp_type'
p3627
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3628
sS'default'
p3629
g3
sS'name'
p3630
S'block'
p3631
sS'required'
p3632
I00
sS'group_name'
p3633
Nsa(dp3634
S'description'
p3635
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3636
sS'cpp_type'
p3637
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3638
sS'default'
p3639
g3
sS'name'
p3640
S'boundary'
p3641
sS'required'
p3642
I00
sS'group_name'
p3643
Nsa(dp3644
S'name'
p3645
S'execute_on'
p3646
sS'cpp_type'
p3647
S'MultiMooseEnum'
p3648
sS'default'
p3649
S'LINEAR'
p3650
sS'description'
p3651
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3652
sS'required'
p3653
I00
sS'options'
p3654
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3655
sS'group_name'
p3656
Nsa(dp3657
S'description'
p3658
S'The seed for the master random number generator\n'
p3659
sS'cpp_type'
p3660
S'unsigned int'
p3661
sS'default'
p3662
S'0'
p3663
sS'name'
p3664
S'seed'
p3665
sS'required'
p3666
I00
sS'group_name'
p3667
S'Advanced'
p3668
sa(dp3669
S'description'
p3670
g3
sS'cpp_type'
p3671
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3672
sS'default'
p3673
S'SpatialUserObjectAux'
p3674
sS'name'
p3675
S'type'
p3676
sS'required'
p3677
I00
sS'group_name'
p3678
Nsa(dp3679
S'description'
p3680
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3681
sS'cpp_type'
p3682
S'bool'
p3683
sS'default'
p3684
S'0'
p3685
sS'name'
p3686
S'use_displaced_mesh'
p3687
sS'required'
p3688
I00
sS'group_name'
p3689
S'Advanced'
p3690
sa(dp3691
S'description'
p3692
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p3693
sS'cpp_type'
p3694
S'UserObjectName'
p3695
sS'default'
p3696
g3
sS'name'
p3697
S'user_object'
p3698
sS'required'
p3699
I01
sS'group_name'
p3700
Nsa(dp3701
S'description'
p3702
S'The name of the variable that this object applies to\n'
p3703
sS'cpp_type'
p3704
S'AuxVariableName'
p3705
sS'default'
p3706
g3
sS'name'
p3707
S'variable'
p3708
sS'required'
p3709
I01
sS'group_name'
p3710
NsasS'name'
p3711
S'/AuxKernels/SpatialUserObjectAux'
p3712
sa(dp3713
S'description'
p3714
g3
sS'subblocks'
p3715
NsS'parameters'
p3716
(lp3717
(dp3718
S'description'
p3719
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3720
sS'cpp_type'
p3721
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3722
sS'default'
p3723
g3
sS'name'
p3724
S'block'
p3725
sS'required'
p3726
I00
sS'group_name'
p3727
Nsa(dp3728
S'description'
p3729
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3730
sS'cpp_type'
p3731
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3732
sS'default'
p3733
g3
sS'name'
p3734
S'boundary'
p3735
sS'required'
p3736
I00
sS'group_name'
p3737
Nsa(dp3738
S'name'
p3739
S'component'
p3740
sS'cpp_type'
p3741
S'MooseEnum'
p3742
sS'default'
p3743
g3
sS'description'
p3744
S'The gradient component to compute\n'
p3745
sS'required'
p3746
I00
sS'options'
p3747
S'x y z'
p3748
sS'group_name'
p3749
Nsa(dp3750
S'name'
p3751
S'execute_on'
p3752
sS'cpp_type'
p3753
S'MultiMooseEnum'
p3754
sS'default'
p3755
S'LINEAR'
p3756
sS'description'
p3757
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3758
sS'required'
p3759
I00
sS'options'
p3760
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3761
sS'group_name'
p3762
Nsa(dp3763
S'description'
p3764
S'The variable from which to compute the gradient component\n'
p3765
sS'cpp_type'
p3766
S'std::vector<VariableName>'
p3767
sS'default'
p3768
g3
sS'name'
p3769
S'gradient_variable'
p3770
sS'required'
p3771
I01
sS'group_name'
p3772
Nsa(dp3773
S'description'
p3774
S'The seed for the master random number generator\n'
p3775
sS'cpp_type'
p3776
S'unsigned int'
p3777
sS'default'
p3778
S'0'
p3779
sS'name'
p3780
S'seed'
p3781
sS'required'
p3782
I00
sS'group_name'
p3783
S'Advanced'
p3784
sa(dp3785
S'description'
p3786
g3
sS'cpp_type'
p3787
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3788
sS'default'
p3789
S'VariableGradientComponent'
p3790
sS'name'
p3791
S'type'
p3792
sS'required'
p3793
I00
sS'group_name'
p3794
Nsa(dp3795
S'description'
p3796
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3797
sS'cpp_type'
p3798
S'bool'
p3799
sS'default'
p3800
S'0'
p3801
sS'name'
p3802
S'use_displaced_mesh'
p3803
sS'required'
p3804
I00
sS'group_name'
p3805
S'Advanced'
p3806
sa(dp3807
S'description'
p3808
S'The name of the variable that this object applies to\n'
p3809
sS'cpp_type'
p3810
S'AuxVariableName'
p3811
sS'default'
p3812
g3
sS'name'
p3813
S'variable'
p3814
sS'required'
p3815
I01
sS'group_name'
p3816
NsasS'name'
p3817
S'/AuxKernels/VariableGradientComponent'
p3818
sa(dp3819
S'description'
p3820
g3
sS'subblocks'
p3821
NsS'parameters'
p3822
(lp3823
(dp3824
S'description'
p3825
S'The list of block ids (SubdomainID) that this object will be applied\n'
p3826
sS'cpp_type'
p3827
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p3828
sS'default'
p3829
g3
sS'name'
p3830
S'block'
p3831
sS'required'
p3832
I00
sS'group_name'
p3833
Nsa(dp3834
S'description'
p3835
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p3836
sS'cpp_type'
p3837
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p3838
sS'default'
p3839
g3
sS'name'
p3840
S'boundary'
p3841
sS'required'
p3842
I00
sS'group_name'
p3843
Nsa(dp3844
S'name'
p3845
S'execute_on'
p3846
sS'cpp_type'
p3847
S'MultiMooseEnum'
p3848
sS'default'
p3849
S'LINEAR'
p3850
sS'description'
p3851
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3852
sS'required'
p3853
I00
sS'options'
p3854
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3855
sS'group_name'
p3856
Nsa(dp3857
S'description'
p3858
S'The seed for the master random number generator\n'
p3859
sS'cpp_type'
p3860
S'unsigned int'
p3861
sS'default'
p3862
S'0'
p3863
sS'name'
p3864
S'seed'
p3865
sS'required'
p3866
I00
sS'group_name'
p3867
S'Advanced'
p3868
sa(dp3869
S'description'
p3870
g3
sS'cpp_type'
p3871
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3872
sS'default'
p3873
S'VectorMagnitudeAux'
p3874
sS'name'
p3875
S'type'
p3876
sS'required'
p3877
I00
sS'group_name'
p3878
Nsa(dp3879
S'description'
p3880
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3881
sS'cpp_type'
p3882
S'bool'
p3883
sS'default'
p3884
S'0'
p3885
sS'name'
p3886
S'use_displaced_mesh'
p3887
sS'required'
p3888
I00
sS'group_name'
p3889
S'Advanced'
p3890
sa(dp3891
S'description'
p3892
S'The name of the variable that this object applies to\n'
p3893
sS'cpp_type'
p3894
S'AuxVariableName'
p3895
sS'default'
p3896
g3
sS'name'
p3897
S'variable'
p3898
sS'required'
p3899
I01
sS'group_name'
p3900
Nsa(dp3901
S'description'
p3902
S'x-component of the vector\n'
p3903
sS'cpp_type'
p3904
S'std::vector<VariableName>'
p3905
sS'default'
p3906
g3
sS'name'
p3907
S'x'
p3908
sS'required'
p3909
I01
sS'group_name'
p3910
Nsa(dp3911
S'description'
p3912
S'y-component of the vector\n'
p3913
sS'cpp_type'
p3914
S'std::vector<VariableName>'
p3915
sS'default'
p3916
g3
sS'name'
p3917
S'y'
p3918
sS'required'
p3919
I00
sS'group_name'
p3920
Nsa(dp3921
S'description'
p3922
S'z-component of the vector\n'
p3923
sS'cpp_type'
p3924
S'std::vector<VariableName>'
p3925
sS'default'
p3926
g3
sS'name'
p3927
S'z'
p3928
sS'required'
p3929
I00
sS'group_name'
p3930
NsasS'name'
p3931
S'/AuxKernels/VectorMagnitudeAux'
p3932
sasS'parameters'
p3933
NsS'name'
p3934
S'/AuxKernels'
p3935
sa(dp3936
S'description'
p3937
g3
sS'subblocks'
p3938
(lp3939
(dp3940
S'description'
p3941
g3
sS'subblocks'
p3942
NsS'parameters'
p3943
(lp3944
(dp3945
S'description'
p3946
S'A string representing the Moose Object that will be built by this Action\n'
p3947
sS'cpp_type'
p3948
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3949
sS'default'
p3950
g3
sS'name'
p3951
S'type'
p3952
sS'required'
p3953
I01
sS'group_name'
p3954
NsasS'name'
p3955
S'/AuxScalarKernels/*'
p3956
sa(dp3957
S'description'
p3958
g3
sS'subblocks'
p3959
NsS'parameters'
p3960
(lp3961
(dp3962
S'name'
p3963
S'execute_on'
p3964
sS'cpp_type'
p3965
S'MultiMooseEnum'
p3966
sS'default'
p3967
S'LINEAR'
p3968
sS'description'
p3969
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p3970
sS'required'
p3971
I00
sS'options'
p3972
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p3973
sS'group_name'
p3974
Nsa(dp3975
S'description'
p3976
g3
sS'cpp_type'
p3977
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p3978
sS'default'
p3979
S'ConstantScalarAux'
p3980
sS'name'
p3981
S'type'
p3982
sS'required'
p3983
I00
sS'group_name'
p3984
Nsa(dp3985
S'description'
p3986
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p3987
sS'cpp_type'
p3988
S'bool'
p3989
sS'default'
p3990
S'0'
p3991
sS'name'
p3992
S'use_displaced_mesh'
p3993
sS'required'
p3994
I00
sS'group_name'
p3995
S'Advanced'
p3996
sa(dp3997
S'description'
p3998
S'The value to be set to the scalar variable.\n'
p3999
sS'cpp_type'
p4000
S'double'
p4001
sS'default'
p4002
g3
sS'name'
p4003
S'value'
p4004
sS'required'
p4005
I01
sS'group_name'
p4006
Nsa(dp4007
S'description'
p4008
S'The name of the variable that this kernel operates on\n'
p4009
sS'cpp_type'
p4010
S'AuxVariableName'
p4011
sS'default'
p4012
g3
sS'name'
p4013
S'variable'
p4014
sS'required'
p4015
I01
sS'group_name'
p4016
NsasS'name'
p4017
S'/AuxScalarKernels/ConstantScalarAux'
p4018
sa(dp4019
S'description'
p4020
g3
sS'subblocks'
p4021
NsS'parameters'
p4022
(lp4023
(dp4024
S'name'
p4025
S'execute_on'
p4026
sS'cpp_type'
p4027
S'MultiMooseEnum'
p4028
sS'default'
p4029
S'LINEAR'
p4030
sS'description'
p4031
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4032
sS'required'
p4033
I00
sS'options'
p4034
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4035
sS'group_name'
p4036
Nsa(dp4037
S'description'
p4038
S'The function to set the scalar variable value.\n'
p4039
sS'cpp_type'
p4040
S'FunctionName'
p4041
sS'default'
p4042
g3
sS'name'
p4043
S'function'
p4044
sS'required'
p4045
I01
sS'group_name'
p4046
Nsa(dp4047
S'description'
p4048
g3
sS'cpp_type'
p4049
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4050
sS'default'
p4051
S'FunctionScalarAux'
p4052
sS'name'
p4053
S'type'
p4054
sS'required'
p4055
I00
sS'group_name'
p4056
Nsa(dp4057
S'description'
p4058
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4059
sS'cpp_type'
p4060
S'bool'
p4061
sS'default'
p4062
S'0'
p4063
sS'name'
p4064
S'use_displaced_mesh'
p4065
sS'required'
p4066
I00
sS'group_name'
p4067
S'Advanced'
p4068
sa(dp4069
S'description'
p4070
S'The name of the variable that this kernel operates on\n'
p4071
sS'cpp_type'
p4072
S'AuxVariableName'
p4073
sS'default'
p4074
g3
sS'name'
p4075
S'variable'
p4076
sS'required'
p4077
I01
sS'group_name'
p4078
NsasS'name'
p4079
S'/AuxScalarKernels/FunctionScalarAux'
p4080
sa(dp4081
S'description'
p4082
g3
sS'subblocks'
p4083
NsS'parameters'
p4084
(lp4085
(dp4086
S'description'
p4087
S'The downstairs of the quotient variable\n'
p4088
sS'cpp_type'
p4089
S'std::vector<VariableName>'
p4090
sS'default'
p4091
g3
sS'name'
p4092
S'denominator'
p4093
sS'required'
p4094
I00
sS'group_name'
p4095
Nsa(dp4096
S'name'
p4097
S'execute_on'
p4098
sS'cpp_type'
p4099
S'MultiMooseEnum'
p4100
sS'default'
p4101
S'LINEAR'
p4102
sS'description'
p4103
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p4104
sS'required'
p4105
I00
sS'options'
p4106
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p4107
sS'group_name'
p4108
Nsa(dp4109
S'description'
p4110
S'The upstairs of the quotient variable\n'
p4111
sS'cpp_type'
p4112
S'std::vector<VariableName>'
p4113
sS'default'
p4114
g3
sS'name'
p4115
S'numerator'
p4116
sS'required'
p4117
I00
sS'group_name'
p4118
Nsa(dp4119
S'description'
p4120
g3
sS'cpp_type'
p4121
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4122
sS'default'
p4123
S'QuotientScalarAux'
p4124
sS'name'
p4125
S'type'
p4126
sS'required'
p4127
I00
sS'group_name'
p4128
Nsa(dp4129
S'description'
p4130
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p4131
sS'cpp_type'
p4132
S'bool'
p4133
sS'default'
p4134
S'0'
p4135
sS'name'
p4136
S'use_displaced_mesh'
p4137
sS'required'
p4138
I00
sS'group_name'
p4139
S'Advanced'
p4140
sa(dp4141
S'description'
p4142
S'The name of the variable that this kernel operates on\n'
p4143
sS'cpp_type'
p4144
S'AuxVariableName'
p4145
sS'default'
p4146
g3
sS'name'
p4147
S'variable'
p4148
sS'required'
p4149
I01
sS'group_name'
p4150
NsasS'name'
p4151
S'/AuxScalarKernels/QuotientScalarAux'
p4152
sasS'parameters'
p4153
NsS'name'
p4154
S'/AuxScalarKernels'
p4155
sa(dp4156
S'description'
p4157
g3
sS'subblocks'
p4158
(lp4159
(dp4160
S'description'
p4161
g3
sS'subblocks'
p4162
(lp4163
(dp4164
S'description'
p4165
g3
sS'subblocks'
p4166
(lp4167
(dp4168
S'description'
p4169
g3
sS'subblocks'
p4170
(lp4171
(dp4172
S'description'
p4173
g3
sS'subblocks'
p4174
NsS'parameters'
p4175
(lp4176
(dp4177
S'description'
p4178
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4179
sS'cpp_type'
p4180
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4181
sS'default'
p4182
g3
sS'name'
p4183
S'block'
p4184
sS'required'
p4185
I00
sS'group_name'
p4186
Nsa(dp4187
S'description'
p4188
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4189
sS'cpp_type'
p4190
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4191
sS'default'
p4192
g3
sS'name'
p4193
S'boundary'
p4194
sS'required'
p4195
I00
sS'group_name'
p4196
Nsa(dp4197
S'description'
p4198
S'The value of the variable inside the box\n'
p4199
sS'cpp_type'
p4200
S'double'
p4201
sS'default'
p4202
S'0'
p4203
sS'name'
p4204
S'inside'
p4205
sS'required'
p4206
I00
sS'group_name'
p4207
Nsa(dp4208
S'description'
p4209
S'The value of the variable outside the box\n'
p4210
sS'cpp_type'
p4211
S'double'
p4212
sS'default'
p4213
S'0'
p4214
sS'name'
p4215
S'outside'
p4216
sS'required'
p4217
I00
sS'group_name'
p4218
Nsa(dp4219
S'description'
p4220
g3
sS'cpp_type'
p4221
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4222
sS'default'
p4223
S'BoundingBoxIC'
p4224
sS'name'
p4225
S'type'
p4226
sS'required'
p4227
I00
sS'group_name'
p4228
Nsa(dp4229
S'description'
p4230
S'The variable this initial condition is supposed to provide values for.\n'
p4231
sS'cpp_type'
p4232
S'VariableName'
p4233
sS'default'
p4234
g3
sS'name'
p4235
S'variable'
p4236
sS'required'
p4237
I01
sS'group_name'
p4238
Nsa(dp4239
S'description'
p4240
S'The x coordinate of the lower left-hand corner of the box\n'
p4241
sS'cpp_type'
p4242
S'double'
p4243
sS'default'
p4244
g3
sS'name'
p4245
S'x1'
p4246
sS'required'
p4247
I01
sS'group_name'
p4248
Nsa(dp4249
S'description'
p4250
S'The x coordinate of the upper right-hand corner of the box\n'
p4251
sS'cpp_type'
p4252
S'double'
p4253
sS'default'
p4254
g3
sS'name'
p4255
S'x2'
p4256
sS'required'
p4257
I01
sS'group_name'
p4258
Nsa(dp4259
S'description'
p4260
S'The y coordinate of the lower left-hand corner of the box\n'
p4261
sS'cpp_type'
p4262
S'double'
p4263
sS'default'
p4264
g3
sS'name'
p4265
S'y1'
p4266
sS'required'
p4267
I01
sS'group_name'
p4268
Nsa(dp4269
S'description'
p4270
S'The y coordinate of the upper right-hand corner of the box\n'
p4271
sS'cpp_type'
p4272
S'double'
p4273
sS'default'
p4274
g3
sS'name'
p4275
S'y2'
p4276
sS'required'
p4277
I01
sS'group_name'
p4278
Nsa(dp4279
S'description'
p4280
S'The z coordinate of the lower left-hand corner of the box\n'
p4281
sS'cpp_type'
p4282
S'double'
p4283
sS'default'
p4284
S'0'
p4285
sS'name'
p4286
S'z1'
p4287
sS'required'
p4288
I00
sS'group_name'
p4289
Nsa(dp4290
S'description'
p4291
S'The z coordinate of the upper right-hand corner of the box\n'
p4292
sS'cpp_type'
p4293
S'double'
p4294
sS'default'
p4295
S'0'
p4296
sS'name'
p4297
S'z2'
p4298
sS'required'
p4299
I00
sS'group_name'
p4300
NsasS'name'
p4301
S'/AuxVariables/*/InitialCondition/<type>/BoundingBoxIC'
p4302
sa(dp4303
S'description'
p4304
g3
sS'subblocks'
p4305
NsS'parameters'
p4306
(lp4307
(dp4308
S'description'
p4309
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4310
sS'cpp_type'
p4311
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4312
sS'default'
p4313
g3
sS'name'
p4314
S'block'
p4315
sS'required'
p4316
I00
sS'group_name'
p4317
Nsa(dp4318
S'description'
p4319
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4320
sS'cpp_type'
p4321
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4322
sS'default'
p4323
g3
sS'name'
p4324
S'boundary'
p4325
sS'required'
p4326
I00
sS'group_name'
p4327
Nsa(dp4328
S'description'
p4329
g3
sS'cpp_type'
p4330
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4331
sS'default'
p4332
S'ConstantIC'
p4333
sS'name'
p4334
S'type'
p4335
sS'required'
p4336
I00
sS'group_name'
p4337
Nsa(dp4338
S'description'
p4339
S'The value to be set in IC\n'
p4340
sS'cpp_type'
p4341
S'double'
p4342
sS'default'
p4343
g3
sS'name'
p4344
S'value'
p4345
sS'required'
p4346
I01
sS'group_name'
p4347
Nsa(dp4348
S'description'
p4349
S'The variable this initial condition is supposed to provide values for.\n'
p4350
sS'cpp_type'
p4351
S'VariableName'
p4352
sS'default'
p4353
g3
sS'name'
p4354
S'variable'
p4355
sS'required'
p4356
I01
sS'group_name'
p4357
NsasS'name'
p4358
S'/AuxVariables/*/InitialCondition/<type>/ConstantIC'
p4359
sa(dp4360
S'description'
p4361
S'Cross-shaped initial condition\n'
p4362
sS'subblocks'
p4363
NsS'parameters'
p4364
(lp4365
(dp4366
S'description'
p4367
S'The amplitude\n'
p4368
sS'cpp_type'
p4369
S'double'
p4370
sS'default'
p4371
S'1'
p4372
sS'name'
p4373
S'amplitude'
p4374
sS'required'
p4375
I00
sS'group_name'
p4376
Nsa(dp4377
S'description'
p4378
S'The average value\n'
p4379
sS'cpp_type'
p4380
S'double'
p4381
sS'default'
p4382
S'0'
p4383
sS'name'
p4384
S'average'
p4385
sS'required'
p4386
I00
sS'group_name'
p4387
Nsa(dp4388
S'description'
p4389
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4390
sS'cpp_type'
p4391
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4392
sS'default'
p4393
g3
sS'name'
p4394
S'block'
p4395
sS'required'
p4396
I00
sS'group_name'
p4397
Nsa(dp4398
S'description'
p4399
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4400
sS'cpp_type'
p4401
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4402
sS'default'
p4403
g3
sS'name'
p4404
S'boundary'
p4405
sS'required'
p4406
I00
sS'group_name'
p4407
Nsa(dp4408
S'description'
p4409
S'A small area between the max value and the interface\n'
p4410
sS'cpp_type'
p4411
S'double'
p4412
sS'default'
p4413
S'0.03125'
p4414
sS'name'
p4415
S'buffer'
p4416
sS'required'
p4417
I00
sS'group_name'
p4418
Nsa(dp4419
S'description'
p4420
S'The interface width\n'
p4421
sS'cpp_type'
p4422
S'double'
p4423
sS'default'
p4424
S'0.03125'
p4425
sS'name'
p4426
S'interface'
p4427
sS'required'
p4428
I00
sS'group_name'
p4429
Nsa(dp4430
S'description'
p4431
S'The length\n'
p4432
sS'cpp_type'
p4433
S'double'
p4434
sS'default'
p4435
S'0.75'
p4436
sS'name'
p4437
S'length'
p4438
sS'required'
p4439
I00
sS'group_name'
p4440
Nsa(dp4441
S'description'
p4442
g3
sS'cpp_type'
p4443
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4444
sS'default'
p4445
S'CrossIC'
p4446
sS'name'
p4447
S'type'
p4448
sS'required'
p4449
I00
sS'group_name'
p4450
Nsa(dp4451
S'description'
p4452
S'The variable this initial condition is supposed to provide values for.\n'
p4453
sS'cpp_type'
p4454
S'VariableName'
p4455
sS'default'
p4456
g3
sS'name'
p4457
S'variable'
p4458
sS'required'
p4459
I01
sS'group_name'
p4460
Nsa(dp4461
S'description'
p4462
S'The width\n'
p4463
sS'cpp_type'
p4464
S'double'
p4465
sS'default'
p4466
S'0.125'
p4467
sS'name'
p4468
S'width'
p4469
sS'required'
p4470
I00
sS'group_name'
p4471
Nsa(dp4472
S'description'
p4473
S'The x coordinate of the lower left-hand corner of the box\n'
p4474
sS'cpp_type'
p4475
S'double'
p4476
sS'default'
p4477
S'0'
p4478
sS'name'
p4479
S'x1'
p4480
sS'required'
p4481
I00
sS'group_name'
p4482
Nsa(dp4483
S'description'
p4484
S'The x coordinate of the upper right-hand corner of the box\n'
p4485
sS'cpp_type'
p4486
S'double'
p4487
sS'default'
p4488
S'1'
p4489
sS'name'
p4490
S'x2'
p4491
sS'required'
p4492
I00
sS'group_name'
p4493
Nsa(dp4494
S'description'
p4495
S'The y coordinate of the lower left-hand corner of the box\n'
p4496
sS'cpp_type'
p4497
S'double'
p4498
sS'default'
p4499
S'0'
p4500
sS'name'
p4501
S'y1'
p4502
sS'required'
p4503
I00
sS'group_name'
p4504
Nsa(dp4505
S'description'
p4506
S'The y coordinate of the upper right-hand corner of the box\n'
p4507
sS'cpp_type'
p4508
S'double'
p4509
sS'default'
p4510
S'1'
p4511
sS'name'
p4512
S'y2'
p4513
sS'required'
p4514
I00
sS'group_name'
p4515
NsasS'name'
p4516
S'/AuxVariables/*/InitialCondition/<type>/CrossIC'
p4517
sa(dp4518
S'description'
p4519
g3
sS'subblocks'
p4520
NsS'parameters'
p4521
(lp4522
(dp4523
S'description'
p4524
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4525
sS'cpp_type'
p4526
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4527
sS'default'
p4528
g3
sS'name'
p4529
S'block'
p4530
sS'required'
p4531
I00
sS'group_name'
p4532
Nsa(dp4533
S'description'
p4534
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4535
sS'cpp_type'
p4536
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4537
sS'default'
p4538
g3
sS'name'
p4539
S'boundary'
p4540
sS'required'
p4541
I00
sS'group_name'
p4542
Nsa(dp4543
S'description'
p4544
S'The initial condition function.\n'
p4545
sS'cpp_type'
p4546
S'FunctionName'
p4547
sS'default'
p4548
g3
sS'name'
p4549
S'function'
p4550
sS'required'
p4551
I01
sS'group_name'
p4552
Nsa(dp4553
S'description'
p4554
g3
sS'cpp_type'
p4555
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4556
sS'default'
p4557
S'FunctionIC'
p4558
sS'name'
p4559
S'type'
p4560
sS'required'
p4561
I00
sS'group_name'
p4562
Nsa(dp4563
S'description'
p4564
S'The variable this initial condition is supposed to provide values for.\n'
p4565
sS'cpp_type'
p4566
S'VariableName'
p4567
sS'default'
p4568
g3
sS'name'
p4569
S'variable'
p4570
sS'required'
p4571
I01
sS'group_name'
p4572
NsasS'name'
p4573
S'/AuxVariables/*/InitialCondition/<type>/FunctionIC'
p4574
sa(dp4575
S'description'
p4576
S'Perturbed hexagonal polycrystal\n'
p4577
sS'subblocks'
p4578
NsS'parameters'
p4579
(lp4580
(dp4581
S'description'
p4582
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4583
sS'cpp_type'
p4584
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4585
sS'default'
p4586
g3
sS'name'
p4587
S'block'
p4588
sS'required'
p4589
I00
sS'group_name'
p4590
Nsa(dp4591
S'description'
p4592
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4593
sS'cpp_type'
p4594
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4595
sS'default'
p4596
g3
sS'name'
p4597
S'boundary'
p4598
sS'required'
p4599
I00
sS'group_name'
p4600
Nsa(dp4601
S'description'
p4602
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p4603
sS'cpp_type'
p4604
S'bool'
p4605
sS'default'
p4606
S'0'
p4607
sS'name'
p4608
S'cody_test'
p4609
sS'required'
p4610
I00
sS'group_name'
p4611
Nsa(dp4612
S'description'
p4613
S'3D microstructure will be columnar in the z-direction?\n'
p4614
sS'cpp_type'
p4615
S'bool'
p4616
sS'default'
p4617
S'0'
p4618
sS'name'
p4619
S'columnar_3D'
p4620
sS'required'
p4621
I00
sS'group_name'
p4622
Nsa(dp4623
S'description'
p4624
S'Number of grains being represented by the order parameters\n'
p4625
sS'cpp_type'
p4626
S'unsigned int'
p4627
sS'default'
p4628
g3
sS'name'
p4629
S'grain_num'
p4630
sS'required'
p4631
I01
sS'group_name'
p4632
Nsa(dp4633
S'description'
p4634
S'The index for the current order parameter\n'
p4635
sS'cpp_type'
p4636
S'unsigned int'
p4637
sS'default'
p4638
g3
sS'name'
p4639
S'op_index'
p4640
sS'required'
p4641
I01
sS'group_name'
p4642
Nsa(dp4643
S'description'
p4644
S'Number of order parameters\n'
p4645
sS'cpp_type'
p4646
S'unsigned int'
p4647
sS'default'
p4648
g3
sS'name'
p4649
S'op_num'
p4650
sS'required'
p4651
I01
sS'group_name'
p4652
Nsa(dp4653
S'description'
p4654
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p4655
sS'cpp_type'
p4656
S'double'
p4657
sS'default'
p4658
S'0'
p4659
sS'name'
p4660
S'perturbation_percent'
p4661
sS'required'
p4662
I00
sS'group_name'
p4663
Nsa(dp4664
S'description'
p4665
S'The random seed\n'
p4666
sS'cpp_type'
p4667
S'unsigned int'
p4668
sS'default'
p4669
S'12444'
p4670
sS'name'
p4671
S'rand_seed'
p4672
sS'required'
p4673
I00
sS'group_name'
p4674
Nsa(dp4675
S'description'
p4676
g3
sS'cpp_type'
p4677
S'int'
p4678
sS'default'
p4679
S'1'
p4680
sS'name'
p4681
S'typ'
p4682
sS'required'
p4683
I00
sS'group_name'
p4684
Nsa(dp4685
S'description'
p4686
g3
sS'cpp_type'
p4687
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4688
sS'default'
p4689
S'HexPolycrystalIC'
p4690
sS'name'
p4691
S'type'
p4692
sS'required'
p4693
I00
sS'group_name'
p4694
Nsa(dp4695
S'description'
p4696
S'The variable this initial condition is supposed to provide values for.\n'
p4697
sS'cpp_type'
p4698
S'VariableName'
p4699
sS'default'
p4700
g3
sS'name'
p4701
S'variable'
p4702
sS'required'
p4703
I01
sS'group_name'
p4704
Nsa(dp4705
S'description'
p4706
S'Specifies offset of hexagon grid in x-direction\n'
p4707
sS'cpp_type'
p4708
S'double'
p4709
sS'default'
p4710
S'0.5'
p4711
sS'name'
p4712
S'x_offset'
p4713
sS'required'
p4714
I00
sS'group_name'
p4715
NsasS'name'
p4716
S'/AuxVariables/*/InitialCondition/<type>/HexPolycrystalIC'
p4717
sa(dp4718
S'description'
p4719
S'Perturbed square lattice of smooth circles\n'
p4720
sS'subblocks'
p4721
NsS'parameters'
p4722
(lp4723
(dp4724
S'description'
p4725
S'in 3D, whether the objects are spheres or columns\n'
p4726
sS'cpp_type'
p4727
S'bool'
p4728
sS'default'
p4729
S'1'
p4730
sS'name'
p4731
S'3D_spheres'
p4732
sS'required'
p4733
I00
sS'group_name'
p4734
Nsa(dp4735
S'description'
p4736
S'Variation from central lattice position\n'
p4737
sS'cpp_type'
p4738
S'double'
p4739
sS'default'
p4740
S'0'
p4741
sS'name'
p4742
S'Rnd_variation'
p4743
sS'required'
p4744
I00
sS'group_name'
p4745
Nsa(dp4746
S'description'
p4747
S"Don't place any bubbles on the simulation cell boundaries\n"
p4748
sS'cpp_type'
p4749
S'bool'
p4750
sS'default'
p4751
S'1'
p4752
sS'name'
p4753
S'avoid_bounds'
p4754
sS'required'
p4755
I00
sS'group_name'
p4756
Nsa(dp4757
S'description'
p4758
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4759
sS'cpp_type'
p4760
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4761
sS'default'
p4762
g3
sS'name'
p4763
S'block'
p4764
sS'required'
p4765
I00
sS'group_name'
p4766
Nsa(dp4767
S'description'
p4768
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4769
sS'cpp_type'
p4770
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4771
sS'default'
p4772
g3
sS'name'
p4773
S'boundary'
p4774
sS'required'
p4775
I00
sS'group_name'
p4776
Nsa(dp4777
S'description'
p4778
S'Vector containing the number of bubbles along each side\n'
p4779
sS'cpp_type'
p4780
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p4781
sS'default'
p4782
g3
sS'name'
p4783
S'circles_per_side'
p4784
sS'required'
p4785
I01
sS'group_name'
p4786
Nsa(dp4787
S'description'
p4788
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p4789
sS'cpp_type'
p4790
S'double'
p4791
sS'default'
p4792
S'0'
p4793
sS'name'
p4794
S'int_width'
p4795
sS'required'
p4796
I00
sS'group_name'
p4797
Nsa(dp4798
S'description'
p4799
S'The variable value inside the circle\n'
p4800
sS'cpp_type'
p4801
S'double'
p4802
sS'default'
p4803
g3
sS'name'
p4804
S'invalue'
p4805
sS'required'
p4806
I01
sS'group_name'
p4807
Nsa(dp4808
S'description'
p4809
S'The variable value outside the circle\n'
p4810
sS'cpp_type'
p4811
S'double'
p4812
sS'default'
p4813
g3
sS'name'
p4814
S'outvalue'
p4815
sS'required'
p4816
I01
sS'group_name'
p4817
Nsa(dp4818
S'description'
p4819
S'Mean radius value for the circels\n'
p4820
sS'cpp_type'
p4821
S'double'
p4822
sS'default'
p4823
g3
sS'name'
p4824
S'radius'
p4825
sS'required'
p4826
I01
sS'group_name'
p4827
Nsa(dp4828
S'description'
p4829
S'Plus or minus fraction of random variation in the bubble radius\n'
p4830
sS'cpp_type'
p4831
S'double'
p4832
sS'default'
p4833
S'0'
p4834
sS'name'
p4835
S'radius_variation'
p4836
sS'required'
p4837
I00
sS'group_name'
p4838
Nsa(dp4839
S'name'
p4840
S'radius_variation_type'
p4841
sS'cpp_type'
p4842
S'MooseEnum'
p4843
sS'default'
p4844
S'none'
p4845
sS'description'
p4846
S'Type of distribution that random circle radii will follow\n'
p4847
sS'required'
p4848
I00
sS'options'
p4849
S'uniform normal none'
p4850
sS'group_name'
p4851
Nsa(dp4852
S'description'
p4853
S'random seed\n'
p4854
sS'cpp_type'
p4855
S'unsigned int'
p4856
sS'default'
p4857
S'2000'
p4858
sS'name'
p4859
S'rand_seed'
p4860
sS'required'
p4861
I00
sS'group_name'
p4862
Nsa(dp4863
S'description'
p4864
g3
sS'cpp_type'
p4865
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p4866
sS'default'
p4867
S'LatticeSmoothCircleIC'
p4868
sS'name'
p4869
S'type'
p4870
sS'required'
p4871
I00
sS'group_name'
p4872
Nsa(dp4873
S'description'
p4874
S'The variable this initial condition is supposed to provide values for.\n'
p4875
sS'cpp_type'
p4876
S'VariableName'
p4877
sS'default'
p4878
g3
sS'name'
p4879
S'variable'
p4880
sS'required'
p4881
I01
sS'group_name'
p4882
Nsa(dp4883
S'description'
p4884
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p4885
sS'cpp_type'
p4886
S'bool'
p4887
sS'default'
p4888
S'0'
p4889
sS'name'
p4890
S'zero_gradient'
p4891
sS'required'
p4892
I00
sS'group_name'
p4893
NsasS'name'
p4894
S'/AuxVariables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p4895
sa(dp4896
S'description'
p4897
S'Random distribution of smooth circles with given minimum spacing\n'
p4898
sS'subblocks'
p4899
NsS'parameters'
p4900
(lp4901
(dp4902
S'description'
p4903
S'in 3D, whether the objects are spheres or columns\n'
p4904
sS'cpp_type'
p4905
S'bool'
p4906
sS'default'
p4907
S'1'
p4908
sS'name'
p4909
S'3D_spheres'
p4910
sS'required'
p4911
I00
sS'group_name'
p4912
Nsa(dp4913
S'description'
p4914
S'The list of block ids (SubdomainID) that this object will be applied\n'
p4915
sS'cpp_type'
p4916
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p4917
sS'default'
p4918
g3
sS'name'
p4919
S'block'
p4920
sS'required'
p4921
I00
sS'group_name'
p4922
Nsa(dp4923
S'description'
p4924
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p4925
sS'cpp_type'
p4926
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p4927
sS'default'
p4928
g3
sS'name'
p4929
S'boundary'
p4930
sS'required'
p4931
I00
sS'group_name'
p4932
Nsa(dp4933
S'description'
p4934
S'minimum spacing of bubbles, measured from center to center\n'
p4935
sS'cpp_type'
p4936
S'double'
p4937
sS'default'
p4938
g3
sS'name'
p4939
S'bubspac'
p4940
sS'required'
p4941
I01
sS'group_name'
p4942
Nsa(dp4943
S'description'
p4944
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p4945
sS'cpp_type'
p4946
S'double'
p4947
sS'default'
p4948
S'0'
p4949
sS'name'
p4950
S'int_width'
p4951
sS'required'
p4952
I00
sS'group_name'
p4953
Nsa(dp4954
S'description'
p4955
S'The variable value inside the circle\n'
p4956
sS'cpp_type'
p4957
S'double'
p4958
sS'default'
p4959
g3
sS'name'
p4960
S'invalue'
p4961
sS'required'
p4962
I01
sS'group_name'
p4963
Nsa(dp4964
S'description'
p4965
S'The number of bubbles to place\n'
p4966
sS'cpp_type'
p4967
S'unsigned int'
p4968
sS'default'
p4969
g3
sS'name'
p4970
S'numbub'
p4971
sS'required'
p4972
I01
sS'group_name'
p4973
Nsa(dp4974
S'description'
p4975
S'The number of tries\n'
p4976
sS'cpp_type'
p4977
S'unsigned int'
p4978
sS'default'
p4979
S'1000'
p4980
sS'name'
p4981
S'numtries'
p4982
sS'required'
p4983
I00
sS'group_name'
p4984
Nsa(dp4985
S'description'
p4986
S'The variable value outside the circle\n'
p4987
sS'cpp_type'
p4988
S'double'
p4989
sS'default'
p4990
g3
sS'name'
p4991
S'outvalue'
p4992
sS'required'
p4993
I01
sS'group_name'
p4994
Nsa(dp4995
S'description'
p4996
S'Mean radius value for the circels\n'
p4997
sS'cpp_type'
p4998
S'double'
p4999
sS'default'
p5000
g3
sS'name'
p5001
S'radius'
p5002
sS'required'
p5003
I01
sS'group_name'
p5004
Nsa(dp5005
S'description'
p5006
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p5007
sS'cpp_type'
p5008
S'double'
p5009
sS'default'
p5010
S'0'
p5011
sS'name'
p5012
S'radius_variation'
p5013
sS'required'
p5014
I00
sS'group_name'
p5015
Nsa(dp5016
S'name'
p5017
S'radius_variation_type'
p5018
sS'cpp_type'
p5019
S'MooseEnum'
p5020
sS'default'
p5021
S'none'
p5022
sS'description'
p5023
S'Type of distribution that random circle radii will follow\n'
p5024
sS'required'
p5025
I00
sS'options'
p5026
S'uniform normal none'
p5027
sS'group_name'
p5028
Nsa(dp5029
S'description'
p5030
S'random seed\n'
p5031
sS'cpp_type'
p5032
S'unsigned int'
p5033
sS'default'
p5034
S'2000'
p5035
sS'name'
p5036
S'rand_seed'
p5037
sS'required'
p5038
I00
sS'group_name'
p5039
Nsa(dp5040
S'description'
p5041
g3
sS'cpp_type'
p5042
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5043
sS'default'
p5044
S'MultiSmoothCircleIC'
p5045
sS'name'
p5046
S'type'
p5047
sS'required'
p5048
I00
sS'group_name'
p5049
Nsa(dp5050
S'description'
p5051
S'The variable this initial condition is supposed to provide values for.\n'
p5052
sS'cpp_type'
p5053
S'VariableName'
p5054
sS'default'
p5055
g3
sS'name'
p5056
S'variable'
p5057
sS'required'
p5058
I01
sS'group_name'
p5059
Nsa(dp5060
S'description'
p5061
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p5062
sS'cpp_type'
p5063
S'bool'
p5064
sS'default'
p5065
S'0'
p5066
sS'name'
p5067
S'zero_gradient'
p5068
sS'required'
p5069
I00
sS'group_name'
p5070
NsasS'name'
p5071
S'/AuxVariables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p5072
sa(dp5073
S'description'
p5074
g3
sS'subblocks'
p5075
NsS'parameters'
p5076
(lp5077
(dp5078
S'description'
p5079
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5080
sS'cpp_type'
p5081
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5082
sS'default'
p5083
g3
sS'name'
p5084
S'block'
p5085
sS'required'
p5086
I00
sS'group_name'
p5087
Nsa(dp5088
S'description'
p5089
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5090
sS'cpp_type'
p5091
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5092
sS'default'
p5093
g3
sS'name'
p5094
S'boundary'
p5095
sS'required'
p5096
I00
sS'group_name'
p5097
Nsa(dp5098
S'description'
p5099
S'The index for the current order parameter\n'
p5100
sS'cpp_type'
p5101
S'unsigned int'
p5102
sS'default'
p5103
g3
sS'name'
p5104
S'op_index'
p5105
sS'required'
p5106
I01
sS'group_name'
p5107
Nsa(dp5108
S'description'
p5109
S'Number of order parameters\n'
p5110
sS'cpp_type'
p5111
S'unsigned int'
p5112
sS'default'
p5113
g3
sS'name'
p5114
S'op_num'
p5115
sS'required'
p5116
I01
sS'group_name'
p5117
Nsa(dp5118
S'description'
p5119
S'Type of random grain structure\n'
p5120
sS'cpp_type'
p5121
S'unsigned int'
p5122
sS'default'
p5123
g3
sS'name'
p5124
S'typ'
p5125
sS'required'
p5126
I01
sS'group_name'
p5127
Nsa(dp5128
S'description'
p5129
g3
sS'cpp_type'
p5130
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5131
sS'default'
p5132
S'PolycrystalRandomIC'
p5133
sS'name'
p5134
S'type'
p5135
sS'required'
p5136
I00
sS'group_name'
p5137
Nsa(dp5138
S'description'
p5139
S'The variable this initial condition is supposed to provide values for.\n'
p5140
sS'cpp_type'
p5141
S'VariableName'
p5142
sS'default'
p5143
g3
sS'name'
p5144
S'variable'
p5145
sS'required'
p5146
I01
sS'group_name'
p5147
NsasS'name'
p5148
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalRandomIC'
p5149
sa(dp5150
S'description'
p5151
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p5152
sS'subblocks'
p5153
NsS'parameters'
p5154
(lp5155
(dp5156
S'description'
p5157
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5158
sS'cpp_type'
p5159
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5160
sS'default'
p5161
g3
sS'name'
p5162
S'block'
p5163
sS'required'
p5164
I00
sS'group_name'
p5165
Nsa(dp5166
S'description'
p5167
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5168
sS'cpp_type'
p5169
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5170
sS'default'
p5171
g3
sS'name'
p5172
S'boundary'
p5173
sS'required'
p5174
I00
sS'group_name'
p5175
Nsa(dp5176
S'description'
p5177
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p5178
sS'cpp_type'
p5179
S'bool'
p5180
sS'default'
p5181
S'0'
p5182
sS'name'
p5183
S'cody_test'
p5184
sS'required'
p5185
I00
sS'group_name'
p5186
Nsa(dp5187
S'description'
p5188
S'3D microstructure will be columnar in the z-direction?\n'
p5189
sS'cpp_type'
p5190
S'bool'
p5191
sS'default'
p5192
S'0'
p5193
sS'name'
p5194
S'columnar_3D'
p5195
sS'required'
p5196
I00
sS'group_name'
p5197
Nsa(dp5198
S'description'
p5199
S'Number of grains being represented by the order parameters\n'
p5200
sS'cpp_type'
p5201
S'unsigned int'
p5202
sS'default'
p5203
g3
sS'name'
p5204
S'grain_num'
p5205
sS'required'
p5206
I01
sS'group_name'
p5207
Nsa(dp5208
S'description'
p5209
S'The index for the current order parameter\n'
p5210
sS'cpp_type'
p5211
S'unsigned int'
p5212
sS'default'
p5213
g3
sS'name'
p5214
S'op_index'
p5215
sS'required'
p5216
I01
sS'group_name'
p5217
Nsa(dp5218
S'description'
p5219
S'Number of order parameters\n'
p5220
sS'cpp_type'
p5221
S'unsigned int'
p5222
sS'default'
p5223
g3
sS'name'
p5224
S'op_num'
p5225
sS'required'
p5226
I01
sS'group_name'
p5227
Nsa(dp5228
S'description'
p5229
S'The random seed\n'
p5230
sS'cpp_type'
p5231
S'unsigned int'
p5232
sS'default'
p5233
S'12444'
p5234
sS'name'
p5235
S'rand_seed'
p5236
sS'required'
p5237
I00
sS'group_name'
p5238
Nsa(dp5239
S'description'
p5240
g3
sS'cpp_type'
p5241
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5242
sS'default'
p5243
S'PolycrystalReducedIC'
p5244
sS'name'
p5245
S'type'
p5246
sS'required'
p5247
I00
sS'group_name'
p5248
Nsa(dp5249
S'description'
p5250
S'The variable this initial condition is supposed to provide values for.\n'
p5251
sS'cpp_type'
p5252
S'VariableName'
p5253
sS'default'
p5254
g3
sS'name'
p5255
S'variable'
p5256
sS'required'
p5257
I01
sS'group_name'
p5258
NsasS'name'
p5259
S'/AuxVariables/*/InitialCondition/<type>/PolycrystalReducedIC'
p5260
sa(dp5261
S'description'
p5262
g3
sS'subblocks'
p5263
NsS'parameters'
p5264
(lp5265
(dp5266
S'description'
p5267
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5268
sS'cpp_type'
p5269
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5270
sS'default'
p5271
g3
sS'name'
p5272
S'block'
p5273
sS'required'
p5274
I00
sS'group_name'
p5275
Nsa(dp5276
S'description'
p5277
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5278
sS'cpp_type'
p5279
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5280
sS'default'
p5281
g3
sS'name'
p5282
S'boundary'
p5283
sS'required'
p5284
I00
sS'group_name'
p5285
Nsa(dp5286
S'description'
p5287
S'Upper bound of the randomly generated values\n'
p5288
sS'cpp_type'
p5289
S'double'
p5290
sS'default'
p5291
S'1'
p5292
sS'name'
p5293
S'max'
p5294
sS'required'
p5295
I00
sS'group_name'
p5296
Nsa(dp5297
S'description'
p5298
S'Lower bound of the randomly generated values\n'
p5299
sS'cpp_type'
p5300
S'double'
p5301
sS'default'
p5302
S'0'
p5303
sS'name'
p5304
S'min'
p5305
sS'required'
p5306
I00
sS'group_name'
p5307
Nsa(dp5308
S'description'
p5309
S'Seed value for the random number generator\n'
p5310
sS'cpp_type'
p5311
S'unsigned int'
p5312
sS'default'
p5313
S'0'
p5314
sS'name'
p5315
S'seed'
p5316
sS'required'
p5317
I00
sS'group_name'
p5318
Nsa(dp5319
S'description'
p5320
g3
sS'cpp_type'
p5321
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5322
sS'default'
p5323
S'RandomIC'
p5324
sS'name'
p5325
S'type'
p5326
sS'required'
p5327
I00
sS'group_name'
p5328
Nsa(dp5329
S'description'
p5330
S'The variable this initial condition is supposed to provide values for.\n'
p5331
sS'cpp_type'
p5332
S'VariableName'
p5333
sS'default'
p5334
g3
sS'name'
p5335
S'variable'
p5336
sS'required'
p5337
I01
sS'group_name'
p5338
NsasS'name'
p5339
S'/AuxVariables/*/InitialCondition/<type>/RandomIC'
p5340
sa(dp5341
S'description'
p5342
S'Random noise with different min/max inside/outside of a bounding box\n'
p5343
sS'subblocks'
p5344
NsS'parameters'
p5345
(lp5346
(dp5347
S'description'
p5348
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5349
sS'cpp_type'
p5350
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5351
sS'default'
p5352
g3
sS'name'
p5353
S'block'
p5354
sS'required'
p5355
I00
sS'group_name'
p5356
Nsa(dp5357
S'description'
p5358
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5359
sS'cpp_type'
p5360
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5361
sS'default'
p5362
g3
sS'name'
p5363
S'boundary'
p5364
sS'required'
p5365
I00
sS'group_name'
p5366
Nsa(dp5367
S'description'
p5368
S'The min value of the variable invalue the box\n'
p5369
sS'cpp_type'
p5370
S'double'
p5371
sS'default'
p5372
S'0'
p5373
sS'name'
p5374
S'mn_invalue'
p5375
sS'required'
p5376
I00
sS'group_name'
p5377
Nsa(dp5378
S'description'
p5379
S'The min value of the variable outvalue the box\n'
p5380
sS'cpp_type'
p5381
S'double'
p5382
sS'default'
p5383
S'0'
p5384
sS'name'
p5385
S'mn_outvalue'
p5386
sS'required'
p5387
I00
sS'group_name'
p5388
Nsa(dp5389
S'description'
p5390
S'The max value of the variable invalue the box\n'
p5391
sS'cpp_type'
p5392
S'double'
p5393
sS'default'
p5394
g3
sS'name'
p5395
S'mx_invalue'
p5396
sS'required'
p5397
I01
sS'group_name'
p5398
Nsa(dp5399
S'description'
p5400
S'The max value of the variable outvalue the box\n'
p5401
sS'cpp_type'
p5402
S'double'
p5403
sS'default'
p5404
g3
sS'name'
p5405
S'mx_outvalue'
p5406
sS'required'
p5407
I01
sS'group_name'
p5408
Nsa(dp5409
S'description'
p5410
g3
sS'cpp_type'
p5411
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5412
sS'default'
p5413
S'RndBoundingBoxIC'
p5414
sS'name'
p5415
S'type'
p5416
sS'required'
p5417
I00
sS'group_name'
p5418
Nsa(dp5419
S'description'
p5420
S'The variable this initial condition is supposed to provide values for.\n'
p5421
sS'cpp_type'
p5422
S'VariableName'
p5423
sS'default'
p5424
g3
sS'name'
p5425
S'variable'
p5426
sS'required'
p5427
I01
sS'group_name'
p5428
Nsa(dp5429
S'description'
p5430
S'The x coordinate of the lower left-hand corner of the box\n'
p5431
sS'cpp_type'
p5432
S'double'
p5433
sS'default'
p5434
g3
sS'name'
p5435
S'x1'
p5436
sS'required'
p5437
I01
sS'group_name'
p5438
Nsa(dp5439
S'description'
p5440
S'The x coordinate of the upper right-hand corner of the box\n'
p5441
sS'cpp_type'
p5442
S'double'
p5443
sS'default'
p5444
g3
sS'name'
p5445
S'x2'
p5446
sS'required'
p5447
I01
sS'group_name'
p5448
Nsa(dp5449
S'description'
p5450
S'The y coordinate of the lower left-hand corner of the box\n'
p5451
sS'cpp_type'
p5452
S'double'
p5453
sS'default'
p5454
g3
sS'name'
p5455
S'y1'
p5456
sS'required'
p5457
I01
sS'group_name'
p5458
Nsa(dp5459
S'description'
p5460
S'The y coordinate of the upper right-hand corner of the box\n'
p5461
sS'cpp_type'
p5462
S'double'
p5463
sS'default'
p5464
g3
sS'name'
p5465
S'y2'
p5466
sS'required'
p5467
I01
sS'group_name'
p5468
Nsa(dp5469
S'description'
p5470
S'The z coordinate of the lower left-hand corner of the box\n'
p5471
sS'cpp_type'
p5472
S'double'
p5473
sS'default'
p5474
S'0'
p5475
sS'name'
p5476
S'z1'
p5477
sS'required'
p5478
I00
sS'group_name'
p5479
Nsa(dp5480
S'description'
p5481
S'The z coordinate of the upper right-hand corner of the box\n'
p5482
sS'cpp_type'
p5483
S'double'
p5484
sS'default'
p5485
S'0'
p5486
sS'name'
p5487
S'z2'
p5488
sS'required'
p5489
I00
sS'group_name'
p5490
NsasS'name'
p5491
S'/AuxVariables/*/InitialCondition/<type>/RndBoundingBoxIC'
p5492
sa(dp5493
S'description'
p5494
S'Random noise with different min/max inside/outside of a smooth circle\n'
p5495
sS'subblocks'
p5496
NsS'parameters'
p5497
(lp5498
(dp5499
S'description'
p5500
S'in 3D, whether the objects are spheres or columns\n'
p5501
sS'cpp_type'
p5502
S'bool'
p5503
sS'default'
p5504
S'1'
p5505
sS'name'
p5506
S'3D_spheres'
p5507
sS'required'
p5508
I00
sS'group_name'
p5509
Nsa(dp5510
S'description'
p5511
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5512
sS'cpp_type'
p5513
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5514
sS'default'
p5515
g3
sS'name'
p5516
S'block'
p5517
sS'required'
p5518
I00
sS'group_name'
p5519
Nsa(dp5520
S'description'
p5521
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5522
sS'cpp_type'
p5523
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5524
sS'default'
p5525
g3
sS'name'
p5526
S'boundary'
p5527
sS'required'
p5528
I00
sS'group_name'
p5529
Nsa(dp5530
S'description'
p5531
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p5532
sS'cpp_type'
p5533
S'double'
p5534
sS'default'
p5535
S'0'
p5536
sS'name'
p5537
S'int_width'
p5538
sS'required'
p5539
I00
sS'group_name'
p5540
Nsa(dp5541
S'description'
p5542
S'The variable value inside the circle\n'
p5543
sS'cpp_type'
p5544
S'double'
p5545
sS'default'
p5546
g3
sS'name'
p5547
S'invalue'
p5548
sS'required'
p5549
I01
sS'group_name'
p5550
Nsa(dp5551
S'description'
p5552
S'The variable value outside the circle\n'
p5553
sS'cpp_type'
p5554
S'double'
p5555
sS'default'
p5556
g3
sS'name'
p5557
S'outvalue'
p5558
sS'required'
p5559
I01
sS'group_name'
p5560
Nsa(dp5561
S'description'
p5562
S'The radius of a circle\n'
p5563
sS'cpp_type'
p5564
S'double'
p5565
sS'default'
p5566
g3
sS'name'
p5567
S'radius'
p5568
sS'required'
p5569
I01
sS'group_name'
p5570
Nsa(dp5571
S'description'
p5572
S'Seed value for the random number generator\n'
p5573
sS'cpp_type'
p5574
S'unsigned int'
p5575
sS'default'
p5576
S'12345'
p5577
sS'name'
p5578
S'rand_seed'
p5579
sS'required'
p5580
I00
sS'group_name'
p5581
Nsa(dp5582
S'description'
p5583
g3
sS'cpp_type'
p5584
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5585
sS'default'
p5586
S'RndSmoothCircleIC'
p5587
sS'name'
p5588
S'type'
p5589
sS'required'
p5590
I00
sS'group_name'
p5591
Nsa(dp5592
S'description'
p5593
S'The variable this initial condition is supposed to provide values for.\n'
p5594
sS'cpp_type'
p5595
S'VariableName'
p5596
sS'default'
p5597
g3
sS'name'
p5598
S'variable'
p5599
sS'required'
p5600
I01
sS'group_name'
p5601
Nsa(dp5602
S'description'
p5603
S'Plus or minus this amount on the invalue\n'
p5604
sS'cpp_type'
p5605
S'double'
p5606
sS'default'
p5607
g3
sS'name'
p5608
S'variation_invalue'
p5609
sS'required'
p5610
I01
sS'group_name'
p5611
Nsa(dp5612
S'description'
p5613
S'Plus or minus this amount on the outvalue\n'
p5614
sS'cpp_type'
p5615
S'double'
p5616
sS'default'
p5617
g3
sS'name'
p5618
S'variation_outvalue'
p5619
sS'required'
p5620
I01
sS'group_name'
p5621
Nsa(dp5622
S'description'
p5623
S'The x coordinate of the circle center\n'
p5624
sS'cpp_type'
p5625
S'double'
p5626
sS'default'
p5627
g3
sS'name'
p5628
S'x1'
p5629
sS'required'
p5630
I01
sS'group_name'
p5631
Nsa(dp5632
S'description'
p5633
S'The y coordinate of the circle center\n'
p5634
sS'cpp_type'
p5635
S'double'
p5636
sS'default'
p5637
g3
sS'name'
p5638
S'y1'
p5639
sS'required'
p5640
I01
sS'group_name'
p5641
Nsa(dp5642
S'description'
p5643
S'The z coordinate of the circle center\n'
p5644
sS'cpp_type'
p5645
S'double'
p5646
sS'default'
p5647
S'0'
p5648
sS'name'
p5649
S'z1'
p5650
sS'required'
p5651
I00
sS'group_name'
p5652
Nsa(dp5653
S'description'
p5654
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p5655
sS'cpp_type'
p5656
S'bool'
p5657
sS'default'
p5658
S'0'
p5659
sS'name'
p5660
S'zero_gradient'
p5661
sS'required'
p5662
I00
sS'group_name'
p5663
NsasS'name'
p5664
S'/AuxVariables/*/InitialCondition/<type>/RndSmoothCircleIC'
p5665
sa(dp5666
S'description'
p5667
g3
sS'subblocks'
p5668
NsS'parameters'
p5669
(lp5670
(dp5671
S'description'
p5672
g3
sS'cpp_type'
p5673
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5674
sS'default'
p5675
S'ScalarComponentIC'
p5676
sS'name'
p5677
S'type'
p5678
sS'required'
p5679
I00
sS'group_name'
p5680
Nsa(dp5681
S'description'
p5682
S'Initial values to initialize the scalar variable.\n'
p5683
sS'cpp_type'
p5684
S'std::__1::vector<double, std::__1::allocator<double> >'
p5685
sS'default'
p5686
g3
sS'name'
p5687
S'values'
p5688
sS'required'
p5689
I01
sS'group_name'
p5690
Nsa(dp5691
S'description'
p5692
S'The variable this initial condition is supposed to provide values for.\n'
p5693
sS'cpp_type'
p5694
S'VariableName'
p5695
sS'default'
p5696
g3
sS'name'
p5697
S'variable'
p5698
sS'required'
p5699
I00
sS'group_name'
p5700
NsasS'name'
p5701
S'/AuxVariables/*/InitialCondition/<type>/ScalarComponentIC'
p5702
sa(dp5703
S'description'
p5704
g3
sS'subblocks'
p5705
NsS'parameters'
p5706
(lp5707
(dp5708
S'description'
p5709
g3
sS'cpp_type'
p5710
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5711
sS'default'
p5712
S'ScalarConstantIC'
p5713
sS'name'
p5714
S'type'
p5715
sS'required'
p5716
I00
sS'group_name'
p5717
Nsa(dp5718
S'description'
p5719
g3
sS'cpp_type'
p5720
S'double'
p5721
sS'default'
p5722
S'0'
p5723
sS'name'
p5724
S'value'
p5725
sS'required'
p5726
I00
sS'group_name'
p5727
Nsa(dp5728
S'description'
p5729
S'The variable this initial condition is supposed to provide values for.\n'
p5730
sS'cpp_type'
p5731
S'VariableName'
p5732
sS'default'
p5733
g3
sS'name'
p5734
S'variable'
p5735
sS'required'
p5736
I00
sS'group_name'
p5737
NsasS'name'
p5738
S'/AuxVariables/*/InitialCondition/<type>/ScalarConstantIC'
p5739
sa(dp5740
S'description'
p5741
S'Circle with a smooth interface\n'
p5742
sS'subblocks'
p5743
NsS'parameters'
p5744
(lp5745
(dp5746
S'description'
p5747
S'in 3D, whether the objects are spheres or columns\n'
p5748
sS'cpp_type'
p5749
S'bool'
p5750
sS'default'
p5751
S'1'
p5752
sS'name'
p5753
S'3D_spheres'
p5754
sS'required'
p5755
I00
sS'group_name'
p5756
Nsa(dp5757
S'description'
p5758
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5759
sS'cpp_type'
p5760
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5761
sS'default'
p5762
g3
sS'name'
p5763
S'block'
p5764
sS'required'
p5765
I00
sS'group_name'
p5766
Nsa(dp5767
S'description'
p5768
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5769
sS'cpp_type'
p5770
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5771
sS'default'
p5772
g3
sS'name'
p5773
S'boundary'
p5774
sS'required'
p5775
I00
sS'group_name'
p5776
Nsa(dp5777
S'description'
p5778
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p5779
sS'cpp_type'
p5780
S'double'
p5781
sS'default'
p5782
S'0'
p5783
sS'name'
p5784
S'int_width'
p5785
sS'required'
p5786
I00
sS'group_name'
p5787
Nsa(dp5788
S'description'
p5789
S'The variable value inside the circle\n'
p5790
sS'cpp_type'
p5791
S'double'
p5792
sS'default'
p5793
g3
sS'name'
p5794
S'invalue'
p5795
sS'required'
p5796
I01
sS'group_name'
p5797
Nsa(dp5798
S'description'
p5799
S'The variable value outside the circle\n'
p5800
sS'cpp_type'
p5801
S'double'
p5802
sS'default'
p5803
g3
sS'name'
p5804
S'outvalue'
p5805
sS'required'
p5806
I01
sS'group_name'
p5807
Nsa(dp5808
S'description'
p5809
S'The radius of a circle\n'
p5810
sS'cpp_type'
p5811
S'double'
p5812
sS'default'
p5813
g3
sS'name'
p5814
S'radius'
p5815
sS'required'
p5816
I01
sS'group_name'
p5817
Nsa(dp5818
S'description'
p5819
g3
sS'cpp_type'
p5820
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5821
sS'default'
p5822
S'SmoothCircleIC'
p5823
sS'name'
p5824
S'type'
p5825
sS'required'
p5826
I00
sS'group_name'
p5827
Nsa(dp5828
S'description'
p5829
S'The variable this initial condition is supposed to provide values for.\n'
p5830
sS'cpp_type'
p5831
S'VariableName'
p5832
sS'default'
p5833
g3
sS'name'
p5834
S'variable'
p5835
sS'required'
p5836
I01
sS'group_name'
p5837
Nsa(dp5838
S'description'
p5839
S'The x coordinate of the circle center\n'
p5840
sS'cpp_type'
p5841
S'double'
p5842
sS'default'
p5843
g3
sS'name'
p5844
S'x1'
p5845
sS'required'
p5846
I01
sS'group_name'
p5847
Nsa(dp5848
S'description'
p5849
S'The y coordinate of the circle center\n'
p5850
sS'cpp_type'
p5851
S'double'
p5852
sS'default'
p5853
g3
sS'name'
p5854
S'y1'
p5855
sS'required'
p5856
I01
sS'group_name'
p5857
Nsa(dp5858
S'description'
p5859
S'The z coordinate of the circle center\n'
p5860
sS'cpp_type'
p5861
S'double'
p5862
sS'default'
p5863
S'0'
p5864
sS'name'
p5865
S'z1'
p5866
sS'required'
p5867
I00
sS'group_name'
p5868
Nsa(dp5869
S'description'
p5870
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p5871
sS'cpp_type'
p5872
S'bool'
p5873
sS'default'
p5874
S'0'
p5875
sS'name'
p5876
S'zero_gradient'
p5877
sS'required'
p5878
I00
sS'group_name'
p5879
NsasS'name'
p5880
S'/AuxVariables/*/InitialCondition/<type>/SmoothCircleIC'
p5881
sa(dp5882
S'description'
p5883
S'Multiple smooth circles with manually specified radii and center points\n'
p5884
sS'subblocks'
p5885
NsS'parameters'
p5886
(lp5887
(dp5888
S'description'
p5889
S'in 3D, whether the objects are spheres or columns\n'
p5890
sS'cpp_type'
p5891
S'bool'
p5892
sS'default'
p5893
S'1'
p5894
sS'name'
p5895
S'3D_spheres'
p5896
sS'required'
p5897
I00
sS'group_name'
p5898
Nsa(dp5899
S'description'
p5900
S'The list of block ids (SubdomainID) that this object will be applied\n'
p5901
sS'cpp_type'
p5902
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p5903
sS'default'
p5904
g3
sS'name'
p5905
S'block'
p5906
sS'required'
p5907
I00
sS'group_name'
p5908
Nsa(dp5909
S'description'
p5910
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p5911
sS'cpp_type'
p5912
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p5913
sS'default'
p5914
g3
sS'name'
p5915
S'boundary'
p5916
sS'required'
p5917
I00
sS'group_name'
p5918
Nsa(dp5919
S'description'
p5920
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p5921
sS'cpp_type'
p5922
S'double'
p5923
sS'default'
p5924
S'0'
p5925
sS'name'
p5926
S'int_width'
p5927
sS'required'
p5928
I00
sS'group_name'
p5929
Nsa(dp5930
S'description'
p5931
S'The variable value inside the circle\n'
p5932
sS'cpp_type'
p5933
S'double'
p5934
sS'default'
p5935
g3
sS'name'
p5936
S'invalue'
p5937
sS'required'
p5938
I01
sS'group_name'
p5939
Nsa(dp5940
S'description'
p5941
S'The variable value outside the circle\n'
p5942
sS'cpp_type'
p5943
S'double'
p5944
sS'default'
p5945
g3
sS'name'
p5946
S'outvalue'
p5947
sS'required'
p5948
I01
sS'group_name'
p5949
Nsa(dp5950
S'description'
p5951
S'The radius for each circle\n'
p5952
sS'cpp_type'
p5953
S'std::__1::vector<double, std::__1::allocator<double> >'
p5954
sS'default'
p5955
g3
sS'name'
p5956
S'radii'
p5957
sS'required'
p5958
I01
sS'group_name'
p5959
Nsa(dp5960
S'description'
p5961
g3
sS'cpp_type'
p5962
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p5963
sS'default'
p5964
S'SpecifiedSmoothCircleIC'
p5965
sS'name'
p5966
S'type'
p5967
sS'required'
p5968
I00
sS'group_name'
p5969
Nsa(dp5970
S'description'
p5971
S'The variable this initial condition is supposed to provide values for.\n'
p5972
sS'cpp_type'
p5973
S'VariableName'
p5974
sS'default'
p5975
g3
sS'name'
p5976
S'variable'
p5977
sS'required'
p5978
I01
sS'group_name'
p5979
Nsa(dp5980
S'description'
p5981
S'The x-coordinate for each circle center\n'
p5982
sS'cpp_type'
p5983
S'std::__1::vector<double, std::__1::allocator<double> >'
p5984
sS'default'
p5985
g3
sS'name'
p5986
S'x_positions'
p5987
sS'required'
p5988
I01
sS'group_name'
p5989
Nsa(dp5990
S'description'
p5991
S'The y-coordinate for each circle center\n'
p5992
sS'cpp_type'
p5993
S'std::__1::vector<double, std::__1::allocator<double> >'
p5994
sS'default'
p5995
g3
sS'name'
p5996
S'y_positions'
p5997
sS'required'
p5998
I01
sS'group_name'
p5999
Nsa(dp6000
S'description'
p6001
S'The z-coordinate for each circle center\n'
p6002
sS'cpp_type'
p6003
S'std::__1::vector<double, std::__1::allocator<double> >'
p6004
sS'default'
p6005
g3
sS'name'
p6006
S'z_positions'
p6007
sS'required'
p6008
I01
sS'group_name'
p6009
Nsa(dp6010
S'description'
p6011
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p6012
sS'cpp_type'
p6013
S'bool'
p6014
sS'default'
p6015
S'0'
p6016
sS'name'
p6017
S'zero_gradient'
p6018
sS'required'
p6019
I00
sS'group_name'
p6020
NsasS'name'
p6021
S'/AuxVariables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p6022
sa(dp6023
S'description'
p6024
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p6025
sS'subblocks'
p6026
NsS'parameters'
p6027
(lp6028
(dp6029
S'description'
p6030
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6031
sS'cpp_type'
p6032
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6033
sS'default'
p6034
g3
sS'name'
p6035
S'block'
p6036
sS'required'
p6037
I00
sS'group_name'
p6038
Nsa(dp6039
S'description'
p6040
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6041
sS'cpp_type'
p6042
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6043
sS'default'
p6044
g3
sS'name'
p6045
S'boundary'
p6046
sS'required'
p6047
I00
sS'group_name'
p6048
Nsa(dp6049
S'description'
p6050
S'The z coordinate of the circle center\n'
p6051
sS'cpp_type'
p6052
S'double'
p6053
sS'default'
p6054
g3
sS'name'
p6055
S'height'
p6056
sS'required'
p6057
I01
sS'group_name'
p6058
Nsa(dp6059
S'description'
p6060
S'The variable value inside the circle\n'
p6061
sS'cpp_type'
p6062
S'double'
p6063
sS'default'
p6064
g3
sS'name'
p6065
S'invalue'
p6066
sS'required'
p6067
I01
sS'group_name'
p6068
Nsa(dp6069
S'description'
p6070
S'The variable value outside the circle\n'
p6071
sS'cpp_type'
p6072
S'double'
p6073
sS'default'
p6074
g3
sS'name'
p6075
S'outvalue'
p6076
sS'required'
p6077
I01
sS'group_name'
p6078
Nsa(dp6079
S'description'
p6080
g3
sS'cpp_type'
p6081
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6082
sS'default'
p6083
S'ThumbIC'
p6084
sS'name'
p6085
S'type'
p6086
sS'required'
p6087
I00
sS'group_name'
p6088
Nsa(dp6089
S'description'
p6090
S'The variable this initial condition is supposed to provide values for.\n'
p6091
sS'cpp_type'
p6092
S'VariableName'
p6093
sS'default'
p6094
g3
sS'name'
p6095
S'variable'
p6096
sS'required'
p6097
I01
sS'group_name'
p6098
Nsa(dp6099
S'description'
p6100
S'The y coordinate of the circle center\n'
p6101
sS'cpp_type'
p6102
S'double'
p6103
sS'default'
p6104
g3
sS'name'
p6105
S'width'
p6106
sS'required'
p6107
I01
sS'group_name'
p6108
Nsa(dp6109
S'description'
p6110
S'The x coordinate of the circle center\n'
p6111
sS'cpp_type'
p6112
S'double'
p6113
sS'default'
p6114
g3
sS'name'
p6115
S'xcoord'
p6116
sS'required'
p6117
I01
sS'group_name'
p6118
NsasS'name'
p6119
S'/AuxVariables/*/InitialCondition/<type>/ThumbIC'
p6120
sa(dp6121
S'description'
p6122
S'Tricrystal with two circles/bubbles\n'
p6123
sS'subblocks'
p6124
NsS'parameters'
p6125
(lp6126
(dp6127
S'description'
p6128
S'The list of block ids (SubdomainID) that this object will be applied\n'
p6129
sS'cpp_type'
p6130
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6131
sS'default'
p6132
g3
sS'name'
p6133
S'block'
p6134
sS'required'
p6135
I00
sS'group_name'
p6136
Nsa(dp6137
S'description'
p6138
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6139
sS'cpp_type'
p6140
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6141
sS'default'
p6142
g3
sS'name'
p6143
S'boundary'
p6144
sS'required'
p6145
I00
sS'group_name'
p6146
Nsa(dp6147
S'description'
p6148
S'Index for the current grain order parameter\n'
p6149
sS'cpp_type'
p6150
S'unsigned int'
p6151
sS'default'
p6152
g3
sS'name'
p6153
S'op_index'
p6154
sS'required'
p6155
I01
sS'group_name'
p6156
Nsa(dp6157
S'description'
p6158
S'Number of grain order parameters\n'
p6159
sS'cpp_type'
p6160
S'unsigned int'
p6161
sS'default'
p6162
g3
sS'name'
p6163
S'op_num'
p6164
sS'required'
p6165
I01
sS'group_name'
p6166
Nsa(dp6167
S'description'
p6168
g3
sS'cpp_type'
p6169
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6170
sS'default'
p6171
S'Tricrystal2CircleGrainsIC'
p6172
sS'name'
p6173
S'type'
p6174
sS'required'
p6175
I00
sS'group_name'
p6176
Nsa(dp6177
S'description'
p6178
S'The variable this initial condition is supposed to provide values for.\n'
p6179
sS'cpp_type'
p6180
S'VariableName'
p6181
sS'default'
p6182
g3
sS'name'
p6183
S'variable'
p6184
sS'required'
p6185
I01
sS'group_name'
p6186
NsasS'name'
p6187
S'/AuxVariables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p6188
sasS'parameters'
p6189
NsS'name'
p6190
S'/AuxVariables/*/InitialCondition/<type>'
p6191
sasS'parameters'
p6192
(lp6193
(dp6194
S'description'
p6195
S'A string representing the Moose Object that will be built by this Action\n'
p6196
sS'cpp_type'
p6197
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6198
sS'default'
p6199
g3
sS'name'
p6200
S'type'
p6201
sS'required'
p6202
I01
sS'group_name'
p6203
NsasS'name'
p6204
S'/AuxVariables/*/InitialCondition'
p6205
sasS'parameters'
p6206
(lp6207
(dp6208
S'description'
p6209
S'The block id where this variable lives\n'
p6210
sS'cpp_type'
p6211
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p6212
sS'default'
p6213
g3
sS'name'
p6214
S'block'
p6215
sS'required'
p6216
I00
sS'group_name'
p6217
Nsa(dp6218
S'name'
p6219
S'family'
p6220
sS'cpp_type'
p6221
S'MooseEnum'
p6222
sS'default'
p6223
S'LAGRANGE'
p6224
sS'description'
p6225
S'Specifies the family of FE shape functions to use for this variable\n'
p6226
sS'required'
p6227
I00
sS'options'
p6228
S'LAGRANGE MONOMIAL SCALAR'
p6229
sS'group_name'
p6230
Nsa(dp6231
S'description'
p6232
S'Specifies the initial condition for this variable\n'
p6233
sS'cpp_type'
p6234
S'double'
p6235
sS'default'
p6236
g3
sS'name'
p6237
S'initial_condition'
p6238
sS'required'
p6239
I00
sS'group_name'
p6240
Nsa(dp6241
S'name'
p6242
S'order'
p6243
sS'cpp_type'
p6244
S'MooseEnum'
p6245
sS'default'
p6246
S'FIRST'
p6247
sS'description'
p6248
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p6249
sS'required'
p6250
I00
sS'options'
p6251
S'CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH'
p6252
sS'group_name'
p6253
Nsa(dp6254
S'description'
p6255
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p6256
sS'cpp_type'
p6257
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p6258
sS'default'
p6259
g3
sS'name'
p6260
S'outputs'
p6261
sS'required'
p6262
I00
sS'group_name'
p6263
Nsa(dp6264
S'description'
p6265
S'Gives the timestep for which to read a solution from a file for a given variable\n'
p6266
sS'cpp_type'
p6267
S'int'
p6268
sS'default'
p6269
S'2'
p6270
sS'name'
p6271
S'initial_from_file_timestep'
p6272
sS'required'
p6273
I00
sS'group_name'
p6274
S'Initial From File'
p6275
sa(dp6276
S'description'
p6277
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p6278
sS'cpp_type'
p6279
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6280
sS'default'
p6281
g3
sS'name'
p6282
S'initial_from_file_var'
p6283
sS'required'
p6284
I00
sS'group_name'
p6285
S'Initial From File'
p6286
sasS'name'
p6287
S'/AuxVariables/*'
p6288
sasS'parameters'
p6289
NsS'name'
p6290
S'/AuxVariables'
p6291
sa(dp6292
S'description'
p6293
g3
sS'subblocks'
p6294
(lp6295
(dp6296
S'description'
p6297
g3
sS'subblocks'
p6298
NsS'parameters'
p6299
(lp6300
(dp6301
S'description'
p6302
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6303
sS'cpp_type'
p6304
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6305
sS'default'
p6306
g3
sS'name'
p6307
S'boundary'
p6308
sS'required'
p6309
I01
sS'group_name'
p6310
Nsa(dp6311
S'description'
p6312
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6313
sS'cpp_type'
p6314
S'bool'
p6315
sS'default'
p6316
S'1'
p6317
sS'name'
p6318
S'implicit'
p6319
sS'required'
p6320
I00
sS'group_name'
p6321
S'Advanced'
p6322
sa(dp6323
S'description'
p6324
S'A string representing the Moose Object that will be built by this Action\n'
p6325
sS'cpp_type'
p6326
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6327
sS'default'
p6328
g3
sS'name'
p6329
S'type'
p6330
sS'required'
p6331
I01
sS'group_name'
p6332
Nsa(dp6333
S'description'
p6334
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6335
sS'cpp_type'
p6336
S'bool'
p6337
sS'default'
p6338
S'0'
p6339
sS'name'
p6340
S'use_displaced_mesh'
p6341
sS'required'
p6342
I00
sS'group_name'
p6343
S'Advanced'
p6344
sa(dp6345
S'description'
p6346
S'The name of the variable that this boundary condition applies to\n'
p6347
sS'cpp_type'
p6348
S'NonlinearVariableName'
p6349
sS'default'
p6350
g3
sS'name'
p6351
S'variable'
p6352
sS'required'
p6353
I01
sS'group_name'
p6354
NsasS'name'
p6355
S'/BCs/*'
p6356
sa(dp6357
S'description'
p6358
g3
sS'subblocks'
p6359
NsS'parameters'
p6360
(lp6361
(dp6362
S'description'
p6363
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6364
sS'cpp_type'
p6365
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6366
sS'default'
p6367
g3
sS'name'
p6368
S'boundary'
p6369
sS'required'
p6370
I01
sS'group_name'
p6371
Nsa(dp6372
S'description'
p6373
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6374
sS'cpp_type'
p6375
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6376
sS'default'
p6377
g3
sS'name'
p6378
S'diag_save_in'
p6379
sS'required'
p6380
I00
sS'group_name'
p6381
S'Advanced'
p6382
sa(dp6383
S'description'
p6384
g3
sS'cpp_type'
p6385
S'double'
p6386
sS'default'
p6387
S'0'
p6388
sS'name'
p6389
S'duration'
p6390
sS'required'
p6391
I00
sS'group_name'
p6392
Nsa(dp6393
S'description'
p6394
g3
sS'cpp_type'
p6395
S'double'
p6396
sS'default'
p6397
S'500'
p6398
sS'name'
p6399
S'final'
p6400
sS'required'
p6401
I00
sS'group_name'
p6402
Nsa(dp6403
S'description'
p6404
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6405
sS'cpp_type'
p6406
S'bool'
p6407
sS'default'
p6408
S'1'
p6409
sS'name'
p6410
S'implicit'
p6411
sS'required'
p6412
I00
sS'group_name'
p6413
S'Advanced'
p6414
sa(dp6415
S'description'
p6416
g3
sS'cpp_type'
p6417
S'double'
p6418
sS'default'
p6419
S'500'
p6420
sS'name'
p6421
S'initial'
p6422
sS'required'
p6423
I00
sS'group_name'
p6424
Nsa(dp6425
S'description'
p6426
g3
sS'cpp_type'
p6427
S'double'
p6428
sS'default'
p6429
S'7500'
p6430
sS'name'
p6431
S'rate'
p6432
sS'required'
p6433
I00
sS'group_name'
p6434
Nsa(dp6435
S'description'
p6436
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6437
sS'cpp_type'
p6438
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6439
sS'default'
p6440
g3
sS'name'
p6441
S'save_in'
p6442
sS'required'
p6443
I00
sS'group_name'
p6444
S'Advanced'
p6445
sa(dp6446
S'description'
p6447
S'The seed for the master random number generator\n'
p6448
sS'cpp_type'
p6449
S'unsigned int'
p6450
sS'default'
p6451
S'0'
p6452
sS'name'
p6453
S'seed'
p6454
sS'required'
p6455
I00
sS'group_name'
p6456
S'Advanced'
p6457
sa(dp6458
S'description'
p6459
g3
sS'cpp_type'
p6460
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6461
sS'default'
p6462
S'ConvectiveFluxBC'
p6463
sS'name'
p6464
S'type'
p6465
sS'required'
p6466
I00
sS'group_name'
p6467
Nsa(dp6468
S'description'
p6469
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6470
sS'cpp_type'
p6471
S'bool'
p6472
sS'default'
p6473
S'0'
p6474
sS'name'
p6475
S'use_displaced_mesh'
p6476
sS'required'
p6477
I00
sS'group_name'
p6478
S'Advanced'
p6479
sa(dp6480
S'description'
p6481
S'The name of the variable that this boundary condition applies to\n'
p6482
sS'cpp_type'
p6483
S'NonlinearVariableName'
p6484
sS'default'
p6485
g3
sS'name'
p6486
S'variable'
p6487
sS'required'
p6488
I01
sS'group_name'
p6489
NsasS'name'
p6490
S'/BCs/ConvectiveFluxBC'
p6491
sa(dp6492
S'description'
p6493
g3
sS'subblocks'
p6494
NsS'parameters'
p6495
(lp6496
(dp6497
S'description'
p6498
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6499
sS'cpp_type'
p6500
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6501
sS'default'
p6502
g3
sS'name'
p6503
S'boundary'
p6504
sS'required'
p6505
I01
sS'group_name'
p6506
Nsa(dp6507
S'description'
p6508
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6509
sS'cpp_type'
p6510
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6511
sS'default'
p6512
g3
sS'name'
p6513
S'diag_save_in'
p6514
sS'required'
p6515
I00
sS'group_name'
p6516
S'Advanced'
p6517
sa(dp6518
S'description'
p6519
S'Epsilon\n'
p6520
sS'cpp_type'
p6521
S'double'
p6522
sS'default'
p6523
g3
sS'name'
p6524
S'epsilon'
p6525
sS'required'
p6526
I01
sS'group_name'
p6527
Nsa(dp6528
S'description'
p6529
S'The forcing function.\n'
p6530
sS'cpp_type'
p6531
S'FunctionName'
p6532
sS'default'
p6533
g3
sS'name'
p6534
S'function'
p6535
sS'required'
p6536
I01
sS'group_name'
p6537
Nsa(dp6538
S'description'
p6539
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6540
sS'cpp_type'
p6541
S'bool'
p6542
sS'default'
p6543
S'1'
p6544
sS'name'
p6545
S'implicit'
p6546
sS'required'
p6547
I00
sS'group_name'
p6548
S'Advanced'
p6549
sa(dp6550
S'description'
p6551
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6552
sS'cpp_type'
p6553
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6554
sS'default'
p6555
g3
sS'name'
p6556
S'save_in'
p6557
sS'required'
p6558
I00
sS'group_name'
p6559
S'Advanced'
p6560
sa(dp6561
S'description'
p6562
S'The seed for the master random number generator\n'
p6563
sS'cpp_type'
p6564
S'unsigned int'
p6565
sS'default'
p6566
S'0'
p6567
sS'name'
p6568
S'seed'
p6569
sS'required'
p6570
I00
sS'group_name'
p6571
S'Advanced'
p6572
sa(dp6573
S'description'
p6574
S'Sigma\n'
p6575
sS'cpp_type'
p6576
S'double'
p6577
sS'default'
p6578
g3
sS'name'
p6579
S'sigma'
p6580
sS'required'
p6581
I01
sS'group_name'
p6582
Nsa(dp6583
S'description'
p6584
g3
sS'cpp_type'
p6585
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6586
sS'default'
p6587
S'DGFunctionDiffusionDirichletBC'
p6588
sS'name'
p6589
S'type'
p6590
sS'required'
p6591
I00
sS'group_name'
p6592
Nsa(dp6593
S'description'
p6594
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6595
sS'cpp_type'
p6596
S'bool'
p6597
sS'default'
p6598
S'0'
p6599
sS'name'
p6600
S'use_displaced_mesh'
p6601
sS'required'
p6602
I00
sS'group_name'
p6603
S'Advanced'
p6604
sa(dp6605
S'description'
p6606
S'The value the variable should have on the boundary\n'
p6607
sS'cpp_type'
p6608
S'double'
p6609
sS'default'
p6610
S'0'
p6611
sS'name'
p6612
S'value'
p6613
sS'required'
p6614
I00
sS'group_name'
p6615
Nsa(dp6616
S'description'
p6617
S'The name of the variable that this boundary condition applies to\n'
p6618
sS'cpp_type'
p6619
S'NonlinearVariableName'
p6620
sS'default'
p6621
g3
sS'name'
p6622
S'variable'
p6623
sS'required'
p6624
I01
sS'group_name'
p6625
NsasS'name'
p6626
S'/BCs/DGFunctionDiffusionDirichletBC'
p6627
sa(dp6628
S'description'
p6629
g3
sS'subblocks'
p6630
NsS'parameters'
p6631
(lp6632
(dp6633
S'description'
p6634
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6635
sS'cpp_type'
p6636
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6637
sS'default'
p6638
g3
sS'name'
p6639
S'boundary'
p6640
sS'required'
p6641
I01
sS'group_name'
p6642
Nsa(dp6643
S'description'
p6644
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6645
sS'cpp_type'
p6646
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6647
sS'default'
p6648
g3
sS'name'
p6649
S'diag_save_in'
p6650
sS'required'
p6651
I00
sS'group_name'
p6652
S'Advanced'
p6653
sa(dp6654
S'description'
p6655
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6656
sS'cpp_type'
p6657
S'bool'
p6658
sS'default'
p6659
S'1'
p6660
sS'name'
p6661
S'implicit'
p6662
sS'required'
p6663
I00
sS'group_name'
p6664
S'Advanced'
p6665
sa(dp6666
S'description'
p6667
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6668
sS'cpp_type'
p6669
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6670
sS'default'
p6671
g3
sS'name'
p6672
S'save_in'
p6673
sS'required'
p6674
I00
sS'group_name'
p6675
S'Advanced'
p6676
sa(dp6677
S'description'
p6678
S'The seed for the master random number generator\n'
p6679
sS'cpp_type'
p6680
S'unsigned int'
p6681
sS'default'
p6682
S'0'
p6683
sS'name'
p6684
S'seed'
p6685
sS'required'
p6686
I00
sS'group_name'
p6687
S'Advanced'
p6688
sa(dp6689
S'description'
p6690
g3
sS'cpp_type'
p6691
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6692
sS'default'
p6693
S'DiffusionFluxBC'
p6694
sS'name'
p6695
S'type'
p6696
sS'required'
p6697
I00
sS'group_name'
p6698
Nsa(dp6699
S'description'
p6700
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6701
sS'cpp_type'
p6702
S'bool'
p6703
sS'default'
p6704
S'0'
p6705
sS'name'
p6706
S'use_displaced_mesh'
p6707
sS'required'
p6708
I00
sS'group_name'
p6709
S'Advanced'
p6710
sa(dp6711
S'description'
p6712
S'The name of the variable that this boundary condition applies to\n'
p6713
sS'cpp_type'
p6714
S'NonlinearVariableName'
p6715
sS'default'
p6716
g3
sS'name'
p6717
S'variable'
p6718
sS'required'
p6719
I01
sS'group_name'
p6720
NsasS'name'
p6721
S'/BCs/DiffusionFluxBC'
p6722
sa(dp6723
S'description'
p6724
g3
sS'subblocks'
p6725
NsS'parameters'
p6726
(lp6727
(dp6728
S'description'
p6729
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6730
sS'cpp_type'
p6731
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6732
sS'default'
p6733
g3
sS'name'
p6734
S'boundary'
p6735
sS'required'
p6736
I01
sS'group_name'
p6737
Nsa(dp6738
S'description'
p6739
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6740
sS'cpp_type'
p6741
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6742
sS'default'
p6743
g3
sS'name'
p6744
S'diag_save_in'
p6745
sS'required'
p6746
I00
sS'group_name'
p6747
Nsa(dp6748
S'description'
p6749
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6750
sS'cpp_type'
p6751
S'bool'
p6752
sS'default'
p6753
S'1'
p6754
sS'name'
p6755
S'implicit'
p6756
sS'required'
p6757
I00
sS'group_name'
p6758
S'Advanced'
p6759
sa(dp6760
S'description'
p6761
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6762
sS'cpp_type'
p6763
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6764
sS'default'
p6765
g3
sS'name'
p6766
S'save_in'
p6767
sS'required'
p6768
I00
sS'group_name'
p6769
Nsa(dp6770
S'description'
p6771
S'The seed for the master random number generator\n'
p6772
sS'cpp_type'
p6773
S'unsigned int'
p6774
sS'default'
p6775
S'0'
p6776
sS'name'
p6777
S'seed'
p6778
sS'required'
p6779
I00
sS'group_name'
p6780
S'Advanced'
p6781
sa(dp6782
S'description'
p6783
g3
sS'cpp_type'
p6784
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6785
sS'default'
p6786
S'DirichletBC'
p6787
sS'name'
p6788
S'type'
p6789
sS'required'
p6790
I00
sS'group_name'
p6791
Nsa(dp6792
S'description'
p6793
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6794
sS'cpp_type'
p6795
S'bool'
p6796
sS'default'
p6797
S'0'
p6798
sS'name'
p6799
S'use_displaced_mesh'
p6800
sS'required'
p6801
I00
sS'group_name'
p6802
S'Advanced'
p6803
sa(dp6804
S'description'
p6805
S'Value of the BC\n'
p6806
sS'cpp_type'
p6807
S'double'
p6808
sS'default'
p6809
g3
sS'name'
p6810
S'value'
p6811
sS'required'
p6812
I01
sS'group_name'
p6813
Nsa(dp6814
S'description'
p6815
S'The name of the variable that this boundary condition applies to\n'
p6816
sS'cpp_type'
p6817
S'NonlinearVariableName'
p6818
sS'default'
p6819
g3
sS'name'
p6820
S'variable'
p6821
sS'required'
p6822
I01
sS'group_name'
p6823
NsasS'name'
p6824
S'/BCs/DirichletBC'
p6825
sa(dp6826
S'description'
p6827
g3
sS'subblocks'
p6828
NsS'parameters'
p6829
(lp6830
(dp6831
S'description'
p6832
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6833
sS'cpp_type'
p6834
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6835
sS'default'
p6836
g3
sS'name'
p6837
S'boundary'
p6838
sS'required'
p6839
I01
sS'group_name'
p6840
Nsa(dp6841
S'description'
p6842
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6843
sS'cpp_type'
p6844
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6845
sS'default'
p6846
g3
sS'name'
p6847
S'diag_save_in'
p6848
sS'required'
p6849
I00
sS'group_name'
p6850
Nsa(dp6851
S'description'
p6852
S'The forcing function.\n'
p6853
sS'cpp_type'
p6854
S'FunctionName'
p6855
sS'default'
p6856
g3
sS'name'
p6857
S'function'
p6858
sS'required'
p6859
I01
sS'group_name'
p6860
Nsa(dp6861
S'description'
p6862
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6863
sS'cpp_type'
p6864
S'bool'
p6865
sS'default'
p6866
S'1'
p6867
sS'name'
p6868
S'implicit'
p6869
sS'required'
p6870
I00
sS'group_name'
p6871
S'Advanced'
p6872
sa(dp6873
S'description'
p6874
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6875
sS'cpp_type'
p6876
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6877
sS'default'
p6878
g3
sS'name'
p6879
S'save_in'
p6880
sS'required'
p6881
I00
sS'group_name'
p6882
Nsa(dp6883
S'description'
p6884
S'The seed for the master random number generator\n'
p6885
sS'cpp_type'
p6886
S'unsigned int'
p6887
sS'default'
p6888
S'0'
p6889
sS'name'
p6890
S'seed'
p6891
sS'required'
p6892
I00
sS'group_name'
p6893
S'Advanced'
p6894
sa(dp6895
S'description'
p6896
g3
sS'cpp_type'
p6897
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p6898
sS'default'
p6899
S'FunctionDirichletBC'
p6900
sS'name'
p6901
S'type'
p6902
sS'required'
p6903
I00
sS'group_name'
p6904
Nsa(dp6905
S'description'
p6906
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p6907
sS'cpp_type'
p6908
S'bool'
p6909
sS'default'
p6910
S'0'
p6911
sS'name'
p6912
S'use_displaced_mesh'
p6913
sS'required'
p6914
I00
sS'group_name'
p6915
S'Advanced'
p6916
sa(dp6917
S'description'
p6918
S'The name of the variable that this boundary condition applies to\n'
p6919
sS'cpp_type'
p6920
S'NonlinearVariableName'
p6921
sS'default'
p6922
g3
sS'name'
p6923
S'variable'
p6924
sS'required'
p6925
I01
sS'group_name'
p6926
NsasS'name'
p6927
S'/BCs/FunctionDirichletBC'
p6928
sa(dp6929
S'description'
p6930
g3
sS'subblocks'
p6931
NsS'parameters'
p6932
(lp6933
(dp6934
S'description'
p6935
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p6936
sS'cpp_type'
p6937
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p6938
sS'default'
p6939
g3
sS'name'
p6940
S'boundary'
p6941
sS'required'
p6942
I01
sS'group_name'
p6943
Nsa(dp6944
S'description'
p6945
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6946
sS'cpp_type'
p6947
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6948
sS'default'
p6949
g3
sS'name'
p6950
S'diag_save_in'
p6951
sS'required'
p6952
I00
sS'group_name'
p6953
S'Advanced'
p6954
sa(dp6955
S'description'
p6956
S'The function.\n'
p6957
sS'cpp_type'
p6958
S'FunctionName'
p6959
sS'default'
p6960
g3
sS'name'
p6961
S'function'
p6962
sS'required'
p6963
I01
sS'group_name'
p6964
Nsa(dp6965
S'description'
p6966
S'Determines whether this object is calculated using an implicit or explicit form\n'
p6967
sS'cpp_type'
p6968
S'bool'
p6969
sS'default'
p6970
S'1'
p6971
sS'name'
p6972
S'implicit'
p6973
sS'required'
p6974
I00
sS'group_name'
p6975
S'Advanced'
p6976
sa(dp6977
S'description'
p6978
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p6979
sS'cpp_type'
p6980
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p6981
sS'default'
p6982
g3
sS'name'
p6983
S'save_in'
p6984
sS'required'
p6985
I00
sS'group_name'
p6986
S'Advanced'
p6987
sa(dp6988
S'description'
p6989
S'The seed for the master random number generator\n'
p6990
sS'cpp_type'
p6991
S'unsigned int'
p6992
sS'default'
p6993
S'0'
p6994
sS'name'
p6995
S'seed'
p6996
sS'required'
p6997
I00
sS'group_name'
p6998
S'Advanced'
p6999
sa(dp7000
S'description'
p7001
g3
sS'cpp_type'
p7002
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7003
sS'default'
p7004
S'FunctionNeumannBC'
p7005
sS'name'
p7006
S'type'
p7007
sS'required'
p7008
I00
sS'group_name'
p7009
Nsa(dp7010
S'description'
p7011
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7012
sS'cpp_type'
p7013
S'bool'
p7014
sS'default'
p7015
S'0'
p7016
sS'name'
p7017
S'use_displaced_mesh'
p7018
sS'required'
p7019
I00
sS'group_name'
p7020
S'Advanced'
p7021
sa(dp7022
S'description'
p7023
S'The name of the variable that this boundary condition applies to\n'
p7024
sS'cpp_type'
p7025
S'NonlinearVariableName'
p7026
sS'default'
p7027
g3
sS'name'
p7028
S'variable'
p7029
sS'required'
p7030
I01
sS'group_name'
p7031
NsasS'name'
p7032
S'/BCs/FunctionNeumannBC'
p7033
sa(dp7034
S'description'
p7035
g3
sS'subblocks'
p7036
NsS'parameters'
p7037
(lp7038
(dp7039
S'description'
p7040
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7041
sS'cpp_type'
p7042
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7043
sS'default'
p7044
g3
sS'name'
p7045
S'boundary'
p7046
sS'required'
p7047
I01
sS'group_name'
p7048
Nsa(dp7049
S'description'
p7050
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7051
sS'cpp_type'
p7052
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7053
sS'default'
p7054
g3
sS'name'
p7055
S'diag_save_in'
p7056
sS'required'
p7057
I00
sS'group_name'
p7058
S'Advanced'
p7059
sa(dp7060
S'description'
p7061
S'Forcing function\n'
p7062
sS'cpp_type'
p7063
S'FunctionName'
p7064
sS'default'
p7065
g3
sS'name'
p7066
S'function'
p7067
sS'required'
p7068
I01
sS'group_name'
p7069
Nsa(dp7070
S'description'
p7071
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7072
sS'cpp_type'
p7073
S'bool'
p7074
sS'default'
p7075
S'1'
p7076
sS'name'
p7077
S'implicit'
p7078
sS'required'
p7079
I00
sS'group_name'
p7080
S'Advanced'
p7081
sa(dp7082
S'description'
p7083
S'Penalty scalar\n'
p7084
sS'cpp_type'
p7085
S'double'
p7086
sS'default'
p7087
g3
sS'name'
p7088
S'penalty'
p7089
sS'required'
p7090
I01
sS'group_name'
p7091
Nsa(dp7092
S'description'
p7093
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7094
sS'cpp_type'
p7095
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7096
sS'default'
p7097
g3
sS'name'
p7098
S'save_in'
p7099
sS'required'
p7100
I00
sS'group_name'
p7101
S'Advanced'
p7102
sa(dp7103
S'description'
p7104
S'The seed for the master random number generator\n'
p7105
sS'cpp_type'
p7106
S'unsigned int'
p7107
sS'default'
p7108
S'0'
p7109
sS'name'
p7110
S'seed'
p7111
sS'required'
p7112
I00
sS'group_name'
p7113
S'Advanced'
p7114
sa(dp7115
S'description'
p7116
g3
sS'cpp_type'
p7117
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7118
sS'default'
p7119
S'FunctionPenaltyDirichletBC'
p7120
sS'name'
p7121
S'type'
p7122
sS'required'
p7123
I00
sS'group_name'
p7124
Nsa(dp7125
S'description'
p7126
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7127
sS'cpp_type'
p7128
S'bool'
p7129
sS'default'
p7130
S'0'
p7131
sS'name'
p7132
S'use_displaced_mesh'
p7133
sS'required'
p7134
I00
sS'group_name'
p7135
S'Advanced'
p7136
sa(dp7137
S'description'
p7138
S'The name of the variable that this boundary condition applies to\n'
p7139
sS'cpp_type'
p7140
S'NonlinearVariableName'
p7141
sS'default'
p7142
g3
sS'name'
p7143
S'variable'
p7144
sS'required'
p7145
I01
sS'group_name'
p7146
NsasS'name'
p7147
S'/BCs/FunctionPenaltyDirichletBC'
p7148
sa(dp7149
S'description'
p7150
g3
sS'subblocks'
p7151
NsS'parameters'
p7152
(lp7153
(dp7154
S'description'
p7155
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7156
sS'cpp_type'
p7157
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7158
sS'default'
p7159
g3
sS'name'
p7160
S'boundary'
p7161
sS'required'
p7162
I01
sS'group_name'
p7163
Nsa(dp7164
S'description'
p7165
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7166
sS'cpp_type'
p7167
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7168
sS'default'
p7169
g3
sS'name'
p7170
S'diag_save_in'
p7171
sS'required'
p7172
I00
sS'group_name'
p7173
Nsa(dp7174
S'description'
p7175
S'The forcing function.\n'
p7176
sS'cpp_type'
p7177
S'FunctionName'
p7178
sS'default'
p7179
g3
sS'name'
p7180
S'function'
p7181
sS'required'
p7182
I01
sS'group_name'
p7183
Nsa(dp7184
S'description'
p7185
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7186
sS'cpp_type'
p7187
S'bool'
p7188
sS'default'
p7189
S'1'
p7190
sS'name'
p7191
S'implicit'
p7192
sS'required'
p7193
I00
sS'group_name'
p7194
S'Advanced'
p7195
sa(dp7196
S'description'
p7197
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7198
sS'cpp_type'
p7199
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7200
sS'default'
p7201
g3
sS'name'
p7202
S'save_in'
p7203
sS'required'
p7204
I00
sS'group_name'
p7205
Nsa(dp7206
S'description'
p7207
S'The seed for the master random number generator\n'
p7208
sS'cpp_type'
p7209
S'unsigned int'
p7210
sS'default'
p7211
S'0'
p7212
sS'name'
p7213
S'seed'
p7214
sS'required'
p7215
I00
sS'group_name'
p7216
S'Advanced'
p7217
sa(dp7218
S'description'
p7219
g3
sS'cpp_type'
p7220
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7221
sS'default'
p7222
S'FunctionPresetBC'
p7223
sS'name'
p7224
S'type'
p7225
sS'required'
p7226
I00
sS'group_name'
p7227
Nsa(dp7228
S'description'
p7229
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7230
sS'cpp_type'
p7231
S'bool'
p7232
sS'default'
p7233
S'0'
p7234
sS'name'
p7235
S'use_displaced_mesh'
p7236
sS'required'
p7237
I00
sS'group_name'
p7238
S'Advanced'
p7239
sa(dp7240
S'description'
p7241
S'The name of the variable that this boundary condition applies to\n'
p7242
sS'cpp_type'
p7243
S'NonlinearVariableName'
p7244
sS'default'
p7245
g3
sS'name'
p7246
S'variable'
p7247
sS'required'
p7248
I01
sS'group_name'
p7249
NsasS'name'
p7250
S'/BCs/FunctionPresetBC'
p7251
sa(dp7252
S'description'
p7253
g3
sS'subblocks'
p7254
NsS'parameters'
p7255
(lp7256
(dp7257
S'description'
p7258
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7259
sS'cpp_type'
p7260
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7261
sS'default'
p7262
g3
sS'name'
p7263
S'boundary'
p7264
sS'required'
p7265
I01
sS'group_name'
p7266
Nsa(dp7267
S'description'
p7268
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7269
sS'cpp_type'
p7270
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7271
sS'default'
p7272
g3
sS'name'
p7273
S'diag_save_in'
p7274
sS'required'
p7275
I00
sS'group_name'
p7276
Nsa(dp7277
S'description'
p7278
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7279
sS'cpp_type'
p7280
S'bool'
p7281
sS'default'
p7282
S'1'
p7283
sS'name'
p7284
S'implicit'
p7285
sS'required'
p7286
I00
sS'group_name'
p7287
S'Advanced'
p7288
sa(dp7289
S'description'
p7290
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7291
sS'cpp_type'
p7292
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7293
sS'default'
p7294
g3
sS'name'
p7295
S'save_in'
p7296
sS'required'
p7297
I00
sS'group_name'
p7298
Nsa(dp7299
S'description'
p7300
S'The seed for the master random number generator\n'
p7301
sS'cpp_type'
p7302
S'unsigned int'
p7303
sS'default'
p7304
S'0'
p7305
sS'name'
p7306
S'seed'
p7307
sS'required'
p7308
I00
sS'group_name'
p7309
S'Advanced'
p7310
sa(dp7311
S'description'
p7312
g3
sS'cpp_type'
p7313
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7314
sS'default'
p7315
S'MatchedValueBC'
p7316
sS'name'
p7317
S'type'
p7318
sS'required'
p7319
I00
sS'group_name'
p7320
Nsa(dp7321
S'description'
p7322
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7323
sS'cpp_type'
p7324
S'bool'
p7325
sS'default'
p7326
S'0'
p7327
sS'name'
p7328
S'use_displaced_mesh'
p7329
sS'required'
p7330
I00
sS'group_name'
p7331
S'Advanced'
p7332
sa(dp7333
S'description'
p7334
S'The variable whose value we are to match.\n'
p7335
sS'cpp_type'
p7336
S'std::vector<VariableName>'
p7337
sS'default'
p7338
g3
sS'name'
p7339
S'v'
p7340
sS'required'
p7341
I01
sS'group_name'
p7342
Nsa(dp7343
S'description'
p7344
S'The name of the variable that this boundary condition applies to\n'
p7345
sS'cpp_type'
p7346
S'NonlinearVariableName'
p7347
sS'default'
p7348
g3
sS'name'
p7349
S'variable'
p7350
sS'required'
p7351
I01
sS'group_name'
p7352
NsasS'name'
p7353
S'/BCs/MatchedValueBC'
p7354
sa(dp7355
S'description'
p7356
g3
sS'subblocks'
p7357
NsS'parameters'
p7358
(lp7359
(dp7360
S'description'
p7361
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7362
sS'cpp_type'
p7363
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7364
sS'default'
p7365
g3
sS'name'
p7366
S'boundary'
p7367
sS'required'
p7368
I01
sS'group_name'
p7369
Nsa(dp7370
S'description'
p7371
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7372
sS'cpp_type'
p7373
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7374
sS'default'
p7375
g3
sS'name'
p7376
S'diag_save_in'
p7377
sS'required'
p7378
I00
sS'group_name'
p7379
S'Advanced'
p7380
sa(dp7381
S'description'
p7382
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7383
sS'cpp_type'
p7384
S'bool'
p7385
sS'default'
p7386
S'1'
p7387
sS'name'
p7388
S'implicit'
p7389
sS'required'
p7390
I00
sS'group_name'
p7391
S'Advanced'
p7392
sa(dp7393
S'description'
p7394
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7395
sS'cpp_type'
p7396
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7397
sS'default'
p7398
g3
sS'name'
p7399
S'save_in'
p7400
sS'required'
p7401
I00
sS'group_name'
p7402
S'Advanced'
p7403
sa(dp7404
S'description'
p7405
S'The seed for the master random number generator\n'
p7406
sS'cpp_type'
p7407
S'unsigned int'
p7408
sS'default'
p7409
S'0'
p7410
sS'name'
p7411
S'seed'
p7412
sS'required'
p7413
I00
sS'group_name'
p7414
S'Advanced'
p7415
sa(dp7416
S'description'
p7417
g3
sS'cpp_type'
p7418
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7419
sS'default'
p7420
S'NeumannBC'
p7421
sS'name'
p7422
S'type'
p7423
sS'required'
p7424
I00
sS'group_name'
p7425
Nsa(dp7426
S'description'
p7427
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7428
sS'cpp_type'
p7429
S'bool'
p7430
sS'default'
p7431
S'0'
p7432
sS'name'
p7433
S'use_displaced_mesh'
p7434
sS'required'
p7435
I00
sS'group_name'
p7436
S'Advanced'
p7437
sa(dp7438
S'description'
p7439
S'The value of the gradient on the boundary.\n'
p7440
sS'cpp_type'
p7441
S'double'
p7442
sS'default'
p7443
S'0'
p7444
sS'name'
p7445
S'value'
p7446
sS'required'
p7447
I00
sS'group_name'
p7448
Nsa(dp7449
S'description'
p7450
S'The name of the variable that this boundary condition applies to\n'
p7451
sS'cpp_type'
p7452
S'NonlinearVariableName'
p7453
sS'default'
p7454
g3
sS'name'
p7455
S'variable'
p7456
sS'required'
p7457
I01
sS'group_name'
p7458
NsasS'name'
p7459
S'/BCs/NeumannBC'
p7460
sa(dp7461
S'description'
p7462
g3
sS'subblocks'
p7463
NsS'parameters'
p7464
(lp7465
(dp7466
S'description'
p7467
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7468
sS'cpp_type'
p7469
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7470
sS'default'
p7471
g3
sS'name'
p7472
S'boundary'
p7473
sS'required'
p7474
I01
sS'group_name'
p7475
Nsa(dp7476
S'description'
p7477
S'Component of the Lagrange multiplier\n'
p7478
sS'cpp_type'
p7479
S'unsigned int'
p7480
sS'default'
p7481
g3
sS'name'
p7482
S'component'
p7483
sS'required'
p7484
I01
sS'group_name'
p7485
Nsa(dp7486
S'description'
p7487
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7488
sS'cpp_type'
p7489
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7490
sS'default'
p7491
g3
sS'name'
p7492
S'diag_save_in'
p7493
sS'required'
p7494
I00
sS'group_name'
p7495
S'Advanced'
p7496
sa(dp7497
S'description'
p7498
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7499
sS'cpp_type'
p7500
S'bool'
p7501
sS'default'
p7502
S'1'
p7503
sS'name'
p7504
S'implicit'
p7505
sS'required'
p7506
I00
sS'group_name'
p7507
S'Advanced'
p7508
sa(dp7509
S'description'
p7510
S'Lagrange multiplier\n'
p7511
sS'cpp_type'
p7512
S'std::vector<VariableName>'
p7513
sS'default'
p7514
g3
sS'name'
p7515
S'lambda'
p7516
sS'required'
p7517
I01
sS'group_name'
p7518
Nsa(dp7519
S'description'
p7520
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7521
sS'cpp_type'
p7522
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7523
sS'default'
p7524
g3
sS'name'
p7525
S'save_in'
p7526
sS'required'
p7527
I00
sS'group_name'
p7528
S'Advanced'
p7529
sa(dp7530
S'description'
p7531
S'The seed for the master random number generator\n'
p7532
sS'cpp_type'
p7533
S'unsigned int'
p7534
sS'default'
p7535
S'0'
p7536
sS'name'
p7537
S'seed'
p7538
sS'required'
p7539
I00
sS'group_name'
p7540
S'Advanced'
p7541
sa(dp7542
S'description'
p7543
g3
sS'cpp_type'
p7544
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7545
sS'default'
p7546
S'OneDEqualValueConstraintBC'
p7547
sS'name'
p7548
S'type'
p7549
sS'required'
p7550
I00
sS'group_name'
p7551
Nsa(dp7552
S'description'
p7553
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7554
sS'cpp_type'
p7555
S'bool'
p7556
sS'default'
p7557
S'0'
p7558
sS'name'
p7559
S'use_displaced_mesh'
p7560
sS'required'
p7561
I00
sS'group_name'
p7562
S'Advanced'
p7563
sa(dp7564
S'description'
p7565
S'The name of the variable that this boundary condition applies to\n'
p7566
sS'cpp_type'
p7567
S'NonlinearVariableName'
p7568
sS'default'
p7569
g3
sS'name'
p7570
S'variable'
p7571
sS'required'
p7572
I01
sS'group_name'
p7573
Nsa(dp7574
S'description'
p7575
S'Variation of the constraint g wrt this surface (+1 or -1). Note: g = value1 - value2 = 0 \n'
p7576
sS'cpp_type'
p7577
S'double'
p7578
sS'default'
p7579
g3
sS'name'
p7580
S'vg'
p7581
sS'required'
p7582
I01
sS'group_name'
p7583
NsasS'name'
p7584
S'/BCs/OneDEqualValueConstraintBC'
p7585
sa(dp7586
S'description'
p7587
g3
sS'subblocks'
p7588
NsS'parameters'
p7589
(lp7590
(dp7591
S'description'
p7592
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7593
sS'cpp_type'
p7594
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7595
sS'default'
p7596
g3
sS'name'
p7597
S'boundary'
p7598
sS'required'
p7599
I01
sS'group_name'
p7600
Nsa(dp7601
S'description'
p7602
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7603
sS'cpp_type'
p7604
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7605
sS'default'
p7606
g3
sS'name'
p7607
S'diag_save_in'
p7608
sS'required'
p7609
I00
sS'group_name'
p7610
S'Advanced'
p7611
sa(dp7612
S'description'
p7613
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7614
sS'cpp_type'
p7615
S'bool'
p7616
sS'default'
p7617
S'1'
p7618
sS'name'
p7619
S'implicit'
p7620
sS'required'
p7621
I00
sS'group_name'
p7622
S'Advanced'
p7623
sa(dp7624
S'description'
p7625
S'Penalty scalar\n'
p7626
sS'cpp_type'
p7627
S'double'
p7628
sS'default'
p7629
g3
sS'name'
p7630
S'penalty'
p7631
sS'required'
p7632
I01
sS'group_name'
p7633
Nsa(dp7634
S'description'
p7635
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7636
sS'cpp_type'
p7637
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7638
sS'default'
p7639
g3
sS'name'
p7640
S'save_in'
p7641
sS'required'
p7642
I00
sS'group_name'
p7643
S'Advanced'
p7644
sa(dp7645
S'description'
p7646
S'The seed for the master random number generator\n'
p7647
sS'cpp_type'
p7648
S'unsigned int'
p7649
sS'default'
p7650
S'0'
p7651
sS'name'
p7652
S'seed'
p7653
sS'required'
p7654
I00
sS'group_name'
p7655
S'Advanced'
p7656
sa(dp7657
S'description'
p7658
g3
sS'cpp_type'
p7659
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7660
sS'default'
p7661
S'PenaltyDirichletBC'
p7662
sS'name'
p7663
S'type'
p7664
sS'required'
p7665
I00
sS'group_name'
p7666
Nsa(dp7667
S'description'
p7668
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7669
sS'cpp_type'
p7670
S'bool'
p7671
sS'default'
p7672
S'0'
p7673
sS'name'
p7674
S'use_displaced_mesh'
p7675
sS'required'
p7676
I00
sS'group_name'
p7677
S'Advanced'
p7678
sa(dp7679
S'description'
p7680
S'Boundary value of the variable\n'
p7681
sS'cpp_type'
p7682
S'double'
p7683
sS'default'
p7684
S'0'
p7685
sS'name'
p7686
S'value'
p7687
sS'required'
p7688
I00
sS'group_name'
p7689
Nsa(dp7690
S'description'
p7691
S'The name of the variable that this boundary condition applies to\n'
p7692
sS'cpp_type'
p7693
S'NonlinearVariableName'
p7694
sS'default'
p7695
g3
sS'name'
p7696
S'variable'
p7697
sS'required'
p7698
I01
sS'group_name'
p7699
NsasS'name'
p7700
S'/BCs/PenaltyDirichletBC'
p7701
sa(dp7702
S'description'
p7703
g3
sS'subblocks'
p7704
(lp7705
(dp7706
S'description'
p7707
g3
sS'subblocks'
p7708
NsS'parameters'
p7709
(lp7710
(dp7711
S'description'
p7712
S'If using a generated mesh, you can specifiy just the dimension(s) you want to mark as periodic\n'
p7713
sS'cpp_type'
p7714
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7715
sS'default'
p7716
g3
sS'name'
p7717
S'auto_direction'
p7718
sS'required'
p7719
I00
sS'group_name'
p7720
Nsa(dp7721
S'description'
p7722
S'Functions that specify the inverse transformation\n'
p7723
sS'cpp_type'
p7724
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7725
sS'default'
p7726
g3
sS'name'
p7727
S'inv_transform_func'
p7728
sS'required'
p7729
I00
sS'group_name'
p7730
Nsa(dp7731
S'description'
p7732
S'Boundary ID associated with the primary boundary.\n'
p7733
sS'cpp_type'
p7734
S'BoundaryName'
p7735
sS'default'
p7736
g3
sS'name'
p7737
S'primary'
p7738
sS'required'
p7739
I00
sS'group_name'
p7740
Nsa(dp7741
S'description'
p7742
S'Boundary ID associated with the secondary boundary.\n'
p7743
sS'cpp_type'
p7744
S'BoundaryName'
p7745
sS'default'
p7746
g3
sS'name'
p7747
S'secondary'
p7748
sS'required'
p7749
I00
sS'group_name'
p7750
Nsa(dp7751
S'description'
p7752
S'Functions that specify the transformation\n'
p7753
sS'cpp_type'
p7754
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p7755
sS'default'
p7756
g3
sS'name'
p7757
S'transform_func'
p7758
sS'required'
p7759
I00
sS'group_name'
p7760
Nsa(dp7761
S'description'
p7762
S'Vector that translates coordinates on the primary boundary to coordinates on the secondary boundary.\n'
p7763
sS'cpp_type'
p7764
S'libMesh::VectorValue<double>'
p7765
sS'default'
p7766
g3
sS'name'
p7767
S'translation'
p7768
sS'required'
p7769
I00
sS'group_name'
p7770
Nsa(dp7771
S'description'
p7772
S'Variable for the periodic boundary\n'
p7773
sS'cpp_type'
p7774
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p7775
sS'default'
p7776
g3
sS'name'
p7777
S'variable'
p7778
sS'required'
p7779
I00
sS'group_name'
p7780
NsasS'name'
p7781
S'/BCs/Periodic/*'
p7782
sasS'parameters'
p7783
NsS'name'
p7784
S'/BCs/Periodic'
p7785
sa(dp7786
S'description'
p7787
g3
sS'subblocks'
p7788
NsS'parameters'
p7789
(lp7790
(dp7791
S'description'
p7792
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7793
sS'cpp_type'
p7794
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7795
sS'default'
p7796
g3
sS'name'
p7797
S'boundary'
p7798
sS'required'
p7799
I01
sS'group_name'
p7800
Nsa(dp7801
S'description'
p7802
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7803
sS'cpp_type'
p7804
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7805
sS'default'
p7806
g3
sS'name'
p7807
S'diag_save_in'
p7808
sS'required'
p7809
I00
sS'group_name'
p7810
Nsa(dp7811
S'description'
p7812
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7813
sS'cpp_type'
p7814
S'bool'
p7815
sS'default'
p7816
S'1'
p7817
sS'name'
p7818
S'implicit'
p7819
sS'required'
p7820
I00
sS'group_name'
p7821
S'Advanced'
p7822
sa(dp7823
S'description'
p7824
S'The postprocessor to set the value to on the boundary.\n'
p7825
sS'cpp_type'
p7826
S'PostprocessorName'
p7827
sS'default'
p7828
g3
sS'name'
p7829
S'postprocessor'
p7830
sS'required'
p7831
I01
sS'group_name'
p7832
Nsa(dp7833
S'description'
p7834
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7835
sS'cpp_type'
p7836
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7837
sS'default'
p7838
g3
sS'name'
p7839
S'save_in'
p7840
sS'required'
p7841
I00
sS'group_name'
p7842
Nsa(dp7843
S'description'
p7844
S'The seed for the master random number generator\n'
p7845
sS'cpp_type'
p7846
S'unsigned int'
p7847
sS'default'
p7848
S'0'
p7849
sS'name'
p7850
S'seed'
p7851
sS'required'
p7852
I00
sS'group_name'
p7853
S'Advanced'
p7854
sa(dp7855
S'description'
p7856
g3
sS'cpp_type'
p7857
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7858
sS'default'
p7859
S'PostprocessorDirichletBC'
p7860
sS'name'
p7861
S'type'
p7862
sS'required'
p7863
I00
sS'group_name'
p7864
Nsa(dp7865
S'description'
p7866
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7867
sS'cpp_type'
p7868
S'bool'
p7869
sS'default'
p7870
S'0'
p7871
sS'name'
p7872
S'use_displaced_mesh'
p7873
sS'required'
p7874
I00
sS'group_name'
p7875
S'Advanced'
p7876
sa(dp7877
S'description'
p7878
S'The name of the variable that this boundary condition applies to\n'
p7879
sS'cpp_type'
p7880
S'NonlinearVariableName'
p7881
sS'default'
p7882
g3
sS'name'
p7883
S'variable'
p7884
sS'required'
p7885
I01
sS'group_name'
p7886
NsasS'name'
p7887
S'/BCs/PostprocessorDirichletBC'
p7888
sa(dp7889
S'description'
p7890
g3
sS'subblocks'
p7891
NsS'parameters'
p7892
(lp7893
(dp7894
S'description'
p7895
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7896
sS'cpp_type'
p7897
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p7898
sS'default'
p7899
g3
sS'name'
p7900
S'boundary'
p7901
sS'required'
p7902
I01
sS'group_name'
p7903
Nsa(dp7904
S'description'
p7905
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7906
sS'cpp_type'
p7907
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7908
sS'default'
p7909
g3
sS'name'
p7910
S'diag_save_in'
p7911
sS'required'
p7912
I00
sS'group_name'
p7913
Nsa(dp7914
S'description'
p7915
S'Determines whether this object is calculated using an implicit or explicit form\n'
p7916
sS'cpp_type'
p7917
S'bool'
p7918
sS'default'
p7919
S'1'
p7920
sS'name'
p7921
S'implicit'
p7922
sS'required'
p7923
I00
sS'group_name'
p7924
S'Advanced'
p7925
sa(dp7926
S'description'
p7927
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p7928
sS'cpp_type'
p7929
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p7930
sS'default'
p7931
g3
sS'name'
p7932
S'save_in'
p7933
sS'required'
p7934
I00
sS'group_name'
p7935
Nsa(dp7936
S'description'
p7937
S'The seed for the master random number generator\n'
p7938
sS'cpp_type'
p7939
S'unsigned int'
p7940
sS'default'
p7941
S'0'
p7942
sS'name'
p7943
S'seed'
p7944
sS'required'
p7945
I00
sS'group_name'
p7946
S'Advanced'
p7947
sa(dp7948
S'description'
p7949
g3
sS'cpp_type'
p7950
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p7951
sS'default'
p7952
S'PresetBC'
p7953
sS'name'
p7954
S'type'
p7955
sS'required'
p7956
I00
sS'group_name'
p7957
Nsa(dp7958
S'description'
p7959
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p7960
sS'cpp_type'
p7961
S'bool'
p7962
sS'default'
p7963
S'0'
p7964
sS'name'
p7965
S'use_displaced_mesh'
p7966
sS'required'
p7967
I00
sS'group_name'
p7968
S'Advanced'
p7969
sa(dp7970
S'description'
p7971
S'Value of the BC\n'
p7972
sS'cpp_type'
p7973
S'double'
p7974
sS'default'
p7975
g3
sS'name'
p7976
S'value'
p7977
sS'required'
p7978
I01
sS'group_name'
p7979
Nsa(dp7980
S'description'
p7981
S'The name of the variable that this boundary condition applies to\n'
p7982
sS'cpp_type'
p7983
S'NonlinearVariableName'
p7984
sS'default'
p7985
g3
sS'name'
p7986
S'variable'
p7987
sS'required'
p7988
I01
sS'group_name'
p7989
NsasS'name'
p7990
S'/BCs/PresetBC'
p7991
sa(dp7992
S'description'
p7993
g3
sS'subblocks'
p7994
NsS'parameters'
p7995
(lp7996
(dp7997
S'description'
p7998
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p7999
sS'cpp_type'
p8000
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8001
sS'default'
p8002
g3
sS'name'
p8003
S'boundary'
p8004
sS'required'
p8005
I01
sS'group_name'
p8006
Nsa(dp8007
S'description'
p8008
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8009
sS'cpp_type'
p8010
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8011
sS'default'
p8012
g3
sS'name'
p8013
S'diag_save_in'
p8014
sS'required'
p8015
I00
sS'group_name'
p8016
Nsa(dp8017
S'description'
p8018
g3
sS'cpp_type'
p8019
S'double'
p8020
sS'default'
p8021
S'0'
p8022
sS'name'
p8023
S'duration'
p8024
sS'required'
p8025
I00
sS'group_name'
p8026
Nsa(dp8027
S'description'
p8028
g3
sS'cpp_type'
p8029
S'double'
p8030
sS'default'
p8031
S'0'
p8032
sS'name'
p8033
S'final'
p8034
sS'required'
p8035
I00
sS'group_name'
p8036
Nsa(dp8037
S'description'
p8038
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8039
sS'cpp_type'
p8040
S'bool'
p8041
sS'default'
p8042
S'1'
p8043
sS'name'
p8044
S'implicit'
p8045
sS'required'
p8046
I00
sS'group_name'
p8047
S'Advanced'
p8048
sa(dp8049
S'description'
p8050
g3
sS'cpp_type'
p8051
S'double'
p8052
sS'default'
p8053
S'0'
p8054
sS'name'
p8055
S'initial'
p8056
sS'required'
p8057
I00
sS'group_name'
p8058
Nsa(dp8059
S'description'
p8060
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8061
sS'cpp_type'
p8062
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8063
sS'default'
p8064
g3
sS'name'
p8065
S'save_in'
p8066
sS'required'
p8067
I00
sS'group_name'
p8068
Nsa(dp8069
S'description'
p8070
S'The seed for the master random number generator\n'
p8071
sS'cpp_type'
p8072
S'unsigned int'
p8073
sS'default'
p8074
S'0'
p8075
sS'name'
p8076
S'seed'
p8077
sS'required'
p8078
I00
sS'group_name'
p8079
S'Advanced'
p8080
sa(dp8081
S'description'
p8082
g3
sS'cpp_type'
p8083
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8084
sS'default'
p8085
S'SinDirichletBC'
p8086
sS'name'
p8087
S'type'
p8088
sS'required'
p8089
I00
sS'group_name'
p8090
Nsa(dp8091
S'description'
p8092
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8093
sS'cpp_type'
p8094
S'bool'
p8095
sS'default'
p8096
S'0'
p8097
sS'name'
p8098
S'use_displaced_mesh'
p8099
sS'required'
p8100
I00
sS'group_name'
p8101
S'Advanced'
p8102
sa(dp8103
S'description'
p8104
S'The name of the variable that this boundary condition applies to\n'
p8105
sS'cpp_type'
p8106
S'NonlinearVariableName'
p8107
sS'default'
p8108
g3
sS'name'
p8109
S'variable'
p8110
sS'required'
p8111
I01
sS'group_name'
p8112
NsasS'name'
p8113
S'/BCs/SinDirichletBC'
p8114
sa(dp8115
S'description'
p8116
g3
sS'subblocks'
p8117
NsS'parameters'
p8118
(lp8119
(dp8120
S'description'
p8121
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8122
sS'cpp_type'
p8123
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8124
sS'default'
p8125
g3
sS'name'
p8126
S'boundary'
p8127
sS'required'
p8128
I01
sS'group_name'
p8129
Nsa(dp8130
S'description'
p8131
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8132
sS'cpp_type'
p8133
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8134
sS'default'
p8135
g3
sS'name'
p8136
S'diag_save_in'
p8137
sS'required'
p8138
I00
sS'group_name'
p8139
S'Advanced'
p8140
sa(dp8141
S'description'
p8142
S'The duration of the ramp\n'
p8143
sS'cpp_type'
p8144
S'double'
p8145
sS'default'
p8146
S'0'
p8147
sS'name'
p8148
S'duration'
p8149
sS'required'
p8150
I00
sS'group_name'
p8151
Nsa(dp8152
S'description'
p8153
S'The final value of the gradient on the boundary\n'
p8154
sS'cpp_type'
p8155
S'double'
p8156
sS'default'
p8157
S'0'
p8158
sS'name'
p8159
S'final'
p8160
sS'required'
p8161
I00
sS'group_name'
p8162
Nsa(dp8163
S'description'
p8164
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8165
sS'cpp_type'
p8166
S'bool'
p8167
sS'default'
p8168
S'1'
p8169
sS'name'
p8170
S'implicit'
p8171
sS'required'
p8172
I00
sS'group_name'
p8173
S'Advanced'
p8174
sa(dp8175
S'description'
p8176
S'The initial value of the gradient on the boundary\n'
p8177
sS'cpp_type'
p8178
S'double'
p8179
sS'default'
p8180
S'0'
p8181
sS'name'
p8182
S'initial'
p8183
sS'required'
p8184
I00
sS'group_name'
p8185
Nsa(dp8186
S'description'
p8187
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8188
sS'cpp_type'
p8189
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8190
sS'default'
p8191
g3
sS'name'
p8192
S'save_in'
p8193
sS'required'
p8194
I00
sS'group_name'
p8195
S'Advanced'
p8196
sa(dp8197
S'description'
p8198
S'The seed for the master random number generator\n'
p8199
sS'cpp_type'
p8200
S'unsigned int'
p8201
sS'default'
p8202
S'0'
p8203
sS'name'
p8204
S'seed'
p8205
sS'required'
p8206
I00
sS'group_name'
p8207
S'Advanced'
p8208
sa(dp8209
S'description'
p8210
g3
sS'cpp_type'
p8211
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8212
sS'default'
p8213
S'SinNeumannBC'
p8214
sS'name'
p8215
S'type'
p8216
sS'required'
p8217
I00
sS'group_name'
p8218
Nsa(dp8219
S'description'
p8220
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8221
sS'cpp_type'
p8222
S'bool'
p8223
sS'default'
p8224
S'0'
p8225
sS'name'
p8226
S'use_displaced_mesh'
p8227
sS'required'
p8228
I00
sS'group_name'
p8229
S'Advanced'
p8230
sa(dp8231
S'description'
p8232
S'The name of the variable that this boundary condition applies to\n'
p8233
sS'cpp_type'
p8234
S'NonlinearVariableName'
p8235
sS'default'
p8236
g3
sS'name'
p8237
S'variable'
p8238
sS'required'
p8239
I01
sS'group_name'
p8240
NsasS'name'
p8241
S'/BCs/SinNeumannBC'
p8242
sa(dp8243
S'description'
p8244
g3
sS'subblocks'
p8245
NsS'parameters'
p8246
(lp8247
(dp8248
S'description'
p8249
S'No idea.\n'
p8250
sS'cpp_type'
p8251
S'double'
p8252
sS'default'
p8253
S'1'
p8254
sS'name'
p8255
S'alpha'
p8256
sS'required'
p8257
I00
sS'group_name'
p8258
Nsa(dp8259
S'description'
p8260
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8261
sS'cpp_type'
p8262
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8263
sS'default'
p8264
g3
sS'name'
p8265
S'boundary'
p8266
sS'required'
p8267
I01
sS'group_name'
p8268
Nsa(dp8269
S'description'
p8270
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8271
sS'cpp_type'
p8272
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8273
sS'default'
p8274
g3
sS'name'
p8275
S'diag_save_in'
p8276
sS'required'
p8277
I00
sS'group_name'
p8278
S'Advanced'
p8279
sa(dp8280
S'description'
p8281
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8282
sS'cpp_type'
p8283
S'bool'
p8284
sS'default'
p8285
S'1'
p8286
sS'name'
p8287
S'implicit'
p8288
sS'required'
p8289
I00
sS'group_name'
p8290
S'Advanced'
p8291
sa(dp8292
S'description'
p8293
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8294
sS'cpp_type'
p8295
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8296
sS'default'
p8297
g3
sS'name'
p8298
S'save_in'
p8299
sS'required'
p8300
I00
sS'group_name'
p8301
S'Advanced'
p8302
sa(dp8303
S'description'
p8304
S'The seed for the master random number generator\n'
p8305
sS'cpp_type'
p8306
S'unsigned int'
p8307
sS'default'
p8308
S'0'
p8309
sS'name'
p8310
S'seed'
p8311
sS'required'
p8312
I00
sS'group_name'
p8313
S'Advanced'
p8314
sa(dp8315
S'description'
p8316
g3
sS'cpp_type'
p8317
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8318
sS'default'
p8319
S'VacuumBC'
p8320
sS'name'
p8321
S'type'
p8322
sS'required'
p8323
I00
sS'group_name'
p8324
Nsa(dp8325
S'description'
p8326
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8327
sS'cpp_type'
p8328
S'bool'
p8329
sS'default'
p8330
S'0'
p8331
sS'name'
p8332
S'use_displaced_mesh'
p8333
sS'required'
p8334
I00
sS'group_name'
p8335
S'Advanced'
p8336
sa(dp8337
S'description'
p8338
S'The name of the variable that this boundary condition applies to\n'
p8339
sS'cpp_type'
p8340
S'NonlinearVariableName'
p8341
sS'default'
p8342
g3
sS'name'
p8343
S'variable'
p8344
sS'required'
p8345
I01
sS'group_name'
p8346
NsasS'name'
p8347
S'/BCs/VacuumBC'
p8348
sa(dp8349
S'description'
p8350
g3
sS'subblocks'
p8351
NsS'parameters'
p8352
(lp8353
(dp8354
S'description'
p8355
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8356
sS'cpp_type'
p8357
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8358
sS'default'
p8359
g3
sS'name'
p8360
S'boundary'
p8361
sS'required'
p8362
I01
sS'group_name'
p8363
Nsa(dp8364
S'description'
p8365
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8366
sS'cpp_type'
p8367
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8368
sS'default'
p8369
g3
sS'name'
p8370
S'diag_save_in'
p8371
sS'required'
p8372
I00
sS'group_name'
p8373
S'Advanced'
p8374
sa(dp8375
S'description'
p8376
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8377
sS'cpp_type'
p8378
S'bool'
p8379
sS'default'
p8380
S'1'
p8381
sS'name'
p8382
S'implicit'
p8383
sS'required'
p8384
I00
sS'group_name'
p8385
S'Advanced'
p8386
sa(dp8387
S'description'
p8388
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8389
sS'cpp_type'
p8390
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8391
sS'default'
p8392
g3
sS'name'
p8393
S'save_in'
p8394
sS'required'
p8395
I00
sS'group_name'
p8396
S'Advanced'
p8397
sa(dp8398
S'description'
p8399
S'The seed for the master random number generator\n'
p8400
sS'cpp_type'
p8401
S'unsigned int'
p8402
sS'default'
p8403
S'0'
p8404
sS'name'
p8405
S'seed'
p8406
sS'required'
p8407
I00
sS'group_name'
p8408
S'Advanced'
p8409
sa(dp8410
S'description'
p8411
g3
sS'cpp_type'
p8412
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8413
sS'default'
p8414
S'VectorNeumannBC'
p8415
sS'name'
p8416
S'type'
p8417
sS'required'
p8418
I00
sS'group_name'
p8419
Nsa(dp8420
S'description'
p8421
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8422
sS'cpp_type'
p8423
S'bool'
p8424
sS'default'
p8425
S'0'
p8426
sS'name'
p8427
S'use_displaced_mesh'
p8428
sS'required'
p8429
I00
sS'group_name'
p8430
S'Advanced'
p8431
sa(dp8432
S'description'
p8433
S'The name of the variable that this boundary condition applies to\n'
p8434
sS'cpp_type'
p8435
S'NonlinearVariableName'
p8436
sS'default'
p8437
g3
sS'name'
p8438
S'variable'
p8439
sS'required'
p8440
I01
sS'group_name'
p8441
Nsa(dp8442
S'description'
p8443
S'vector this BC should act in\n'
p8444
sS'cpp_type'
p8445
S'libMesh::VectorValue<double>'
p8446
sS'default'
p8447
S'0 0 0'
p8448
sS'name'
p8449
S'vector_value'
p8450
sS'required'
p8451
I00
sS'group_name'
p8452
NsasS'name'
p8453
S'/BCs/VectorNeumannBC'
p8454
sa(dp8455
S'description'
p8456
g3
sS'subblocks'
p8457
NsS'parameters'
p8458
(lp8459
(dp8460
S'description'
p8461
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8462
sS'cpp_type'
p8463
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8464
sS'default'
p8465
g3
sS'name'
p8466
S'boundary'
p8467
sS'required'
p8468
I01
sS'group_name'
p8469
Nsa(dp8470
S'description'
p8471
S"The name of auxiliary variables to save this BC's diagonal jacobian contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8472
sS'cpp_type'
p8473
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8474
sS'default'
p8475
g3
sS'name'
p8476
S'diag_save_in'
p8477
sS'required'
p8478
I00
sS'group_name'
p8479
S'Advanced'
p8480
sa(dp8481
S'description'
p8482
S'Determines whether this object is calculated using an implicit or explicit form\n'
p8483
sS'cpp_type'
p8484
S'bool'
p8485
sS'default'
p8486
S'1'
p8487
sS'name'
p8488
S'implicit'
p8489
sS'required'
p8490
I00
sS'group_name'
p8491
S'Advanced'
p8492
sa(dp8493
S'description'
p8494
S"The name of auxiliary variables to save this BC's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p8495
sS'cpp_type'
p8496
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p8497
sS'default'
p8498
g3
sS'name'
p8499
S'save_in'
p8500
sS'required'
p8501
I00
sS'group_name'
p8502
S'Advanced'
p8503
sa(dp8504
S'description'
p8505
S'The seed for the master random number generator\n'
p8506
sS'cpp_type'
p8507
S'unsigned int'
p8508
sS'default'
p8509
S'0'
p8510
sS'name'
p8511
S'seed'
p8512
sS'required'
p8513
I00
sS'group_name'
p8514
S'Advanced'
p8515
sa(dp8516
S'description'
p8517
g3
sS'cpp_type'
p8518
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8519
sS'default'
p8520
S'WeakGradientBC'
p8521
sS'name'
p8522
S'type'
p8523
sS'required'
p8524
I00
sS'group_name'
p8525
Nsa(dp8526
S'description'
p8527
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8528
sS'cpp_type'
p8529
S'bool'
p8530
sS'default'
p8531
S'0'
p8532
sS'name'
p8533
S'use_displaced_mesh'
p8534
sS'required'
p8535
I00
sS'group_name'
p8536
S'Advanced'
p8537
sa(dp8538
S'description'
p8539
S'The name of the variable that this boundary condition applies to\n'
p8540
sS'cpp_type'
p8541
S'NonlinearVariableName'
p8542
sS'default'
p8543
g3
sS'name'
p8544
S'variable'
p8545
sS'required'
p8546
I01
sS'group_name'
p8547
NsasS'name'
p8548
S'/BCs/WeakGradientBC'
p8549
sasS'parameters'
p8550
NsS'name'
p8551
S'/BCs'
p8552
sa(dp8553
S'description'
p8554
g3
sS'subblocks'
p8555
(lp8556
(dp8557
S'description'
p8558
g3
sS'subblocks'
p8559
NsS'parameters'
p8560
(lp8561
(dp8562
S'description'
p8563
S'A string representing the Moose Object that will be built by this Action\n'
p8564
sS'cpp_type'
p8565
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8566
sS'default'
p8567
g3
sS'name'
p8568
S'type'
p8569
sS'required'
p8570
I01
sS'group_name'
p8571
NsasS'name'
p8572
S'/Bounds/*'
p8573
sa(dp8574
S'description'
p8575
S'Calculate location of grain boundaries in a polycrystalline sample\n'
p8576
sS'subblocks'
p8577
NsS'parameters'
p8578
(lp8579
(dp8580
S'description'
p8581
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8582
sS'cpp_type'
p8583
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p8584
sS'default'
p8585
g3
sS'name'
p8586
S'block'
p8587
sS'required'
p8588
I00
sS'group_name'
p8589
Nsa(dp8590
S'description'
p8591
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8592
sS'cpp_type'
p8593
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8594
sS'default'
p8595
g3
sS'name'
p8596
S'boundary'
p8597
sS'required'
p8598
I00
sS'group_name'
p8599
Nsa(dp8600
S'name'
p8601
S'execute_on'
p8602
sS'cpp_type'
p8603
S'MultiMooseEnum'
p8604
sS'default'
p8605
S'LINEAR'
p8606
sS'description'
p8607
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8608
sS'required'
p8609
I00
sS'options'
p8610
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8611
sS'group_name'
p8612
Nsa(dp8613
S'description'
p8614
S'Array of coupled variables (num_name)\n'
p8615
sS'cpp_type'
p8616
S'unsigned int'
p8617
sS'default'
p8618
g3
sS'name'
p8619
S'op_num'
p8620
sS'required'
p8621
I00
sS'group_name'
p8622
Nsa(dp8623
S'description'
p8624
S'The seed for the master random number generator\n'
p8625
sS'cpp_type'
p8626
S'unsigned int'
p8627
sS'default'
p8628
S'0'
p8629
sS'name'
p8630
S'seed'
p8631
sS'required'
p8632
I00
sS'group_name'
p8633
S'Advanced'
p8634
sa(dp8635
S'description'
p8636
g3
sS'cpp_type'
p8637
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8638
sS'default'
p8639
S'BndsCalcAux'
p8640
sS'name'
p8641
S'type'
p8642
sS'required'
p8643
I00
sS'group_name'
p8644
Nsa(dp8645
S'description'
p8646
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8647
sS'cpp_type'
p8648
S'bool'
p8649
sS'default'
p8650
S'0'
p8651
sS'name'
p8652
S'use_displaced_mesh'
p8653
sS'required'
p8654
I00
sS'group_name'
p8655
S'Advanced'
p8656
sa(dp8657
S'description'
p8658
S'Array of coupled variables\n'
p8659
sS'cpp_type'
p8660
S'std::vector<VariableName>'
p8661
sS'default'
p8662
g3
sS'name'
p8663
S'v'
p8664
sS'required'
p8665
I01
sS'group_name'
p8666
Nsa(dp8667
S'description'
p8668
S'Array of coupled variables (base_name)\n'
p8669
sS'cpp_type'
p8670
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8671
sS'default'
p8672
g3
sS'name'
p8673
S'var_name_base'
p8674
sS'required'
p8675
I00
sS'group_name'
p8676
Nsa(dp8677
S'description'
p8678
S'The name of the variable that this object applies to\n'
p8679
sS'cpp_type'
p8680
S'AuxVariableName'
p8681
sS'default'
p8682
g3
sS'name'
p8683
S'variable'
p8684
sS'required'
p8685
I01
sS'group_name'
p8686
NsasS'name'
p8687
S'/Bounds/BndsCalcAux'
p8688
sa(dp8689
S'description'
p8690
g3
sS'subblocks'
p8691
NsS'parameters'
p8692
(lp8693
(dp8694
S'description'
p8695
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8696
sS'cpp_type'
p8697
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p8698
sS'default'
p8699
g3
sS'name'
p8700
S'block'
p8701
sS'required'
p8702
I00
sS'group_name'
p8703
Nsa(dp8704
S'description'
p8705
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8706
sS'cpp_type'
p8707
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8708
sS'default'
p8709
g3
sS'name'
p8710
S'boundary'
p8711
sS'required'
p8712
I00
sS'group_name'
p8713
Nsa(dp8714
S'description'
p8715
S'The variable to be bounded\n'
p8716
sS'cpp_type'
p8717
S'std::vector<VariableName>'
p8718
sS'default'
p8719
g3
sS'name'
p8720
S'bounded_variable'
p8721
sS'required'
p8722
I01
sS'group_name'
p8723
Nsa(dp8724
S'name'
p8725
S'execute_on'
p8726
sS'cpp_type'
p8727
S'MultiMooseEnum'
p8728
sS'default'
p8729
S'LINEAR'
p8730
sS'description'
p8731
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8732
sS'required'
p8733
I00
sS'options'
p8734
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8735
sS'group_name'
p8736
Nsa(dp8737
S'description'
p8738
S'The lower bound for the variable\n'
p8739
sS'cpp_type'
p8740
S'double'
p8741
sS'default'
p8742
g3
sS'name'
p8743
S'lower'
p8744
sS'required'
p8745
I00
sS'group_name'
p8746
Nsa(dp8747
S'description'
p8748
S'The seed for the master random number generator\n'
p8749
sS'cpp_type'
p8750
S'unsigned int'
p8751
sS'default'
p8752
S'0'
p8753
sS'name'
p8754
S'seed'
p8755
sS'required'
p8756
I00
sS'group_name'
p8757
S'Advanced'
p8758
sa(dp8759
S'description'
p8760
g3
sS'cpp_type'
p8761
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8762
sS'default'
p8763
S'BoundsAux'
p8764
sS'name'
p8765
S'type'
p8766
sS'required'
p8767
I00
sS'group_name'
p8768
Nsa(dp8769
S'description'
p8770
S'The upper bound for the variable\n'
p8771
sS'cpp_type'
p8772
S'double'
p8773
sS'default'
p8774
g3
sS'name'
p8775
S'upper'
p8776
sS'required'
p8777
I00
sS'group_name'
p8778
Nsa(dp8779
S'description'
p8780
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8781
sS'cpp_type'
p8782
S'bool'
p8783
sS'default'
p8784
S'0'
p8785
sS'name'
p8786
S'use_displaced_mesh'
p8787
sS'required'
p8788
I00
sS'group_name'
p8789
S'Advanced'
p8790
sa(dp8791
S'description'
p8792
S'The name of the variable that this object applies to\n'
p8793
sS'cpp_type'
p8794
S'AuxVariableName'
p8795
sS'default'
p8796
g3
sS'name'
p8797
S'variable'
p8798
sS'required'
p8799
I01
sS'group_name'
p8800
NsasS'name'
p8801
S'/Bounds/BoundsAux'
p8802
sa(dp8803
S'description'
p8804
g3
sS'subblocks'
p8805
NsS'parameters'
p8806
(lp8807
(dp8808
S'description'
p8809
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8810
sS'cpp_type'
p8811
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p8812
sS'default'
p8813
g3
sS'name'
p8814
S'block'
p8815
sS'required'
p8816
I00
sS'group_name'
p8817
Nsa(dp8818
S'description'
p8819
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8820
sS'cpp_type'
p8821
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8822
sS'default'
p8823
g3
sS'name'
p8824
S'boundary'
p8825
sS'required'
p8826
I00
sS'group_name'
p8827
Nsa(dp8828
S'name'
p8829
S'execute_on'
p8830
sS'cpp_type'
p8831
S'MultiMooseEnum'
p8832
sS'default'
p8833
S'LINEAR'
p8834
sS'description'
p8835
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8836
sS'required'
p8837
I00
sS'options'
p8838
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8839
sS'group_name'
p8840
Nsa(dp8841
S'description'
p8842
S'The seed for the master random number generator\n'
p8843
sS'cpp_type'
p8844
S'unsigned int'
p8845
sS'default'
p8846
S'0'
p8847
sS'name'
p8848
S'seed'
p8849
sS'required'
p8850
I00
sS'group_name'
p8851
S'Advanced'
p8852
sa(dp8853
S'description'
p8854
g3
sS'cpp_type'
p8855
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8856
sS'default'
p8857
S'ConstantAux'
p8858
sS'name'
p8859
S'type'
p8860
sS'required'
p8861
I00
sS'group_name'
p8862
Nsa(dp8863
S'description'
p8864
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8865
sS'cpp_type'
p8866
S'bool'
p8867
sS'default'
p8868
S'0'
p8869
sS'name'
p8870
S'use_displaced_mesh'
p8871
sS'required'
p8872
I00
sS'group_name'
p8873
S'Advanced'
p8874
sa(dp8875
S'description'
p8876
S'Some constant value that can be read from the input file\n'
p8877
sS'cpp_type'
p8878
S'double'
p8879
sS'default'
p8880
S'0'
p8881
sS'name'
p8882
S'value'
p8883
sS'required'
p8884
I00
sS'group_name'
p8885
Nsa(dp8886
S'description'
p8887
S'The name of the variable that this object applies to\n'
p8888
sS'cpp_type'
p8889
S'AuxVariableName'
p8890
sS'default'
p8891
g3
sS'name'
p8892
S'variable'
p8893
sS'required'
p8894
I01
sS'group_name'
p8895
NsasS'name'
p8896
S'/Bounds/ConstantAux'
p8897
sa(dp8898
S'description'
p8899
g3
sS'subblocks'
p8900
NsS'parameters'
p8901
(lp8902
(dp8903
S'description'
p8904
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8905
sS'cpp_type'
p8906
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p8907
sS'default'
p8908
g3
sS'name'
p8909
S'block'
p8910
sS'required'
p8911
I00
sS'group_name'
p8912
Nsa(dp8913
S'description'
p8914
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p8915
sS'cpp_type'
p8916
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p8917
sS'default'
p8918
g3
sS'name'
p8919
S'boundary'
p8920
sS'required'
p8921
I00
sS'group_name'
p8922
Nsa(dp8923
S'description'
p8924
S'The variable that is being debugged.\n'
p8925
sS'cpp_type'
p8926
S'NonlinearVariableName'
p8927
sS'default'
p8928
g3
sS'name'
p8929
S'debug_variable'
p8930
sS'required'
p8931
I01
sS'group_name'
p8932
Nsa(dp8933
S'name'
p8934
S'execute_on'
p8935
sS'cpp_type'
p8936
S'MultiMooseEnum'
p8937
sS'default'
p8938
S'LINEAR'
p8939
sS'description'
p8940
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p8941
sS'required'
p8942
I00
sS'options'
p8943
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p8944
sS'group_name'
p8945
Nsa(dp8946
S'description'
p8947
S'The seed for the master random number generator\n'
p8948
sS'cpp_type'
p8949
S'unsigned int'
p8950
sS'default'
p8951
S'0'
p8952
sS'name'
p8953
S'seed'
p8954
sS'required'
p8955
I00
sS'group_name'
p8956
S'Advanced'
p8957
sa(dp8958
S'description'
p8959
g3
sS'cpp_type'
p8960
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p8961
sS'default'
p8962
S'DebugResidualAux'
p8963
sS'name'
p8964
S'type'
p8965
sS'required'
p8966
I00
sS'group_name'
p8967
Nsa(dp8968
S'description'
p8969
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p8970
sS'cpp_type'
p8971
S'bool'
p8972
sS'default'
p8973
S'0'
p8974
sS'name'
p8975
S'use_displaced_mesh'
p8976
sS'required'
p8977
I00
sS'group_name'
p8978
S'Advanced'
p8979
sa(dp8980
S'description'
p8981
S'The name of the variable that this object applies to\n'
p8982
sS'cpp_type'
p8983
S'AuxVariableName'
p8984
sS'default'
p8985
g3
sS'name'
p8986
S'variable'
p8987
sS'required'
p8988
I01
sS'group_name'
p8989
NsasS'name'
p8990
S'/Bounds/DebugResidualAux'
p8991
sa(dp8992
S'description'
p8993
g3
sS'subblocks'
p8994
NsS'parameters'
p8995
(lp8996
(dp8997
S'description'
p8998
S'The list of block ids (SubdomainID) that this object will be applied\n'
p8999
sS'cpp_type'
p9000
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9001
sS'default'
p9002
g3
sS'name'
p9003
S'block'
p9004
sS'required'
p9005
I00
sS'group_name'
p9006
Nsa(dp9007
S'description'
p9008
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9009
sS'cpp_type'
p9010
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9011
sS'default'
p9012
g3
sS'name'
p9013
S'boundary'
p9014
sS'required'
p9015
I00
sS'group_name'
p9016
Nsa(dp9017
S'name'
p9018
S'execute_on'
p9019
sS'cpp_type'
p9020
S'MultiMooseEnum'
p9021
sS'default'
p9022
S'LINEAR'
p9023
sS'description'
p9024
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9025
sS'required'
p9026
I00
sS'options'
p9027
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9028
sS'group_name'
p9029
Nsa(dp9030
S'description'
p9031
S'The function to use as the value\n'
p9032
sS'cpp_type'
p9033
S'FunctionName'
p9034
sS'default'
p9035
g3
sS'name'
p9036
S'function'
p9037
sS'required'
p9038
I01
sS'group_name'
p9039
Nsa(dp9040
S'description'
p9041
S'The seed for the master random number generator\n'
p9042
sS'cpp_type'
p9043
S'unsigned int'
p9044
sS'default'
p9045
S'0'
p9046
sS'name'
p9047
S'seed'
p9048
sS'required'
p9049
I00
sS'group_name'
p9050
S'Advanced'
p9051
sa(dp9052
S'description'
p9053
g3
sS'cpp_type'
p9054
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9055
sS'default'
p9056
S'FunctionAux'
p9057
sS'name'
p9058
S'type'
p9059
sS'required'
p9060
I00
sS'group_name'
p9061
Nsa(dp9062
S'description'
p9063
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9064
sS'cpp_type'
p9065
S'bool'
p9066
sS'default'
p9067
S'0'
p9068
sS'name'
p9069
S'use_displaced_mesh'
p9070
sS'required'
p9071
I00
sS'group_name'
p9072
S'Advanced'
p9073
sa(dp9074
S'description'
p9075
S'The name of the variable that this object applies to\n'
p9076
sS'cpp_type'
p9077
S'AuxVariableName'
p9078
sS'default'
p9079
g3
sS'name'
p9080
S'variable'
p9081
sS'required'
p9082
I01
sS'group_name'
p9083
NsasS'name'
p9084
S'/Bounds/FunctionAux'
p9085
sa(dp9086
S'description'
p9087
g3
sS'subblocks'
p9088
NsS'parameters'
p9089
(lp9090
(dp9091
S'description'
p9092
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9093
sS'cpp_type'
p9094
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9095
sS'default'
p9096
g3
sS'name'
p9097
S'block'
p9098
sS'required'
p9099
I00
sS'group_name'
p9100
Nsa(dp9101
S'description'
p9102
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9103
sS'cpp_type'
p9104
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9105
sS'default'
p9106
g3
sS'name'
p9107
S'boundary'
p9108
sS'required'
p9109
I00
sS'group_name'
p9110
Nsa(dp9111
S'name'
p9112
S'execute_on'
p9113
sS'cpp_type'
p9114
S'MultiMooseEnum'
p9115
sS'default'
p9116
S'LINEAR'
p9117
sS'description'
p9118
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9119
sS'required'
p9120
I00
sS'options'
p9121
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9122
sS'group_name'
p9123
Nsa(dp9124
S'description'
p9125
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p9126
sS'cpp_type'
p9127
S'double'
p9128
sS'default'
p9129
g3
sS'name'
p9130
S'normal_smoothing_distance'
p9131
sS'required'
p9132
I00
sS'group_name'
p9133
Nsa(dp9134
S'description'
p9135
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p9136
sS'cpp_type'
p9137
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9138
sS'default'
p9139
g3
sS'name'
p9140
S'normal_smoothing_method'
p9141
sS'required'
p9142
I00
sS'group_name'
p9143
Nsa(dp9144
S'name'
p9145
S'order'
p9146
sS'cpp_type'
p9147
S'MooseEnum'
p9148
sS'default'
p9149
S'FIRST'
p9150
sS'description'
p9151
S'The finite element order\n'
p9152
sS'required'
p9153
I00
sS'options'
p9154
S'FIRST SECOND THIRD FOURTH'
p9155
sS'group_name'
p9156
Nsa(dp9157
S'description'
p9158
S'The boundary on the other side of a gap.\n'
p9159
sS'cpp_type'
p9160
S'BoundaryName'
p9161
sS'default'
p9162
g3
sS'name'
p9163
S'paired_boundary'
p9164
sS'required'
p9165
I01
sS'group_name'
p9166
Nsa(dp9167
S'description'
p9168
S'The variable to get the value of.\n'
p9169
sS'cpp_type'
p9170
S'VariableName'
p9171
sS'default'
p9172
g3
sS'name'
p9173
S'paired_variable'
p9174
sS'required'
p9175
I01
sS'group_name'
p9176
Nsa(dp9177
S'description'
p9178
S'The seed for the master random number generator\n'
p9179
sS'cpp_type'
p9180
S'unsigned int'
p9181
sS'default'
p9182
S'0'
p9183
sS'name'
p9184
S'seed'
p9185
sS'required'
p9186
I00
sS'group_name'
p9187
S'Advanced'
p9188
sa(dp9189
S'description'
p9190
S'Tangential distance to extend edges of contact surfaces\n'
p9191
sS'cpp_type'
p9192
S'double'
p9193
sS'default'
p9194
g3
sS'name'
p9195
S'tangential_tolerance'
p9196
sS'required'
p9197
I00
sS'group_name'
p9198
Nsa(dp9199
S'description'
p9200
g3
sS'cpp_type'
p9201
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9202
sS'default'
p9203
S'GapValueAux'
p9204
sS'name'
p9205
S'type'
p9206
sS'required'
p9207
I00
sS'group_name'
p9208
Nsa(dp9209
S'description'
p9210
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9211
sS'cpp_type'
p9212
S'bool'
p9213
sS'default'
p9214
S'1'
p9215
sS'name'
p9216
S'use_displaced_mesh'
p9217
sS'required'
p9218
I00
sS'group_name'
p9219
S'Advanced'
p9220
sa(dp9221
S'description'
p9222
S'The name of the variable that this object applies to\n'
p9223
sS'cpp_type'
p9224
S'AuxVariableName'
p9225
sS'default'
p9226
g3
sS'name'
p9227
S'variable'
p9228
sS'required'
p9229
I01
sS'group_name'
p9230
Nsa(dp9231
S'description'
p9232
S'Whether to output warning messages concerning nodes not being found\n'
p9233
sS'cpp_type'
p9234
S'bool'
p9235
sS'default'
p9236
S'0'
p9237
sS'name'
p9238
S'warnings'
p9239
sS'required'
p9240
I00
sS'group_name'
p9241
NsasS'name'
p9242
S'/Bounds/GapValueAux'
p9243
sa(dp9244
S'description'
p9245
g3
sS'subblocks'
p9246
NsS'parameters'
p9247
(lp9248
(dp9249
S'description'
p9250
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9251
sS'cpp_type'
p9252
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9253
sS'default'
p9254
g3
sS'name'
p9255
S'block'
p9256
sS'required'
p9257
I00
sS'group_name'
p9258
Nsa(dp9259
S'description'
p9260
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9261
sS'cpp_type'
p9262
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9263
sS'default'
p9264
g3
sS'name'
p9265
S'boundary'
p9266
sS'required'
p9267
I00
sS'group_name'
p9268
Nsa(dp9269
S'name'
p9270
S'execute_on'
p9271
sS'cpp_type'
p9272
S'MultiMooseEnum'
p9273
sS'default'
p9274
S'LINEAR'
p9275
sS'description'
p9276
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9277
sS'required'
p9278
I00
sS'options'
p9279
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9280
sS'group_name'
p9281
Nsa(dp9282
S'description'
p9283
S'The factor by which to multiply your material property for visualization\n'
p9284
sS'cpp_type'
p9285
S'double'
p9286
sS'default'
p9287
S'1'
p9288
sS'name'
p9289
S'factor'
p9290
sS'required'
p9291
I00
sS'group_name'
p9292
Nsa(dp9293
S'description'
p9294
S'The offset to add to your material property for visualization\n'
p9295
sS'cpp_type'
p9296
S'double'
p9297
sS'default'
p9298
S'0'
p9299
sS'name'
p9300
S'offset'
p9301
sS'required'
p9302
I00
sS'group_name'
p9303
Nsa(dp9304
S'description'
p9305
S'The scalar material property name\n'
p9306
sS'cpp_type'
p9307
S'MaterialPropertyName'
p9308
sS'default'
p9309
g3
sS'name'
p9310
S'property'
p9311
sS'required'
p9312
I01
sS'group_name'
p9313
Nsa(dp9314
S'description'
p9315
S'The seed for the master random number generator\n'
p9316
sS'cpp_type'
p9317
S'unsigned int'
p9318
sS'default'
p9319
S'0'
p9320
sS'name'
p9321
S'seed'
p9322
sS'required'
p9323
I00
sS'group_name'
p9324
S'Advanced'
p9325
sa(dp9326
S'description'
p9327
g3
sS'cpp_type'
p9328
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9329
sS'default'
p9330
S'MaterialRealAux'
p9331
sS'name'
p9332
S'type'
p9333
sS'required'
p9334
I00
sS'group_name'
p9335
Nsa(dp9336
S'description'
p9337
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9338
sS'cpp_type'
p9339
S'bool'
p9340
sS'default'
p9341
S'0'
p9342
sS'name'
p9343
S'use_displaced_mesh'
p9344
sS'required'
p9345
I00
sS'group_name'
p9346
S'Advanced'
p9347
sa(dp9348
S'description'
p9349
S'The name of the variable that this object applies to\n'
p9350
sS'cpp_type'
p9351
S'AuxVariableName'
p9352
sS'default'
p9353
g3
sS'name'
p9354
S'variable'
p9355
sS'required'
p9356
I01
sS'group_name'
p9357
NsasS'name'
p9358
S'/Bounds/MaterialRealAux'
p9359
sa(dp9360
S'description'
p9361
g3
sS'subblocks'
p9362
NsS'parameters'
p9363
(lp9364
(dp9365
S'description'
p9366
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9367
sS'cpp_type'
p9368
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9369
sS'default'
p9370
g3
sS'name'
p9371
S'block'
p9372
sS'required'
p9373
I00
sS'group_name'
p9374
Nsa(dp9375
S'description'
p9376
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9377
sS'cpp_type'
p9378
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9379
sS'default'
p9380
g3
sS'name'
p9381
S'boundary'
p9382
sS'required'
p9383
I00
sS'group_name'
p9384
Nsa(dp9385
S'description'
p9386
S'The column component to consider for this kernel\n'
p9387
sS'cpp_type'
p9388
S'unsigned int'
p9389
sS'default'
p9390
S'0'
p9391
sS'name'
p9392
S'column'
p9393
sS'required'
p9394
I00
sS'group_name'
p9395
Nsa(dp9396
S'name'
p9397
S'execute_on'
p9398
sS'cpp_type'
p9399
S'MultiMooseEnum'
p9400
sS'default'
p9401
S'LINEAR'
p9402
sS'description'
p9403
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9404
sS'required'
p9405
I00
sS'options'
p9406
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9407
sS'group_name'
p9408
Nsa(dp9409
S'description'
p9410
S'The factor by which to multiply your material property for visualization\n'
p9411
sS'cpp_type'
p9412
S'double'
p9413
sS'default'
p9414
S'1'
p9415
sS'name'
p9416
S'factor'
p9417
sS'required'
p9418
I00
sS'group_name'
p9419
Nsa(dp9420
S'description'
p9421
S'The offset to add to your material property for visualization\n'
p9422
sS'cpp_type'
p9423
S'double'
p9424
sS'default'
p9425
S'0'
p9426
sS'name'
p9427
S'offset'
p9428
sS'required'
p9429
I00
sS'group_name'
p9430
Nsa(dp9431
S'description'
p9432
S'The scalar material property name\n'
p9433
sS'cpp_type'
p9434
S'MaterialPropertyName'
p9435
sS'default'
p9436
g3
sS'name'
p9437
S'property'
p9438
sS'required'
p9439
I01
sS'group_name'
p9440
Nsa(dp9441
S'description'
p9442
S'The row component to consider for this kernel\n'
p9443
sS'cpp_type'
p9444
S'unsigned int'
p9445
sS'default'
p9446
S'0'
p9447
sS'name'
p9448
S'row'
p9449
sS'required'
p9450
I00
sS'group_name'
p9451
Nsa(dp9452
S'description'
p9453
S'The seed for the master random number generator\n'
p9454
sS'cpp_type'
p9455
S'unsigned int'
p9456
sS'default'
p9457
S'0'
p9458
sS'name'
p9459
S'seed'
p9460
sS'required'
p9461
I00
sS'group_name'
p9462
S'Advanced'
p9463
sa(dp9464
S'description'
p9465
g3
sS'cpp_type'
p9466
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9467
sS'default'
p9468
S'MaterialRealDenseMatrixAux'
p9469
sS'name'
p9470
S'type'
p9471
sS'required'
p9472
I00
sS'group_name'
p9473
Nsa(dp9474
S'description'
p9475
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9476
sS'cpp_type'
p9477
S'bool'
p9478
sS'default'
p9479
S'0'
p9480
sS'name'
p9481
S'use_displaced_mesh'
p9482
sS'required'
p9483
I00
sS'group_name'
p9484
S'Advanced'
p9485
sa(dp9486
S'description'
p9487
S'The name of the variable that this object applies to\n'
p9488
sS'cpp_type'
p9489
S'AuxVariableName'
p9490
sS'default'
p9491
g3
sS'name'
p9492
S'variable'
p9493
sS'required'
p9494
I01
sS'group_name'
p9495
NsasS'name'
p9496
S'/Bounds/MaterialRealDenseMatrixAux'
p9497
sa(dp9498
S'description'
p9499
g3
sS'subblocks'
p9500
NsS'parameters'
p9501
(lp9502
(dp9503
S'description'
p9504
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9505
sS'cpp_type'
p9506
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9507
sS'default'
p9508
g3
sS'name'
p9509
S'block'
p9510
sS'required'
p9511
I00
sS'group_name'
p9512
Nsa(dp9513
S'description'
p9514
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9515
sS'cpp_type'
p9516
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9517
sS'default'
p9518
g3
sS'name'
p9519
S'boundary'
p9520
sS'required'
p9521
I00
sS'group_name'
p9522
Nsa(dp9523
S'description'
p9524
S'The column component to consider for this kernel\n'
p9525
sS'cpp_type'
p9526
S'unsigned int'
p9527
sS'default'
p9528
S'0'
p9529
sS'name'
p9530
S'column'
p9531
sS'required'
p9532
I00
sS'group_name'
p9533
Nsa(dp9534
S'name'
p9535
S'execute_on'
p9536
sS'cpp_type'
p9537
S'MultiMooseEnum'
p9538
sS'default'
p9539
S'LINEAR'
p9540
sS'description'
p9541
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9542
sS'required'
p9543
I00
sS'options'
p9544
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9545
sS'group_name'
p9546
Nsa(dp9547
S'description'
p9548
S'The factor by which to multiply your material property for visualization\n'
p9549
sS'cpp_type'
p9550
S'double'
p9551
sS'default'
p9552
S'1'
p9553
sS'name'
p9554
S'factor'
p9555
sS'required'
p9556
I00
sS'group_name'
p9557
Nsa(dp9558
S'description'
p9559
S'The offset to add to your material property for visualization\n'
p9560
sS'cpp_type'
p9561
S'double'
p9562
sS'default'
p9563
S'0'
p9564
sS'name'
p9565
S'offset'
p9566
sS'required'
p9567
I00
sS'group_name'
p9568
Nsa(dp9569
S'description'
p9570
S'The scalar material property name\n'
p9571
sS'cpp_type'
p9572
S'MaterialPropertyName'
p9573
sS'default'
p9574
g3
sS'name'
p9575
S'property'
p9576
sS'required'
p9577
I01
sS'group_name'
p9578
Nsa(dp9579
S'description'
p9580
S'The row component to consider for this kernel\n'
p9581
sS'cpp_type'
p9582
S'unsigned int'
p9583
sS'default'
p9584
S'0'
p9585
sS'name'
p9586
S'row'
p9587
sS'required'
p9588
I00
sS'group_name'
p9589
Nsa(dp9590
S'description'
p9591
S'The seed for the master random number generator\n'
p9592
sS'cpp_type'
p9593
S'unsigned int'
p9594
sS'default'
p9595
S'0'
p9596
sS'name'
p9597
S'seed'
p9598
sS'required'
p9599
I00
sS'group_name'
p9600
S'Advanced'
p9601
sa(dp9602
S'description'
p9603
g3
sS'cpp_type'
p9604
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9605
sS'default'
p9606
S'MaterialRealTensorValueAux'
p9607
sS'name'
p9608
S'type'
p9609
sS'required'
p9610
I00
sS'group_name'
p9611
Nsa(dp9612
S'description'
p9613
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9614
sS'cpp_type'
p9615
S'bool'
p9616
sS'default'
p9617
S'0'
p9618
sS'name'
p9619
S'use_displaced_mesh'
p9620
sS'required'
p9621
I00
sS'group_name'
p9622
S'Advanced'
p9623
sa(dp9624
S'description'
p9625
S'The name of the variable that this object applies to\n'
p9626
sS'cpp_type'
p9627
S'AuxVariableName'
p9628
sS'default'
p9629
g3
sS'name'
p9630
S'variable'
p9631
sS'required'
p9632
I01
sS'group_name'
p9633
NsasS'name'
p9634
S'/Bounds/MaterialRealTensorValueAux'
p9635
sa(dp9636
S'description'
p9637
g3
sS'subblocks'
p9638
NsS'parameters'
p9639
(lp9640
(dp9641
S'description'
p9642
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9643
sS'cpp_type'
p9644
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9645
sS'default'
p9646
g3
sS'name'
p9647
S'block'
p9648
sS'required'
p9649
I00
sS'group_name'
p9650
Nsa(dp9651
S'description'
p9652
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9653
sS'cpp_type'
p9654
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9655
sS'default'
p9656
g3
sS'name'
p9657
S'boundary'
p9658
sS'required'
p9659
I00
sS'group_name'
p9660
Nsa(dp9661
S'description'
p9662
S'The vector component to consider for this kernel\n'
p9663
sS'cpp_type'
p9664
S'unsigned int'
p9665
sS'default'
p9666
S'0'
p9667
sS'name'
p9668
S'component'
p9669
sS'required'
p9670
I00
sS'group_name'
p9671
Nsa(dp9672
S'name'
p9673
S'execute_on'
p9674
sS'cpp_type'
p9675
S'MultiMooseEnum'
p9676
sS'default'
p9677
S'LINEAR'
p9678
sS'description'
p9679
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9680
sS'required'
p9681
I00
sS'options'
p9682
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9683
sS'group_name'
p9684
Nsa(dp9685
S'description'
p9686
S'The factor by which to multiply your material property for visualization\n'
p9687
sS'cpp_type'
p9688
S'double'
p9689
sS'default'
p9690
S'1'
p9691
sS'name'
p9692
S'factor'
p9693
sS'required'
p9694
I00
sS'group_name'
p9695
Nsa(dp9696
S'description'
p9697
S'The offset to add to your material property for visualization\n'
p9698
sS'cpp_type'
p9699
S'double'
p9700
sS'default'
p9701
S'0'
p9702
sS'name'
p9703
S'offset'
p9704
sS'required'
p9705
I00
sS'group_name'
p9706
Nsa(dp9707
S'description'
p9708
S'The scalar material property name\n'
p9709
sS'cpp_type'
p9710
S'MaterialPropertyName'
p9711
sS'default'
p9712
g3
sS'name'
p9713
S'property'
p9714
sS'required'
p9715
I01
sS'group_name'
p9716
Nsa(dp9717
S'description'
p9718
S'The seed for the master random number generator\n'
p9719
sS'cpp_type'
p9720
S'unsigned int'
p9721
sS'default'
p9722
S'0'
p9723
sS'name'
p9724
S'seed'
p9725
sS'required'
p9726
I00
sS'group_name'
p9727
S'Advanced'
p9728
sa(dp9729
S'description'
p9730
g3
sS'cpp_type'
p9731
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9732
sS'default'
p9733
S'MaterialRealVectorValueAux'
p9734
sS'name'
p9735
S'type'
p9736
sS'required'
p9737
I00
sS'group_name'
p9738
Nsa(dp9739
S'description'
p9740
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9741
sS'cpp_type'
p9742
S'bool'
p9743
sS'default'
p9744
S'0'
p9745
sS'name'
p9746
S'use_displaced_mesh'
p9747
sS'required'
p9748
I00
sS'group_name'
p9749
S'Advanced'
p9750
sa(dp9751
S'description'
p9752
S'The name of the variable that this object applies to\n'
p9753
sS'cpp_type'
p9754
S'AuxVariableName'
p9755
sS'default'
p9756
g3
sS'name'
p9757
S'variable'
p9758
sS'required'
p9759
I01
sS'group_name'
p9760
NsasS'name'
p9761
S'/Bounds/MaterialRealVectorValueAux'
p9762
sa(dp9763
S'description'
p9764
S'Extracts a component of a material type std::vector<Real> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n'
p9765
sS'subblocks'
p9766
NsS'parameters'
p9767
(lp9768
(dp9769
S'description'
p9770
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9771
sS'cpp_type'
p9772
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9773
sS'default'
p9774
g3
sS'name'
p9775
S'block'
p9776
sS'required'
p9777
I00
sS'group_name'
p9778
Nsa(dp9779
S'description'
p9780
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9781
sS'cpp_type'
p9782
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9783
sS'default'
p9784
g3
sS'name'
p9785
S'boundary'
p9786
sS'required'
p9787
I00
sS'group_name'
p9788
Nsa(dp9789
S'name'
p9790
S'execute_on'
p9791
sS'cpp_type'
p9792
S'MultiMooseEnum'
p9793
sS'default'
p9794
S'LINEAR'
p9795
sS'description'
p9796
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9797
sS'required'
p9798
I00
sS'options'
p9799
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9800
sS'group_name'
p9801
Nsa(dp9802
S'description'
p9803
S'The factor by which to multiply your material property for visualization\n'
p9804
sS'cpp_type'
p9805
S'double'
p9806
sS'default'
p9807
S'1'
p9808
sS'name'
p9809
S'factor'
p9810
sS'required'
p9811
I00
sS'group_name'
p9812
Nsa(dp9813
S'description'
p9814
S'The index to consider for this kernel\n'
p9815
sS'cpp_type'
p9816
S'unsigned int'
p9817
sS'default'
p9818
S'0'
p9819
sS'name'
p9820
S'index'
p9821
sS'required'
p9822
I00
sS'group_name'
p9823
Nsa(dp9824
S'description'
p9825
S'The offset to add to your material property for visualization\n'
p9826
sS'cpp_type'
p9827
S'double'
p9828
sS'default'
p9829
S'0'
p9830
sS'name'
p9831
S'offset'
p9832
sS'required'
p9833
I00
sS'group_name'
p9834
Nsa(dp9835
S'description'
p9836
S'The scalar material property name\n'
p9837
sS'cpp_type'
p9838
S'MaterialPropertyName'
p9839
sS'default'
p9840
g3
sS'name'
p9841
S'property'
p9842
sS'required'
p9843
I01
sS'group_name'
p9844
Nsa(dp9845
S'description'
p9846
S'The seed for the master random number generator\n'
p9847
sS'cpp_type'
p9848
S'unsigned int'
p9849
sS'default'
p9850
S'0'
p9851
sS'name'
p9852
S'seed'
p9853
sS'required'
p9854
I00
sS'group_name'
p9855
S'Advanced'
p9856
sa(dp9857
S'description'
p9858
g3
sS'cpp_type'
p9859
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9860
sS'default'
p9861
S'MaterialStdVectorAux'
p9862
sS'name'
p9863
S'type'
p9864
sS'required'
p9865
I00
sS'group_name'
p9866
Nsa(dp9867
S'description'
p9868
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p9869
sS'cpp_type'
p9870
S'bool'
p9871
sS'default'
p9872
S'0'
p9873
sS'name'
p9874
S'use_displaced_mesh'
p9875
sS'required'
p9876
I00
sS'group_name'
p9877
S'Advanced'
p9878
sa(dp9879
S'description'
p9880
S'The name of the variable that this object applies to\n'
p9881
sS'cpp_type'
p9882
S'AuxVariableName'
p9883
sS'default'
p9884
g3
sS'name'
p9885
S'variable'
p9886
sS'required'
p9887
I01
sS'group_name'
p9888
NsasS'name'
p9889
S'/Bounds/MaterialStdVectorAux'
p9890
sa(dp9891
S'description'
p9892
S"Extracts a component of a material's std::vector<RealGradient> to an aux variable.  If the std::vector is not of sufficient size then zero is returned\n"
p9893
sS'subblocks'
p9894
NsS'parameters'
p9895
(lp9896
(dp9897
S'description'
p9898
S'The list of block ids (SubdomainID) that this object will be applied\n'
p9899
sS'cpp_type'
p9900
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p9901
sS'default'
p9902
g3
sS'name'
p9903
S'block'
p9904
sS'required'
p9905
I00
sS'group_name'
p9906
Nsa(dp9907
S'description'
p9908
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p9909
sS'cpp_type'
p9910
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p9911
sS'default'
p9912
g3
sS'name'
p9913
S'boundary'
p9914
sS'required'
p9915
I00
sS'group_name'
p9916
Nsa(dp9917
S'description'
p9918
S'The gradient component to be extracted for this kernel\n'
p9919
sS'cpp_type'
p9920
S'unsigned int'
p9921
sS'default'
p9922
S'0'
p9923
sS'name'
p9924
S'component'
p9925
sS'required'
p9926
I00
sS'group_name'
p9927
Nsa(dp9928
S'name'
p9929
S'execute_on'
p9930
sS'cpp_type'
p9931
S'MultiMooseEnum'
p9932
sS'default'
p9933
S'LINEAR'
p9934
sS'description'
p9935
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p9936
sS'required'
p9937
I00
sS'options'
p9938
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p9939
sS'group_name'
p9940
Nsa(dp9941
S'description'
p9942
S'The factor by which to multiply your material property for visualization\n'
p9943
sS'cpp_type'
p9944
S'double'
p9945
sS'default'
p9946
S'1'
p9947
sS'name'
p9948
S'factor'
p9949
sS'required'
p9950
I00
sS'group_name'
p9951
Nsa(dp9952
S'description'
p9953
S'The index to consider for this kernel\n'
p9954
sS'cpp_type'
p9955
S'unsigned int'
p9956
sS'default'
p9957
S'0'
p9958
sS'name'
p9959
S'index'
p9960
sS'required'
p9961
I00
sS'group_name'
p9962
Nsa(dp9963
S'description'
p9964
S'The offset to add to your material property for visualization\n'
p9965
sS'cpp_type'
p9966
S'double'
p9967
sS'default'
p9968
S'0'
p9969
sS'name'
p9970
S'offset'
p9971
sS'required'
p9972
I00
sS'group_name'
p9973
Nsa(dp9974
S'description'
p9975
S'The scalar material property name\n'
p9976
sS'cpp_type'
p9977
S'MaterialPropertyName'
p9978
sS'default'
p9979
g3
sS'name'
p9980
S'property'
p9981
sS'required'
p9982
I01
sS'group_name'
p9983
Nsa(dp9984
S'description'
p9985
S'The seed for the master random number generator\n'
p9986
sS'cpp_type'
p9987
S'unsigned int'
p9988
sS'default'
p9989
S'0'
p9990
sS'name'
p9991
S'seed'
p9992
sS'required'
p9993
I00
sS'group_name'
p9994
S'Advanced'
p9995
sa(dp9996
S'description'
p9997
g3
sS'cpp_type'
p9998
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p9999
sS'default'
p10000
S'MaterialStdVectorRealGradientAux'
p10001
sS'name'
p10002
S'type'
p10003
sS'required'
p10004
I00
sS'group_name'
p10005
Nsa(dp10006
S'description'
p10007
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10008
sS'cpp_type'
p10009
S'bool'
p10010
sS'default'
p10011
S'0'
p10012
sS'name'
p10013
S'use_displaced_mesh'
p10014
sS'required'
p10015
I00
sS'group_name'
p10016
S'Advanced'
p10017
sa(dp10018
S'description'
p10019
S'The name of the variable that this object applies to\n'
p10020
sS'cpp_type'
p10021
S'AuxVariableName'
p10022
sS'default'
p10023
g3
sS'name'
p10024
S'variable'
p10025
sS'required'
p10026
I01
sS'group_name'
p10027
NsasS'name'
p10028
S'/Bounds/MaterialStdVectorRealGradientAux'
p10029
sa(dp10030
S'description'
p10031
g3
sS'subblocks'
p10032
NsS'parameters'
p10033
(lp10034
(dp10035
S'description'
p10036
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10037
sS'cpp_type'
p10038
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10039
sS'default'
p10040
g3
sS'name'
p10041
S'block'
p10042
sS'required'
p10043
I00
sS'group_name'
p10044
Nsa(dp10045
S'description'
p10046
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10047
sS'cpp_type'
p10048
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10049
sS'default'
p10050
g3
sS'name'
p10051
S'boundary'
p10052
sS'required'
p10053
I00
sS'group_name'
p10054
Nsa(dp10055
S'name'
p10056
S'execute_on'
p10057
sS'cpp_type'
p10058
S'MultiMooseEnum'
p10059
sS'default'
p10060
S'LINEAR'
p10061
sS'description'
p10062
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10063
sS'required'
p10064
I00
sS'options'
p10065
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10066
sS'group_name'
p10067
Nsa(dp10068
S'description'
p10069
S'The boundary to find the distance to.\n'
p10070
sS'cpp_type'
p10071
S'BoundaryName'
p10072
sS'default'
p10073
g3
sS'name'
p10074
S'paired_boundary'
p10075
sS'required'
p10076
I01
sS'group_name'
p10077
Nsa(dp10078
S'description'
p10079
S'The seed for the master random number generator\n'
p10080
sS'cpp_type'
p10081
S'unsigned int'
p10082
sS'default'
p10083
S'0'
p10084
sS'name'
p10085
S'seed'
p10086
sS'required'
p10087
I00
sS'group_name'
p10088
S'Advanced'
p10089
sa(dp10090
S'description'
p10091
g3
sS'cpp_type'
p10092
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10093
sS'default'
p10094
S'NearestNodeDistanceAux'
p10095
sS'name'
p10096
S'type'
p10097
sS'required'
p10098
I00
sS'group_name'
p10099
Nsa(dp10100
S'description'
p10101
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10102
sS'cpp_type'
p10103
S'bool'
p10104
sS'default'
p10105
S'1'
p10106
sS'name'
p10107
S'use_displaced_mesh'
p10108
sS'required'
p10109
I00
sS'group_name'
p10110
S'Advanced'
p10111
sa(dp10112
S'description'
p10113
S'The name of the variable that this object applies to\n'
p10114
sS'cpp_type'
p10115
S'AuxVariableName'
p10116
sS'default'
p10117
g3
sS'name'
p10118
S'variable'
p10119
sS'required'
p10120
I01
sS'group_name'
p10121
NsasS'name'
p10122
S'/Bounds/NearestNodeDistanceAux'
p10123
sa(dp10124
S'description'
p10125
g3
sS'subblocks'
p10126
NsS'parameters'
p10127
(lp10128
(dp10129
S'description'
p10130
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10131
sS'cpp_type'
p10132
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10133
sS'default'
p10134
g3
sS'name'
p10135
S'block'
p10136
sS'required'
p10137
I00
sS'group_name'
p10138
Nsa(dp10139
S'description'
p10140
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10141
sS'cpp_type'
p10142
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10143
sS'default'
p10144
g3
sS'name'
p10145
S'boundary'
p10146
sS'required'
p10147
I00
sS'group_name'
p10148
Nsa(dp10149
S'name'
p10150
S'execute_on'
p10151
sS'cpp_type'
p10152
S'MultiMooseEnum'
p10153
sS'default'
p10154
S'LINEAR'
p10155
sS'description'
p10156
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10157
sS'required'
p10158
I00
sS'options'
p10159
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10160
sS'group_name'
p10161
Nsa(dp10162
S'description'
p10163
S'The boundary to get the value from.\n'
p10164
sS'cpp_type'
p10165
S'BoundaryName'
p10166
sS'default'
p10167
g3
sS'name'
p10168
S'paired_boundary'
p10169
sS'required'
p10170
I01
sS'group_name'
p10171
Nsa(dp10172
S'description'
p10173
S'The variable to get the value of.\n'
p10174
sS'cpp_type'
p10175
S'std::vector<VariableName>'
p10176
sS'default'
p10177
g3
sS'name'
p10178
S'paired_variable'
p10179
sS'required'
p10180
I01
sS'group_name'
p10181
Nsa(dp10182
S'description'
p10183
S'The seed for the master random number generator\n'
p10184
sS'cpp_type'
p10185
S'unsigned int'
p10186
sS'default'
p10187
S'0'
p10188
sS'name'
p10189
S'seed'
p10190
sS'required'
p10191
I00
sS'group_name'
p10192
S'Advanced'
p10193
sa(dp10194
S'description'
p10195
g3
sS'cpp_type'
p10196
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10197
sS'default'
p10198
S'NearestNodeValueAux'
p10199
sS'name'
p10200
S'type'
p10201
sS'required'
p10202
I00
sS'group_name'
p10203
Nsa(dp10204
S'description'
p10205
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10206
sS'cpp_type'
p10207
S'bool'
p10208
sS'default'
p10209
S'1'
p10210
sS'name'
p10211
S'use_displaced_mesh'
p10212
sS'required'
p10213
I00
sS'group_name'
p10214
S'Advanced'
p10215
sa(dp10216
S'description'
p10217
S'The name of the variable that this object applies to\n'
p10218
sS'cpp_type'
p10219
S'AuxVariableName'
p10220
sS'default'
p10221
g3
sS'name'
p10222
S'variable'
p10223
sS'required'
p10224
I01
sS'group_name'
p10225
NsasS'name'
p10226
S'/Bounds/NearestNodeValueAux'
p10227
sa(dp10228
S'description'
p10229
g3
sS'subblocks'
p10230
NsS'parameters'
p10231
(lp10232
(dp10233
S'description'
p10234
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10235
sS'cpp_type'
p10236
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10237
sS'default'
p10238
g3
sS'name'
p10239
S'block'
p10240
sS'required'
p10241
I00
sS'group_name'
p10242
Nsa(dp10243
S'description'
p10244
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10245
sS'cpp_type'
p10246
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10247
sS'default'
p10248
g3
sS'name'
p10249
S'boundary'
p10250
sS'required'
p10251
I00
sS'group_name'
p10252
Nsa(dp10253
S'name'
p10254
S'execute_on'
p10255
sS'cpp_type'
p10256
S'MultiMooseEnum'
p10257
sS'default'
p10258
S'LINEAR'
p10259
sS'description'
p10260
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10261
sS'required'
p10262
I00
sS'options'
p10263
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10264
sS'group_name'
p10265
Nsa(dp10266
S'description'
p10267
S'The normalization factor\n'
p10268
sS'cpp_type'
p10269
S'double'
p10270
sS'default'
p10271
S'1'
p10272
sS'name'
p10273
S'normal_factor'
p10274
sS'required'
p10275
I00
sS'group_name'
p10276
Nsa(dp10277
S'description'
p10278
S'The postprocessor on the source\n'
p10279
sS'cpp_type'
p10280
S'PostprocessorName'
p10281
sS'default'
p10282
g3
sS'name'
p10283
S'normalization'
p10284
sS'required'
p10285
I01
sS'group_name'
p10286
Nsa(dp10287
S'description'
p10288
S'The seed for the master random number generator\n'
p10289
sS'cpp_type'
p10290
S'unsigned int'
p10291
sS'default'
p10292
S'0'
p10293
sS'name'
p10294
S'seed'
p10295
sS'required'
p10296
I00
sS'group_name'
p10297
S'Advanced'
p10298
sa(dp10299
S'description'
p10300
S'The variable to be normalized\n'
p10301
sS'cpp_type'
p10302
S'std::vector<VariableName>'
p10303
sS'default'
p10304
g3
sS'name'
p10305
S'source_variable'
p10306
sS'required'
p10307
I01
sS'group_name'
p10308
Nsa(dp10309
S'description'
p10310
g3
sS'cpp_type'
p10311
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10312
sS'default'
p10313
S'NormalizationAux'
p10314
sS'name'
p10315
S'type'
p10316
sS'required'
p10317
I00
sS'group_name'
p10318
Nsa(dp10319
S'description'
p10320
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10321
sS'cpp_type'
p10322
S'bool'
p10323
sS'default'
p10324
S'0'
p10325
sS'name'
p10326
S'use_displaced_mesh'
p10327
sS'required'
p10328
I00
sS'group_name'
p10329
S'Advanced'
p10330
sa(dp10331
S'description'
p10332
S'The name of the variable that this object applies to\n'
p10333
sS'cpp_type'
p10334
S'AuxVariableName'
p10335
sS'default'
p10336
g3
sS'name'
p10337
S'variable'
p10338
sS'required'
p10339
I01
sS'group_name'
p10340
NsasS'name'
p10341
S'/Bounds/NormalizationAux'
p10342
sa(dp10343
S'description'
p10344
S'Parsed function AuxKernel.\n'
p10345
sS'subblocks'
p10346
NsS'parameters'
p10347
(lp10348
(dp10349
S'description'
p10350
S'coupled variables\n'
p10351
sS'cpp_type'
p10352
S'std::vector<VariableName>'
p10353
sS'default'
p10354
g3
sS'name'
p10355
S'args'
p10356
sS'required'
p10357
I00
sS'group_name'
p10358
Nsa(dp10359
S'description'
p10360
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10361
sS'cpp_type'
p10362
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10363
sS'default'
p10364
g3
sS'name'
p10365
S'block'
p10366
sS'required'
p10367
I00
sS'group_name'
p10368
Nsa(dp10369
S'description'
p10370
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10371
sS'cpp_type'
p10372
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10373
sS'default'
p10374
g3
sS'name'
p10375
S'boundary'
p10376
sS'required'
p10377
I00
sS'group_name'
p10378
Nsa(dp10379
S'description'
p10380
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p10381
sS'cpp_type'
p10382
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10383
sS'default'
p10384
g3
sS'name'
p10385
S'constant_expressions'
p10386
sS'required'
p10387
I00
sS'group_name'
p10388
Nsa(dp10389
S'description'
p10390
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p10391
sS'cpp_type'
p10392
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p10393
sS'default'
p10394
g3
sS'name'
p10395
S'constant_names'
p10396
sS'required'
p10397
I00
sS'group_name'
p10398
Nsa(dp10399
S'description'
p10400
S'Disable the function parser algebraic optimizer\n'
p10401
sS'cpp_type'
p10402
S'bool'
p10403
sS'default'
p10404
S'0'
p10405
sS'name'
p10406
S'disable_fpoptimizer'
p10407
sS'required'
p10408
I00
sS'group_name'
p10409
Nsa(dp10410
S'description'
p10411
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p10412
sS'cpp_type'
p10413
S'bool'
p10414
sS'default'
p10415
S'1'
p10416
sS'name'
p10417
S'enable_jit'
p10418
sS'required'
p10419
I00
sS'group_name'
p10420
Nsa(dp10421
S'name'
p10422
S'execute_on'
p10423
sS'cpp_type'
p10424
S'MultiMooseEnum'
p10425
sS'default'
p10426
S'LINEAR'
p10427
sS'description'
p10428
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10429
sS'required'
p10430
I00
sS'options'
p10431
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10432
sS'group_name'
p10433
Nsa(dp10434
S'description'
p10435
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p10436
sS'cpp_type'
p10437
S'bool'
p10438
sS'default'
p10439
S'0'
p10440
sS'name'
p10441
S'fail_on_evalerror'
p10442
sS'required'
p10443
I00
sS'group_name'
p10444
Nsa(dp10445
S'description'
p10446
S'function expression\n'
p10447
sS'cpp_type'
p10448
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10449
sS'default'
p10450
g3
sS'name'
p10451
S'function'
p10452
sS'required'
p10453
I01
sS'group_name'
p10454
Nsa(dp10455
S'description'
p10456
S'The seed for the master random number generator\n'
p10457
sS'cpp_type'
p10458
S'unsigned int'
p10459
sS'default'
p10460
S'0'
p10461
sS'name'
p10462
S'seed'
p10463
sS'required'
p10464
I00
sS'group_name'
p10465
S'Advanced'
p10466
sa(dp10467
S'description'
p10468
g3
sS'cpp_type'
p10469
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10470
sS'default'
p10471
S'ParsedAux'
p10472
sS'name'
p10473
S'type'
p10474
sS'required'
p10475
I00
sS'group_name'
p10476
Nsa(dp10477
S'description'
p10478
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10479
sS'cpp_type'
p10480
S'bool'
p10481
sS'default'
p10482
S'0'
p10483
sS'name'
p10484
S'use_displaced_mesh'
p10485
sS'required'
p10486
I00
sS'group_name'
p10487
S'Advanced'
p10488
sa(dp10489
S'description'
p10490
S'The name of the variable that this object applies to\n'
p10491
sS'cpp_type'
p10492
S'AuxVariableName'
p10493
sS'default'
p10494
g3
sS'name'
p10495
S'variable'
p10496
sS'required'
p10497
I01
sS'group_name'
p10498
NsasS'name'
p10499
S'/Bounds/ParsedAux'
p10500
sa(dp10501
S'description'
p10502
g3
sS'subblocks'
p10503
NsS'parameters'
p10504
(lp10505
(dp10506
S'description'
p10507
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10508
sS'cpp_type'
p10509
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10510
sS'default'
p10511
g3
sS'name'
p10512
S'block'
p10513
sS'required'
p10514
I00
sS'group_name'
p10515
Nsa(dp10516
S'description'
p10517
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10518
sS'cpp_type'
p10519
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10520
sS'default'
p10521
g3
sS'name'
p10522
S'boundary'
p10523
sS'required'
p10524
I00
sS'group_name'
p10525
Nsa(dp10526
S'name'
p10527
S'execute_on'
p10528
sS'cpp_type'
p10529
S'MultiMooseEnum'
p10530
sS'default'
p10531
S'LINEAR'
p10532
sS'description'
p10533
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10534
sS'required'
p10535
I00
sS'options'
p10536
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10537
sS'group_name'
p10538
Nsa(dp10539
S'description'
p10540
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p10541
sS'cpp_type'
p10542
S'double'
p10543
sS'default'
p10544
g3
sS'name'
p10545
S'normal_smoothing_distance'
p10546
sS'required'
p10547
I00
sS'group_name'
p10548
Nsa(dp10549
S'description'
p10550
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p10551
sS'cpp_type'
p10552
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10553
sS'default'
p10554
g3
sS'name'
p10555
S'normal_smoothing_method'
p10556
sS'required'
p10557
I00
sS'group_name'
p10558
Nsa(dp10559
S'name'
p10560
S'order'
p10561
sS'cpp_type'
p10562
S'MooseEnum'
p10563
sS'default'
p10564
S'FIRST'
p10565
sS'description'
p10566
S'The finite element order\n'
p10567
sS'required'
p10568
I00
sS'options'
p10569
S'FIRST SECOND THIRD FOURTH'
p10570
sS'group_name'
p10571
Nsa(dp10572
S'description'
p10573
S'The boundary to be penetrated\n'
p10574
sS'cpp_type'
p10575
S'BoundaryName'
p10576
sS'default'
p10577
g3
sS'name'
p10578
S'paired_boundary'
p10579
sS'required'
p10580
I01
sS'group_name'
p10581
Nsa(dp10582
S'name'
p10583
S'quantity'
p10584
sS'cpp_type'
p10585
S'MooseEnum'
p10586
sS'default'
p10587
S'distance'
p10588
sS'description'
p10589
S'The quantity to recover from the available penetration information\n'
p10590
sS'required'
p10591
I00
sS'options'
p10592
S'distance tangential_distance normal_x normal_y normal_z closest_point_x closest_point_y closest_point_z element_id side incremental_slip_magnitude incremental_slip_x incremental_slip_y incremental_slip_z accumulated_slip force_x force_y force_z normal_force_magnitude normal_force_x normal_force_y normal_force_z tangential_force_magnitude tangential_force_x tangential_force_y tangential_force_z frictional_energy lagrange_multiplier mechanical_status'
p10593
sS'group_name'
p10594
Nsa(dp10595
S'description'
p10596
S'The seed for the master random number generator\n'
p10597
sS'cpp_type'
p10598
S'unsigned int'
p10599
sS'default'
p10600
S'0'
p10601
sS'name'
p10602
S'seed'
p10603
sS'required'
p10604
I00
sS'group_name'
p10605
S'Advanced'
p10606
sa(dp10607
S'description'
p10608
S'Tangential distance to extend edges of contact surfaces\n'
p10609
sS'cpp_type'
p10610
S'double'
p10611
sS'default'
p10612
g3
sS'name'
p10613
S'tangential_tolerance'
p10614
sS'required'
p10615
I00
sS'group_name'
p10616
Nsa(dp10617
S'description'
p10618
g3
sS'cpp_type'
p10619
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10620
sS'default'
p10621
S'PenetrationAux'
p10622
sS'name'
p10623
S'type'
p10624
sS'required'
p10625
I00
sS'group_name'
p10626
Nsa(dp10627
S'description'
p10628
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10629
sS'cpp_type'
p10630
S'bool'
p10631
sS'default'
p10632
S'1'
p10633
sS'name'
p10634
S'use_displaced_mesh'
p10635
sS'required'
p10636
I00
sS'group_name'
p10637
S'Advanced'
p10638
sa(dp10639
S'description'
p10640
S'The name of the variable that this object applies to\n'
p10641
sS'cpp_type'
p10642
S'AuxVariableName'
p10643
sS'default'
p10644
g3
sS'name'
p10645
S'variable'
p10646
sS'required'
p10647
I01
sS'group_name'
p10648
NsasS'name'
p10649
S'/Bounds/PenetrationAux'
p10650
sa(dp10651
S'description'
p10652
g3
sS'subblocks'
p10653
NsS'parameters'
p10654
(lp10655
(dp10656
S'description'
p10657
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10658
sS'cpp_type'
p10659
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10660
sS'default'
p10661
g3
sS'name'
p10662
S'block'
p10663
sS'required'
p10664
I00
sS'group_name'
p10665
Nsa(dp10666
S'description'
p10667
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10668
sS'cpp_type'
p10669
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10670
sS'default'
p10671
g3
sS'name'
p10672
S'boundary'
p10673
sS'required'
p10674
I00
sS'group_name'
p10675
Nsa(dp10676
S'name'
p10677
S'execute_on'
p10678
sS'cpp_type'
p10679
S'MultiMooseEnum'
p10680
sS'default'
p10681
S'LINEAR'
p10682
sS'description'
p10683
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10684
sS'required'
p10685
I00
sS'options'
p10686
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10687
sS'group_name'
p10688
Nsa(dp10689
S'description'
p10690
S'The seed for the master random number generator\n'
p10691
sS'cpp_type'
p10692
S'unsigned int'
p10693
sS'default'
p10694
S'0'
p10695
sS'name'
p10696
S'seed'
p10697
sS'required'
p10698
I00
sS'group_name'
p10699
S'Advanced'
p10700
sa(dp10701
S'description'
p10702
g3
sS'cpp_type'
p10703
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10704
sS'default'
p10705
S'ProcessorIDAux'
p10706
sS'name'
p10707
S'type'
p10708
sS'required'
p10709
I00
sS'group_name'
p10710
Nsa(dp10711
S'description'
p10712
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10713
sS'cpp_type'
p10714
S'bool'
p10715
sS'default'
p10716
S'0'
p10717
sS'name'
p10718
S'use_displaced_mesh'
p10719
sS'required'
p10720
I00
sS'group_name'
p10721
S'Advanced'
p10722
sa(dp10723
S'description'
p10724
S'The name of the variable that this object applies to\n'
p10725
sS'cpp_type'
p10726
S'AuxVariableName'
p10727
sS'default'
p10728
g3
sS'name'
p10729
S'variable'
p10730
sS'required'
p10731
I01
sS'group_name'
p10732
NsasS'name'
p10733
S'/Bounds/ProcessorIDAux'
p10734
sa(dp10735
S'description'
p10736
g3
sS'subblocks'
p10737
NsS'parameters'
p10738
(lp10739
(dp10740
S'description'
p10741
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10742
sS'cpp_type'
p10743
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10744
sS'default'
p10745
g3
sS'name'
p10746
S'block'
p10747
sS'required'
p10748
I00
sS'group_name'
p10749
Nsa(dp10750
S'description'
p10751
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10752
sS'cpp_type'
p10753
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10754
sS'default'
p10755
g3
sS'name'
p10756
S'boundary'
p10757
sS'required'
p10758
I00
sS'group_name'
p10759
Nsa(dp10760
S'description'
p10761
S'The downstairs of the quotient variable\n'
p10762
sS'cpp_type'
p10763
S'std::vector<VariableName>'
p10764
sS'default'
p10765
g3
sS'name'
p10766
S'denominator'
p10767
sS'required'
p10768
I00
sS'group_name'
p10769
Nsa(dp10770
S'name'
p10771
S'execute_on'
p10772
sS'cpp_type'
p10773
S'MultiMooseEnum'
p10774
sS'default'
p10775
S'LINEAR'
p10776
sS'description'
p10777
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10778
sS'required'
p10779
I00
sS'options'
p10780
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10781
sS'group_name'
p10782
Nsa(dp10783
S'description'
p10784
S'The upstairs of the quotient variable\n'
p10785
sS'cpp_type'
p10786
S'std::vector<VariableName>'
p10787
sS'default'
p10788
g3
sS'name'
p10789
S'numerator'
p10790
sS'required'
p10791
I00
sS'group_name'
p10792
Nsa(dp10793
S'description'
p10794
S'The seed for the master random number generator\n'
p10795
sS'cpp_type'
p10796
S'unsigned int'
p10797
sS'default'
p10798
S'0'
p10799
sS'name'
p10800
S'seed'
p10801
sS'required'
p10802
I00
sS'group_name'
p10803
S'Advanced'
p10804
sa(dp10805
S'description'
p10806
g3
sS'cpp_type'
p10807
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10808
sS'default'
p10809
S'QuotientAux'
p10810
sS'name'
p10811
S'type'
p10812
sS'required'
p10813
I00
sS'group_name'
p10814
Nsa(dp10815
S'description'
p10816
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10817
sS'cpp_type'
p10818
S'bool'
p10819
sS'default'
p10820
S'0'
p10821
sS'name'
p10822
S'use_displaced_mesh'
p10823
sS'required'
p10824
I00
sS'group_name'
p10825
S'Advanced'
p10826
sa(dp10827
S'description'
p10828
S'The name of the variable that this object applies to\n'
p10829
sS'cpp_type'
p10830
S'AuxVariableName'
p10831
sS'default'
p10832
g3
sS'name'
p10833
S'variable'
p10834
sS'required'
p10835
I01
sS'group_name'
p10836
NsasS'name'
p10837
S'/Bounds/QuotientAux'
p10838
sa(dp10839
S'description'
p10840
g3
sS'subblocks'
p10841
NsS'parameters'
p10842
(lp10843
(dp10844
S'description'
p10845
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10846
sS'cpp_type'
p10847
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10848
sS'default'
p10849
g3
sS'name'
p10850
S'block'
p10851
sS'required'
p10852
I00
sS'group_name'
p10853
Nsa(dp10854
S'description'
p10855
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10856
sS'cpp_type'
p10857
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10858
sS'default'
p10859
g3
sS'name'
p10860
S'boundary'
p10861
sS'required'
p10862
I00
sS'group_name'
p10863
Nsa(dp10864
S'name'
p10865
S'execute_on'
p10866
sS'cpp_type'
p10867
S'MultiMooseEnum'
p10868
sS'default'
p10869
S'LINEAR'
p10870
sS'description'
p10871
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10872
sS'required'
p10873
I00
sS'options'
p10874
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10875
sS'group_name'
p10876
Nsa(dp10877
S'description'
p10878
S'The seed for the master random number generator\n'
p10879
sS'cpp_type'
p10880
S'unsigned int'
p10881
sS'default'
p10882
S'0'
p10883
sS'name'
p10884
S'seed'
p10885
sS'required'
p10886
I00
sS'group_name'
p10887
S'Advanced'
p10888
sa(dp10889
S'description'
p10890
g3
sS'cpp_type'
p10891
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10892
sS'default'
p10893
S'SelfAux'
p10894
sS'name'
p10895
S'type'
p10896
sS'required'
p10897
I00
sS'group_name'
p10898
Nsa(dp10899
S'description'
p10900
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p10901
sS'cpp_type'
p10902
S'bool'
p10903
sS'default'
p10904
S'0'
p10905
sS'name'
p10906
S'use_displaced_mesh'
p10907
sS'required'
p10908
I00
sS'group_name'
p10909
S'Advanced'
p10910
sa(dp10911
S'description'
p10912
S'The name of the variable that this object applies to\n'
p10913
sS'cpp_type'
p10914
S'AuxVariableName'
p10915
sS'default'
p10916
g3
sS'name'
p10917
S'variable'
p10918
sS'required'
p10919
I01
sS'group_name'
p10920
NsasS'name'
p10921
S'/Bounds/SelfAux'
p10922
sa(dp10923
S'description'
p10924
g3
sS'subblocks'
p10925
NsS'parameters'
p10926
(lp10927
(dp10928
S'description'
p10929
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p10930
sS'cpp_type'
p10931
S'double'
p10932
sS'default'
p10933
S'0'
p10934
sS'name'
p10935
S'add_factor'
p10936
sS'required'
p10937
I00
sS'group_name'
p10938
Nsa(dp10939
S'description'
p10940
S'The list of block ids (SubdomainID) that this object will be applied\n'
p10941
sS'cpp_type'
p10942
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p10943
sS'default'
p10944
g3
sS'name'
p10945
S'block'
p10946
sS'required'
p10947
I00
sS'group_name'
p10948
Nsa(dp10949
S'description'
p10950
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p10951
sS'cpp_type'
p10952
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p10953
sS'default'
p10954
g3
sS'name'
p10955
S'boundary'
p10956
sS'required'
p10957
I00
sS'group_name'
p10958
Nsa(dp10959
S'description'
p10960
S'If true the meshes must be the same and then the values are simply copied over.\n'
p10961
sS'cpp_type'
p10962
S'bool'
p10963
sS'default'
p10964
S'0'
p10965
sS'name'
p10966
S'direct'
p10967
sS'required'
p10968
I00
sS'group_name'
p10969
Nsa(dp10970
S'name'
p10971
S'execute_on'
p10972
sS'cpp_type'
p10973
S'MultiMooseEnum'
p10974
sS'default'
p10975
S'LINEAR'
p10976
sS'description'
p10977
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p10978
sS'required'
p10979
I00
sS'options'
p10980
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p10981
sS'group_name'
p10982
Nsa(dp10983
S'description'
p10984
S'The name of the variable to extract from the file\n'
p10985
sS'cpp_type'
p10986
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p10987
sS'default'
p10988
g3
sS'name'
p10989
S'from_variable'
p10990
sS'required'
p10991
I00
sS'group_name'
p10992
Nsa(dp10993
S'description'
p10994
S"Scale factor (a)  to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p10995
sS'cpp_type'
p10996
S'double'
p10997
sS'default'
p10998
S'1'
p10999
sS'name'
p11000
S'scale_factor'
p11001
sS'required'
p11002
I00
sS'group_name'
p11003
Nsa(dp11004
S'description'
p11005
S'The seed for the master random number generator\n'
p11006
sS'cpp_type'
p11007
S'unsigned int'
p11008
sS'default'
p11009
S'0'
p11010
sS'name'
p11011
S'seed'
p11012
sS'required'
p11013
I00
sS'group_name'
p11014
S'Advanced'
p11015
sa(dp11016
S'description'
p11017
S'The name of the SolutionUserObject\n'
p11018
sS'cpp_type'
p11019
S'UserObjectName'
p11020
sS'default'
p11021
g3
sS'name'
p11022
S'solution'
p11023
sS'required'
p11024
I01
sS'group_name'
p11025
Nsa(dp11026
S'description'
p11027
g3
sS'cpp_type'
p11028
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11029
sS'default'
p11030
S'SolutionAux'
p11031
sS'name'
p11032
S'type'
p11033
sS'required'
p11034
I00
sS'group_name'
p11035
Nsa(dp11036
S'description'
p11037
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11038
sS'cpp_type'
p11039
S'bool'
p11040
sS'default'
p11041
S'0'
p11042
sS'name'
p11043
S'use_displaced_mesh'
p11044
sS'required'
p11045
I00
sS'group_name'
p11046
S'Advanced'
p11047
sa(dp11048
S'description'
p11049
S'The name of the variable that this object applies to\n'
p11050
sS'cpp_type'
p11051
S'AuxVariableName'
p11052
sS'default'
p11053
g3
sS'name'
p11054
S'variable'
p11055
sS'required'
p11056
I01
sS'group_name'
p11057
NsasS'name'
p11058
S'/Bounds/SolutionAux'
p11059
sa(dp11060
S'description'
p11061
g3
sS'subblocks'
p11062
NsS'parameters'
p11063
(lp11064
(dp11065
S'description'
p11066
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11067
sS'cpp_type'
p11068
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11069
sS'default'
p11070
g3
sS'name'
p11071
S'block'
p11072
sS'required'
p11073
I00
sS'group_name'
p11074
Nsa(dp11075
S'description'
p11076
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11077
sS'cpp_type'
p11078
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11079
sS'default'
p11080
g3
sS'name'
p11081
S'boundary'
p11082
sS'required'
p11083
I00
sS'group_name'
p11084
Nsa(dp11085
S'name'
p11086
S'execute_on'
p11087
sS'cpp_type'
p11088
S'MultiMooseEnum'
p11089
sS'default'
p11090
S'LINEAR'
p11091
sS'description'
p11092
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11093
sS'required'
p11094
I00
sS'options'
p11095
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p11096
sS'group_name'
p11097
Nsa(dp11098
S'description'
p11099
S'The seed for the master random number generator\n'
p11100
sS'cpp_type'
p11101
S'unsigned int'
p11102
sS'default'
p11103
S'0'
p11104
sS'name'
p11105
S'seed'
p11106
sS'required'
p11107
I00
sS'group_name'
p11108
S'Advanced'
p11109
sa(dp11110
S'description'
p11111
g3
sS'cpp_type'
p11112
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11113
sS'default'
p11114
S'SpatialUserObjectAux'
p11115
sS'name'
p11116
S'type'
p11117
sS'required'
p11118
I00
sS'group_name'
p11119
Nsa(dp11120
S'description'
p11121
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11122
sS'cpp_type'
p11123
S'bool'
p11124
sS'default'
p11125
S'0'
p11126
sS'name'
p11127
S'use_displaced_mesh'
p11128
sS'required'
p11129
I00
sS'group_name'
p11130
S'Advanced'
p11131
sa(dp11132
S'description'
p11133
S'The UserObject UserObject to get values from.  Note that the UserObject _must_ implement the spatialValue() virtual function!\n'
p11134
sS'cpp_type'
p11135
S'UserObjectName'
p11136
sS'default'
p11137
g3
sS'name'
p11138
S'user_object'
p11139
sS'required'
p11140
I01
sS'group_name'
p11141
Nsa(dp11142
S'description'
p11143
S'The name of the variable that this object applies to\n'
p11144
sS'cpp_type'
p11145
S'AuxVariableName'
p11146
sS'default'
p11147
g3
sS'name'
p11148
S'variable'
p11149
sS'required'
p11150
I01
sS'group_name'
p11151
NsasS'name'
p11152
S'/Bounds/SpatialUserObjectAux'
p11153
sa(dp11154
S'description'
p11155
g3
sS'subblocks'
p11156
NsS'parameters'
p11157
(lp11158
(dp11159
S'description'
p11160
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11161
sS'cpp_type'
p11162
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11163
sS'default'
p11164
g3
sS'name'
p11165
S'block'
p11166
sS'required'
p11167
I00
sS'group_name'
p11168
Nsa(dp11169
S'description'
p11170
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11171
sS'cpp_type'
p11172
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11173
sS'default'
p11174
g3
sS'name'
p11175
S'boundary'
p11176
sS'required'
p11177
I00
sS'group_name'
p11178
Nsa(dp11179
S'name'
p11180
S'component'
p11181
sS'cpp_type'
p11182
S'MooseEnum'
p11183
sS'default'
p11184
g3
sS'description'
p11185
S'The gradient component to compute\n'
p11186
sS'required'
p11187
I00
sS'options'
p11188
S'x y z'
p11189
sS'group_name'
p11190
Nsa(dp11191
S'name'
p11192
S'execute_on'
p11193
sS'cpp_type'
p11194
S'MultiMooseEnum'
p11195
sS'default'
p11196
S'LINEAR'
p11197
sS'description'
p11198
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11199
sS'required'
p11200
I00
sS'options'
p11201
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p11202
sS'group_name'
p11203
Nsa(dp11204
S'description'
p11205
S'The variable from which to compute the gradient component\n'
p11206
sS'cpp_type'
p11207
S'std::vector<VariableName>'
p11208
sS'default'
p11209
g3
sS'name'
p11210
S'gradient_variable'
p11211
sS'required'
p11212
I01
sS'group_name'
p11213
Nsa(dp11214
S'description'
p11215
S'The seed for the master random number generator\n'
p11216
sS'cpp_type'
p11217
S'unsigned int'
p11218
sS'default'
p11219
S'0'
p11220
sS'name'
p11221
S'seed'
p11222
sS'required'
p11223
I00
sS'group_name'
p11224
S'Advanced'
p11225
sa(dp11226
S'description'
p11227
g3
sS'cpp_type'
p11228
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11229
sS'default'
p11230
S'VariableGradientComponent'
p11231
sS'name'
p11232
S'type'
p11233
sS'required'
p11234
I00
sS'group_name'
p11235
Nsa(dp11236
S'description'
p11237
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11238
sS'cpp_type'
p11239
S'bool'
p11240
sS'default'
p11241
S'0'
p11242
sS'name'
p11243
S'use_displaced_mesh'
p11244
sS'required'
p11245
I00
sS'group_name'
p11246
S'Advanced'
p11247
sa(dp11248
S'description'
p11249
S'The name of the variable that this object applies to\n'
p11250
sS'cpp_type'
p11251
S'AuxVariableName'
p11252
sS'default'
p11253
g3
sS'name'
p11254
S'variable'
p11255
sS'required'
p11256
I01
sS'group_name'
p11257
NsasS'name'
p11258
S'/Bounds/VariableGradientComponent'
p11259
sa(dp11260
S'description'
p11261
g3
sS'subblocks'
p11262
NsS'parameters'
p11263
(lp11264
(dp11265
S'description'
p11266
S'The list of block ids (SubdomainID) that this object will be applied\n'
p11267
sS'cpp_type'
p11268
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p11269
sS'default'
p11270
g3
sS'name'
p11271
S'block'
p11272
sS'required'
p11273
I00
sS'group_name'
p11274
Nsa(dp11275
S'description'
p11276
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p11277
sS'cpp_type'
p11278
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p11279
sS'default'
p11280
g3
sS'name'
p11281
S'boundary'
p11282
sS'required'
p11283
I00
sS'group_name'
p11284
Nsa(dp11285
S'name'
p11286
S'execute_on'
p11287
sS'cpp_type'
p11288
S'MultiMooseEnum'
p11289
sS'default'
p11290
S'LINEAR'
p11291
sS'description'
p11292
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11293
sS'required'
p11294
I00
sS'options'
p11295
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p11296
sS'group_name'
p11297
Nsa(dp11298
S'description'
p11299
S'The seed for the master random number generator\n'
p11300
sS'cpp_type'
p11301
S'unsigned int'
p11302
sS'default'
p11303
S'0'
p11304
sS'name'
p11305
S'seed'
p11306
sS'required'
p11307
I00
sS'group_name'
p11308
S'Advanced'
p11309
sa(dp11310
S'description'
p11311
g3
sS'cpp_type'
p11312
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11313
sS'default'
p11314
S'VectorMagnitudeAux'
p11315
sS'name'
p11316
S'type'
p11317
sS'required'
p11318
I00
sS'group_name'
p11319
Nsa(dp11320
S'description'
p11321
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11322
sS'cpp_type'
p11323
S'bool'
p11324
sS'default'
p11325
S'0'
p11326
sS'name'
p11327
S'use_displaced_mesh'
p11328
sS'required'
p11329
I00
sS'group_name'
p11330
S'Advanced'
p11331
sa(dp11332
S'description'
p11333
S'The name of the variable that this object applies to\n'
p11334
sS'cpp_type'
p11335
S'AuxVariableName'
p11336
sS'default'
p11337
g3
sS'name'
p11338
S'variable'
p11339
sS'required'
p11340
I01
sS'group_name'
p11341
Nsa(dp11342
S'description'
p11343
S'x-component of the vector\n'
p11344
sS'cpp_type'
p11345
S'std::vector<VariableName>'
p11346
sS'default'
p11347
g3
sS'name'
p11348
S'x'
p11349
sS'required'
p11350
I01
sS'group_name'
p11351
Nsa(dp11352
S'description'
p11353
S'y-component of the vector\n'
p11354
sS'cpp_type'
p11355
S'std::vector<VariableName>'
p11356
sS'default'
p11357
g3
sS'name'
p11358
S'y'
p11359
sS'required'
p11360
I00
sS'group_name'
p11361
Nsa(dp11362
S'description'
p11363
S'z-component of the vector\n'
p11364
sS'cpp_type'
p11365
S'std::vector<VariableName>'
p11366
sS'default'
p11367
g3
sS'name'
p11368
S'z'
p11369
sS'required'
p11370
I00
sS'group_name'
p11371
NsasS'name'
p11372
S'/Bounds/VectorMagnitudeAux'
p11373
sasS'parameters'
p11374
NsS'name'
p11375
S'/Bounds'
p11376
sa(dp11377
S'description'
p11378
g3
sS'subblocks'
p11379
(lp11380
(dp11381
S'description'
p11382
g3
sS'subblocks'
p11383
NsS'parameters'
p11384
(lp11385
(dp11386
S'description'
p11387
S'A string representing the Moose Object that will be built by this Action\n'
p11388
sS'cpp_type'
p11389
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11390
sS'default'
p11391
g3
sS'name'
p11392
S'type'
p11393
sS'required'
p11394
I01
sS'group_name'
p11395
NsasS'name'
p11396
S'/Constraints/*'
p11397
sa(dp11398
S'description'
p11399
g3
sS'subblocks'
p11400
NsS'parameters'
p11401
(lp11402
(dp11403
S'name'
p11404
S'execute_on'
p11405
sS'cpp_type'
p11406
S'MultiMooseEnum'
p11407
sS'default'
p11408
S'LINEAR'
p11409
sS'description'
p11410
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11411
sS'required'
p11412
I00
sS'options'
p11413
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p11414
sS'group_name'
p11415
Nsa(dp11416
S'description'
p11417
S'The boundary ID associated with the master side\n'
p11418
sS'cpp_type'
p11419
S'BoundaryName'
p11420
sS'default'
p11421
g3
sS'name'
p11422
S'master'
p11423
sS'required'
p11424
I01
sS'group_name'
p11425
Nsa(dp11426
S'description'
p11427
S'The variable on the master side of the domain\n'
p11428
sS'cpp_type'
p11429
S'std::vector<VariableName>'
p11430
sS'default'
p11431
g3
sS'name'
p11432
S'master_variable'
p11433
sS'required'
p11434
I01
sS'group_name'
p11435
Nsa(dp11436
S'description'
p11437
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p11438
sS'cpp_type'
p11439
S'double'
p11440
sS'default'
p11441
g3
sS'name'
p11442
S'normal_smoothing_distance'
p11443
sS'required'
p11444
I00
sS'group_name'
p11445
Nsa(dp11446
S'description'
p11447
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p11448
sS'cpp_type'
p11449
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11450
sS'default'
p11451
g3
sS'name'
p11452
S'normal_smoothing_method'
p11453
sS'required'
p11454
I00
sS'group_name'
p11455
Nsa(dp11456
S'name'
p11457
S'order'
p11458
sS'cpp_type'
p11459
S'MooseEnum'
p11460
sS'default'
p11461
S'FIRST'
p11462
sS'description'
p11463
S'The finite element order used for projections\n'
p11464
sS'required'
p11465
I00
sS'options'
p11466
S'FIRST SECOND THIRD FOURTH'
p11467
sS'group_name'
p11468
Nsa(dp11469
S'description'
p11470
S'scaling factor to be applied to constraint equations\n'
p11471
sS'cpp_type'
p11472
S'double'
p11473
sS'default'
p11474
S'1'
p11475
sS'name'
p11476
S'scaling'
p11477
sS'required'
p11478
I00
sS'group_name'
p11479
Nsa(dp11480
S'description'
p11481
S'The boundary ID associated with the slave side\n'
p11482
sS'cpp_type'
p11483
S'BoundaryName'
p11484
sS'default'
p11485
g3
sS'name'
p11486
S'slave'
p11487
sS'required'
p11488
I01
sS'group_name'
p11489
Nsa(dp11490
S'description'
p11491
S'Tangential distance to extend edges of contact surfaces\n'
p11492
sS'cpp_type'
p11493
S'double'
p11494
sS'default'
p11495
g3
sS'name'
p11496
S'tangential_tolerance'
p11497
sS'required'
p11498
I00
sS'group_name'
p11499
Nsa(dp11500
S'description'
p11501
g3
sS'cpp_type'
p11502
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11503
sS'default'
p11504
S'CoupledTiedValueConstraint'
p11505
sS'name'
p11506
S'type'
p11507
sS'required'
p11508
I00
sS'group_name'
p11509
Nsa(dp11510
S'description'
p11511
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11512
sS'cpp_type'
p11513
S'bool'
p11514
sS'default'
p11515
S'1'
p11516
sS'name'
p11517
S'use_displaced_mesh'
p11518
sS'required'
p11519
I00
sS'group_name'
p11520
S'Advanced'
p11521
sa(dp11522
S'description'
p11523
S'The name of the variable that this constraint is applied to.\n'
p11524
sS'cpp_type'
p11525
S'NonlinearVariableName'
p11526
sS'default'
p11527
g3
sS'name'
p11528
S'variable'
p11529
sS'required'
p11530
I01
sS'group_name'
p11531
NsasS'name'
p11532
S'/Constraints/CoupledTiedValueConstraint'
p11533
sa(dp11534
S'description'
p11535
g3
sS'subblocks'
p11536
NsS'parameters'
p11537
(lp11538
(dp11539
S'name'
p11540
S'execute_on'
p11541
sS'cpp_type'
p11542
S'MultiMooseEnum'
p11543
sS'default'
p11544
S'LINEAR'
p11545
sS'description'
p11546
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11547
sS'required'
p11548
I00
sS'options'
p11549
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p11550
sS'group_name'
p11551
Nsa(dp11552
S'description'
p11553
S'The ID of the master node\n'
p11554
sS'cpp_type'
p11555
S'unsigned int'
p11556
sS'default'
p11557
g3
sS'name'
p11558
S'master'
p11559
sS'required'
p11560
I01
sS'group_name'
p11561
Nsa(dp11562
S'description'
p11563
S'The penalty used for the boundary term\n'
p11564
sS'cpp_type'
p11565
S'double'
p11566
sS'default'
p11567
g3
sS'name'
p11568
S'penalty'
p11569
sS'required'
p11570
I01
sS'group_name'
p11571
Nsa(dp11572
S'description'
p11573
S'The boundary ID associated with the slave side\n'
p11574
sS'cpp_type'
p11575
S'BoundaryName'
p11576
sS'default'
p11577
g3
sS'name'
p11578
S'slave'
p11579
sS'required'
p11580
I01
sS'group_name'
p11581
Nsa(dp11582
S'description'
p11583
g3
sS'cpp_type'
p11584
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11585
sS'default'
p11586
S'EqualValueBoundaryConstraint'
p11587
sS'name'
p11588
S'type'
p11589
sS'required'
p11590
I00
sS'group_name'
p11591
Nsa(dp11592
S'description'
p11593
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11594
sS'cpp_type'
p11595
S'bool'
p11596
sS'default'
p11597
S'0'
p11598
sS'name'
p11599
S'use_displaced_mesh'
p11600
sS'required'
p11601
I00
sS'group_name'
p11602
S'Advanced'
p11603
sa(dp11604
S'description'
p11605
S'The name of the variable that this constraint is applied to.\n'
p11606
sS'cpp_type'
p11607
S'NonlinearVariableName'
p11608
sS'default'
p11609
g3
sS'name'
p11610
S'variable'
p11611
sS'required'
p11612
I01
sS'group_name'
p11613
NsasS'name'
p11614
S'/Constraints/EqualValueBoundaryConstraint'
p11615
sa(dp11616
S'description'
p11617
g3
sS'subblocks'
p11618
NsS'parameters'
p11619
(lp11620
(dp11621
S'name'
p11622
S'execute_on'
p11623
sS'cpp_type'
p11624
S'MultiMooseEnum'
p11625
sS'default'
p11626
S'LINEAR'
p11627
sS'description'
p11628
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11629
sS'required'
p11630
I00
sS'options'
p11631
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p11632
sS'group_name'
p11633
Nsa(dp11634
S'description'
p11635
S'The name of the interface.\n'
p11636
sS'cpp_type'
p11637
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11638
sS'default'
p11639
g3
sS'name'
p11640
S'interface'
p11641
sS'required'
p11642
I01
sS'group_name'
p11643
Nsa(dp11644
S'description'
p11645
S'Variable on master surface\n'
p11646
sS'cpp_type'
p11647
S'VariableName'
p11648
sS'default'
p11649
g3
sS'name'
p11650
S'master_variable'
p11651
sS'required'
p11652
I01
sS'group_name'
p11653
Nsa(dp11654
S'description'
p11655
S'Variable on master surface\n'
p11656
sS'cpp_type'
p11657
S'VariableName'
p11658
sS'default'
p11659
g3
sS'name'
p11660
S'slave_variable'
p11661
sS'required'
p11662
I00
sS'group_name'
p11663
Nsa(dp11664
S'description'
p11665
g3
sS'cpp_type'
p11666
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11667
sS'default'
p11668
S'EqualValueConstraint'
p11669
sS'name'
p11670
S'type'
p11671
sS'required'
p11672
I00
sS'group_name'
p11673
Nsa(dp11674
S'description'
p11675
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11676
sS'cpp_type'
p11677
S'bool'
p11678
sS'default'
p11679
S'0'
p11680
sS'name'
p11681
S'use_displaced_mesh'
p11682
sS'required'
p11683
I00
sS'group_name'
p11684
S'Advanced'
p11685
sa(dp11686
S'description'
p11687
S'The name of the variable that this constraint is applied to.\n'
p11688
sS'cpp_type'
p11689
S'NonlinearVariableName'
p11690
sS'default'
p11691
g3
sS'name'
p11692
S'variable'
p11693
sS'required'
p11694
I01
sS'group_name'
p11695
NsasS'name'
p11696
S'/Constraints/EqualValueConstraint'
p11697
sa(dp11698
S'description'
p11699
g3
sS'subblocks'
p11700
NsS'parameters'
p11701
(lp11702
(dp11703
S'name'
p11704
S'execute_on'
p11705
sS'cpp_type'
p11706
S'MultiMooseEnum'
p11707
sS'default'
p11708
S'LINEAR'
p11709
sS'description'
p11710
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p11711
sS'required'
p11712
I00
sS'options'
p11713
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p11714
sS'group_name'
p11715
Nsa(dp11716
S'description'
p11717
S'The boundary ID associated with the master side\n'
p11718
sS'cpp_type'
p11719
S'BoundaryName'
p11720
sS'default'
p11721
g3
sS'name'
p11722
S'master'
p11723
sS'required'
p11724
I01
sS'group_name'
p11725
Nsa(dp11726
S'description'
p11727
S'The variable on the master side of the domain\n'
p11728
sS'cpp_type'
p11729
S'std::vector<VariableName>'
p11730
sS'default'
p11731
g3
sS'name'
p11732
S'master_variable'
p11733
sS'required'
p11734
I01
sS'group_name'
p11735
Nsa(dp11736
S'description'
p11737
S'Distance from edge in parametric coordinates over which to smooth contact normal\n'
p11738
sS'cpp_type'
p11739
S'double'
p11740
sS'default'
p11741
g3
sS'name'
p11742
S'normal_smoothing_distance'
p11743
sS'required'
p11744
I00
sS'group_name'
p11745
Nsa(dp11746
S'description'
p11747
S'Method to use to smooth normals (edge_based|nodal_normal_based)\n'
p11748
sS'cpp_type'
p11749
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11750
sS'default'
p11751
g3
sS'name'
p11752
S'normal_smoothing_method'
p11753
sS'required'
p11754
I00
sS'group_name'
p11755
Nsa(dp11756
S'name'
p11757
S'order'
p11758
sS'cpp_type'
p11759
S'MooseEnum'
p11760
sS'default'
p11761
S'FIRST'
p11762
sS'description'
p11763
S'The finite element order used for projections\n'
p11764
sS'required'
p11765
I00
sS'options'
p11766
S'FIRST SECOND THIRD FOURTH'
p11767
sS'group_name'
p11768
Nsa(dp11769
S'description'
p11770
S'scaling factor to be applied to constraint equations\n'
p11771
sS'cpp_type'
p11772
S'double'
p11773
sS'default'
p11774
S'1'
p11775
sS'name'
p11776
S'scaling'
p11777
sS'required'
p11778
I00
sS'group_name'
p11779
Nsa(dp11780
S'description'
p11781
S'The boundary ID associated with the slave side\n'
p11782
sS'cpp_type'
p11783
S'BoundaryName'
p11784
sS'default'
p11785
g3
sS'name'
p11786
S'slave'
p11787
sS'required'
p11788
I01
sS'group_name'
p11789
Nsa(dp11790
S'description'
p11791
S'Tangential distance to extend edges of contact surfaces\n'
p11792
sS'cpp_type'
p11793
S'double'
p11794
sS'default'
p11795
g3
sS'name'
p11796
S'tangential_tolerance'
p11797
sS'required'
p11798
I00
sS'group_name'
p11799
Nsa(dp11800
S'description'
p11801
g3
sS'cpp_type'
p11802
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11803
sS'default'
p11804
S'TiedValueConstraint'
p11805
sS'name'
p11806
S'type'
p11807
sS'required'
p11808
I00
sS'group_name'
p11809
Nsa(dp11810
S'description'
p11811
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11812
sS'cpp_type'
p11813
S'bool'
p11814
sS'default'
p11815
S'1'
p11816
sS'name'
p11817
S'use_displaced_mesh'
p11818
sS'required'
p11819
I00
sS'group_name'
p11820
S'Advanced'
p11821
sa(dp11822
S'description'
p11823
S'The name of the variable that this constraint is applied to.\n'
p11824
sS'cpp_type'
p11825
S'NonlinearVariableName'
p11826
sS'default'
p11827
g3
sS'name'
p11828
S'variable'
p11829
sS'required'
p11830
I01
sS'group_name'
p11831
NsasS'name'
p11832
S'/Constraints/TiedValueConstraint'
p11833
sasS'parameters'
p11834
NsS'name'
p11835
S'/Constraints'
p11836
sa(dp11837
S'description'
p11838
g3
sS'subblocks'
p11839
(lp11840
(dp11841
S'description'
p11842
g3
sS'subblocks'
p11843
NsS'parameters'
p11844
(lp11845
(dp11846
S'description'
p11847
S'A string representing the Moose Object that will be built by this Action\n'
p11848
sS'cpp_type'
p11849
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11850
sS'default'
p11851
g3
sS'name'
p11852
S'type'
p11853
sS'required'
p11854
I01
sS'group_name'
p11855
NsasS'name'
p11856
S'/DGKernels/*'
p11857
sa(dp11858
S'description'
p11859
g3
sS'subblocks'
p11860
NsS'parameters'
p11861
(lp11862
(dp11863
S'description'
p11864
S'epsilon\n'
p11865
sS'cpp_type'
p11866
S'double'
p11867
sS'default'
p11868
g3
sS'name'
p11869
S'epsilon'
p11870
sS'required'
p11871
I01
sS'group_name'
p11872
Nsa(dp11873
S'description'
p11874
S'sigma\n'
p11875
sS'cpp_type'
p11876
S'double'
p11877
sS'default'
p11878
g3
sS'name'
p11879
S'sigma'
p11880
sS'required'
p11881
I01
sS'group_name'
p11882
Nsa(dp11883
S'description'
p11884
g3
sS'cpp_type'
p11885
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11886
sS'default'
p11887
S'DGDiffusion'
p11888
sS'name'
p11889
S'type'
p11890
sS'required'
p11891
I00
sS'group_name'
p11892
Nsa(dp11893
S'description'
p11894
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p11895
sS'cpp_type'
p11896
S'bool'
p11897
sS'default'
p11898
S'0'
p11899
sS'name'
p11900
S'use_displaced_mesh'
p11901
sS'required'
p11902
I00
sS'group_name'
p11903
S'Advanced'
p11904
sa(dp11905
S'description'
p11906
S'The name of the variable that this boundary condition applies to\n'
p11907
sS'cpp_type'
p11908
S'NonlinearVariableName'
p11909
sS'default'
p11910
g3
sS'name'
p11911
S'variable'
p11912
sS'required'
p11913
I01
sS'group_name'
p11914
NsasS'name'
p11915
S'/DGKernels/DGDiffusion'
p11916
sasS'parameters'
p11917
NsS'name'
p11918
S'/DGKernels'
p11919
sa(dp11920
S'description'
p11921
g3
sS'subblocks'
p11922
(lp11923
(dp11924
S'description'
p11925
g3
sS'subblocks'
p11926
NsS'parameters'
p11927
(lp11928
(dp11929
S'description'
p11930
S'A string representing the Moose Object that will be built by this Action\n'
p11931
sS'cpp_type'
p11932
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11933
sS'default'
p11934
g3
sS'name'
p11935
S'type'
p11936
sS'required'
p11937
I01
sS'group_name'
p11938
NsasS'name'
p11939
S'/Dampers/*'
p11940
sa(dp11941
S'description'
p11942
g3
sS'subblocks'
p11943
NsS'parameters'
p11944
(lp11945
(dp11946
S'description'
p11947
S'The percentage (between 0 and 1) of the newton update to take.\n'
p11948
sS'cpp_type'
p11949
S'double'
p11950
sS'default'
p11951
g3
sS'name'
p11952
S'damping'
p11953
sS'required'
p11954
I01
sS'group_name'
p11955
Nsa(dp11956
S'description'
p11957
g3
sS'cpp_type'
p11958
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11959
sS'default'
p11960
S'ConstantDamper'
p11961
sS'name'
p11962
S'type'
p11963
sS'required'
p11964
I00
sS'group_name'
p11965
Nsa(dp11966
S'description'
p11967
S'The name of the variable that this damper operates on\n'
p11968
sS'cpp_type'
p11969
S'NonlinearVariableName'
p11970
sS'default'
p11971
g3
sS'name'
p11972
S'variable'
p11973
sS'required'
p11974
I01
sS'group_name'
p11975
NsasS'name'
p11976
S'/Dampers/ConstantDamper'
p11977
sa(dp11978
S'description'
p11979
g3
sS'subblocks'
p11980
NsS'parameters'
p11981
(lp11982
(dp11983
S'description'
p11984
S'The maximum newton increment for the variable.\n'
p11985
sS'cpp_type'
p11986
S'double'
p11987
sS'default'
p11988
g3
sS'name'
p11989
S'max_increment'
p11990
sS'required'
p11991
I01
sS'group_name'
p11992
Nsa(dp11993
S'description'
p11994
g3
sS'cpp_type'
p11995
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p11996
sS'default'
p11997
S'MaxIncrement'
p11998
sS'name'
p11999
S'type'
p12000
sS'required'
p12001
I00
sS'group_name'
p12002
Nsa(dp12003
S'description'
p12004
S'The name of the variable that this damper operates on\n'
p12005
sS'cpp_type'
p12006
S'NonlinearVariableName'
p12007
sS'default'
p12008
g3
sS'name'
p12009
S'variable'
p12010
sS'required'
p12011
I01
sS'group_name'
p12012
NsasS'name'
p12013
S'/Dampers/MaxIncrement'
p12014
sasS'parameters'
p12015
NsS'name'
p12016
S'/Dampers'
p12017
sa(dp12018
S'description'
p12019
g3
sS'subblocks'
p12020
NsS'parameters'
p12021
(lp12022
(dp12023
S'description'
p12024
S'Print out the actions being executed\n'
p12025
sS'cpp_type'
p12026
S'bool'
p12027
sS'default'
p12028
S'0'
p12029
sS'name'
p12030
S'show_actions'
p12031
sS'required'
p12032
I00
sS'group_name'
p12033
Nsa(dp12034
S'description'
p12035
S'Print out the material properties supplied for each block, face, neighbor, and/or sideset\n'
p12036
sS'cpp_type'
p12037
S'bool'
p12038
sS'default'
p12039
S'0'
p12040
sS'name'
p12041
S'show_material_props'
p12042
sS'required'
p12043
I00
sS'group_name'
p12044
Nsa(dp12045
S'description'
p12046
S'Shows parser block extraction and debugging information\n'
p12047
sS'cpp_type'
p12048
S'bool'
p12049
sS'default'
p12050
S'0'
p12051
sS'name'
p12052
S'show_parser'
p12053
sS'required'
p12054
I00
sS'group_name'
p12055
Nsa(dp12056
S'description'
p12057
S'The number of top residuals to print out (0 = no output)\n'
p12058
sS'cpp_type'
p12059
S'unsigned int'
p12060
sS'default'
p12061
S'0'
p12062
sS'name'
p12063
S'show_top_residuals'
p12064
sS'required'
p12065
I00
sS'group_name'
p12066
Nsa(dp12067
S'description'
p12068
S'Print the residual norms of the individual solution variables at each nonlinear iteration\n'
p12069
sS'cpp_type'
p12070
S'bool'
p12071
sS'default'
p12072
S'0'
p12073
sS'name'
p12074
S'show_var_residual_norms'
p12075
sS'required'
p12076
I00
sS'group_name'
p12077
Nsa(dp12078
S'description'
p12079
S'Variables for which residuals will be sent to the output file\n'
p12080
sS'cpp_type'
p12081
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p12082
sS'default'
p12083
g3
sS'name'
p12084
S'show_var_residual'
p12085
sS'required'
p12086
I00
sS'group_name'
p12087
NsasS'name'
p12088
S'/Debug'
p12089
sa(dp12090
S'description'
p12091
g3
sS'subblocks'
p12092
NsS'parameters'
p12093
(lp12094
(dp12095
S'description'
p12096
S'*** WARNING: This block is deprecated - DO NOT USE ***\n'
p12097
sS'cpp_type'
p12098
S'bool'
p12099
sS'default'
p12100
g3
sS'name'
p12101
S'DEPRECATED'
p12102
sS'required'
p12103
I00
sS'group_name'
p12104
NsasS'name'
p12105
S'/DeprecatedBlock'
p12106
sa(dp12107
S'description'
p12108
g3
sS'subblocks'
p12109
(lp12110
(dp12111
S'description'
p12112
g3
sS'subblocks'
p12113
NsS'parameters'
p12114
(lp12115
(dp12116
S'description'
p12117
S'A string representing the Moose Object that will be built by this Action\n'
p12118
sS'cpp_type'
p12119
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12120
sS'default'
p12121
g3
sS'name'
p12122
S'type'
p12123
sS'required'
p12124
I01
sS'group_name'
p12125
NsasS'name'
p12126
S'/DiracKernels/*'
p12127
sa(dp12128
S'description'
p12129
g3
sS'subblocks'
p12130
NsS'parameters'
p12131
(lp12132
(dp12133
S'description'
p12134
S'The x,y,z coordinates of the point\n'
p12135
sS'cpp_type'
p12136
S'std::__1::vector<double, std::__1::allocator<double> >'
p12137
sS'default'
p12138
g3
sS'name'
p12139
S'point'
p12140
sS'required'
p12141
I01
sS'group_name'
p12142
Nsa(dp12143
S'description'
p12144
g3
sS'cpp_type'
p12145
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12146
sS'default'
p12147
S'ConstantPointSource'
p12148
sS'name'
p12149
S'type'
p12150
sS'required'
p12151
I00
sS'group_name'
p12152
Nsa(dp12153
S'description'
p12154
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p12155
sS'cpp_type'
p12156
S'bool'
p12157
sS'default'
p12158
S'0'
p12159
sS'name'
p12160
S'use_displaced_mesh'
p12161
sS'required'
p12162
I00
sS'group_name'
p12163
S'Advanced'
p12164
sa(dp12165
S'description'
p12166
S'The value of the point source\n'
p12167
sS'cpp_type'
p12168
S'double'
p12169
sS'default'
p12170
g3
sS'name'
p12171
S'value'
p12172
sS'required'
p12173
I01
sS'group_name'
p12174
Nsa(dp12175
S'description'
p12176
S'The name of the variable that this kernel operates on\n'
p12177
sS'cpp_type'
p12178
S'NonlinearVariableName'
p12179
sS'default'
p12180
g3
sS'name'
p12181
S'variable'
p12182
sS'required'
p12183
I01
sS'group_name'
p12184
NsasS'name'
p12185
S'/DiracKernels/ConstantPointSource'
p12186
sasS'parameters'
p12187
NsS'name'
p12188
S'/DiracKernels'
p12189
sa(dp12190
S'description'
p12191
g3
sS'subblocks'
p12192
(lp12193
(dp12194
S'description'
p12195
g3
sS'subblocks'
p12196
(lp12197
(dp12198
S'description'
p12199
g3
sS'subblocks'
p12200
NsS'parameters'
p12201
(lp12202
(dp12203
S'description'
p12204
S'If Chebyshev acceleration is turned on\n'
p12205
sS'cpp_type'
p12206
S'bool'
p12207
sS'default'
p12208
S'1'
p12209
sS'name'
p12210
S'Chebyshev_acceleration_on'
p12211
sS'required'
p12212
I00
sS'group_name'
p12213
Nsa(dp12214
S'description'
p12215
S'True to ask the solver to set initial\n'
p12216
sS'cpp_type'
p12217
S'bool'
p12218
sS'default'
p12219
S'1'
p12220
sS'name'
p12221
S'auto_initialization'
p12222
sS'required'
p12223
I00
sS'group_name'
p12224
S'Advanced'
p12225
sa(dp12226
S'description'
p12227
S'To evaluate |Bx| for the eigenvalue\n'
p12228
sS'cpp_type'
p12229
S'PostprocessorName'
p12230
sS'default'
p12231
g3
sS'name'
p12232
S'bx_norm'
p12233
sS'required'
p12234
I01
sS'group_name'
p12235
Nsa(dp12236
S'description'
p12237
S'Eigenvalue convergence tolerance\n'
p12238
sS'cpp_type'
p12239
S'double'
p12240
sS'default'
p12241
S'1e-06'
p12242
sS'name'
p12243
S'eig_check_tol'
p12244
sS'required'
p12245
I00
sS'group_name'
p12246
Nsa(dp12247
S'description'
p12248
S'Initial guess of the eigenvalue\n'
p12249
sS'cpp_type'
p12250
S'double'
p12251
sS'default'
p12252
S'1'
p12253
sS'name'
p12254
S'k0'
p12255
sS'required'
p12256
I00
sS'group_name'
p12257
Nsa(dp12258
S'name'
p12259
S'line_search'
p12260
sS'cpp_type'
p12261
S'MooseEnum'
p12262
sS'default'
p12263
S'default'
p12264
sS'description'
p12265
S'Specifies the line search type (Note: none = basic)\n'
p12266
sS'required'
p12267
I00
sS'options'
p12268
S'default shell none basic l2 bt cp'
p12269
sS'group_name'
p12270
Nsa(dp12271
S'description'
p12272
S'The maximum number of power iterations\n'
p12273
sS'cpp_type'
p12274
S'unsigned int'
p12275
sS'default'
p12276
S'300'
p12277
sS'name'
p12278
S'max_power_iterations'
p12279
sS'required'
p12280
I00
sS'group_name'
p12281
Nsa(dp12282
S'description'
p12283
S'Minimum number of power iterations\n'
p12284
sS'cpp_type'
p12285
S'unsigned int'
p12286
sS'default'
p12287
S'1'
p12288
sS'name'
p12289
S'min_power_iterations'
p12290
sS'required'
p12291
I00
sS'group_name'
p12292
Nsa(dp12293
S'description'
p12294
S'Normalize x to make |x| equal to this factor\n'
p12295
sS'cpp_type'
p12296
S'double'
p12297
sS'default'
p12298
g3
sS'name'
p12299
S'normal_factor'
p12300
sS'required'
p12301
I00
sS'group_name'
p12302
S'Normalization'
p12303
sa(dp12304
S'description'
p12305
S'To evaluate |x| for normalization\n'
p12306
sS'cpp_type'
p12307
S'PostprocessorName'
p12308
sS'default'
p12309
g3
sS'name'
p12310
S'normalization'
p12311
sS'required'
p12312
I00
sS'group_name'
p12313
S'Normalization'
p12314
sa(dp12315
S'description'
p12316
S'True to output a step before normalization\n'
p12317
sS'cpp_type'
p12318
S'bool'
p12319
sS'default'
p12320
S'1'
p12321
sS'name'
p12322
S'output_before_normalization'
p12323
sS'required'
p12324
I00
sS'group_name'
p12325
S'Normalization'
p12326
sa(dp12327
S'description'
p12328
S'True to disable all the intemediate exodus outputs\n'
p12329
sS'cpp_type'
p12330
S'bool'
p12331
sS'default'
p12332
S'0'
p12333
sS'name'
p12334
S'output_on_final'
p12335
sS'required'
p12336
I00
sS'group_name'
p12337
Nsa(dp12338
S'name'
p12339
S'petsc_options'
p12340
sS'cpp_type'
p12341
S'MultiMooseEnum'
p12342
sS'default'
p12343
g3
sS'description'
p12344
S'Singleton PETSc options\n'
p12345
sS'required'
p12346
I00
sS'options'
p12347
NsS'group_name'
p12348
Nsa(dp12349
S'description'
p12350
S'Names of PETSc name/value pairs\n'
p12351
sS'cpp_type'
p12352
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12353
sS'default'
p12354
g3
sS'name'
p12355
S'petsc_options_iname'
p12356
sS'required'
p12357
I00
sS'group_name'
p12358
Nsa(dp12359
S'description'
p12360
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p12361
sS'cpp_type'
p12362
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12363
sS'default'
p12364
g3
sS'name'
p12365
S'petsc_options_value'
p12366
sS'required'
p12367
I00
sS'group_name'
p12368
Nsa(dp12369
S'description'
p12370
S'Reduce residual norm per power iteration by this factor\n'
p12371
sS'cpp_type'
p12372
S'double'
p12373
sS'default'
p12374
S'0.01'
p12375
sS'name'
p12376
S'pfactor'
p12377
sS'required'
p12378
I00
sS'group_name'
p12379
Nsa(dp12380
S'description'
p12381
S'File base name used for restart\n'
p12382
sS'cpp_type'
p12383
S'FileNameNoExtension'
p12384
sS'default'
p12385
g3
sS'name'
p12386
S'restart_file_base'
p12387
sS'required'
p12388
I00
sS'group_name'
p12389
S'Restart'
p12390
sa(dp12391
S'description'
p12392
S'Convergence tolerance on |x-x_previous| when provided\n'
p12393
sS'cpp_type'
p12394
S'double'
p12395
sS'default'
p12396
S'1.79769e+308'
p12397
sS'name'
p12398
S'sol_check_tol'
p12399
sS'required'
p12400
I00
sS'group_name'
p12401
Nsa(dp12402
S'name'
p12403
S'solve_type'
p12404
sS'cpp_type'
p12405
S'MooseEnum'
p12406
sS'default'
p12407
g3
sS'description'
p12408
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p12409
sS'required'
p12410
I00
sS'options'
p12411
S'PJFNK JFNK NEWTON FD LINEAR'
p12412
sS'group_name'
p12413
Nsa(dp12414
S'description'
p12415
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p12416
sS'cpp_type'
p12417
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12418
sS'default'
p12419
g3
sS'name'
p12420
S'splitting'
p12421
sS'required'
p12422
I00
sS'group_name'
p12423
Nsa(dp12424
S'description'
p12425
S'System time\n'
p12426
sS'cpp_type'
p12427
S'double'
p12428
sS'default'
p12429
S'0'
p12430
sS'name'
p12431
S'time'
p12432
sS'required'
p12433
I00
sS'group_name'
p12434
S'Advanced'
p12435
sa(dp12436
S'description'
p12437
g3
sS'cpp_type'
p12438
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12439
sS'default'
p12440
S'InversePowerMethod'
p12441
sS'name'
p12442
S'type'
p12443
sS'required'
p12444
I00
sS'group_name'
p12445
Nsa(dp12446
S'description'
p12447
S'To evaluate |x-x_previous| for power iterations\n'
p12448
sS'cpp_type'
p12449
S'PostprocessorName'
p12450
sS'default'
p12451
g3
sS'name'
p12452
S'xdiff'
p12453
sS'required'
p12454
I00
sS'group_name'
p12455
NsasS'name'
p12456
S'/Executioner/<type>/InversePowerMethod'
p12457
sa(dp12458
S'description'
p12459
g3
sS'subblocks'
p12460
NsS'parameters'
p12461
NsS'name'
p12462
S'/Executioner/<type>/InversePowerMethod'
p12463
sa(dp12464
S'description'
p12465
g3
sS'subblocks'
p12466
NsS'parameters'
p12467
(lp12468
(dp12469
S'description'
p12470
S'True to ask the solver to set initial\n'
p12471
sS'cpp_type'
p12472
S'bool'
p12473
sS'default'
p12474
S'1'
p12475
sS'name'
p12476
S'auto_initialization'
p12477
sS'required'
p12478
I00
sS'group_name'
p12479
S'Advanced'
p12480
sa(dp12481
S'description'
p12482
S'To evaluate |Bx| for the eigenvalue\n'
p12483
sS'cpp_type'
p12484
S'PostprocessorName'
p12485
sS'default'
p12486
g3
sS'name'
p12487
S'bx_norm'
p12488
sS'required'
p12489
I01
sS'group_name'
p12490
Nsa(dp12491
S'description'
p12492
S'The number of free power iterations\n'
p12493
sS'cpp_type'
p12494
S'unsigned int'
p12495
sS'default'
p12496
S'4'
p12497
sS'name'
p12498
S'free_power_iterations'
p12499
sS'required'
p12500
I00
sS'group_name'
p12501
Nsa(dp12502
S'description'
p12503
S'Initial guess of the eigenvalue\n'
p12504
sS'cpp_type'
p12505
S'double'
p12506
sS'default'
p12507
S'1'
p12508
sS'name'
p12509
S'k0'
p12510
sS'required'
p12511
I00
sS'group_name'
p12512
Nsa(dp12513
S'name'
p12514
S'line_search'
p12515
sS'cpp_type'
p12516
S'MooseEnum'
p12517
sS'default'
p12518
S'default'
p12519
sS'description'
p12520
S'Specifies the line search type (Note: none = basic)\n'
p12521
sS'required'
p12522
I00
sS'options'
p12523
S'default shell none basic l2 bt cp'
p12524
sS'group_name'
p12525
Nsa(dp12526
S'description'
p12527
S'Normalize x to make |x| equal to this factor\n'
p12528
sS'cpp_type'
p12529
S'double'
p12530
sS'default'
p12531
g3
sS'name'
p12532
S'normal_factor'
p12533
sS'required'
p12534
I00
sS'group_name'
p12535
S'Normalization'
p12536
sa(dp12537
S'description'
p12538
S'To evaluate |x| for normalization\n'
p12539
sS'cpp_type'
p12540
S'PostprocessorName'
p12541
sS'default'
p12542
g3
sS'name'
p12543
S'normalization'
p12544
sS'required'
p12545
I00
sS'group_name'
p12546
S'Normalization'
p12547
sa(dp12548
S'description'
p12549
S'True to output solution after free power iterations\n'
p12550
sS'cpp_type'
p12551
S'bool'
p12552
sS'default'
p12553
S'1'
p12554
sS'name'
p12555
S'output_after_power_iterations'
p12556
sS'required'
p12557
I00
sS'group_name'
p12558
Nsa(dp12559
S'description'
p12560
S'True to output a step before normalization\n'
p12561
sS'cpp_type'
p12562
S'bool'
p12563
sS'default'
p12564
S'1'
p12565
sS'name'
p12566
S'output_before_normalization'
p12567
sS'required'
p12568
I00
sS'group_name'
p12569
S'Normalization'
p12570
sa(dp12571
S'description'
p12572
S'True to disable all the intemediate exodus outputs\n'
p12573
sS'cpp_type'
p12574
S'bool'
p12575
sS'default'
p12576
S'0'
p12577
sS'name'
p12578
S'output_on_final'
p12579
sS'required'
p12580
I00
sS'group_name'
p12581
Nsa(dp12582
S'name'
p12583
S'petsc_options'
p12584
sS'cpp_type'
p12585
S'MultiMooseEnum'
p12586
sS'default'
p12587
g3
sS'description'
p12588
S'Singleton PETSc options\n'
p12589
sS'required'
p12590
I00
sS'options'
p12591
NsS'group_name'
p12592
Nsa(dp12593
S'description'
p12594
S'Names of PETSc name/value pairs\n'
p12595
sS'cpp_type'
p12596
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12597
sS'default'
p12598
g3
sS'name'
p12599
S'petsc_options_iname'
p12600
sS'required'
p12601
I00
sS'group_name'
p12602
Nsa(dp12603
S'description'
p12604
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p12605
sS'cpp_type'
p12606
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12607
sS'default'
p12608
g3
sS'name'
p12609
S'petsc_options_value'
p12610
sS'required'
p12611
I00
sS'group_name'
p12612
Nsa(dp12613
S'description'
p12614
S'The factor of residual to be reduced per free power iteration or per nonlinear step\n'
p12615
sS'cpp_type'
p12616
S'double'
p12617
sS'default'
p12618
S'0.01'
p12619
sS'name'
p12620
S'pfactor'
p12621
sS'required'
p12622
I00
sS'group_name'
p12623
Nsa(dp12624
S'description'
p12625
S'File base name used for restart\n'
p12626
sS'cpp_type'
p12627
S'FileNameNoExtension'
p12628
sS'default'
p12629
g3
sS'name'
p12630
S'restart_file_base'
p12631
sS'required'
p12632
I00
sS'group_name'
p12633
S'Restart'
p12634
sa(dp12635
S'name'
p12636
S'solve_type'
p12637
sS'cpp_type'
p12638
S'MooseEnum'
p12639
sS'default'
p12640
g3
sS'description'
p12641
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p12642
sS'required'
p12643
I00
sS'options'
p12644
S'PJFNK JFNK NEWTON FD LINEAR'
p12645
sS'group_name'
p12646
Nsa(dp12647
S'description'
p12648
S'Absolute tolernance on residual norm\n'
p12649
sS'cpp_type'
p12650
S'double'
p12651
sS'default'
p12652
S'1e-06'
p12653
sS'name'
p12654
S'source_abs_tol'
p12655
sS'required'
p12656
I00
sS'group_name'
p12657
Nsa(dp12658
S'description'
p12659
S'Relative tolernance on residual norm after free power iterations\n'
p12660
sS'cpp_type'
p12661
S'double'
p12662
sS'default'
p12663
S'1e-50'
p12664
sS'name'
p12665
S'source_rel_tol'
p12666
sS'required'
p12667
I00
sS'group_name'
p12668
Nsa(dp12669
S'description'
p12670
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p12671
sS'cpp_type'
p12672
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12673
sS'default'
p12674
g3
sS'name'
p12675
S'splitting'
p12676
sS'required'
p12677
I00
sS'group_name'
p12678
Nsa(dp12679
S'description'
p12680
S'System time\n'
p12681
sS'cpp_type'
p12682
S'double'
p12683
sS'default'
p12684
S'0'
p12685
sS'name'
p12686
S'time'
p12687
sS'required'
p12688
I00
sS'group_name'
p12689
S'Advanced'
p12690
sa(dp12691
S'description'
p12692
g3
sS'cpp_type'
p12693
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12694
sS'default'
p12695
S'NonlinearEigen'
p12696
sS'name'
p12697
S'type'
p12698
sS'required'
p12699
I00
sS'group_name'
p12700
NsasS'name'
p12701
S'/Executioner/<type>/NonlinearEigen'
p12702
sa(dp12703
S'description'
p12704
g3
sS'subblocks'
p12705
NsS'parameters'
p12706
NsS'name'
p12707
S'/Executioner/<type>/NonlinearEigen'
p12708
sa(dp12709
S'description'
p12710
g3
sS'subblocks'
p12711
NsS'parameters'
p12712
(lp12713
(dp12714
S'name'
p12715
S'line_search'
p12716
sS'cpp_type'
p12717
S'MooseEnum'
p12718
sS'default'
p12719
S'default'
p12720
sS'description'
p12721
S'Specifies the line search type (Note: none = basic)\n'
p12722
sS'required'
p12723
I00
sS'options'
p12724
S'default shell none basic l2 bt cp'
p12725
sS'group_name'
p12726
Nsa(dp12727
S'name'
p12728
S'petsc_options'
p12729
sS'cpp_type'
p12730
S'MultiMooseEnum'
p12731
sS'default'
p12732
g3
sS'description'
p12733
S'Singleton PETSc options\n'
p12734
sS'required'
p12735
I00
sS'options'
p12736
NsS'group_name'
p12737
Nsa(dp12738
S'description'
p12739
S'Names of PETSc name/value pairs\n'
p12740
sS'cpp_type'
p12741
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12742
sS'default'
p12743
g3
sS'name'
p12744
S'petsc_options_iname'
p12745
sS'required'
p12746
I00
sS'group_name'
p12747
Nsa(dp12748
S'description'
p12749
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p12750
sS'cpp_type'
p12751
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12752
sS'default'
p12753
g3
sS'name'
p12754
S'petsc_options_value'
p12755
sS'required'
p12756
I00
sS'group_name'
p12757
Nsa(dp12758
S'description'
p12759
S'File base name used for restart\n'
p12760
sS'cpp_type'
p12761
S'FileNameNoExtension'
p12762
sS'default'
p12763
g3
sS'name'
p12764
S'restart_file_base'
p12765
sS'required'
p12766
I00
sS'group_name'
p12767
S'Restart'
p12768
sa(dp12769
S'name'
p12770
S'solve_type'
p12771
sS'cpp_type'
p12772
S'MooseEnum'
p12773
sS'default'
p12774
g3
sS'description'
p12775
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p12776
sS'required'
p12777
I00
sS'options'
p12778
S'PJFNK JFNK NEWTON FD LINEAR'
p12779
sS'group_name'
p12780
Nsa(dp12781
S'description'
p12782
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p12783
sS'cpp_type'
p12784
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12785
sS'default'
p12786
g3
sS'name'
p12787
S'splitting'
p12788
sS'required'
p12789
I00
sS'group_name'
p12790
Nsa(dp12791
S'description'
p12792
g3
sS'cpp_type'
p12793
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p12794
sS'default'
p12795
S'Steady'
p12796
sS'name'
p12797
S'type'
p12798
sS'required'
p12799
I00
sS'group_name'
p12800
NsasS'name'
p12801
S'/Executioner/<type>/Steady'
p12802
sa(dp12803
S'description'
p12804
g3
sS'subblocks'
p12805
NsS'parameters'
p12806
NsS'name'
p12807
S'/Executioner/<type>/Steady'
p12808
sa(dp12809
S'description'
p12810
g3
sS'subblocks'
p12811
NsS'parameters'
p12812
(lp12813
(dp12814
S'description'
p12815
S'abort if solve not converged rather than cut timestep\n'
p12816
sS'cpp_type'
p12817
S'bool'
p12818
sS'default'
p12819
S'0'
p12820
sS'name'
p12821
S'abort_on_solve_fail'
p12822
sS'required'
p12823
I00
sS'group_name'
p12824
S'Advanced'
p12825
sa(dp12826
S'description'
p12827
S'The timestep size between solves\n'
p12828
sS'cpp_type'
p12829
S'double'
p12830
sS'default'
p12831
S'1'
p12832
sS'name'
p12833
S'dt'
p12834
sS'required'
p12835
I00
sS'group_name'
p12836
Nsa(dp12837
S'description'
p12838
S'The maximum timestep size in an adaptive run\n'
p12839
sS'cpp_type'
p12840
S'double'
p12841
sS'default'
p12842
S'1e+30'
p12843
sS'name'
p12844
S'dtmax'
p12845
sS'required'
p12846
I00
sS'group_name'
p12847
S'Advanced'
p12848
sa(dp12849
S'description'
p12850
S'The minimum timestep size in an adaptive run\n'
p12851
sS'cpp_type'
p12852
S'double'
p12853
sS'default'
p12854
S'2e-14'
p12855
sS'name'
p12856
S'dtmin'
p12857
sS'required'
p12858
I00
sS'group_name'
p12859
S'Advanced'
p12860
sa(dp12861
S'description'
p12862
S'The end time of the simulation\n'
p12863
sS'cpp_type'
p12864
S'double'
p12865
sS'default'
p12866
S'1e+30'
p12867
sS'name'
p12868
S'end_time'
p12869
sS'required'
p12870
I00
sS'group_name'
p12871
Nsa(dp12872
S'name'
p12873
S'line_search'
p12874
sS'cpp_type'
p12875
S'MooseEnum'
p12876
sS'default'
p12877
S'default'
p12878
sS'description'
p12879
S'Specifies the line search type (Note: none = basic)\n'
p12880
sS'required'
p12881
I00
sS'options'
p12882
S'default shell none basic l2 bt cp'
p12883
sS'group_name'
p12884
Nsa(dp12885
S'description'
p12886
S'The number of timesteps during startup\n'
p12887
sS'cpp_type'
p12888
S'int'
p12889
sS'default'
p12890
S'0'
p12891
sS'name'
p12892
S'n_startup_steps'
p12893
sS'required'
p12894
I00
sS'group_name'
p12895
S'Advanced'
p12896
sa(dp12897
S'description'
p12898
S'The number of timesteps in a transient run\n'
p12899
sS'cpp_type'
p12900
S'unsigned int'
p12901
sS'default'
p12902
S'4294967295'
p12903
sS'name'
p12904
S'num_steps'
p12905
sS'required'
p12906
I00
sS'group_name'
p12907
Nsa(dp12908
S'name'
p12909
S'petsc_options'
p12910
sS'cpp_type'
p12911
S'MultiMooseEnum'
p12912
sS'default'
p12913
g3
sS'description'
p12914
S'Singleton PETSc options\n'
p12915
sS'required'
p12916
I00
sS'options'
p12917
NsS'group_name'
p12918
Nsa(dp12919
S'description'
p12920
S'Names of PETSc name/value pairs\n'
p12921
sS'cpp_type'
p12922
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12923
sS'default'
p12924
g3
sS'name'
p12925
S'petsc_options_iname'
p12926
sS'required'
p12927
I00
sS'group_name'
p12928
Nsa(dp12929
S'description'
p12930
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p12931
sS'cpp_type'
p12932
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p12933
sS'default'
p12934
g3
sS'name'
p12935
S'petsc_options_value'
p12936
sS'required'
p12937
I00
sS'group_name'
p12938
Nsa(dp12939
S'description'
p12940
S"The absolute nonlinear residual to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p12941
sS'cpp_type'
p12942
S'double'
p12943
sS'default'
p12944
S'1e-50'
p12945
sS'name'
p12946
S'picard_abs_tol'
p12947
sS'required'
p12948
I00
sS'group_name'
p12949
S'Picard'
p12950
sa(dp12951
S'description'
p12952
S'Number of times each timestep will be solved.  Mainly used when wanting to do Picard iterations with MultiApps that are set to execute_on timestep_end or timestep_begin\n'
p12953
sS'cpp_type'
p12954
S'unsigned int'
p12955
sS'default'
p12956
S'1'
p12957
sS'name'
p12958
S'picard_max_its'
p12959
sS'required'
p12960
I00
sS'group_name'
p12961
S'Picard'
p12962
sa(dp12963
S'description'
p12964
S"The relative nonlinear residual drop to shoot for during Picard iterations.  This check is performed based on the Master app's nonlinear residual.\n"
p12965
sS'cpp_type'
p12966
S'double'
p12967
sS'default'
p12968
S'1e-08'
p12969
sS'name'
p12970
S'picard_rel_tol'
p12971
sS'required'
p12972
I00
sS'group_name'
p12973
S'Picard'
p12974
sa(dp12975
S'description'
p12976
S'The scale factor for the predictor (can range from 0 to 1)\n'
p12977
sS'cpp_type'
p12978
S'double'
p12979
sS'default'
p12980
g3
sS'name'
p12981
S'predictor_scale'
p12982
sS'required'
p12983
I00
sS'group_name'
p12984
S'Advanced'
p12985
sa(dp12986
S'description'
p12987
S'Use when restarting a calculation to force a change in dt.\n'
p12988
sS'cpp_type'
p12989
S'bool'
p12990
sS'default'
p12991
S'0'
p12992
sS'name'
p12993
S'reset_dt'
p12994
sS'required'
p12995
I00
sS'group_name'
p12996
Nsa(dp12997
S'description'
p12998
S'File base name used for restart\n'
p12999
sS'cpp_type'
p13000
S'FileNameNoExtension'
p13001
sS'default'
p13002
g3
sS'name'
p13003
S'restart_file_base'
p13004
sS'required'
p13005
I00
sS'group_name'
p13006
S'Restart'
p13007
sa(dp13008
S'name'
p13009
S'scheme'
p13010
sS'cpp_type'
p13011
S'MooseEnum'
p13012
sS'default'
p13013
g3
sS'description'
p13014
S'Time integration scheme used.\n'
p13015
sS'required'
p13016
I00
sS'options'
p13017
S'implicit-euler explicit-euler crank-nicolson bdf2 rk-2 dirk'
p13018
sS'group_name'
p13019
Nsa(dp13020
S'name'
p13021
S'solve_type'
p13022
sS'cpp_type'
p13023
S'MooseEnum'
p13024
sS'default'
p13025
g3
sS'description'
p13026
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p13027
sS'required'
p13028
I00
sS'options'
p13029
S'PJFNK JFNK NEWTON FD LINEAR'
p13030
sS'group_name'
p13031
Nsa(dp13032
S'description'
p13033
S'Top-level splitting defining a hierarchical decomposition into subsystems to help the solver.\n'
p13034
sS'cpp_type'
p13035
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13036
sS'default'
p13037
g3
sS'name'
p13038
S'splitting'
p13039
sS'required'
p13040
I00
sS'group_name'
p13041
Nsa(dp13042
S'description'
p13043
S'Whenever the relative residual changes by less than this the solution will be considered to be at steady state.\n'
p13044
sS'cpp_type'
p13045
S'double'
p13046
sS'default'
p13047
S'1e-08'
p13048
sS'name'
p13049
S'ss_check_tol'
p13050
sS'required'
p13051
I00
sS'group_name'
p13052
S'Advanced'
p13053
sa(dp13054
S'description'
p13055
S'Minimum number of timesteps to take before checking for steady state conditions.\n'
p13056
sS'cpp_type'
p13057
S'double'
p13058
sS'default'
p13059
S'0'
p13060
sS'name'
p13061
S'ss_tmin'
p13062
sS'required'
p13063
I00
sS'group_name'
p13064
S'Advanced'
p13065
sa(dp13066
S'description'
p13067
S'The start time of the simulation\n'
p13068
sS'cpp_type'
p13069
S'double'
p13070
sS'default'
p13071
S'0'
p13072
sS'name'
p13073
S'start_time'
p13074
sS'required'
p13075
I00
sS'group_name'
p13076
S'Advanced'
p13077
sa(dp13078
S'description'
p13079
S'The end times of time periods\n'
p13080
sS'cpp_type'
p13081
S'std::__1::vector<double, std::__1::allocator<double> >'
p13082
sS'default'
p13083
g3
sS'name'
p13084
S'time_period_ends'
p13085
sS'required'
p13086
I00
sS'group_name'
p13087
S'Time Periods'
p13088
sa(dp13089
S'description'
p13090
S'The start times of time periods\n'
p13091
sS'cpp_type'
p13092
S'std::__1::vector<double, std::__1::allocator<double> >'
p13093
sS'default'
p13094
g3
sS'name'
p13095
S'time_period_starts'
p13096
sS'required'
p13097
I00
sS'group_name'
p13098
S'Time Periods'
p13099
sa(dp13100
S'description'
p13101
S'The names of periods\n'
p13102
sS'cpp_type'
p13103
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13104
sS'default'
p13105
g3
sS'name'
p13106
S'time_periods'
p13107
sS'required'
p13108
I00
sS'group_name'
p13109
S'Time Periods'
p13110
sa(dp13111
S'description'
p13112
S'the tolerance setting for final timestep size and sync times\n'
p13113
sS'cpp_type'
p13114
S'double'
p13115
sS'default'
p13116
S'2e-14'
p13117
sS'name'
p13118
S'timestep_tolerance'
p13119
sS'required'
p13120
I00
sS'group_name'
p13121
S'Advanced'
p13122
sa(dp13123
S'description'
p13124
S'Whether or not to check for steady state conditions\n'
p13125
sS'cpp_type'
p13126
S'bool'
p13127
sS'default'
p13128
S'0'
p13129
sS'name'
p13130
S'trans_ss_check'
p13131
sS'required'
p13132
I00
sS'group_name'
p13133
S'Advanced'
p13134
sa(dp13135
S'description'
p13136
g3
sS'cpp_type'
p13137
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13138
sS'default'
p13139
S'Transient'
p13140
sS'name'
p13141
S'type'
p13142
sS'required'
p13143
I00
sS'group_name'
p13144
Nsa(dp13145
S'description'
p13146
S'If true then the dt for the simulation will be chosen by the MultiApps.  If false (the default) then the minimum over the master dt and the MultiApps is used\n'
p13147
sS'cpp_type'
p13148
S'bool'
p13149
sS'default'
p13150
S'0'
p13151
sS'name'
p13152
S'use_multiapp_dt'
p13153
sS'required'
p13154
I00
sS'group_name'
p13155
S'Advanced'
p13156
sa(dp13157
S'description'
p13158
S'Print detailed diagnostics on timestep calculation\n'
p13159
sS'cpp_type'
p13160
S'bool'
p13161
sS'default'
p13162
S'0'
p13163
sS'name'
p13164
S'verbose'
p13165
sS'required'
p13166
I00
sS'group_name'
p13167
NsasS'name'
p13168
S'/Executioner/<type>/Transient'
p13169
sa(dp13170
S'description'
p13171
g3
sS'subblocks'
p13172
NsS'parameters'
p13173
NsS'name'
p13174
S'/Executioner/<type>/Transient'
p13175
sasS'parameters'
p13176
NsS'name'
p13177
S'/Executioner/<type>'
p13178
sa(dp13179
S'description'
p13180
g3
sS'subblocks'
p13181
NsS'parameters'
p13182
(lp13183
(dp13184
S'description'
p13185
S'The fraction of elements or error to coarsen. Should be between 0 and 1.\n'
p13186
sS'cpp_type'
p13187
S'double'
p13188
sS'default'
p13189
S'0'
p13190
sS'name'
p13191
S'coarsen_fraction'
p13192
sS'required'
p13193
I00
sS'group_name'
p13194
Nsa(dp13195
S'description'
p13196
S'The number of adaptivity cycles per step\n'
p13197
sS'cpp_type'
p13198
S'unsigned int'
p13199
sS'default'
p13200
S'1'
p13201
sS'name'
p13202
S'cycles_per_step'
p13203
sS'required'
p13204
I00
sS'group_name'
p13205
Nsa(dp13206
S'name'
p13207
S'error_estimator'
p13208
sS'cpp_type'
p13209
S'MooseEnum'
p13210
sS'default'
p13211
S'KellyErrorEstimator'
p13212
sS'description'
p13213
S'The class name of the error estimator you want to use.\n'
p13214
sS'required'
p13215
I00
sS'options'
p13216
S'KellyErrorEstimator LaplacianErrorEstimator PatchRecoveryErrorEstimator'
p13217
sS'group_name'
p13218
Nsa(dp13219
S'description'
p13220
S'The number of adaptivity steps to perform using the initial conditions\n'
p13221
sS'cpp_type'
p13222
S'unsigned int'
p13223
sS'default'
p13224
S'0'
p13225
sS'name'
p13226
S'initial_adaptivity'
p13227
sS'required'
p13228
I00
sS'group_name'
p13229
Nsa(dp13230
S'description'
p13231
S'Maximum number of times a single element can be refined. If 0 then infinite.\n'
p13232
sS'cpp_type'
p13233
S'unsigned int'
p13234
sS'default'
p13235
S'0'
p13236
sS'name'
p13237
S'max_h_level'
p13238
sS'required'
p13239
I00
sS'group_name'
p13240
Nsa(dp13241
S'description'
p13242
S'Determines whether information about the mesh is printed when adaptivity occurs\n'
p13243
sS'cpp_type'
p13244
S'bool'
p13245
sS'default'
p13246
S'0'
p13247
sS'name'
p13248
S'print_changed_info'
p13249
sS'required'
p13250
I00
sS'group_name'
p13251
Nsa(dp13252
S'description'
p13253
S'The fraction of elements or error to refine. Should be between 0 and 1.\n'
p13254
sS'cpp_type'
p13255
S'double'
p13256
sS'default'
p13257
S'0'
p13258
sS'name'
p13259
S'refine_fraction'
p13260
sS'required'
p13261
I00
sS'group_name'
p13262
Nsa(dp13263
S'description'
p13264
S'Show the progress of the initial adaptivity\n'
p13265
sS'cpp_type'
p13266
S'bool'
p13267
sS'default'
p13268
S'1'
p13269
sS'name'
p13270
S'show_initial_progress'
p13271
sS'required'
p13272
I00
sS'group_name'
p13273
Nsa(dp13274
S'description'
p13275
S'The time that adaptivity will be active after.\n'
p13276
sS'cpp_type'
p13277
S'double'
p13278
sS'default'
p13279
S'-1.79769e+308'
p13280
sS'name'
p13281
S'start_time'
p13282
sS'required'
p13283
I00
sS'group_name'
p13284
Nsa(dp13285
S'description'
p13286
S'The number of adaptivity steps to perform at any one time for steady state\n'
p13287
sS'cpp_type'
p13288
S'unsigned int'
p13289
sS'default'
p13290
S'0'
p13291
sS'name'
p13292
S'steps'
p13293
sS'required'
p13294
I00
sS'group_name'
p13295
Nsa(dp13296
S'description'
p13297
S'The time after which adaptivity will no longer be active.\n'
p13298
sS'cpp_type'
p13299
S'double'
p13300
sS'default'
p13301
S'1.79769e+308'
p13302
sS'name'
p13303
S'stop_time'
p13304
sS'required'
p13305
I00
sS'group_name'
p13306
Nsa(dp13307
S'description'
p13308
S'List of names of variables that will be associated with weight_values\n'
p13309
sS'cpp_type'
p13310
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13311
sS'default'
p13312
g3
sS'name'
p13313
S'weight_names'
p13314
sS'required'
p13315
I00
sS'group_name'
p13316
Nsa(dp13317
S'description'
p13318
S'List of values between 0 and 1 to weight the associated weight_names error by\n'
p13319
sS'cpp_type'
p13320
S'std::__1::vector<double, std::__1::allocator<double> >'
p13321
sS'default'
p13322
g3
sS'name'
p13323
S'weight_values'
p13324
sS'required'
p13325
I00
sS'group_name'
p13326
NsasS'name'
p13327
S'/Executioner/Adaptivity'
p13328
sa(dp13329
S'description'
p13330
g3
sS'subblocks'
p13331
(lp13332
(dp13333
S'description'
p13334
g3
sS'subblocks'
p13335
(lp13336
(dp13337
S'description'
p13338
g3
sS'subblocks'
p13339
NsS'parameters'
p13340
(lp13341
(dp13342
S'description'
p13343
S'The maximum reachable order of the Adams-Bashforth Predictor\n'
p13344
sS'cpp_type'
p13345
S'int'
p13346
sS'default'
p13347
S'2'
p13348
sS'name'
p13349
S'order'
p13350
sS'required'
p13351
I00
sS'group_name'
p13352
Nsa(dp13353
S'description'
p13354
S'The scale factor for the predictor (can range from 0 to 1)\n'
p13355
sS'cpp_type'
p13356
S'double'
p13357
sS'default'
p13358
g3
sS'name'
p13359
S'scale'
p13360
sS'required'
p13361
I01
sS'group_name'
p13362
Nsa(dp13363
S'description'
p13364
g3
sS'cpp_type'
p13365
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13366
sS'default'
p13367
S'AdamsPredictor'
p13368
sS'name'
p13369
S'type'
p13370
sS'required'
p13371
I00
sS'group_name'
p13372
NsasS'name'
p13373
S'/Executioner/Predictor/<type>/AdamsPredictor'
p13374
sa(dp13375
S'description'
p13376
g3
sS'subblocks'
p13377
NsS'parameters'
p13378
(lp13379
(dp13380
S'description'
p13381
S'The scale factor for the predictor (can range from 0 to 1)\n'
p13382
sS'cpp_type'
p13383
S'double'
p13384
sS'default'
p13385
g3
sS'name'
p13386
S'scale'
p13387
sS'required'
p13388
I01
sS'group_name'
p13389
Nsa(dp13390
S'description'
p13391
g3
sS'cpp_type'
p13392
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13393
sS'default'
p13394
S'SimplePredictor'
p13395
sS'name'
p13396
S'type'
p13397
sS'required'
p13398
I00
sS'group_name'
p13399
NsasS'name'
p13400
S'/Executioner/Predictor/<type>/SimplePredictor'
p13401
sasS'parameters'
p13402
NsS'name'
p13403
S'/Executioner/Predictor/<type>'
p13404
sasS'parameters'
p13405
(lp13406
(dp13407
S'description'
p13408
S'A string representing the Moose Object that will be built by this Action\n'
p13409
sS'cpp_type'
p13410
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13411
sS'default'
p13412
g3
sS'name'
p13413
S'type'
p13414
sS'required'
p13415
I01
sS'group_name'
p13416
NsasS'name'
p13417
S'/Executioner/Predictor'
p13418
sa(dp13419
S'description'
p13420
g3
sS'subblocks'
p13421
NsS'parameters'
p13422
(lp13423
(dp13424
S'name'
p13425
S'element_order'
p13426
sS'cpp_type'
p13427
S'MooseEnum'
p13428
sS'default'
p13429
S'AUTO'
p13430
sS'description'
p13431
S'Order of the quadrature for elements\n'
p13432
sS'required'
p13433
I00
sS'options'
p13434
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p13435
sS'group_name'
p13436
Nsa(dp13437
S'name'
p13438
S'order'
p13439
sS'cpp_type'
p13440
S'MooseEnum'
p13441
sS'default'
p13442
S'AUTO'
p13443
sS'description'
p13444
S'Order of the quadrature\n'
p13445
sS'required'
p13446
I00
sS'options'
p13447
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p13448
sS'group_name'
p13449
Nsa(dp13450
S'name'
p13451
S'side_order'
p13452
sS'cpp_type'
p13453
S'MooseEnum'
p13454
sS'default'
p13455
S'AUTO'
p13456
sS'description'
p13457
S'Order of the quadrature for sides\n'
p13458
sS'required'
p13459
I00
sS'options'
p13460
S'AUTO CONSTANT FIRST SECOND THIRD FOURTH FIFTH SIXTH SEVENTH EIGHTH NINTH TENTH ELEVENTH TWELFTH THIRTEENTH FOURTEENTH FIFTEENTH SIXTEENTH SEVENTEENTH EIGHTTEENTH NINTEENTH TWENTIETH'
p13461
sS'group_name'
p13462
Nsa(dp13463
S'name'
p13464
S'type'
p13465
sS'cpp_type'
p13466
S'MooseEnum'
p13467
sS'default'
p13468
S'GAUSS'
p13469
sS'description'
p13470
S'Type of the quadrature rule\n'
p13471
sS'required'
p13472
I00
sS'options'
p13473
S'CLOUGH CONICAL GAUSS GRID MONOMIAL SIMPSON TRAP GAUSS_LOBATTO'
p13474
sS'group_name'
p13475
NsasS'name'
p13476
S'/Executioner/Quadrature'
p13477
sa(dp13478
S'description'
p13479
g3
sS'subblocks'
p13480
(lp13481
(dp13482
S'description'
p13483
g3
sS'subblocks'
p13484
(lp13485
(dp13486
S'description'
p13487
g3
sS'subblocks'
p13488
NsS'parameters'
p13489
(lp13490
(dp13491
S'description'
p13492
g3
sS'cpp_type'
p13493
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13494
sS'default'
p13495
S'BDF2'
p13496
sS'name'
p13497
S'type'
p13498
sS'required'
p13499
I00
sS'group_name'
p13500
NsasS'name'
p13501
S'/Executioner/TimeIntegrator/<type>/BDF2'
p13502
sa(dp13503
S'description'
p13504
g3
sS'subblocks'
p13505
NsS'parameters'
p13506
(lp13507
(dp13508
S'description'
p13509
g3
sS'cpp_type'
p13510
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13511
sS'default'
p13512
S'CrankNicolson'
p13513
sS'name'
p13514
S'type'
p13515
sS'required'
p13516
I00
sS'group_name'
p13517
NsasS'name'
p13518
S'/Executioner/TimeIntegrator/<type>/CrankNicolson'
p13519
sa(dp13520
S'description'
p13521
g3
sS'subblocks'
p13522
NsS'parameters'
p13523
(lp13524
(dp13525
S'description'
p13526
S'Order of the DIRK integrator. Default: 2\n'
p13527
sS'cpp_type'
p13528
S'unsigned int'
p13529
sS'default'
p13530
S'2'
p13531
sS'name'
p13532
S'order'
p13533
sS'required'
p13534
I00
sS'group_name'
p13535
Nsa(dp13536
S'description'
p13537
g3
sS'cpp_type'
p13538
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13539
sS'default'
p13540
S'Dirk'
p13541
sS'name'
p13542
S'type'
p13543
sS'required'
p13544
I00
sS'group_name'
p13545
NsasS'name'
p13546
S'/Executioner/TimeIntegrator/<type>/Dirk'
p13547
sa(dp13548
S'description'
p13549
g3
sS'subblocks'
p13550
NsS'parameters'
p13551
(lp13552
(dp13553
S'description'
p13554
g3
sS'cpp_type'
p13555
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13556
sS'default'
p13557
S'ExplicitEuler'
p13558
sS'name'
p13559
S'type'
p13560
sS'required'
p13561
I00
sS'group_name'
p13562
NsasS'name'
p13563
S'/Executioner/TimeIntegrator/<type>/ExplicitEuler'
p13564
sa(dp13565
S'description'
p13566
g3
sS'subblocks'
p13567
NsS'parameters'
p13568
(lp13569
(dp13570
S'description'
p13571
g3
sS'cpp_type'
p13572
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13573
sS'default'
p13574
S'ImplicitEuler'
p13575
sS'name'
p13576
S'type'
p13577
sS'required'
p13578
I00
sS'group_name'
p13579
NsasS'name'
p13580
S'/Executioner/TimeIntegrator/<type>/ImplicitEuler'
p13581
sa(dp13582
S'description'
p13583
g3
sS'subblocks'
p13584
NsS'parameters'
p13585
(lp13586
(dp13587
S'description'
p13588
g3
sS'cpp_type'
p13589
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13590
sS'default'
p13591
S'RungeKutta2'
p13592
sS'name'
p13593
S'type'
p13594
sS'required'
p13595
I00
sS'group_name'
p13596
NsasS'name'
p13597
S'/Executioner/TimeIntegrator/<type>/RungeKutta2'
p13598
sa(dp13599
S'description'
p13600
g3
sS'subblocks'
p13601
NsS'parameters'
p13602
(lp13603
(dp13604
S'description'
p13605
g3
sS'cpp_type'
p13606
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13607
sS'default'
p13608
S'SteadyState'
p13609
sS'name'
p13610
S'type'
p13611
sS'required'
p13612
I00
sS'group_name'
p13613
NsasS'name'
p13614
S'/Executioner/TimeIntegrator/<type>/SteadyState'
p13615
sasS'parameters'
p13616
NsS'name'
p13617
S'/Executioner/TimeIntegrator/<type>'
p13618
sasS'parameters'
p13619
(lp13620
(dp13621
S'description'
p13622
S'A string representing the Moose Object that will be built by this Action\n'
p13623
sS'cpp_type'
p13624
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13625
sS'default'
p13626
g3
sS'name'
p13627
S'type'
p13628
sS'required'
p13629
I01
sS'group_name'
p13630
NsasS'name'
p13631
S'/Executioner/TimeIntegrator'
p13632
sa(dp13633
S'description'
p13634
g3
sS'subblocks'
p13635
(lp13636
(dp13637
S'description'
p13638
g3
sS'subblocks'
p13639
NsS'parameters'
p13640
(lp13641
(dp13642
S'description'
p13643
S'The list of active boundary conditions during this time period (must not be used with "inactive_bcs")\n'
p13644
sS'cpp_type'
p13645
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13646
sS'default'
p13647
g3
sS'name'
p13648
S'active_bcs'
p13649
sS'required'
p13650
I00
sS'group_name'
p13651
Nsa(dp13652
S'description'
p13653
S'The list of active kernels during this time period (must not be used with "inactive_kernels")\n'
p13654
sS'cpp_type'
p13655
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13656
sS'default'
p13657
g3
sS'name'
p13658
S'active_kernels'
p13659
sS'required'
p13660
I00
sS'group_name'
p13661
Nsa(dp13662
S'description'
p13663
S'The list of inactive boundary conditions during this time period (must not be used with "active_bcs")\n'
p13664
sS'cpp_type'
p13665
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13666
sS'default'
p13667
g3
sS'name'
p13668
S'inactive_bcs'
p13669
sS'required'
p13670
I00
sS'group_name'
p13671
Nsa(dp13672
S'description'
p13673
S'The list of inactive kernels during this time period (must not be used with "active_kernels")\n'
p13674
sS'cpp_type'
p13675
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p13676
sS'default'
p13677
g3
sS'name'
p13678
S'inactive_kernels'
p13679
sS'required'
p13680
I00
sS'group_name'
p13681
Nsa(dp13682
S'description'
p13683
S'The start time for this time period\n'
p13684
sS'cpp_type'
p13685
S'double'
p13686
sS'default'
p13687
S'0'
p13688
sS'name'
p13689
S'start'
p13690
sS'required'
p13691
I00
sS'group_name'
p13692
NsasS'name'
p13693
S'/Executioner/TimePeriods/*'
p13694
sasS'parameters'
p13695
NsS'name'
p13696
S'/Executioner/TimePeriods'
p13697
sa(dp13698
S'description'
p13699
g3
sS'subblocks'
p13700
(lp13701
(dp13702
S'description'
p13703
g3
sS'subblocks'
p13704
(lp13705
(dp13706
S'description'
p13707
g3
sS'subblocks'
p13708
NsS'parameters'
p13709
(lp13710
(dp13711
S'description'
p13712
S'Initial time step size\n'
p13713
sS'cpp_type'
p13714
S'double'
p13715
sS'default'
p13716
g3
sS'name'
p13717
S'dt'
p13718
sS'required'
p13719
I01
sS'group_name'
p13720
Nsa(dp13721
S'description'
p13722
S'Maximum acceptable error.\n'
p13723
sS'cpp_type'
p13724
S'double'
p13725
sS'default'
p13726
g3
sS'name'
p13727
S'e_max'
p13728
sS'required'
p13729
I01
sS'group_name'
p13730
Nsa(dp13731
S'description'
p13732
S'Target error tolerance.\n'
p13733
sS'cpp_type'
p13734
S'double'
p13735
sS'default'
p13736
g3
sS'name'
p13737
S'e_tol'
p13738
sS'required'
p13739
I01
sS'group_name'
p13740
Nsa(dp13741
S'description'
p13742
S'Maximum ratio that the time step can increase.\n'
p13743
sS'cpp_type'
p13744
S'double'
p13745
sS'default'
p13746
S'1e+09'
p13747
sS'name'
p13748
S'max_increase'
p13749
sS'required'
p13750
I00
sS'group_name'
p13751
Nsa(dp13752
S'description'
p13753
S'Use when restarting a calculation to force a change in dt.\n'
p13754
sS'cpp_type'
p13755
S'bool'
p13756
sS'default'
p13757
S'0'
p13758
sS'name'
p13759
S'reset_dt'
p13760
sS'required'
p13761
I00
sS'group_name'
p13762
Nsa(dp13763
S'description'
p13764
S'scaling parameter for dt selection\n'
p13765
sS'cpp_type'
p13766
S'double'
p13767
sS'default'
p13768
S'0.8'
p13769
sS'name'
p13770
S'scaling_parameter'
p13771
sS'required'
p13772
I00
sS'group_name'
p13773
Nsa(dp13774
S'description'
p13775
S'when to start taking adaptive time steps\n'
p13776
sS'cpp_type'
p13777
S'int'
p13778
sS'default'
p13779
S'2'
p13780
sS'name'
p13781
S'start_adapting'
p13782
sS'required'
p13783
I00
sS'group_name'
p13784
Nsa(dp13785
S'description'
p13786
S'the number of time steps before recalculating dt\n'
p13787
sS'cpp_type'
p13788
S'int'
p13789
sS'default'
p13790
S'1'
p13791
sS'name'
p13792
S'steps_between_increase'
p13793
sS'required'
p13794
I00
sS'group_name'
p13795
Nsa(dp13796
S'description'
p13797
g3
sS'cpp_type'
p13798
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13799
sS'default'
p13800
S'AB2PredictorCorrector'
p13801
sS'name'
p13802
S'type'
p13803
sS'required'
p13804
I00
sS'group_name'
p13805
NsasS'name'
p13806
S'/Executioner/TimeStepper/<type>/AB2PredictorCorrector'
p13807
sa(dp13808
S'description'
p13809
g3
sS'subblocks'
p13810
NsS'parameters'
p13811
(lp13812
(dp13813
S'description'
p13814
S'Size of the time step\n'
p13815
sS'cpp_type'
p13816
S'double'
p13817
sS'default'
p13818
g3
sS'name'
p13819
S'dt'
p13820
sS'required'
p13821
I01
sS'group_name'
p13822
Nsa(dp13823
S'description'
p13824
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p13825
sS'cpp_type'
p13826
S'double'
p13827
sS'default'
p13828
S'2'
p13829
sS'name'
p13830
S'growth_factor'
p13831
sS'required'
p13832
I00
sS'group_name'
p13833
Nsa(dp13834
S'description'
p13835
S'Use when restarting a calculation to force a change in dt.\n'
p13836
sS'cpp_type'
p13837
S'bool'
p13838
sS'default'
p13839
S'0'
p13840
sS'name'
p13841
S'reset_dt'
p13842
sS'required'
p13843
I00
sS'group_name'
p13844
Nsa(dp13845
S'description'
p13846
g3
sS'cpp_type'
p13847
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13848
sS'default'
p13849
S'ConstantDT'
p13850
sS'name'
p13851
S'type'
p13852
sS'required'
p13853
I00
sS'group_name'
p13854
NsasS'name'
p13855
S'/Executioner/TimeStepper/<type>/ConstantDT'
p13856
sa(dp13857
S'description'
p13858
g3
sS'subblocks'
p13859
NsS'parameters'
p13860
(lp13861
(dp13862
S'description'
p13863
S'The initial time step size.\n'
p13864
sS'cpp_type'
p13865
S'double'
p13866
sS'default'
p13867
S'1'
p13868
sS'name'
p13869
S'dt'
p13870
sS'required'
p13871
I00
sS'group_name'
p13872
Nsa(dp13873
S'description'
p13874
S'Maximum acceptable error.\n'
p13875
sS'cpp_type'
p13876
S'double'
p13877
sS'default'
p13878
g3
sS'name'
p13879
S'e_max'
p13880
sS'required'
p13881
I01
sS'group_name'
p13882
Nsa(dp13883
S'description'
p13884
S'Target error tolerance.\n'
p13885
sS'cpp_type'
p13886
S'double'
p13887
sS'default'
p13888
g3
sS'name'
p13889
S'e_tol'
p13890
sS'required'
p13891
I01
sS'group_name'
p13892
Nsa(dp13893
S'description'
p13894
S'Maximum ratio that the time step can increase.\n'
p13895
sS'cpp_type'
p13896
S'double'
p13897
sS'default'
p13898
S'1e+09'
p13899
sS'name'
p13900
S'max_increase'
p13901
sS'required'
p13902
I00
sS'group_name'
p13903
Nsa(dp13904
S'description'
p13905
S'Use when restarting a calculation to force a change in dt.\n'
p13906
sS'cpp_type'
p13907
S'bool'
p13908
sS'default'
p13909
S'0'
p13910
sS'name'
p13911
S'reset_dt'
p13912
sS'required'
p13913
I00
sS'group_name'
p13914
Nsa(dp13915
S'description'
p13916
g3
sS'cpp_type'
p13917
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13918
sS'default'
p13919
S'DT2'
p13920
sS'name'
p13921
S'type'
p13922
sS'required'
p13923
I00
sS'group_name'
p13924
NsasS'name'
p13925
S'/Executioner/TimeStepper/<type>/DT2'
p13926
sa(dp13927
S'description'
p13928
g3
sS'subblocks'
p13929
NsS'parameters'
p13930
(lp13931
(dp13932
S'description'
p13933
S'Maximum ratio of new to previous timestep sizes following a step that required the time step to be cut due to a failed solve.\n'
p13934
sS'cpp_type'
p13935
S'double'
p13936
sS'default'
p13937
S'2'
p13938
sS'name'
p13939
S'growth_factor'
p13940
sS'required'
p13941
I00
sS'group_name'
p13942
Nsa(dp13943
S'description'
p13944
S'Whether or not to interpolate DT between times.  This is true by default for historical reasons.\n'
p13945
sS'cpp_type'
p13946
S'bool'
p13947
sS'default'
p13948
S'1'
p13949
sS'name'
p13950
S'interpolate'
p13951
sS'required'
p13952
I00
sS'group_name'
p13953
Nsa(dp13954
S'description'
p13955
S'The minimal dt to take.\n'
p13956
sS'cpp_type'
p13957
S'double'
p13958
sS'default'
p13959
S'0'
p13960
sS'name'
p13961
S'min_dt'
p13962
sS'required'
p13963
I00
sS'group_name'
p13964
Nsa(dp13965
S'description'
p13966
S'Use when restarting a calculation to force a change in dt.\n'
p13967
sS'cpp_type'
p13968
S'bool'
p13969
sS'default'
p13970
S'0'
p13971
sS'name'
p13972
S'reset_dt'
p13973
sS'required'
p13974
I00
sS'group_name'
p13975
Nsa(dp13976
S'description'
p13977
S'The values of dt\n'
p13978
sS'cpp_type'
p13979
S'std::__1::vector<double, std::__1::allocator<double> >'
p13980
sS'default'
p13981
g3
sS'name'
p13982
S'time_dt'
p13983
sS'required'
p13984
I00
sS'group_name'
p13985
Nsa(dp13986
S'description'
p13987
S'The values of t\n'
p13988
sS'cpp_type'
p13989
S'std::__1::vector<double, std::__1::allocator<double> >'
p13990
sS'default'
p13991
g3
sS'name'
p13992
S'time_t'
p13993
sS'required'
p13994
I00
sS'group_name'
p13995
Nsa(dp13996
S'description'
p13997
g3
sS'cpp_type'
p13998
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p13999
sS'default'
p14000
S'FunctionDT'
p14001
sS'name'
p14002
S'type'
p14003
sS'required'
p14004
I00
sS'group_name'
p14005
NsasS'name'
p14006
S'/Executioner/TimeStepper/<type>/FunctionDT'
p14007
sa(dp14008
S'description'
p14009
g3
sS'subblocks'
p14010
NsS'parameters'
p14011
(lp14012
(dp14013
S'description'
p14014
S"Factor to apply to timestep if difficult convergence (if 'optimal_iterations' is specified) or if solution failed.\n"
p14015
sS'cpp_type'
p14016
S'double'
p14017
sS'default'
p14018
S'0.5'
p14019
sS'name'
p14020
S'cutback_factor'
p14021
sS'required'
p14022
I00
sS'group_name'
p14023
Nsa(dp14024
S'description'
p14025
S'The default timestep size between solves\n'
p14026
sS'cpp_type'
p14027
S'double'
p14028
sS'default'
p14029
g3
sS'name'
p14030
S'dt'
p14031
sS'required'
p14032
I01
sS'group_name'
p14033
Nsa(dp14034
S'description'
p14035
S'Forces the timestepper to take a step that is consistent with points defined in the function.\n'
p14036
sS'cpp_type'
p14037
S'bool'
p14038
sS'default'
p14039
S'0'
p14040
sS'name'
p14041
S'force_step_every_function_point'
p14042
sS'required'
p14043
I00
sS'group_name'
p14044
Nsa(dp14045
S'description'
p14046
S"Factor to apply to timestep if easy convergence (if 'optimal_iterations' is specified) or if recovering from failed solve\n"
p14047
sS'cpp_type'
p14048
S'double'
p14049
sS'default'
p14050
S'2'
p14051
sS'name'
p14052
S'growth_factor'
p14053
sS'required'
p14054
I00
sS'group_name'
p14055
Nsa(dp14056
S'description'
p14057
S'The size of the nonlinear iteration window for adaptive timestepping (default = 0.2*optimal_iterations)\n'
p14058
sS'cpp_type'
p14059
S'int'
p14060
sS'default'
p14061
g3
sS'name'
p14062
S'iteration_window'
p14063
sS'required'
p14064
I00
sS'group_name'
p14065
Nsa(dp14066
S'description'
p14067
S'The ratio of linear to nonlinear iterations to determine target linear iterations and window for adaptive timestepping (default = 25)\n'
p14068
sS'cpp_type'
p14069
S'unsigned int'
p14070
sS'default'
p14071
g3
sS'name'
p14072
S'linear_iteration_ratio'
p14073
sS'required'
p14074
I00
sS'group_name'
p14075
Nsa(dp14076
S'description'
p14077
S'The absolute value of the maximum change in timestep_limiting_function over a timestep\n'
p14078
sS'cpp_type'
p14079
S'double'
p14080
sS'default'
p14081
g3
sS'name'
p14082
S'max_function_change'
p14083
sS'required'
p14084
I00
sS'group_name'
p14085
Nsa(dp14086
S'description'
p14087
S'The target number of nonlinear iterations for adaptive timestepping\n'
p14088
sS'cpp_type'
p14089
S'int'
p14090
sS'default'
p14091
g3
sS'name'
p14092
S'optimal_iterations'
p14093
sS'required'
p14094
I00
sS'group_name'
p14095
Nsa(dp14096
S'description'
p14097
S'Use when restarting a calculation to force a change in dt.\n'
p14098
sS'cpp_type'
p14099
S'bool'
p14100
sS'default'
p14101
S'0'
p14102
sS'name'
p14103
S'reset_dt'
p14104
sS'required'
p14105
I00
sS'group_name'
p14106
Nsa(dp14107
S'description'
p14108
S'The values of dt\n'
p14109
sS'cpp_type'
p14110
S'std::__1::vector<double, std::__1::allocator<double> >'
p14111
sS'default'
p14112
g3
sS'name'
p14113
S'time_dt'
p14114
sS'required'
p14115
I00
sS'group_name'
p14116
Nsa(dp14117
S'description'
p14118
S'The values of t\n'
p14119
sS'cpp_type'
p14120
S'std::__1::vector<double, std::__1::allocator<double> >'
p14121
sS'default'
p14122
g3
sS'name'
p14123
S'time_t'
p14124
sS'required'
p14125
I00
sS'group_name'
p14126
Nsa(dp14127
S'description'
p14128
S'A function used to control the timestep by limiting the change in the function over a timestep\n'
p14129
sS'cpp_type'
p14130
S'FunctionName'
p14131
sS'default'
p14132
g3
sS'name'
p14133
S'timestep_limiting_function'
p14134
sS'required'
p14135
I00
sS'group_name'
p14136
Nsa(dp14137
S'description'
p14138
g3
sS'cpp_type'
p14139
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14140
sS'default'
p14141
S'IterationAdaptiveDT'
p14142
sS'name'
p14143
S'type'
p14144
sS'required'
p14145
I00
sS'group_name'
p14146
NsasS'name'
p14147
S'/Executioner/TimeStepper/<type>/IterationAdaptiveDT'
p14148
sa(dp14149
S'description'
p14150
g3
sS'subblocks'
p14151
NsS'parameters'
p14152
(lp14153
(dp14154
S'description'
p14155
S'Initial value of dt\n'
p14156
sS'cpp_type'
p14157
S'double'
p14158
sS'default'
p14159
g3
sS'name'
p14160
S'dt'
p14161
sS'required'
p14162
I00
sS'group_name'
p14163
Nsa(dp14164
S'description'
p14165
S'The name of the postprocessor that computes the dt\n'
p14166
sS'cpp_type'
p14167
S'PostprocessorName'
p14168
sS'default'
p14169
g3
sS'name'
p14170
S'postprocessor'
p14171
sS'required'
p14172
I01
sS'group_name'
p14173
Nsa(dp14174
S'description'
p14175
S'Use when restarting a calculation to force a change in dt.\n'
p14176
sS'cpp_type'
p14177
S'bool'
p14178
sS'default'
p14179
S'0'
p14180
sS'name'
p14181
S'reset_dt'
p14182
sS'required'
p14183
I00
sS'group_name'
p14184
Nsa(dp14185
S'description'
p14186
g3
sS'cpp_type'
p14187
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14188
sS'default'
p14189
S'PostprocessorDT'
p14190
sS'name'
p14191
S'type'
p14192
sS'required'
p14193
I00
sS'group_name'
p14194
NsasS'name'
p14195
S'/Executioner/TimeStepper/<type>/PostprocessorDT'
p14196
sa(dp14197
S'description'
p14198
g3
sS'subblocks'
p14199
NsS'parameters'
p14200
(lp14201
(dp14202
S'description'
p14203
S'Output adaptive time step log\n'
p14204
sS'cpp_type'
p14205
S'bool'
p14206
sS'default'
p14207
S'0'
p14208
sS'name'
p14209
S'adapt_log'
p14210
sS'required'
p14211
I00
sS'group_name'
p14212
Nsa(dp14213
S'description'
p14214
S'The timestep size between solves\n'
p14215
sS'cpp_type'
p14216
S'double'
p14217
sS'default'
p14218
g3
sS'name'
p14219
S'dt'
p14220
sS'required'
p14221
I01
sS'group_name'
p14222
Nsa(dp14223
S'description'
p14224
S'Direction for the first step.  1 for up... -1 for down. \n'
p14225
sS'cpp_type'
p14226
S'int'
p14227
sS'default'
p14228
S'1'
p14229
sS'name'
p14230
S'initial_direction'
p14231
sS'required'
p14232
I00
sS'group_name'
p14233
Nsa(dp14234
S'description'
p14235
S'Percentage to change the timestep by.  Should be between 0 and 1\n'
p14236
sS'cpp_type'
p14237
S'double'
p14238
sS'default'
p14239
S'0.1'
p14240
sS'name'
p14241
S'percent_change'
p14242
sS'required'
p14243
I00
sS'group_name'
p14244
Nsa(dp14245
S'description'
p14246
S'Use when restarting a calculation to force a change in dt.\n'
p14247
sS'cpp_type'
p14248
S'bool'
p14249
sS'default'
p14250
S'0'
p14251
sS'name'
p14252
S'reset_dt'
p14253
sS'required'
p14254
I00
sS'group_name'
p14255
Nsa(dp14256
S'description'
p14257
g3
sS'cpp_type'
p14258
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14259
sS'default'
p14260
S'SolutionTimeAdaptiveDT'
p14261
sS'name'
p14262
S'type'
p14263
sS'required'
p14264
I00
sS'group_name'
p14265
NsasS'name'
p14266
S'/Executioner/TimeStepper/<type>/SolutionTimeAdaptiveDT'
p14267
sasS'parameters'
p14268
NsS'name'
p14269
S'/Executioner/TimeStepper/<type>'
p14270
sasS'parameters'
p14271
(lp14272
(dp14273
S'description'
p14274
S'A string representing the Moose Object that will be built by this Action\n'
p14275
sS'cpp_type'
p14276
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14277
sS'default'
p14278
g3
sS'name'
p14279
S'type'
p14280
sS'required'
p14281
I01
sS'group_name'
p14282
NsasS'name'
p14283
S'/Executioner/TimeStepper'
p14284
sasS'parameters'
p14285
(lp14286
(dp14287
S'description'
p14288
S'Use the residual norm computed *before* PresetBCs are imposed in relative convergence check\n'
p14289
sS'cpp_type'
p14290
S'bool'
p14291
sS'default'
p14292
S'0'
p14293
sS'name'
p14294
S'compute_initial_residual_before_preset_bcs'
p14295
sS'required'
p14296
I00
sS'group_name'
p14297
S'Solver'
p14298
sa(dp14299
S'description'
p14300
S'Linear Absolute Step Tolerance\n'
p14301
sS'cpp_type'
p14302
S'double'
p14303
sS'default'
p14304
S'-1'
p14305
sS'name'
p14306
S'l_abs_step_tol'
p14307
sS'required'
p14308
I00
sS'group_name'
p14309
S'Solver'
p14310
sa(dp14311
S'description'
p14312
S'Max Linear Iterations\n'
p14313
sS'cpp_type'
p14314
S'unsigned int'
p14315
sS'default'
p14316
S'10000'
p14317
sS'name'
p14318
S'l_max_its'
p14319
sS'required'
p14320
I00
sS'group_name'
p14321
S'Solver'
p14322
sa(dp14323
S'description'
p14324
S'Linear Tolerance\n'
p14325
sS'cpp_type'
p14326
S'double'
p14327
sS'default'
p14328
S'1e-05'
p14329
sS'name'
p14330
S'l_tol'
p14331
sS'required'
p14332
I00
sS'group_name'
p14333
S'Solver'
p14334
sa(dp14335
S'name'
p14336
S'line_search'
p14337
sS'cpp_type'
p14338
S'MooseEnum'
p14339
sS'default'
p14340
S'default'
p14341
sS'description'
p14342
S'Specifies the line search type (Note: none = basic)\n'
p14343
sS'required'
p14344
I00
sS'options'
p14345
S'default shell none basic l2 bt cp'
p14346
sS'group_name'
p14347
Nsa(dp14348
S'description'
p14349
S'Nonlinear Absolute step Tolerance\n'
p14350
sS'cpp_type'
p14351
S'double'
p14352
sS'default'
p14353
S'1e-50'
p14354
sS'name'
p14355
S'nl_abs_step_tol'
p14356
sS'required'
p14357
I00
sS'group_name'
p14358
S'Solver'
p14359
sa(dp14360
S'description'
p14361
S'Nonlinear Absolute Tolerance\n'
p14362
sS'cpp_type'
p14363
S'double'
p14364
sS'default'
p14365
S'1e-50'
p14366
sS'name'
p14367
S'nl_abs_tol'
p14368
sS'required'
p14369
I00
sS'group_name'
p14370
S'Solver'
p14371
sa(dp14372
S'description'
p14373
S'Max Nonlinear solver function evaluations\n'
p14374
sS'cpp_type'
p14375
S'unsigned int'
p14376
sS'default'
p14377
S'10000'
p14378
sS'name'
p14379
S'nl_max_funcs'
p14380
sS'required'
p14381
I00
sS'group_name'
p14382
S'Solver'
p14383
sa(dp14384
S'description'
p14385
S'Max Nonlinear Iterations\n'
p14386
sS'cpp_type'
p14387
S'unsigned int'
p14388
sS'default'
p14389
S'50'
p14390
sS'name'
p14391
S'nl_max_its'
p14392
sS'required'
p14393
I00
sS'group_name'
p14394
S'Solver'
p14395
sa(dp14396
S'description'
p14397
S'Nonlinear Relative step Tolerance\n'
p14398
sS'cpp_type'
p14399
S'double'
p14400
sS'default'
p14401
S'1e-50'
p14402
sS'name'
p14403
S'nl_rel_step_tol'
p14404
sS'required'
p14405
I00
sS'group_name'
p14406
S'Solver'
p14407
sa(dp14408
S'description'
p14409
S'Nonlinear Relative Tolerance\n'
p14410
sS'cpp_type'
p14411
S'double'
p14412
sS'default'
p14413
S'1e-08'
p14414
sS'name'
p14415
S'nl_rel_tol'
p14416
sS'required'
p14417
I00
sS'group_name'
p14418
S'Solver'
p14419
sa(dp14420
S'description'
p14421
S'Specifies whether or not to reinitialize FEs\n'
p14422
sS'cpp_type'
p14423
S'bool'
p14424
sS'default'
p14425
S'0'
p14426
sS'name'
p14427
S'no_fe_reinit'
p14428
sS'required'
p14429
I00
sS'group_name'
p14430
S'Advanced'
p14431
sa(dp14432
S'name'
p14433
S'petsc_options'
p14434
sS'cpp_type'
p14435
S'MultiMooseEnum'
p14436
sS'default'
p14437
g3
sS'description'
p14438
S'Singleton PETSc options\n'
p14439
sS'required'
p14440
I00
sS'options'
p14441
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p14442
sS'group_name'
p14443
Nsa(dp14444
S'name'
p14445
S'petsc_options_iname'
p14446
sS'cpp_type'
p14447
S'MultiMooseEnum'
p14448
sS'default'
p14449
g3
sS'description'
p14450
S'Names of PETSc name/value pairs\n'
p14451
sS'required'
p14452
I00
sS'options'
p14453
S'-ksp_atol -ksp_gmres_restart -ksp_grmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p14454
sS'group_name'
p14455
Nsa(dp14456
S'description'
p14457
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p14458
sS'cpp_type'
p14459
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14460
sS'default'
p14461
g3
sS'name'
p14462
S'petsc_options_value'
p14463
sS'required'
p14464
I00
sS'group_name'
p14465
Nsa(dp14466
S'name'
p14467
S'solve_type'
p14468
sS'cpp_type'
p14469
S'MooseEnum'
p14470
sS'default'
p14471
g3
sS'description'
p14472
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p14473
sS'required'
p14474
I00
sS'options'
p14475
S'PJFNK JFNK NEWTON FD LINEAR'
p14476
sS'group_name'
p14477
Nsa(dp14478
S'description'
p14479
S'A string representing the Moose Object that will be built by this Action\n'
p14480
sS'cpp_type'
p14481
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14482
sS'default'
p14483
g3
sS'name'
p14484
S'type'
p14485
sS'required'
p14486
I01
sS'group_name'
p14487
NsasS'name'
p14488
S'/Executioner'
p14489
sa(dp14490
S'description'
p14491
g3
sS'subblocks'
p14492
(lp14493
(dp14494
S'description'
p14495
g3
sS'subblocks'
p14496
NsS'parameters'
p14497
(lp14498
(dp14499
S'description'
p14500
S'A string representing the Moose Object that will be built by this Action\n'
p14501
sS'cpp_type'
p14502
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14503
sS'default'
p14504
g3
sS'name'
p14505
S'type'
p14506
sS'required'
p14507
I01
sS'group_name'
p14508
NsasS'name'
p14509
S'/Functions/*'
p14510
sa(dp14511
S'description'
p14512
S'Function for reading a 2D axisymmetric solution from file and mapping it to a 3D Cartesian model\n'
p14513
sS'subblocks'
p14514
NsS'parameters'
p14515
(lp14516
(dp14517
S'description'
p14518
S'Start point for axis of symmetry for the 2d model\n'
p14519
sS'cpp_type'
p14520
S'libMesh::VectorValue<double>'
p14521
sS'default'
p14522
S'0 0 0'
p14523
sS'name'
p14524
S'2d_axis_point1'
p14525
sS'required'
p14526
I00
sS'group_name'
p14527
Nsa(dp14528
S'description'
p14529
S'End point for axis of symmetry for the 2d model\n'
p14530
sS'cpp_type'
p14531
S'libMesh::VectorValue<double>'
p14532
sS'default'
p14533
S'0 1 0'
p14534
sS'name'
p14535
S'2d_axis_point2'
p14536
sS'required'
p14537
I00
sS'group_name'
p14538
Nsa(dp14539
S'description'
p14540
S'Start point for axis of symmetry for the 3d model\n'
p14541
sS'cpp_type'
p14542
S'libMesh::VectorValue<double>'
p14543
sS'default'
p14544
S'0 0 0'
p14545
sS'name'
p14546
S'3d_axis_point1'
p14547
sS'required'
p14548
I00
sS'group_name'
p14549
Nsa(dp14550
S'description'
p14551
S'End point for axis of symmetry for the 3d model\n'
p14552
sS'cpp_type'
p14553
S'libMesh::VectorValue<double>'
p14554
sS'default'
p14555
S'0 1 0'
p14556
sS'name'
p14557
S'3d_axis_point2'
p14558
sS'required'
p14559
I00
sS'group_name'
p14560
Nsa(dp14561
S'description'
p14562
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p14563
sS'cpp_type'
p14564
S'double'
p14565
sS'default'
p14566
S'0'
p14567
sS'name'
p14568
S'add_factor'
p14569
sS'required'
p14570
I00
sS'group_name'
p14571
Nsa(dp14572
S'description'
p14573
S'Ratio of the axial dimension in the 3d model to that in the 2d model. Optinally permits the 3d model to be larger than the 2d model in that dimension, and scales vector solutions in that direction by this factor.\n'
p14574
sS'cpp_type'
p14575
S'double'
p14576
sS'default'
p14577
S'1'
p14578
sS'name'
p14579
S'axial_dimension_ratio'
p14580
sS'required'
p14581
I00
sS'group_name'
p14582
Nsa(dp14583
S'description'
p14584
S'Component of the variable to be computed if it is a vector\n'
p14585
sS'cpp_type'
p14586
S'unsigned int'
p14587
sS'default'
p14588
g3
sS'name'
p14589
S'component'
p14590
sS'required'
p14591
I00
sS'group_name'
p14592
Nsa(dp14593
S'description'
p14594
S'The names of the variables in the file that are to be extracted, in x, y order if they are vector components\n'
p14595
sS'cpp_type'
p14596
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14597
sS'default'
p14598
g3
sS'name'
p14599
S'from_variables'
p14600
sS'required'
p14601
I00
sS'group_name'
p14602
Nsa(dp14603
S'description'
p14604
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p14605
sS'cpp_type'
p14606
S'double'
p14607
sS'default'
p14608
S'1'
p14609
sS'name'
p14610
S'scale_factor'
p14611
sS'required'
p14612
I00
sS'group_name'
p14613
Nsa(dp14614
S'description'
p14615
S'The SolutionUserObject to extract data from.\n'
p14616
sS'cpp_type'
p14617
S'UserObjectName'
p14618
sS'default'
p14619
g3
sS'name'
p14620
S'solution'
p14621
sS'required'
p14622
I01
sS'group_name'
p14623
Nsa(dp14624
S'description'
p14625
g3
sS'cpp_type'
p14626
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14627
sS'default'
p14628
S'Axisymmetric2D3DSolutionFunction'
p14629
sS'name'
p14630
S'type'
p14631
sS'required'
p14632
I00
sS'group_name'
p14633
NsasS'name'
p14634
S'/Functions/Axisymmetric2D3DSolutionFunction'
p14635
sa(dp14636
S'description'
p14637
g3
sS'subblocks'
p14638
NsS'parameters'
p14639
(lp14640
(dp14641
S'description'
p14642
S'The functions to be multiplied together.\n'
p14643
sS'cpp_type'
p14644
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p14645
sS'default'
p14646
g3
sS'name'
p14647
S'functions'
p14648
sS'required'
p14649
I00
sS'group_name'
p14650
Nsa(dp14651
S'description'
p14652
S'Scale factor to be applied to the ordinate values\n'
p14653
sS'cpp_type'
p14654
S'double'
p14655
sS'default'
p14656
S'1'
p14657
sS'name'
p14658
S'scale_factor'
p14659
sS'required'
p14660
I00
sS'group_name'
p14661
Nsa(dp14662
S'description'
p14663
g3
sS'cpp_type'
p14664
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14665
sS'default'
p14666
S'CompositeFunction'
p14667
sS'name'
p14668
S'type'
p14669
sS'required'
p14670
I00
sS'group_name'
p14671
NsasS'name'
p14672
S'/Functions/CompositeFunction'
p14673
sa(dp14674
S'description'
p14675
g3
sS'subblocks'
p14676
NsS'parameters'
p14677
(lp14678
(dp14679
S'description'
p14680
g3
sS'cpp_type'
p14681
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14682
sS'default'
p14683
S'ConstantFunction'
p14684
sS'name'
p14685
S'type'
p14686
sS'required'
p14687
I00
sS'group_name'
p14688
Nsa(dp14689
S'description'
p14690
S'The constant value\n'
p14691
sS'cpp_type'
p14692
S'double'
p14693
sS'default'
p14694
S'0'
p14695
sS'name'
p14696
S'value'
p14697
sS'required'
p14698
I00
sS'group_name'
p14699
NsasS'name'
p14700
S'/Functions/ConstantFunction'
p14701
sa(dp14702
S'description'
p14703
S'Returns the linear combination of the functions\n'
p14704
sS'subblocks'
p14705
NsS'parameters'
p14706
(lp14707
(dp14708
S'description'
p14709
S'This function will return Sum_over_i(w_i * functions_i)\n'
p14710
sS'cpp_type'
p14711
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p14712
sS'default'
p14713
g3
sS'name'
p14714
S'functions'
p14715
sS'required'
p14716
I01
sS'group_name'
p14717
Nsa(dp14718
S'description'
p14719
g3
sS'cpp_type'
p14720
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14721
sS'default'
p14722
S'LinearCombinationFunction'
p14723
sS'name'
p14724
S'type'
p14725
sS'required'
p14726
I00
sS'group_name'
p14727
Nsa(dp14728
S'description'
p14729
S'This function will return Sum_over_i(w_i * functions_i)\n'
p14730
sS'cpp_type'
p14731
S'std::__1::vector<double, std::__1::allocator<double> >'
p14732
sS'default'
p14733
g3
sS'name'
p14734
S'w'
p14735
sS'required'
p14736
I01
sS'group_name'
p14737
NsasS'name'
p14738
S'/Functions/LinearCombinationFunction'
p14739
sa(dp14740
S'description'
p14741
g3
sS'subblocks'
p14742
NsS'parameters'
p14743
(lp14744
(dp14745
S'description'
p14746
g3
sS'cpp_type'
p14747
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14748
sS'default'
p14749
S'ParsedFunction'
p14750
sS'name'
p14751
S'type'
p14752
sS'required'
p14753
I00
sS'group_name'
p14754
Nsa(dp14755
S'description'
p14756
S'Constant numeric values or postprocessor names for vars.\n'
p14757
sS'cpp_type'
p14758
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14759
sS'default'
p14760
g3
sS'name'
p14761
S'vals'
p14762
sS'required'
p14763
I00
sS'group_name'
p14764
Nsa(dp14765
S'description'
p14766
S'The user defined function.\n'
p14767
sS'cpp_type'
p14768
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14769
sS'default'
p14770
g3
sS'name'
p14771
S'value'
p14772
sS'required'
p14773
I01
sS'group_name'
p14774
Nsa(dp14775
S'description'
p14776
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p14777
sS'cpp_type'
p14778
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14779
sS'default'
p14780
g3
sS'name'
p14781
S'vars'
p14782
sS'required'
p14783
I00
sS'group_name'
p14784
NsasS'name'
p14785
S'/Functions/ParsedFunction'
p14786
sa(dp14787
S'description'
p14788
g3
sS'subblocks'
p14789
NsS'parameters'
p14790
(lp14791
(dp14792
S'description'
p14793
S'Partial with respect to x.\n'
p14794
sS'cpp_type'
p14795
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14796
sS'default'
p14797
S'0'
p14798
sS'name'
p14799
S'grad_x'
p14800
sS'required'
p14801
I00
sS'group_name'
p14802
Nsa(dp14803
S'description'
p14804
S'Partial with respect to y.\n'
p14805
sS'cpp_type'
p14806
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14807
sS'default'
p14808
S'0'
p14809
sS'name'
p14810
S'grad_y'
p14811
sS'required'
p14812
I00
sS'group_name'
p14813
Nsa(dp14814
S'description'
p14815
S'Partial with respect to z.\n'
p14816
sS'cpp_type'
p14817
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14818
sS'default'
p14819
S'0'
p14820
sS'name'
p14821
S'grad_z'
p14822
sS'required'
p14823
I00
sS'group_name'
p14824
Nsa(dp14825
S'description'
p14826
g3
sS'cpp_type'
p14827
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14828
sS'default'
p14829
S'ParsedGradFunction'
p14830
sS'name'
p14831
S'type'
p14832
sS'required'
p14833
I00
sS'group_name'
p14834
Nsa(dp14835
S'description'
p14836
S'Constant numeric values or postprocessor names for vars.\n'
p14837
sS'cpp_type'
p14838
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14839
sS'default'
p14840
g3
sS'name'
p14841
S'vals'
p14842
sS'required'
p14843
I00
sS'group_name'
p14844
Nsa(dp14845
S'description'
p14846
S'User defined function.\n'
p14847
sS'cpp_type'
p14848
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14849
sS'default'
p14850
S'0'
p14851
sS'name'
p14852
S'value'
p14853
sS'required'
p14854
I00
sS'group_name'
p14855
Nsa(dp14856
S'description'
p14857
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p14858
sS'cpp_type'
p14859
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14860
sS'default'
p14861
g3
sS'name'
p14862
S'vars'
p14863
sS'required'
p14864
I00
sS'group_name'
p14865
NsasS'name'
p14866
S'/Functions/ParsedGradFunction'
p14867
sa(dp14868
S'description'
p14869
g3
sS'subblocks'
p14870
NsS'parameters'
p14871
(lp14872
(dp14873
S'description'
p14874
g3
sS'cpp_type'
p14875
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14876
sS'default'
p14877
S'ParsedVectorFunction'
p14878
sS'name'
p14879
S'type'
p14880
sS'required'
p14881
I00
sS'group_name'
p14882
Nsa(dp14883
S'description'
p14884
S'Constant numeric values or postprocessor names for vars.\n'
p14885
sS'cpp_type'
p14886
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14887
sS'default'
p14888
g3
sS'name'
p14889
S'vals'
p14890
sS'required'
p14891
I00
sS'group_name'
p14892
Nsa(dp14893
S'description'
p14894
S'x-component of function.\n'
p14895
sS'cpp_type'
p14896
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14897
sS'default'
p14898
S'0'
p14899
sS'name'
p14900
S'value_x'
p14901
sS'required'
p14902
I00
sS'group_name'
p14903
Nsa(dp14904
S'description'
p14905
S'y-component of function.\n'
p14906
sS'cpp_type'
p14907
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14908
sS'default'
p14909
S'0'
p14910
sS'name'
p14911
S'value_y'
p14912
sS'required'
p14913
I00
sS'group_name'
p14914
Nsa(dp14915
S'description'
p14916
S'z-component of function.\n'
p14917
sS'cpp_type'
p14918
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14919
sS'default'
p14920
S'0'
p14921
sS'name'
p14922
S'value_z'
p14923
sS'required'
p14924
I00
sS'group_name'
p14925
Nsa(dp14926
S'description'
p14927
S'The constant variables (excluding t,x,y,z) in the forcing function.\n'
p14928
sS'cpp_type'
p14929
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p14930
sS'default'
p14931
g3
sS'name'
p14932
S'vars'
p14933
sS'required'
p14934
I00
sS'group_name'
p14935
NsasS'name'
p14936
S'/Functions/ParsedVectorFunction'
p14937
sa(dp14938
S'description'
p14939
g3
sS'subblocks'
p14940
NsS'parameters'
p14941
(lp14942
(dp14943
S'description'
p14944
S'The axis used (0, 1, or 2 for x, y, or z).\n'
p14945
sS'cpp_type'
p14946
S'int'
p14947
sS'default'
p14948
S'-1'
p14949
sS'name'
p14950
S'axis'
p14951
sS'required'
p14952
I00
sS'group_name'
p14953
Nsa(dp14954
S'description'
p14955
S'File holding csv data for use with PiecewiseBilinear\n'
p14956
sS'cpp_type'
p14957
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14958
sS'default'
p14959
g3
sS'name'
p14960
S'data_file'
p14961
sS'required'
p14962
I00
sS'group_name'
p14963
Nsa(dp14964
S'description'
p14965
S'Set to true if you want to interpolate along a radius rather that along a specific axis, and note that you have to define xaxis and yaxis in the input file\n'
p14966
sS'cpp_type'
p14967
S'bool'
p14968
sS'default'
p14969
S'0'
p14970
sS'name'
p14971
S'radial'
p14972
sS'required'
p14973
I00
sS'group_name'
p14974
Nsa(dp14975
S'description'
p14976
S'Scale factor to be applied to the axis, yaxis, or xaxis values\n'
p14977
sS'cpp_type'
p14978
S'double'
p14979
sS'default'
p14980
S'1'
p14981
sS'name'
p14982
S'scale_factor'
p14983
sS'required'
p14984
I00
sS'group_name'
p14985
Nsa(dp14986
S'description'
p14987
g3
sS'cpp_type'
p14988
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p14989
sS'default'
p14990
S'PiecewiseBilinear'
p14991
sS'name'
p14992
S'type'
p14993
sS'required'
p14994
I00
sS'group_name'
p14995
Nsa(dp14996
S'description'
p14997
S'The coordinate used for x-axis data (0, 1, or 2 for x, y, or z).\n'
p14998
sS'cpp_type'
p14999
S'int'
p15000
sS'default'
p15001
S'-1'
p15002
sS'name'
p15003
S'xaxis'
p15004
sS'required'
p15005
I00
sS'group_name'
p15006
Nsa(dp15007
S'description'
p15008
S'The coordinate used for y-axis data (0, 1, or 2 for x, y, or z).\n'
p15009
sS'cpp_type'
p15010
S'int'
p15011
sS'default'
p15012
S'-1'
p15013
sS'name'
p15014
S'yaxis'
p15015
sS'required'
p15016
I00
sS'group_name'
p15017
NsasS'name'
p15018
S'/Functions/PiecewiseBilinear'
p15019
sa(dp15020
S'description'
p15021
g3
sS'subblocks'
p15022
NsS'parameters'
p15023
(lp15024
(dp15025
S'description'
p15026
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p15027
sS'cpp_type'
p15028
S'int'
p15029
sS'default'
p15030
g3
sS'name'
p15031
S'axis'
p15032
sS'required'
p15033
I00
sS'group_name'
p15034
Nsa(dp15035
S'description'
p15036
S'File holding csv data for use with Piecewise\n'
p15037
sS'cpp_type'
p15038
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15039
sS'default'
p15040
g3
sS'name'
p15041
S'data_file'
p15042
sS'required'
p15043
I00
sS'group_name'
p15044
Nsa(dp15045
S'name'
p15046
S'direction'
p15047
sS'cpp_type'
p15048
S'MooseEnum'
p15049
sS'default'
p15050
S'left'
p15051
sS'description'
p15052
S'Direction to look to find value: left right\n'
p15053
sS'required'
p15054
I00
sS'options'
p15055
S'left right'
p15056
sS'group_name'
p15057
Nsa(dp15058
S'description'
p15059
S'Format of csv data file that is in either in columns or rows\n'
p15060
sS'cpp_type'
p15061
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15062
sS'default'
p15063
S'rows'
p15064
sS'name'
p15065
S'format'
p15066
sS'required'
p15067
I00
sS'group_name'
p15068
Nsa(dp15069
S'description'
p15070
S'Scale factor to be applied to the ordinate values\n'
p15071
sS'cpp_type'
p15072
S'double'
p15073
sS'default'
p15074
S'1'
p15075
sS'name'
p15076
S'scale_factor'
p15077
sS'required'
p15078
I00
sS'group_name'
p15079
Nsa(dp15080
S'description'
p15081
g3
sS'cpp_type'
p15082
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15083
sS'default'
p15084
S'PiecewiseConstant'
p15085
sS'name'
p15086
S'type'
p15087
sS'required'
p15088
I00
sS'group_name'
p15089
Nsa(dp15090
S'description'
p15091
S'The abscissa values\n'
p15092
sS'cpp_type'
p15093
S'std::__1::vector<double, std::__1::allocator<double> >'
p15094
sS'default'
p15095
g3
sS'name'
p15096
S'x'
p15097
sS'required'
p15098
I00
sS'group_name'
p15099
Nsa(dp15100
S'description'
p15101
S'All function data, supplied in abscissa, ordinate pairs\n'
p15102
sS'cpp_type'
p15103
S'std::__1::vector<double, std::__1::allocator<double> >'
p15104
sS'default'
p15105
g3
sS'name'
p15106
S'xy_data'
p15107
sS'required'
p15108
I00
sS'group_name'
p15109
Nsa(dp15110
S'description'
p15111
S'The ordinate values\n'
p15112
sS'cpp_type'
p15113
S'std::__1::vector<double, std::__1::allocator<double> >'
p15114
sS'default'
p15115
g3
sS'name'
p15116
S'y'
p15117
sS'required'
p15118
I00
sS'group_name'
p15119
NsasS'name'
p15120
S'/Functions/PiecewiseConstant'
p15121
sa(dp15122
S'description'
p15123
g3
sS'subblocks'
p15124
NsS'parameters'
p15125
(lp15126
(dp15127
S'description'
p15128
S'The axis used (0, 1, or 2 for x, y, or z) if this is to be a function of position\n'
p15129
sS'cpp_type'
p15130
S'int'
p15131
sS'default'
p15132
g3
sS'name'
p15133
S'axis'
p15134
sS'required'
p15135
I00
sS'group_name'
p15136
Nsa(dp15137
S'description'
p15138
S'File holding csv data for use with Piecewise\n'
p15139
sS'cpp_type'
p15140
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15141
sS'default'
p15142
g3
sS'name'
p15143
S'data_file'
p15144
sS'required'
p15145
I00
sS'group_name'
p15146
Nsa(dp15147
S'description'
p15148
S'Format of csv data file that is in either in columns or rows\n'
p15149
sS'cpp_type'
p15150
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15151
sS'default'
p15152
S'rows'
p15153
sS'name'
p15154
S'format'
p15155
sS'required'
p15156
I00
sS'group_name'
p15157
Nsa(dp15158
S'description'
p15159
S'Scale factor to be applied to the ordinate values\n'
p15160
sS'cpp_type'
p15161
S'double'
p15162
sS'default'
p15163
S'1'
p15164
sS'name'
p15165
S'scale_factor'
p15166
sS'required'
p15167
I00
sS'group_name'
p15168
Nsa(dp15169
S'description'
p15170
g3
sS'cpp_type'
p15171
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15172
sS'default'
p15173
S'PiecewiseLinear'
p15174
sS'name'
p15175
S'type'
p15176
sS'required'
p15177
I00
sS'group_name'
p15178
Nsa(dp15179
S'description'
p15180
S'The abscissa values\n'
p15181
sS'cpp_type'
p15182
S'std::__1::vector<double, std::__1::allocator<double> >'
p15183
sS'default'
p15184
g3
sS'name'
p15185
S'x'
p15186
sS'required'
p15187
I00
sS'group_name'
p15188
Nsa(dp15189
S'description'
p15190
S'All function data, supplied in abscissa, ordinate pairs\n'
p15191
sS'cpp_type'
p15192
S'std::__1::vector<double, std::__1::allocator<double> >'
p15193
sS'default'
p15194
g3
sS'name'
p15195
S'xy_data'
p15196
sS'required'
p15197
I00
sS'group_name'
p15198
Nsa(dp15199
S'description'
p15200
S'The ordinate values\n'
p15201
sS'cpp_type'
p15202
S'std::__1::vector<double, std::__1::allocator<double> >'
p15203
sS'default'
p15204
g3
sS'name'
p15205
S'y'
p15206
sS'required'
p15207
I00
sS'group_name'
p15208
NsasS'name'
p15209
S'/Functions/PiecewiseLinear'
p15210
sa(dp15211
S'description'
p15212
S'PiecewiseMultilinear performs interpolation on 1D, 2D, 3D or 4D data.  The data_file specifies the axes directions and the function values.  If a point lies outside the data range, the appropriate end value is used.\n'
p15213
sS'subblocks'
p15214
NsS'parameters'
p15215
(lp15216
(dp15217
S'description'
p15218
S'File holding data for use with PiecewiseMultilinear.  Format: any empty line and any line beginning with # are ignored, all other lines are assumed to contain relevant information.  The file must begin with specification of the grid.  This is done through lines containing the keywords: AXIS X; AXIS Y; AXIS Z; or AXIS T.  Immediately following the keyword line must be a space-separated line of real numbers which define the grid along the specified axis.  These data must be monotonically increasing.  After all the axes and their grids have been specified, there must be a line that is DATA.  Following that line, function values are given in the correct order (they may be on indivicual lines, or be space-separated on a number of lines).  When the function is evaluated, f[i,j,k,l] corresponds to the i + j*Ni + k*Ni*Nj + l*Ni*Nj*Nk data value.  Here i>=0 corresponding to the index along the first AXIS, j>=0 corresponding to the index along the second AXIS, etc, and Ni = number of grid points along the first AXIS, etc.\n'
p15219
sS'cpp_type'
p15220
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15221
sS'default'
p15222
g3
sS'name'
p15223
S'data_file'
p15224
sS'required'
p15225
I00
sS'group_name'
p15226
Nsa(dp15227
S'description'
p15228
g3
sS'cpp_type'
p15229
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15230
sS'default'
p15231
S'PiecewiseMultilinear'
p15232
sS'name'
p15233
S'type'
p15234
sS'required'
p15235
I00
sS'group_name'
p15236
NsasS'name'
p15237
S'/Functions/PiecewiseMultilinear'
p15238
sa(dp15239
S'description'
p15240
g3
sS'subblocks'
p15241
NsS'parameters'
p15242
(lp15243
(dp15244
S'description'
p15245
S"Add this value (b) to the solution (x): ax+b, where a is the 'scale_factor'\n"
p15246
sS'cpp_type'
p15247
S'double'
p15248
sS'default'
p15249
S'0'
p15250
sS'name'
p15251
S'add_factor'
p15252
sS'required'
p15253
I00
sS'group_name'
p15254
Nsa(dp15255
S'description'
p15256
S'The name of the variable in the file that is to be extracted\n'
p15257
sS'cpp_type'
p15258
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15259
sS'default'
p15260
g3
sS'name'
p15261
S'from_variable'
p15262
sS'required'
p15263
I00
sS'group_name'
p15264
Nsa(dp15265
S'description'
p15266
S"Scale factor (a) to be applied to the solution (x): ax+b, where b is the 'add_factor'\n"
p15267
sS'cpp_type'
p15268
S'double'
p15269
sS'default'
p15270
S'1'
p15271
sS'name'
p15272
S'scale_factor'
p15273
sS'required'
p15274
I00
sS'group_name'
p15275
Nsa(dp15276
S'description'
p15277
S'The SolutionUserObject to extract data from.\n'
p15278
sS'cpp_type'
p15279
S'UserObjectName'
p15280
sS'default'
p15281
g3
sS'name'
p15282
S'solution'
p15283
sS'required'
p15284
I01
sS'group_name'
p15285
Nsa(dp15286
S'description'
p15287
g3
sS'cpp_type'
p15288
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15289
sS'default'
p15290
S'SolutionFunction'
p15291
sS'name'
p15292
S'type'
p15293
sS'required'
p15294
I00
sS'group_name'
p15295
NsasS'name'
p15296
S'/Functions/SolutionFunction'
p15297
sa(dp15298
S'description'
p15299
g3
sS'subblocks'
p15300
NsS'parameters'
p15301
(lp15302
(dp15303
S'description'
p15304
g3
sS'cpp_type'
p15305
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15306
sS'default'
p15307
S'SplineFunction'
p15308
sS'name'
p15309
S'type'
p15310
sS'required'
p15311
I00
sS'group_name'
p15312
Nsa(dp15313
S'description'
p15314
S'The abscissa values\n'
p15315
sS'cpp_type'
p15316
S'std::__1::vector<double, std::__1::allocator<double> >'
p15317
sS'default'
p15318
g3
sS'name'
p15319
S'x'
p15320
sS'required'
p15321
I01
sS'group_name'
p15322
Nsa(dp15323
S'description'
p15324
S'The ordinate values\n'
p15325
sS'cpp_type'
p15326
S'std::__1::vector<double, std::__1::allocator<double> >'
p15327
sS'default'
p15328
g3
sS'name'
p15329
S'y'
p15330
sS'required'
p15331
I01
sS'group_name'
p15332
Nsa(dp15333
S'description'
p15334
S'The value of the first derivative of the interpolating function at point 1\n'
p15335
sS'cpp_type'
p15336
S'double'
p15337
sS'default'
p15338
S'1e+30'
p15339
sS'name'
p15340
S'yp1'
p15341
sS'required'
p15342
I00
sS'group_name'
p15343
Nsa(dp15344
S'description'
p15345
S'The value of the first derivative of the interpolating function at point n\n'
p15346
sS'cpp_type'
p15347
S'double'
p15348
sS'default'
p15349
S'1e+30'
p15350
sS'name'
p15351
S'ypn'
p15352
sS'required'
p15353
I00
sS'group_name'
p15354
NsasS'name'
p15355
S'/Functions/SplineFunction'
p15356
sasS'parameters'
p15357
NsS'name'
p15358
S'/Functions'
p15359
sa(dp15360
S'description'
p15361
g3
sS'subblocks'
p15362
NsS'parameters'
p15363
NsS'name'
p15364
S'/GlobalParams'
p15365
sa(dp15366
S'description'
p15367
g3
sS'subblocks'
p15368
(lp15369
(dp15370
S'description'
p15371
g3
sS'subblocks'
p15372
NsS'parameters'
p15373
(lp15374
(dp15375
S'description'
p15376
S'A string representing the Moose Object that will be built by this Action\n'
p15377
sS'cpp_type'
p15378
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15379
sS'default'
p15380
g3
sS'name'
p15381
S'type'
p15382
sS'required'
p15383
I01
sS'group_name'
p15384
NsasS'name'
p15385
S'/ICs/*'
p15386
sa(dp15387
S'description'
p15388
g3
sS'subblocks'
p15389
NsS'parameters'
p15390
(lp15391
(dp15392
S'description'
p15393
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15394
sS'cpp_type'
p15395
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p15396
sS'default'
p15397
g3
sS'name'
p15398
S'block'
p15399
sS'required'
p15400
I00
sS'group_name'
p15401
Nsa(dp15402
S'description'
p15403
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15404
sS'cpp_type'
p15405
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p15406
sS'default'
p15407
g3
sS'name'
p15408
S'boundary'
p15409
sS'required'
p15410
I00
sS'group_name'
p15411
Nsa(dp15412
S'description'
p15413
S'The value of the variable inside the box\n'
p15414
sS'cpp_type'
p15415
S'double'
p15416
sS'default'
p15417
S'0'
p15418
sS'name'
p15419
S'inside'
p15420
sS'required'
p15421
I00
sS'group_name'
p15422
Nsa(dp15423
S'description'
p15424
S'The value of the variable outside the box\n'
p15425
sS'cpp_type'
p15426
S'double'
p15427
sS'default'
p15428
S'0'
p15429
sS'name'
p15430
S'outside'
p15431
sS'required'
p15432
I00
sS'group_name'
p15433
Nsa(dp15434
S'description'
p15435
g3
sS'cpp_type'
p15436
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15437
sS'default'
p15438
S'BoundingBoxIC'
p15439
sS'name'
p15440
S'type'
p15441
sS'required'
p15442
I00
sS'group_name'
p15443
Nsa(dp15444
S'description'
p15445
S'The variable this initial condition is supposed to provide values for.\n'
p15446
sS'cpp_type'
p15447
S'VariableName'
p15448
sS'default'
p15449
g3
sS'name'
p15450
S'variable'
p15451
sS'required'
p15452
I01
sS'group_name'
p15453
Nsa(dp15454
S'description'
p15455
S'The x coordinate of the lower left-hand corner of the box\n'
p15456
sS'cpp_type'
p15457
S'double'
p15458
sS'default'
p15459
g3
sS'name'
p15460
S'x1'
p15461
sS'required'
p15462
I01
sS'group_name'
p15463
Nsa(dp15464
S'description'
p15465
S'The x coordinate of the upper right-hand corner of the box\n'
p15466
sS'cpp_type'
p15467
S'double'
p15468
sS'default'
p15469
g3
sS'name'
p15470
S'x2'
p15471
sS'required'
p15472
I01
sS'group_name'
p15473
Nsa(dp15474
S'description'
p15475
S'The y coordinate of the lower left-hand corner of the box\n'
p15476
sS'cpp_type'
p15477
S'double'
p15478
sS'default'
p15479
g3
sS'name'
p15480
S'y1'
p15481
sS'required'
p15482
I01
sS'group_name'
p15483
Nsa(dp15484
S'description'
p15485
S'The y coordinate of the upper right-hand corner of the box\n'
p15486
sS'cpp_type'
p15487
S'double'
p15488
sS'default'
p15489
g3
sS'name'
p15490
S'y2'
p15491
sS'required'
p15492
I01
sS'group_name'
p15493
Nsa(dp15494
S'description'
p15495
S'The z coordinate of the lower left-hand corner of the box\n'
p15496
sS'cpp_type'
p15497
S'double'
p15498
sS'default'
p15499
S'0'
p15500
sS'name'
p15501
S'z1'
p15502
sS'required'
p15503
I00
sS'group_name'
p15504
Nsa(dp15505
S'description'
p15506
S'The z coordinate of the upper right-hand corner of the box\n'
p15507
sS'cpp_type'
p15508
S'double'
p15509
sS'default'
p15510
S'0'
p15511
sS'name'
p15512
S'z2'
p15513
sS'required'
p15514
I00
sS'group_name'
p15515
NsasS'name'
p15516
S'/ICs/BoundingBoxIC'
p15517
sa(dp15518
S'description'
p15519
g3
sS'subblocks'
p15520
NsS'parameters'
p15521
(lp15522
(dp15523
S'description'
p15524
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15525
sS'cpp_type'
p15526
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p15527
sS'default'
p15528
g3
sS'name'
p15529
S'block'
p15530
sS'required'
p15531
I00
sS'group_name'
p15532
Nsa(dp15533
S'description'
p15534
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15535
sS'cpp_type'
p15536
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p15537
sS'default'
p15538
g3
sS'name'
p15539
S'boundary'
p15540
sS'required'
p15541
I00
sS'group_name'
p15542
Nsa(dp15543
S'description'
p15544
g3
sS'cpp_type'
p15545
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15546
sS'default'
p15547
S'ConstantIC'
p15548
sS'name'
p15549
S'type'
p15550
sS'required'
p15551
I00
sS'group_name'
p15552
Nsa(dp15553
S'description'
p15554
S'The value to be set in IC\n'
p15555
sS'cpp_type'
p15556
S'double'
p15557
sS'default'
p15558
g3
sS'name'
p15559
S'value'
p15560
sS'required'
p15561
I01
sS'group_name'
p15562
Nsa(dp15563
S'description'
p15564
S'The variable this initial condition is supposed to provide values for.\n'
p15565
sS'cpp_type'
p15566
S'VariableName'
p15567
sS'default'
p15568
g3
sS'name'
p15569
S'variable'
p15570
sS'required'
p15571
I01
sS'group_name'
p15572
NsasS'name'
p15573
S'/ICs/ConstantIC'
p15574
sa(dp15575
S'description'
p15576
S'Cross-shaped initial condition\n'
p15577
sS'subblocks'
p15578
NsS'parameters'
p15579
(lp15580
(dp15581
S'description'
p15582
S'The amplitude\n'
p15583
sS'cpp_type'
p15584
S'double'
p15585
sS'default'
p15586
S'1'
p15587
sS'name'
p15588
S'amplitude'
p15589
sS'required'
p15590
I00
sS'group_name'
p15591
Nsa(dp15592
S'description'
p15593
S'The average value\n'
p15594
sS'cpp_type'
p15595
S'double'
p15596
sS'default'
p15597
S'0'
p15598
sS'name'
p15599
S'average'
p15600
sS'required'
p15601
I00
sS'group_name'
p15602
Nsa(dp15603
S'description'
p15604
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15605
sS'cpp_type'
p15606
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p15607
sS'default'
p15608
g3
sS'name'
p15609
S'block'
p15610
sS'required'
p15611
I00
sS'group_name'
p15612
Nsa(dp15613
S'description'
p15614
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15615
sS'cpp_type'
p15616
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p15617
sS'default'
p15618
g3
sS'name'
p15619
S'boundary'
p15620
sS'required'
p15621
I00
sS'group_name'
p15622
Nsa(dp15623
S'description'
p15624
S'A small area between the max value and the interface\n'
p15625
sS'cpp_type'
p15626
S'double'
p15627
sS'default'
p15628
S'0.03125'
p15629
sS'name'
p15630
S'buffer'
p15631
sS'required'
p15632
I00
sS'group_name'
p15633
Nsa(dp15634
S'description'
p15635
S'The interface width\n'
p15636
sS'cpp_type'
p15637
S'double'
p15638
sS'default'
p15639
S'0.03125'
p15640
sS'name'
p15641
S'interface'
p15642
sS'required'
p15643
I00
sS'group_name'
p15644
Nsa(dp15645
S'description'
p15646
S'The length\n'
p15647
sS'cpp_type'
p15648
S'double'
p15649
sS'default'
p15650
S'0.75'
p15651
sS'name'
p15652
S'length'
p15653
sS'required'
p15654
I00
sS'group_name'
p15655
Nsa(dp15656
S'description'
p15657
g3
sS'cpp_type'
p15658
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15659
sS'default'
p15660
S'CrossIC'
p15661
sS'name'
p15662
S'type'
p15663
sS'required'
p15664
I00
sS'group_name'
p15665
Nsa(dp15666
S'description'
p15667
S'The variable this initial condition is supposed to provide values for.\n'
p15668
sS'cpp_type'
p15669
S'VariableName'
p15670
sS'default'
p15671
g3
sS'name'
p15672
S'variable'
p15673
sS'required'
p15674
I01
sS'group_name'
p15675
Nsa(dp15676
S'description'
p15677
S'The width\n'
p15678
sS'cpp_type'
p15679
S'double'
p15680
sS'default'
p15681
S'0.125'
p15682
sS'name'
p15683
S'width'
p15684
sS'required'
p15685
I00
sS'group_name'
p15686
Nsa(dp15687
S'description'
p15688
S'The x coordinate of the lower left-hand corner of the box\n'
p15689
sS'cpp_type'
p15690
S'double'
p15691
sS'default'
p15692
S'0'
p15693
sS'name'
p15694
S'x1'
p15695
sS'required'
p15696
I00
sS'group_name'
p15697
Nsa(dp15698
S'description'
p15699
S'The x coordinate of the upper right-hand corner of the box\n'
p15700
sS'cpp_type'
p15701
S'double'
p15702
sS'default'
p15703
S'1'
p15704
sS'name'
p15705
S'x2'
p15706
sS'required'
p15707
I00
sS'group_name'
p15708
Nsa(dp15709
S'description'
p15710
S'The y coordinate of the lower left-hand corner of the box\n'
p15711
sS'cpp_type'
p15712
S'double'
p15713
sS'default'
p15714
S'0'
p15715
sS'name'
p15716
S'y1'
p15717
sS'required'
p15718
I00
sS'group_name'
p15719
Nsa(dp15720
S'description'
p15721
S'The y coordinate of the upper right-hand corner of the box\n'
p15722
sS'cpp_type'
p15723
S'double'
p15724
sS'default'
p15725
S'1'
p15726
sS'name'
p15727
S'y2'
p15728
sS'required'
p15729
I00
sS'group_name'
p15730
NsasS'name'
p15731
S'/ICs/CrossIC'
p15732
sa(dp15733
S'description'
p15734
g3
sS'subblocks'
p15735
NsS'parameters'
p15736
(lp15737
(dp15738
S'description'
p15739
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15740
sS'cpp_type'
p15741
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p15742
sS'default'
p15743
g3
sS'name'
p15744
S'block'
p15745
sS'required'
p15746
I00
sS'group_name'
p15747
Nsa(dp15748
S'description'
p15749
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15750
sS'cpp_type'
p15751
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p15752
sS'default'
p15753
g3
sS'name'
p15754
S'boundary'
p15755
sS'required'
p15756
I00
sS'group_name'
p15757
Nsa(dp15758
S'description'
p15759
S'The initial condition function.\n'
p15760
sS'cpp_type'
p15761
S'FunctionName'
p15762
sS'default'
p15763
g3
sS'name'
p15764
S'function'
p15765
sS'required'
p15766
I01
sS'group_name'
p15767
Nsa(dp15768
S'description'
p15769
g3
sS'cpp_type'
p15770
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15771
sS'default'
p15772
S'FunctionIC'
p15773
sS'name'
p15774
S'type'
p15775
sS'required'
p15776
I00
sS'group_name'
p15777
Nsa(dp15778
S'description'
p15779
S'The variable this initial condition is supposed to provide values for.\n'
p15780
sS'cpp_type'
p15781
S'VariableName'
p15782
sS'default'
p15783
g3
sS'name'
p15784
S'variable'
p15785
sS'required'
p15786
I01
sS'group_name'
p15787
NsasS'name'
p15788
S'/ICs/FunctionIC'
p15789
sa(dp15790
S'description'
p15791
S'Perturbed hexagonal polycrystal\n'
p15792
sS'subblocks'
p15793
NsS'parameters'
p15794
(lp15795
(dp15796
S'description'
p15797
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15798
sS'cpp_type'
p15799
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p15800
sS'default'
p15801
g3
sS'name'
p15802
S'block'
p15803
sS'required'
p15804
I00
sS'group_name'
p15805
Nsa(dp15806
S'description'
p15807
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15808
sS'cpp_type'
p15809
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p15810
sS'default'
p15811
g3
sS'name'
p15812
S'boundary'
p15813
sS'required'
p15814
I00
sS'group_name'
p15815
Nsa(dp15816
S'description'
p15817
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p15818
sS'cpp_type'
p15819
S'bool'
p15820
sS'default'
p15821
S'0'
p15822
sS'name'
p15823
S'cody_test'
p15824
sS'required'
p15825
I00
sS'group_name'
p15826
Nsa(dp15827
S'description'
p15828
S'3D microstructure will be columnar in the z-direction?\n'
p15829
sS'cpp_type'
p15830
S'bool'
p15831
sS'default'
p15832
S'0'
p15833
sS'name'
p15834
S'columnar_3D'
p15835
sS'required'
p15836
I00
sS'group_name'
p15837
Nsa(dp15838
S'description'
p15839
S'Number of grains being represented by the order parameters\n'
p15840
sS'cpp_type'
p15841
S'unsigned int'
p15842
sS'default'
p15843
g3
sS'name'
p15844
S'grain_num'
p15845
sS'required'
p15846
I01
sS'group_name'
p15847
Nsa(dp15848
S'description'
p15849
S'The index for the current order parameter\n'
p15850
sS'cpp_type'
p15851
S'unsigned int'
p15852
sS'default'
p15853
g3
sS'name'
p15854
S'op_index'
p15855
sS'required'
p15856
I01
sS'group_name'
p15857
Nsa(dp15858
S'description'
p15859
S'Number of order parameters\n'
p15860
sS'cpp_type'
p15861
S'unsigned int'
p15862
sS'default'
p15863
g3
sS'name'
p15864
S'op_num'
p15865
sS'required'
p15866
I01
sS'group_name'
p15867
Nsa(dp15868
S'description'
p15869
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p15870
sS'cpp_type'
p15871
S'double'
p15872
sS'default'
p15873
S'0'
p15874
sS'name'
p15875
S'perturbation_percent'
p15876
sS'required'
p15877
I00
sS'group_name'
p15878
Nsa(dp15879
S'description'
p15880
S'The random seed\n'
p15881
sS'cpp_type'
p15882
S'unsigned int'
p15883
sS'default'
p15884
S'12444'
p15885
sS'name'
p15886
S'rand_seed'
p15887
sS'required'
p15888
I00
sS'group_name'
p15889
Nsa(dp15890
S'description'
p15891
g3
sS'cpp_type'
p15892
S'int'
p15893
sS'default'
p15894
S'1'
p15895
sS'name'
p15896
S'typ'
p15897
sS'required'
p15898
I00
sS'group_name'
p15899
Nsa(dp15900
S'description'
p15901
g3
sS'cpp_type'
p15902
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p15903
sS'default'
p15904
S'HexPolycrystalIC'
p15905
sS'name'
p15906
S'type'
p15907
sS'required'
p15908
I00
sS'group_name'
p15909
Nsa(dp15910
S'description'
p15911
S'The variable this initial condition is supposed to provide values for.\n'
p15912
sS'cpp_type'
p15913
S'VariableName'
p15914
sS'default'
p15915
g3
sS'name'
p15916
S'variable'
p15917
sS'required'
p15918
I01
sS'group_name'
p15919
Nsa(dp15920
S'description'
p15921
S'Specifies offset of hexagon grid in x-direction\n'
p15922
sS'cpp_type'
p15923
S'double'
p15924
sS'default'
p15925
S'0.5'
p15926
sS'name'
p15927
S'x_offset'
p15928
sS'required'
p15929
I00
sS'group_name'
p15930
NsasS'name'
p15931
S'/ICs/HexPolycrystalIC'
p15932
sa(dp15933
S'description'
p15934
S'Perturbed square lattice of smooth circles\n'
p15935
sS'subblocks'
p15936
NsS'parameters'
p15937
(lp15938
(dp15939
S'description'
p15940
S'in 3D, whether the objects are spheres or columns\n'
p15941
sS'cpp_type'
p15942
S'bool'
p15943
sS'default'
p15944
S'1'
p15945
sS'name'
p15946
S'3D_spheres'
p15947
sS'required'
p15948
I00
sS'group_name'
p15949
Nsa(dp15950
S'description'
p15951
S'Variation from central lattice position\n'
p15952
sS'cpp_type'
p15953
S'double'
p15954
sS'default'
p15955
S'0'
p15956
sS'name'
p15957
S'Rnd_variation'
p15958
sS'required'
p15959
I00
sS'group_name'
p15960
Nsa(dp15961
S'description'
p15962
S"Don't place any bubbles on the simulation cell boundaries\n"
p15963
sS'cpp_type'
p15964
S'bool'
p15965
sS'default'
p15966
S'1'
p15967
sS'name'
p15968
S'avoid_bounds'
p15969
sS'required'
p15970
I00
sS'group_name'
p15971
Nsa(dp15972
S'description'
p15973
S'The list of block ids (SubdomainID) that this object will be applied\n'
p15974
sS'cpp_type'
p15975
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p15976
sS'default'
p15977
g3
sS'name'
p15978
S'block'
p15979
sS'required'
p15980
I00
sS'group_name'
p15981
Nsa(dp15982
S'description'
p15983
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p15984
sS'cpp_type'
p15985
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p15986
sS'default'
p15987
g3
sS'name'
p15988
S'boundary'
p15989
sS'required'
p15990
I00
sS'group_name'
p15991
Nsa(dp15992
S'description'
p15993
S'Vector containing the number of bubbles along each side\n'
p15994
sS'cpp_type'
p15995
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p15996
sS'default'
p15997
g3
sS'name'
p15998
S'circles_per_side'
p15999
sS'required'
p16000
I01
sS'group_name'
p16001
Nsa(dp16002
S'description'
p16003
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p16004
sS'cpp_type'
p16005
S'double'
p16006
sS'default'
p16007
S'0'
p16008
sS'name'
p16009
S'int_width'
p16010
sS'required'
p16011
I00
sS'group_name'
p16012
Nsa(dp16013
S'description'
p16014
S'The variable value inside the circle\n'
p16015
sS'cpp_type'
p16016
S'double'
p16017
sS'default'
p16018
g3
sS'name'
p16019
S'invalue'
p16020
sS'required'
p16021
I01
sS'group_name'
p16022
Nsa(dp16023
S'description'
p16024
S'The variable value outside the circle\n'
p16025
sS'cpp_type'
p16026
S'double'
p16027
sS'default'
p16028
g3
sS'name'
p16029
S'outvalue'
p16030
sS'required'
p16031
I01
sS'group_name'
p16032
Nsa(dp16033
S'description'
p16034
S'Mean radius value for the circels\n'
p16035
sS'cpp_type'
p16036
S'double'
p16037
sS'default'
p16038
g3
sS'name'
p16039
S'radius'
p16040
sS'required'
p16041
I01
sS'group_name'
p16042
Nsa(dp16043
S'description'
p16044
S'Plus or minus fraction of random variation in the bubble radius\n'
p16045
sS'cpp_type'
p16046
S'double'
p16047
sS'default'
p16048
S'0'
p16049
sS'name'
p16050
S'radius_variation'
p16051
sS'required'
p16052
I00
sS'group_name'
p16053
Nsa(dp16054
S'name'
p16055
S'radius_variation_type'
p16056
sS'cpp_type'
p16057
S'MooseEnum'
p16058
sS'default'
p16059
S'none'
p16060
sS'description'
p16061
S'Type of distribution that random circle radii will follow\n'
p16062
sS'required'
p16063
I00
sS'options'
p16064
S'uniform normal none'
p16065
sS'group_name'
p16066
Nsa(dp16067
S'description'
p16068
S'random seed\n'
p16069
sS'cpp_type'
p16070
S'unsigned int'
p16071
sS'default'
p16072
S'2000'
p16073
sS'name'
p16074
S'rand_seed'
p16075
sS'required'
p16076
I00
sS'group_name'
p16077
Nsa(dp16078
S'description'
p16079
g3
sS'cpp_type'
p16080
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16081
sS'default'
p16082
S'LatticeSmoothCircleIC'
p16083
sS'name'
p16084
S'type'
p16085
sS'required'
p16086
I00
sS'group_name'
p16087
Nsa(dp16088
S'description'
p16089
S'The variable this initial condition is supposed to provide values for.\n'
p16090
sS'cpp_type'
p16091
S'VariableName'
p16092
sS'default'
p16093
g3
sS'name'
p16094
S'variable'
p16095
sS'required'
p16096
I01
sS'group_name'
p16097
Nsa(dp16098
S'description'
p16099
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p16100
sS'cpp_type'
p16101
S'bool'
p16102
sS'default'
p16103
S'0'
p16104
sS'name'
p16105
S'zero_gradient'
p16106
sS'required'
p16107
I00
sS'group_name'
p16108
NsasS'name'
p16109
S'/ICs/LatticeSmoothCircleIC'
p16110
sa(dp16111
S'description'
p16112
S'Random distribution of smooth circles with given minimum spacing\n'
p16113
sS'subblocks'
p16114
NsS'parameters'
p16115
(lp16116
(dp16117
S'description'
p16118
S'in 3D, whether the objects are spheres or columns\n'
p16119
sS'cpp_type'
p16120
S'bool'
p16121
sS'default'
p16122
S'1'
p16123
sS'name'
p16124
S'3D_spheres'
p16125
sS'required'
p16126
I00
sS'group_name'
p16127
Nsa(dp16128
S'description'
p16129
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16130
sS'cpp_type'
p16131
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p16132
sS'default'
p16133
g3
sS'name'
p16134
S'block'
p16135
sS'required'
p16136
I00
sS'group_name'
p16137
Nsa(dp16138
S'description'
p16139
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16140
sS'cpp_type'
p16141
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p16142
sS'default'
p16143
g3
sS'name'
p16144
S'boundary'
p16145
sS'required'
p16146
I00
sS'group_name'
p16147
Nsa(dp16148
S'description'
p16149
S'minimum spacing of bubbles, measured from center to center\n'
p16150
sS'cpp_type'
p16151
S'double'
p16152
sS'default'
p16153
g3
sS'name'
p16154
S'bubspac'
p16155
sS'required'
p16156
I01
sS'group_name'
p16157
Nsa(dp16158
S'description'
p16159
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p16160
sS'cpp_type'
p16161
S'double'
p16162
sS'default'
p16163
S'0'
p16164
sS'name'
p16165
S'int_width'
p16166
sS'required'
p16167
I00
sS'group_name'
p16168
Nsa(dp16169
S'description'
p16170
S'The variable value inside the circle\n'
p16171
sS'cpp_type'
p16172
S'double'
p16173
sS'default'
p16174
g3
sS'name'
p16175
S'invalue'
p16176
sS'required'
p16177
I01
sS'group_name'
p16178
Nsa(dp16179
S'description'
p16180
S'The number of bubbles to place\n'
p16181
sS'cpp_type'
p16182
S'unsigned int'
p16183
sS'default'
p16184
g3
sS'name'
p16185
S'numbub'
p16186
sS'required'
p16187
I01
sS'group_name'
p16188
Nsa(dp16189
S'description'
p16190
S'The number of tries\n'
p16191
sS'cpp_type'
p16192
S'unsigned int'
p16193
sS'default'
p16194
S'1000'
p16195
sS'name'
p16196
S'numtries'
p16197
sS'required'
p16198
I00
sS'group_name'
p16199
Nsa(dp16200
S'description'
p16201
S'The variable value outside the circle\n'
p16202
sS'cpp_type'
p16203
S'double'
p16204
sS'default'
p16205
g3
sS'name'
p16206
S'outvalue'
p16207
sS'required'
p16208
I01
sS'group_name'
p16209
Nsa(dp16210
S'description'
p16211
S'Mean radius value for the circels\n'
p16212
sS'cpp_type'
p16213
S'double'
p16214
sS'default'
p16215
g3
sS'name'
p16216
S'radius'
p16217
sS'required'
p16218
I01
sS'group_name'
p16219
Nsa(dp16220
S'description'
p16221
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p16222
sS'cpp_type'
p16223
S'double'
p16224
sS'default'
p16225
S'0'
p16226
sS'name'
p16227
S'radius_variation'
p16228
sS'required'
p16229
I00
sS'group_name'
p16230
Nsa(dp16231
S'name'
p16232
S'radius_variation_type'
p16233
sS'cpp_type'
p16234
S'MooseEnum'
p16235
sS'default'
p16236
S'none'
p16237
sS'description'
p16238
S'Type of distribution that random circle radii will follow\n'
p16239
sS'required'
p16240
I00
sS'options'
p16241
S'uniform normal none'
p16242
sS'group_name'
p16243
Nsa(dp16244
S'description'
p16245
S'random seed\n'
p16246
sS'cpp_type'
p16247
S'unsigned int'
p16248
sS'default'
p16249
S'2000'
p16250
sS'name'
p16251
S'rand_seed'
p16252
sS'required'
p16253
I00
sS'group_name'
p16254
Nsa(dp16255
S'description'
p16256
g3
sS'cpp_type'
p16257
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16258
sS'default'
p16259
S'MultiSmoothCircleIC'
p16260
sS'name'
p16261
S'type'
p16262
sS'required'
p16263
I00
sS'group_name'
p16264
Nsa(dp16265
S'description'
p16266
S'The variable this initial condition is supposed to provide values for.\n'
p16267
sS'cpp_type'
p16268
S'VariableName'
p16269
sS'default'
p16270
g3
sS'name'
p16271
S'variable'
p16272
sS'required'
p16273
I01
sS'group_name'
p16274
Nsa(dp16275
S'description'
p16276
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p16277
sS'cpp_type'
p16278
S'bool'
p16279
sS'default'
p16280
S'0'
p16281
sS'name'
p16282
S'zero_gradient'
p16283
sS'required'
p16284
I00
sS'group_name'
p16285
NsasS'name'
p16286
S'/ICs/MultiSmoothCircleIC'
p16287
sa(dp16288
S'description'
p16289
g3
sS'subblocks'
p16290
(lp16291
(dp16292
S'description'
p16293
g3
sS'subblocks'
p16294
NsS'parameters'
p16295
(lp16296
(dp16297
S'description'
p16298
S'Number of grains, should be 2\n'
p16299
sS'cpp_type'
p16300
S'unsigned int'
p16301
sS'default'
p16302
g3
sS'name'
p16303
S'op_num'
p16304
sS'required'
p16305
I01
sS'group_name'
p16306
Nsa(dp16307
S'description'
p16308
S'specifies the base name of the variables\n'
p16309
sS'cpp_type'
p16310
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16311
sS'default'
p16312
g3
sS'name'
p16313
S'var_name_base'
p16314
sS'required'
p16315
I01
sS'group_name'
p16316
Nsa(dp16317
S'description'
p16318
S'The x coordinate of the lower left-hand corner of the box\n'
p16319
sS'cpp_type'
p16320
S'double'
p16321
sS'default'
p16322
g3
sS'name'
p16323
S'x1'
p16324
sS'required'
p16325
I01
sS'group_name'
p16326
Nsa(dp16327
S'description'
p16328
S'The x coordinate of the upper right-hand corner of the box\n'
p16329
sS'cpp_type'
p16330
S'double'
p16331
sS'default'
p16332
g3
sS'name'
p16333
S'x2'
p16334
sS'required'
p16335
I01
sS'group_name'
p16336
Nsa(dp16337
S'description'
p16338
S'The y coordinate of the lower left-hand corner of the box\n'
p16339
sS'cpp_type'
p16340
S'double'
p16341
sS'default'
p16342
g3
sS'name'
p16343
S'y1'
p16344
sS'required'
p16345
I01
sS'group_name'
p16346
Nsa(dp16347
S'description'
p16348
S'The y coordinate of the upper right-hand corner of the box\n'
p16349
sS'cpp_type'
p16350
S'double'
p16351
sS'default'
p16352
g3
sS'name'
p16353
S'y2'
p16354
sS'required'
p16355
I01
sS'group_name'
p16356
Nsa(dp16357
S'description'
p16358
S'The z coordinate of the lower left-hand corner of the box\n'
p16359
sS'cpp_type'
p16360
S'double'
p16361
sS'default'
p16362
S'0'
p16363
sS'name'
p16364
S'z1'
p16365
sS'required'
p16366
I00
sS'group_name'
p16367
Nsa(dp16368
S'description'
p16369
S'The z coordinate of the upper right-hand corner of the box\n'
p16370
sS'cpp_type'
p16371
S'double'
p16372
sS'default'
p16373
S'0'
p16374
sS'name'
p16375
S'z2'
p16376
sS'required'
p16377
I00
sS'group_name'
p16378
NsasS'name'
p16379
S'/ICs/PolycrystalICs/BicrystalBoundingBoxIC'
p16380
sa(dp16381
S'description'
p16382
g3
sS'subblocks'
p16383
NsS'parameters'
p16384
(lp16385
(dp16386
S'description'
p16387
S'in 3D, whether the smaller grain is a spheres or columnar grain\n'
p16388
sS'cpp_type'
p16389
S'bool'
p16390
sS'default'
p16391
S'1'
p16392
sS'name'
p16393
S'3D_sphere'
p16394
sS'required'
p16395
I00
sS'group_name'
p16396
Nsa(dp16397
S'description'
p16398
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p16399
sS'cpp_type'
p16400
S'double'
p16401
sS'default'
p16402
S'0'
p16403
sS'name'
p16404
S'int_width'
p16405
sS'required'
p16406
I00
sS'group_name'
p16407
Nsa(dp16408
S'description'
p16409
S'Number of grains, should be 2\n'
p16410
sS'cpp_type'
p16411
S'unsigned int'
p16412
sS'default'
p16413
g3
sS'name'
p16414
S'op_num'
p16415
sS'required'
p16416
I01
sS'group_name'
p16417
Nsa(dp16418
S'description'
p16419
S'Void radius\n'
p16420
sS'cpp_type'
p16421
S'double'
p16422
sS'default'
p16423
g3
sS'name'
p16424
S'radius'
p16425
sS'required'
p16426
I01
sS'group_name'
p16427
Nsa(dp16428
S'description'
p16429
S'specifies the base name of the variables\n'
p16430
sS'cpp_type'
p16431
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16432
sS'default'
p16433
g3
sS'name'
p16434
S'var_name_base'
p16435
sS'required'
p16436
I01
sS'group_name'
p16437
Nsa(dp16438
S'description'
p16439
S'The x coordinate of the circle grain center\n'
p16440
sS'cpp_type'
p16441
S'double'
p16442
sS'default'
p16443
g3
sS'name'
p16444
S'x'
p16445
sS'required'
p16446
I01
sS'group_name'
p16447
Nsa(dp16448
S'description'
p16449
S'The y coordinate of the circle grain center\n'
p16450
sS'cpp_type'
p16451
S'double'
p16452
sS'default'
p16453
g3
sS'name'
p16454
S'y'
p16455
sS'required'
p16456
I01
sS'group_name'
p16457
Nsa(dp16458
S'description'
p16459
S'The z coordinate of the circle grain center\n'
p16460
sS'cpp_type'
p16461
S'double'
p16462
sS'default'
p16463
S'0'
p16464
sS'name'
p16465
S'z'
p16466
sS'required'
p16467
I00
sS'group_name'
p16468
NsasS'name'
p16469
S'/ICs/PolycrystalICs/BicrystalCircleGrainIC'
p16470
sa(dp16471
S'description'
p16472
g3
sS'subblocks'
p16473
NsS'parameters'
p16474
(lp16475
(dp16476
S'description'
p16477
S'Number of grains, must be a square (4, 9, 16, etc)\n'
p16478
sS'cpp_type'
p16479
S'unsigned int'
p16480
sS'default'
p16481
g3
sS'name'
p16482
S'grain_num'
p16483
sS'required'
p16484
I01
sS'group_name'
p16485
Nsa(dp16486
S'description'
p16487
S'Number of order parameters\n'
p16488
sS'cpp_type'
p16489
S'unsigned int'
p16490
sS'default'
p16491
g3
sS'name'
p16492
S'op_num'
p16493
sS'required'
p16494
I01
sS'group_name'
p16495
Nsa(dp16496
S'description'
p16497
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p16498
sS'cpp_type'
p16499
S'double'
p16500
sS'default'
p16501
S'0'
p16502
sS'name'
p16503
S'perturbation_percent'
p16504
sS'required'
p16505
I00
sS'group_name'
p16506
Nsa(dp16507
S'description'
p16508
S'The random seed\n'
p16509
sS'cpp_type'
p16510
S'unsigned int'
p16511
sS'default'
p16512
S'12444'
p16513
sS'name'
p16514
S'rand_seed'
p16515
sS'required'
p16516
I00
sS'group_name'
p16517
Nsa(dp16518
S'description'
p16519
S'specifies the base name of the variables\n'
p16520
sS'cpp_type'
p16521
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16522
sS'default'
p16523
g3
sS'name'
p16524
S'var_name_base'
p16525
sS'required'
p16526
I01
sS'group_name'
p16527
Nsa(dp16528
S'description'
p16529
S'Specifies offset of hexagon grid in x-direction\n'
p16530
sS'cpp_type'
p16531
S'double'
p16532
sS'default'
p16533
S'0.5'
p16534
sS'name'
p16535
S'x_offset'
p16536
sS'required'
p16537
I00
sS'group_name'
p16538
NsasS'name'
p16539
S'/ICs/PolycrystalICs/PolycrystalHexGrainIC'
p16540
sa(dp16541
S'description'
p16542
g3
sS'subblocks'
p16543
NsS'parameters'
p16544
(lp16545
(dp16546
S'description'
p16547
S'number of order parameters to create\n'
p16548
sS'cpp_type'
p16549
S'unsigned int'
p16550
sS'default'
p16551
g3
sS'name'
p16552
S'op_num'
p16553
sS'required'
p16554
I01
sS'group_name'
p16555
Nsa(dp16556
S'name'
p16557
S'random_type'
p16558
sS'cpp_type'
p16559
S'MooseEnum'
p16560
sS'default'
p16561
g3
sS'description'
p16562
S'The type of random polycrystal initial condition. Whether one order parameter is chosen to be 1 at each node or if each order parameter continuously varies from 0 to 1\n'
p16563
sS'required'
p16564
I00
sS'options'
p16565
S'continuous discrete'
p16566
sS'group_name'
p16567
Nsa(dp16568
S'description'
p16569
S'specifies the base name of the variables\n'
p16570
sS'cpp_type'
p16571
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16572
sS'default'
p16573
g3
sS'name'
p16574
S'var_name_base'
p16575
sS'required'
p16576
I01
sS'group_name'
p16577
NsasS'name'
p16578
S'/ICs/PolycrystalICs/PolycrystalRandomIC'
p16579
sa(dp16580
S'description'
p16581
g3
sS'subblocks'
p16582
NsS'parameters'
p16583
(lp16584
(dp16585
S'description'
p16586
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p16587
sS'cpp_type'
p16588
S'bool'
p16589
sS'default'
p16590
S'0'
p16591
sS'name'
p16592
S'cody_test'
p16593
sS'required'
p16594
I00
sS'group_name'
p16595
Nsa(dp16596
S'description'
p16597
S'3D microstructure will be columnar in the z-direction?\n'
p16598
sS'cpp_type'
p16599
S'bool'
p16600
sS'default'
p16601
S'0'
p16602
sS'name'
p16603
S'columnar_3D'
p16604
sS'required'
p16605
I00
sS'group_name'
p16606
Nsa(dp16607
S'description'
p16608
S'number of grains to create, if it is going to greater than op_num\n'
p16609
sS'cpp_type'
p16610
S'unsigned int'
p16611
sS'default'
p16612
g3
sS'name'
p16613
S'grain_num'
p16614
sS'required'
p16615
I01
sS'group_name'
p16616
Nsa(dp16617
S'description'
p16618
S'number of order parameters to create\n'
p16619
sS'cpp_type'
p16620
S'unsigned int'
p16621
sS'default'
p16622
g3
sS'name'
p16623
S'op_num'
p16624
sS'required'
p16625
I01
sS'group_name'
p16626
Nsa(dp16627
S'description'
p16628
S'The random seed\n'
p16629
sS'cpp_type'
p16630
S'unsigned int'
p16631
sS'default'
p16632
S'12444'
p16633
sS'name'
p16634
S'rand_seed'
p16635
sS'required'
p16636
I00
sS'group_name'
p16637
Nsa(dp16638
S'description'
p16639
S'specifies the base name of the variables\n'
p16640
sS'cpp_type'
p16641
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16642
sS'default'
p16643
g3
sS'name'
p16644
S'var_name_base'
p16645
sS'required'
p16646
I01
sS'group_name'
p16647
NsasS'name'
p16648
S'/ICs/PolycrystalICs/PolycrystalVoronoiIC'
p16649
sa(dp16650
S'description'
p16651
g3
sS'subblocks'
p16652
NsS'parameters'
p16653
(lp16654
(dp16655
S'description'
p16656
S'number of order parameters to create\n'
p16657
sS'cpp_type'
p16658
S'unsigned int'
p16659
sS'default'
p16660
g3
sS'name'
p16661
S'op_num'
p16662
sS'required'
p16663
I01
sS'group_name'
p16664
Nsa(dp16665
S'description'
p16666
S'specifies the base name of the variables\n'
p16667
sS'cpp_type'
p16668
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16669
sS'default'
p16670
g3
sS'name'
p16671
S'var_name_base'
p16672
sS'required'
p16673
I01
sS'group_name'
p16674
NsasS'name'
p16675
S'/ICs/PolycrystalICs/Tricrystal2CircleGrainsIC'
p16676
sasS'parameters'
p16677
NsS'name'
p16678
S'/ICs/PolycrystalICs'
p16679
sa(dp16680
S'description'
p16681
g3
sS'subblocks'
p16682
NsS'parameters'
p16683
(lp16684
(dp16685
S'description'
p16686
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16687
sS'cpp_type'
p16688
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p16689
sS'default'
p16690
g3
sS'name'
p16691
S'block'
p16692
sS'required'
p16693
I00
sS'group_name'
p16694
Nsa(dp16695
S'description'
p16696
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16697
sS'cpp_type'
p16698
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p16699
sS'default'
p16700
g3
sS'name'
p16701
S'boundary'
p16702
sS'required'
p16703
I00
sS'group_name'
p16704
Nsa(dp16705
S'description'
p16706
S'The index for the current order parameter\n'
p16707
sS'cpp_type'
p16708
S'unsigned int'
p16709
sS'default'
p16710
g3
sS'name'
p16711
S'op_index'
p16712
sS'required'
p16713
I01
sS'group_name'
p16714
Nsa(dp16715
S'description'
p16716
S'Number of order parameters\n'
p16717
sS'cpp_type'
p16718
S'unsigned int'
p16719
sS'default'
p16720
g3
sS'name'
p16721
S'op_num'
p16722
sS'required'
p16723
I01
sS'group_name'
p16724
Nsa(dp16725
S'description'
p16726
S'Type of random grain structure\n'
p16727
sS'cpp_type'
p16728
S'unsigned int'
p16729
sS'default'
p16730
g3
sS'name'
p16731
S'typ'
p16732
sS'required'
p16733
I01
sS'group_name'
p16734
Nsa(dp16735
S'description'
p16736
g3
sS'cpp_type'
p16737
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16738
sS'default'
p16739
S'PolycrystalRandomIC'
p16740
sS'name'
p16741
S'type'
p16742
sS'required'
p16743
I00
sS'group_name'
p16744
Nsa(dp16745
S'description'
p16746
S'The variable this initial condition is supposed to provide values for.\n'
p16747
sS'cpp_type'
p16748
S'VariableName'
p16749
sS'default'
p16750
g3
sS'name'
p16751
S'variable'
p16752
sS'required'
p16753
I01
sS'group_name'
p16754
NsasS'name'
p16755
S'/ICs/PolycrystalRandomIC'
p16756
sa(dp16757
S'description'
p16758
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p16759
sS'subblocks'
p16760
NsS'parameters'
p16761
(lp16762
(dp16763
S'description'
p16764
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16765
sS'cpp_type'
p16766
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p16767
sS'default'
p16768
g3
sS'name'
p16769
S'block'
p16770
sS'required'
p16771
I00
sS'group_name'
p16772
Nsa(dp16773
S'description'
p16774
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16775
sS'cpp_type'
p16776
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p16777
sS'default'
p16778
g3
sS'name'
p16779
S'boundary'
p16780
sS'required'
p16781
I00
sS'group_name'
p16782
Nsa(dp16783
S'description'
p16784
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p16785
sS'cpp_type'
p16786
S'bool'
p16787
sS'default'
p16788
S'0'
p16789
sS'name'
p16790
S'cody_test'
p16791
sS'required'
p16792
I00
sS'group_name'
p16793
Nsa(dp16794
S'description'
p16795
S'3D microstructure will be columnar in the z-direction?\n'
p16796
sS'cpp_type'
p16797
S'bool'
p16798
sS'default'
p16799
S'0'
p16800
sS'name'
p16801
S'columnar_3D'
p16802
sS'required'
p16803
I00
sS'group_name'
p16804
Nsa(dp16805
S'description'
p16806
S'Number of grains being represented by the order parameters\n'
p16807
sS'cpp_type'
p16808
S'unsigned int'
p16809
sS'default'
p16810
g3
sS'name'
p16811
S'grain_num'
p16812
sS'required'
p16813
I01
sS'group_name'
p16814
Nsa(dp16815
S'description'
p16816
S'The index for the current order parameter\n'
p16817
sS'cpp_type'
p16818
S'unsigned int'
p16819
sS'default'
p16820
g3
sS'name'
p16821
S'op_index'
p16822
sS'required'
p16823
I01
sS'group_name'
p16824
Nsa(dp16825
S'description'
p16826
S'Number of order parameters\n'
p16827
sS'cpp_type'
p16828
S'unsigned int'
p16829
sS'default'
p16830
g3
sS'name'
p16831
S'op_num'
p16832
sS'required'
p16833
I01
sS'group_name'
p16834
Nsa(dp16835
S'description'
p16836
S'The random seed\n'
p16837
sS'cpp_type'
p16838
S'unsigned int'
p16839
sS'default'
p16840
S'12444'
p16841
sS'name'
p16842
S'rand_seed'
p16843
sS'required'
p16844
I00
sS'group_name'
p16845
Nsa(dp16846
S'description'
p16847
g3
sS'cpp_type'
p16848
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16849
sS'default'
p16850
S'PolycrystalReducedIC'
p16851
sS'name'
p16852
S'type'
p16853
sS'required'
p16854
I00
sS'group_name'
p16855
Nsa(dp16856
S'description'
p16857
S'The variable this initial condition is supposed to provide values for.\n'
p16858
sS'cpp_type'
p16859
S'VariableName'
p16860
sS'default'
p16861
g3
sS'name'
p16862
S'variable'
p16863
sS'required'
p16864
I01
sS'group_name'
p16865
NsasS'name'
p16866
S'/ICs/PolycrystalReducedIC'
p16867
sa(dp16868
S'description'
p16869
g3
sS'subblocks'
p16870
NsS'parameters'
p16871
(lp16872
(dp16873
S'description'
p16874
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16875
sS'cpp_type'
p16876
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p16877
sS'default'
p16878
g3
sS'name'
p16879
S'block'
p16880
sS'required'
p16881
I00
sS'group_name'
p16882
Nsa(dp16883
S'description'
p16884
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16885
sS'cpp_type'
p16886
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p16887
sS'default'
p16888
g3
sS'name'
p16889
S'boundary'
p16890
sS'required'
p16891
I00
sS'group_name'
p16892
Nsa(dp16893
S'description'
p16894
S'Upper bound of the randomly generated values\n'
p16895
sS'cpp_type'
p16896
S'double'
p16897
sS'default'
p16898
S'1'
p16899
sS'name'
p16900
S'max'
p16901
sS'required'
p16902
I00
sS'group_name'
p16903
Nsa(dp16904
S'description'
p16905
S'Lower bound of the randomly generated values\n'
p16906
sS'cpp_type'
p16907
S'double'
p16908
sS'default'
p16909
S'0'
p16910
sS'name'
p16911
S'min'
p16912
sS'required'
p16913
I00
sS'group_name'
p16914
Nsa(dp16915
S'description'
p16916
S'Seed value for the random number generator\n'
p16917
sS'cpp_type'
p16918
S'unsigned int'
p16919
sS'default'
p16920
S'0'
p16921
sS'name'
p16922
S'seed'
p16923
sS'required'
p16924
I00
sS'group_name'
p16925
Nsa(dp16926
S'description'
p16927
g3
sS'cpp_type'
p16928
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p16929
sS'default'
p16930
S'RandomIC'
p16931
sS'name'
p16932
S'type'
p16933
sS'required'
p16934
I00
sS'group_name'
p16935
Nsa(dp16936
S'description'
p16937
S'The variable this initial condition is supposed to provide values for.\n'
p16938
sS'cpp_type'
p16939
S'VariableName'
p16940
sS'default'
p16941
g3
sS'name'
p16942
S'variable'
p16943
sS'required'
p16944
I01
sS'group_name'
p16945
NsasS'name'
p16946
S'/ICs/RandomIC'
p16947
sa(dp16948
S'description'
p16949
S'Random noise with different min/max inside/outside of a bounding box\n'
p16950
sS'subblocks'
p16951
NsS'parameters'
p16952
(lp16953
(dp16954
S'description'
p16955
S'The list of block ids (SubdomainID) that this object will be applied\n'
p16956
sS'cpp_type'
p16957
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p16958
sS'default'
p16959
g3
sS'name'
p16960
S'block'
p16961
sS'required'
p16962
I00
sS'group_name'
p16963
Nsa(dp16964
S'description'
p16965
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p16966
sS'cpp_type'
p16967
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p16968
sS'default'
p16969
g3
sS'name'
p16970
S'boundary'
p16971
sS'required'
p16972
I00
sS'group_name'
p16973
Nsa(dp16974
S'description'
p16975
S'The min value of the variable invalue the box\n'
p16976
sS'cpp_type'
p16977
S'double'
p16978
sS'default'
p16979
S'0'
p16980
sS'name'
p16981
S'mn_invalue'
p16982
sS'required'
p16983
I00
sS'group_name'
p16984
Nsa(dp16985
S'description'
p16986
S'The min value of the variable outvalue the box\n'
p16987
sS'cpp_type'
p16988
S'double'
p16989
sS'default'
p16990
S'0'
p16991
sS'name'
p16992
S'mn_outvalue'
p16993
sS'required'
p16994
I00
sS'group_name'
p16995
Nsa(dp16996
S'description'
p16997
S'The max value of the variable invalue the box\n'
p16998
sS'cpp_type'
p16999
S'double'
p17000
sS'default'
p17001
g3
sS'name'
p17002
S'mx_invalue'
p17003
sS'required'
p17004
I01
sS'group_name'
p17005
Nsa(dp17006
S'description'
p17007
S'The max value of the variable outvalue the box\n'
p17008
sS'cpp_type'
p17009
S'double'
p17010
sS'default'
p17011
g3
sS'name'
p17012
S'mx_outvalue'
p17013
sS'required'
p17014
I01
sS'group_name'
p17015
Nsa(dp17016
S'description'
p17017
g3
sS'cpp_type'
p17018
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17019
sS'default'
p17020
S'RndBoundingBoxIC'
p17021
sS'name'
p17022
S'type'
p17023
sS'required'
p17024
I00
sS'group_name'
p17025
Nsa(dp17026
S'description'
p17027
S'The variable this initial condition is supposed to provide values for.\n'
p17028
sS'cpp_type'
p17029
S'VariableName'
p17030
sS'default'
p17031
g3
sS'name'
p17032
S'variable'
p17033
sS'required'
p17034
I01
sS'group_name'
p17035
Nsa(dp17036
S'description'
p17037
S'The x coordinate of the lower left-hand corner of the box\n'
p17038
sS'cpp_type'
p17039
S'double'
p17040
sS'default'
p17041
g3
sS'name'
p17042
S'x1'
p17043
sS'required'
p17044
I01
sS'group_name'
p17045
Nsa(dp17046
S'description'
p17047
S'The x coordinate of the upper right-hand corner of the box\n'
p17048
sS'cpp_type'
p17049
S'double'
p17050
sS'default'
p17051
g3
sS'name'
p17052
S'x2'
p17053
sS'required'
p17054
I01
sS'group_name'
p17055
Nsa(dp17056
S'description'
p17057
S'The y coordinate of the lower left-hand corner of the box\n'
p17058
sS'cpp_type'
p17059
S'double'
p17060
sS'default'
p17061
g3
sS'name'
p17062
S'y1'
p17063
sS'required'
p17064
I01
sS'group_name'
p17065
Nsa(dp17066
S'description'
p17067
S'The y coordinate of the upper right-hand corner of the box\n'
p17068
sS'cpp_type'
p17069
S'double'
p17070
sS'default'
p17071
g3
sS'name'
p17072
S'y2'
p17073
sS'required'
p17074
I01
sS'group_name'
p17075
Nsa(dp17076
S'description'
p17077
S'The z coordinate of the lower left-hand corner of the box\n'
p17078
sS'cpp_type'
p17079
S'double'
p17080
sS'default'
p17081
S'0'
p17082
sS'name'
p17083
S'z1'
p17084
sS'required'
p17085
I00
sS'group_name'
p17086
Nsa(dp17087
S'description'
p17088
S'The z coordinate of the upper right-hand corner of the box\n'
p17089
sS'cpp_type'
p17090
S'double'
p17091
sS'default'
p17092
S'0'
p17093
sS'name'
p17094
S'z2'
p17095
sS'required'
p17096
I00
sS'group_name'
p17097
NsasS'name'
p17098
S'/ICs/RndBoundingBoxIC'
p17099
sa(dp17100
S'description'
p17101
S'Random noise with different min/max inside/outside of a smooth circle\n'
p17102
sS'subblocks'
p17103
NsS'parameters'
p17104
(lp17105
(dp17106
S'description'
p17107
S'in 3D, whether the objects are spheres or columns\n'
p17108
sS'cpp_type'
p17109
S'bool'
p17110
sS'default'
p17111
S'1'
p17112
sS'name'
p17113
S'3D_spheres'
p17114
sS'required'
p17115
I00
sS'group_name'
p17116
Nsa(dp17117
S'description'
p17118
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17119
sS'cpp_type'
p17120
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p17121
sS'default'
p17122
g3
sS'name'
p17123
S'block'
p17124
sS'required'
p17125
I00
sS'group_name'
p17126
Nsa(dp17127
S'description'
p17128
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17129
sS'cpp_type'
p17130
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p17131
sS'default'
p17132
g3
sS'name'
p17133
S'boundary'
p17134
sS'required'
p17135
I00
sS'group_name'
p17136
Nsa(dp17137
S'description'
p17138
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p17139
sS'cpp_type'
p17140
S'double'
p17141
sS'default'
p17142
S'0'
p17143
sS'name'
p17144
S'int_width'
p17145
sS'required'
p17146
I00
sS'group_name'
p17147
Nsa(dp17148
S'description'
p17149
S'The variable value inside the circle\n'
p17150
sS'cpp_type'
p17151
S'double'
p17152
sS'default'
p17153
g3
sS'name'
p17154
S'invalue'
p17155
sS'required'
p17156
I01
sS'group_name'
p17157
Nsa(dp17158
S'description'
p17159
S'The variable value outside the circle\n'
p17160
sS'cpp_type'
p17161
S'double'
p17162
sS'default'
p17163
g3
sS'name'
p17164
S'outvalue'
p17165
sS'required'
p17166
I01
sS'group_name'
p17167
Nsa(dp17168
S'description'
p17169
S'The radius of a circle\n'
p17170
sS'cpp_type'
p17171
S'double'
p17172
sS'default'
p17173
g3
sS'name'
p17174
S'radius'
p17175
sS'required'
p17176
I01
sS'group_name'
p17177
Nsa(dp17178
S'description'
p17179
S'Seed value for the random number generator\n'
p17180
sS'cpp_type'
p17181
S'unsigned int'
p17182
sS'default'
p17183
S'12345'
p17184
sS'name'
p17185
S'rand_seed'
p17186
sS'required'
p17187
I00
sS'group_name'
p17188
Nsa(dp17189
S'description'
p17190
g3
sS'cpp_type'
p17191
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17192
sS'default'
p17193
S'RndSmoothCircleIC'
p17194
sS'name'
p17195
S'type'
p17196
sS'required'
p17197
I00
sS'group_name'
p17198
Nsa(dp17199
S'description'
p17200
S'The variable this initial condition is supposed to provide values for.\n'
p17201
sS'cpp_type'
p17202
S'VariableName'
p17203
sS'default'
p17204
g3
sS'name'
p17205
S'variable'
p17206
sS'required'
p17207
I01
sS'group_name'
p17208
Nsa(dp17209
S'description'
p17210
S'Plus or minus this amount on the invalue\n'
p17211
sS'cpp_type'
p17212
S'double'
p17213
sS'default'
p17214
g3
sS'name'
p17215
S'variation_invalue'
p17216
sS'required'
p17217
I01
sS'group_name'
p17218
Nsa(dp17219
S'description'
p17220
S'Plus or minus this amount on the outvalue\n'
p17221
sS'cpp_type'
p17222
S'double'
p17223
sS'default'
p17224
g3
sS'name'
p17225
S'variation_outvalue'
p17226
sS'required'
p17227
I01
sS'group_name'
p17228
Nsa(dp17229
S'description'
p17230
S'The x coordinate of the circle center\n'
p17231
sS'cpp_type'
p17232
S'double'
p17233
sS'default'
p17234
g3
sS'name'
p17235
S'x1'
p17236
sS'required'
p17237
I01
sS'group_name'
p17238
Nsa(dp17239
S'description'
p17240
S'The y coordinate of the circle center\n'
p17241
sS'cpp_type'
p17242
S'double'
p17243
sS'default'
p17244
g3
sS'name'
p17245
S'y1'
p17246
sS'required'
p17247
I01
sS'group_name'
p17248
Nsa(dp17249
S'description'
p17250
S'The z coordinate of the circle center\n'
p17251
sS'cpp_type'
p17252
S'double'
p17253
sS'default'
p17254
S'0'
p17255
sS'name'
p17256
S'z1'
p17257
sS'required'
p17258
I00
sS'group_name'
p17259
Nsa(dp17260
S'description'
p17261
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p17262
sS'cpp_type'
p17263
S'bool'
p17264
sS'default'
p17265
S'0'
p17266
sS'name'
p17267
S'zero_gradient'
p17268
sS'required'
p17269
I00
sS'group_name'
p17270
NsasS'name'
p17271
S'/ICs/RndSmoothCircleIC'
p17272
sa(dp17273
S'description'
p17274
g3
sS'subblocks'
p17275
NsS'parameters'
p17276
(lp17277
(dp17278
S'description'
p17279
g3
sS'cpp_type'
p17280
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17281
sS'default'
p17282
S'ScalarComponentIC'
p17283
sS'name'
p17284
S'type'
p17285
sS'required'
p17286
I00
sS'group_name'
p17287
Nsa(dp17288
S'description'
p17289
S'Initial values to initialize the scalar variable.\n'
p17290
sS'cpp_type'
p17291
S'std::__1::vector<double, std::__1::allocator<double> >'
p17292
sS'default'
p17293
g3
sS'name'
p17294
S'values'
p17295
sS'required'
p17296
I01
sS'group_name'
p17297
Nsa(dp17298
S'description'
p17299
S'The variable this initial condition is supposed to provide values for.\n'
p17300
sS'cpp_type'
p17301
S'VariableName'
p17302
sS'default'
p17303
g3
sS'name'
p17304
S'variable'
p17305
sS'required'
p17306
I00
sS'group_name'
p17307
NsasS'name'
p17308
S'/ICs/ScalarComponentIC'
p17309
sa(dp17310
S'description'
p17311
g3
sS'subblocks'
p17312
NsS'parameters'
p17313
(lp17314
(dp17315
S'description'
p17316
g3
sS'cpp_type'
p17317
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17318
sS'default'
p17319
S'ScalarConstantIC'
p17320
sS'name'
p17321
S'type'
p17322
sS'required'
p17323
I00
sS'group_name'
p17324
Nsa(dp17325
S'description'
p17326
g3
sS'cpp_type'
p17327
S'double'
p17328
sS'default'
p17329
S'0'
p17330
sS'name'
p17331
S'value'
p17332
sS'required'
p17333
I00
sS'group_name'
p17334
Nsa(dp17335
S'description'
p17336
S'The variable this initial condition is supposed to provide values for.\n'
p17337
sS'cpp_type'
p17338
S'VariableName'
p17339
sS'default'
p17340
g3
sS'name'
p17341
S'variable'
p17342
sS'required'
p17343
I00
sS'group_name'
p17344
NsasS'name'
p17345
S'/ICs/ScalarConstantIC'
p17346
sa(dp17347
S'description'
p17348
S'Circle with a smooth interface\n'
p17349
sS'subblocks'
p17350
NsS'parameters'
p17351
(lp17352
(dp17353
S'description'
p17354
S'in 3D, whether the objects are spheres or columns\n'
p17355
sS'cpp_type'
p17356
S'bool'
p17357
sS'default'
p17358
S'1'
p17359
sS'name'
p17360
S'3D_spheres'
p17361
sS'required'
p17362
I00
sS'group_name'
p17363
Nsa(dp17364
S'description'
p17365
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17366
sS'cpp_type'
p17367
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p17368
sS'default'
p17369
g3
sS'name'
p17370
S'block'
p17371
sS'required'
p17372
I00
sS'group_name'
p17373
Nsa(dp17374
S'description'
p17375
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17376
sS'cpp_type'
p17377
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p17378
sS'default'
p17379
g3
sS'name'
p17380
S'boundary'
p17381
sS'required'
p17382
I00
sS'group_name'
p17383
Nsa(dp17384
S'description'
p17385
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p17386
sS'cpp_type'
p17387
S'double'
p17388
sS'default'
p17389
S'0'
p17390
sS'name'
p17391
S'int_width'
p17392
sS'required'
p17393
I00
sS'group_name'
p17394
Nsa(dp17395
S'description'
p17396
S'The variable value inside the circle\n'
p17397
sS'cpp_type'
p17398
S'double'
p17399
sS'default'
p17400
g3
sS'name'
p17401
S'invalue'
p17402
sS'required'
p17403
I01
sS'group_name'
p17404
Nsa(dp17405
S'description'
p17406
S'The variable value outside the circle\n'
p17407
sS'cpp_type'
p17408
S'double'
p17409
sS'default'
p17410
g3
sS'name'
p17411
S'outvalue'
p17412
sS'required'
p17413
I01
sS'group_name'
p17414
Nsa(dp17415
S'description'
p17416
S'The radius of a circle\n'
p17417
sS'cpp_type'
p17418
S'double'
p17419
sS'default'
p17420
g3
sS'name'
p17421
S'radius'
p17422
sS'required'
p17423
I01
sS'group_name'
p17424
Nsa(dp17425
S'description'
p17426
g3
sS'cpp_type'
p17427
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17428
sS'default'
p17429
S'SmoothCircleIC'
p17430
sS'name'
p17431
S'type'
p17432
sS'required'
p17433
I00
sS'group_name'
p17434
Nsa(dp17435
S'description'
p17436
S'The variable this initial condition is supposed to provide values for.\n'
p17437
sS'cpp_type'
p17438
S'VariableName'
p17439
sS'default'
p17440
g3
sS'name'
p17441
S'variable'
p17442
sS'required'
p17443
I01
sS'group_name'
p17444
Nsa(dp17445
S'description'
p17446
S'The x coordinate of the circle center\n'
p17447
sS'cpp_type'
p17448
S'double'
p17449
sS'default'
p17450
g3
sS'name'
p17451
S'x1'
p17452
sS'required'
p17453
I01
sS'group_name'
p17454
Nsa(dp17455
S'description'
p17456
S'The y coordinate of the circle center\n'
p17457
sS'cpp_type'
p17458
S'double'
p17459
sS'default'
p17460
g3
sS'name'
p17461
S'y1'
p17462
sS'required'
p17463
I01
sS'group_name'
p17464
Nsa(dp17465
S'description'
p17466
S'The z coordinate of the circle center\n'
p17467
sS'cpp_type'
p17468
S'double'
p17469
sS'default'
p17470
S'0'
p17471
sS'name'
p17472
S'z1'
p17473
sS'required'
p17474
I00
sS'group_name'
p17475
Nsa(dp17476
S'description'
p17477
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p17478
sS'cpp_type'
p17479
S'bool'
p17480
sS'default'
p17481
S'0'
p17482
sS'name'
p17483
S'zero_gradient'
p17484
sS'required'
p17485
I00
sS'group_name'
p17486
NsasS'name'
p17487
S'/ICs/SmoothCircleIC'
p17488
sa(dp17489
S'description'
p17490
S'Multiple smooth circles with manually specified radii and center points\n'
p17491
sS'subblocks'
p17492
NsS'parameters'
p17493
(lp17494
(dp17495
S'description'
p17496
S'in 3D, whether the objects are spheres or columns\n'
p17497
sS'cpp_type'
p17498
S'bool'
p17499
sS'default'
p17500
S'1'
p17501
sS'name'
p17502
S'3D_spheres'
p17503
sS'required'
p17504
I00
sS'group_name'
p17505
Nsa(dp17506
S'description'
p17507
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17508
sS'cpp_type'
p17509
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p17510
sS'default'
p17511
g3
sS'name'
p17512
S'block'
p17513
sS'required'
p17514
I00
sS'group_name'
p17515
Nsa(dp17516
S'description'
p17517
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17518
sS'cpp_type'
p17519
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p17520
sS'default'
p17521
g3
sS'name'
p17522
S'boundary'
p17523
sS'required'
p17524
I00
sS'group_name'
p17525
Nsa(dp17526
S'description'
p17527
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p17528
sS'cpp_type'
p17529
S'double'
p17530
sS'default'
p17531
S'0'
p17532
sS'name'
p17533
S'int_width'
p17534
sS'required'
p17535
I00
sS'group_name'
p17536
Nsa(dp17537
S'description'
p17538
S'The variable value inside the circle\n'
p17539
sS'cpp_type'
p17540
S'double'
p17541
sS'default'
p17542
g3
sS'name'
p17543
S'invalue'
p17544
sS'required'
p17545
I01
sS'group_name'
p17546
Nsa(dp17547
S'description'
p17548
S'The variable value outside the circle\n'
p17549
sS'cpp_type'
p17550
S'double'
p17551
sS'default'
p17552
g3
sS'name'
p17553
S'outvalue'
p17554
sS'required'
p17555
I01
sS'group_name'
p17556
Nsa(dp17557
S'description'
p17558
S'The radius for each circle\n'
p17559
sS'cpp_type'
p17560
S'std::__1::vector<double, std::__1::allocator<double> >'
p17561
sS'default'
p17562
g3
sS'name'
p17563
S'radii'
p17564
sS'required'
p17565
I01
sS'group_name'
p17566
Nsa(dp17567
S'description'
p17568
g3
sS'cpp_type'
p17569
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17570
sS'default'
p17571
S'SpecifiedSmoothCircleIC'
p17572
sS'name'
p17573
S'type'
p17574
sS'required'
p17575
I00
sS'group_name'
p17576
Nsa(dp17577
S'description'
p17578
S'The variable this initial condition is supposed to provide values for.\n'
p17579
sS'cpp_type'
p17580
S'VariableName'
p17581
sS'default'
p17582
g3
sS'name'
p17583
S'variable'
p17584
sS'required'
p17585
I01
sS'group_name'
p17586
Nsa(dp17587
S'description'
p17588
S'The x-coordinate for each circle center\n'
p17589
sS'cpp_type'
p17590
S'std::__1::vector<double, std::__1::allocator<double> >'
p17591
sS'default'
p17592
g3
sS'name'
p17593
S'x_positions'
p17594
sS'required'
p17595
I01
sS'group_name'
p17596
Nsa(dp17597
S'description'
p17598
S'The y-coordinate for each circle center\n'
p17599
sS'cpp_type'
p17600
S'std::__1::vector<double, std::__1::allocator<double> >'
p17601
sS'default'
p17602
g3
sS'name'
p17603
S'y_positions'
p17604
sS'required'
p17605
I01
sS'group_name'
p17606
Nsa(dp17607
S'description'
p17608
S'The z-coordinate for each circle center\n'
p17609
sS'cpp_type'
p17610
S'std::__1::vector<double, std::__1::allocator<double> >'
p17611
sS'default'
p17612
g3
sS'name'
p17613
S'z_positions'
p17614
sS'required'
p17615
I01
sS'group_name'
p17616
Nsa(dp17617
S'description'
p17618
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p17619
sS'cpp_type'
p17620
S'bool'
p17621
sS'default'
p17622
S'0'
p17623
sS'name'
p17624
S'zero_gradient'
p17625
sS'required'
p17626
I00
sS'group_name'
p17627
NsasS'name'
p17628
S'/ICs/SpecifiedSmoothCircleIC'
p17629
sa(dp17630
S'description'
p17631
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p17632
sS'subblocks'
p17633
NsS'parameters'
p17634
(lp17635
(dp17636
S'description'
p17637
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17638
sS'cpp_type'
p17639
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p17640
sS'default'
p17641
g3
sS'name'
p17642
S'block'
p17643
sS'required'
p17644
I00
sS'group_name'
p17645
Nsa(dp17646
S'description'
p17647
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17648
sS'cpp_type'
p17649
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p17650
sS'default'
p17651
g3
sS'name'
p17652
S'boundary'
p17653
sS'required'
p17654
I00
sS'group_name'
p17655
Nsa(dp17656
S'description'
p17657
S'The z coordinate of the circle center\n'
p17658
sS'cpp_type'
p17659
S'double'
p17660
sS'default'
p17661
g3
sS'name'
p17662
S'height'
p17663
sS'required'
p17664
I01
sS'group_name'
p17665
Nsa(dp17666
S'description'
p17667
S'The variable value inside the circle\n'
p17668
sS'cpp_type'
p17669
S'double'
p17670
sS'default'
p17671
g3
sS'name'
p17672
S'invalue'
p17673
sS'required'
p17674
I01
sS'group_name'
p17675
Nsa(dp17676
S'description'
p17677
S'The variable value outside the circle\n'
p17678
sS'cpp_type'
p17679
S'double'
p17680
sS'default'
p17681
g3
sS'name'
p17682
S'outvalue'
p17683
sS'required'
p17684
I01
sS'group_name'
p17685
Nsa(dp17686
S'description'
p17687
g3
sS'cpp_type'
p17688
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17689
sS'default'
p17690
S'ThumbIC'
p17691
sS'name'
p17692
S'type'
p17693
sS'required'
p17694
I00
sS'group_name'
p17695
Nsa(dp17696
S'description'
p17697
S'The variable this initial condition is supposed to provide values for.\n'
p17698
sS'cpp_type'
p17699
S'VariableName'
p17700
sS'default'
p17701
g3
sS'name'
p17702
S'variable'
p17703
sS'required'
p17704
I01
sS'group_name'
p17705
Nsa(dp17706
S'description'
p17707
S'The y coordinate of the circle center\n'
p17708
sS'cpp_type'
p17709
S'double'
p17710
sS'default'
p17711
g3
sS'name'
p17712
S'width'
p17713
sS'required'
p17714
I01
sS'group_name'
p17715
Nsa(dp17716
S'description'
p17717
S'The x coordinate of the circle center\n'
p17718
sS'cpp_type'
p17719
S'double'
p17720
sS'default'
p17721
g3
sS'name'
p17722
S'xcoord'
p17723
sS'required'
p17724
I01
sS'group_name'
p17725
NsasS'name'
p17726
S'/ICs/ThumbIC'
p17727
sa(dp17728
S'description'
p17729
S'Tricrystal with two circles/bubbles\n'
p17730
sS'subblocks'
p17731
NsS'parameters'
p17732
(lp17733
(dp17734
S'description'
p17735
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17736
sS'cpp_type'
p17737
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p17738
sS'default'
p17739
g3
sS'name'
p17740
S'block'
p17741
sS'required'
p17742
I00
sS'group_name'
p17743
Nsa(dp17744
S'description'
p17745
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p17746
sS'cpp_type'
p17747
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p17748
sS'default'
p17749
g3
sS'name'
p17750
S'boundary'
p17751
sS'required'
p17752
I00
sS'group_name'
p17753
Nsa(dp17754
S'description'
p17755
S'Index for the current grain order parameter\n'
p17756
sS'cpp_type'
p17757
S'unsigned int'
p17758
sS'default'
p17759
g3
sS'name'
p17760
S'op_index'
p17761
sS'required'
p17762
I01
sS'group_name'
p17763
Nsa(dp17764
S'description'
p17765
S'Number of grain order parameters\n'
p17766
sS'cpp_type'
p17767
S'unsigned int'
p17768
sS'default'
p17769
g3
sS'name'
p17770
S'op_num'
p17771
sS'required'
p17772
I01
sS'group_name'
p17773
Nsa(dp17774
S'description'
p17775
g3
sS'cpp_type'
p17776
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17777
sS'default'
p17778
S'Tricrystal2CircleGrainsIC'
p17779
sS'name'
p17780
S'type'
p17781
sS'required'
p17782
I00
sS'group_name'
p17783
Nsa(dp17784
S'description'
p17785
S'The variable this initial condition is supposed to provide values for.\n'
p17786
sS'cpp_type'
p17787
S'VariableName'
p17788
sS'default'
p17789
g3
sS'name'
p17790
S'variable'
p17791
sS'required'
p17792
I01
sS'group_name'
p17793
NsasS'name'
p17794
S'/ICs/Tricrystal2CircleGrainsIC'
p17795
sasS'parameters'
p17796
NsS'name'
p17797
S'/ICs'
p17798
sa(dp17799
S'description'
p17800
g3
sS'subblocks'
p17801
(lp17802
(dp17803
S'description'
p17804
g3
sS'subblocks'
p17805
NsS'parameters'
p17806
(lp17807
(dp17808
S'description'
p17809
S'A string representing the Moose Object that will be built by this Action\n'
p17810
sS'cpp_type'
p17811
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17812
sS'default'
p17813
g3
sS'name'
p17814
S'type'
p17815
sS'required'
p17816
I01
sS'group_name'
p17817
NsasS'name'
p17818
S'/Kernels/*'
p17819
sa(dp17820
S'description'
p17821
S'Grain-Boundary model concentration dependent residual\n'
p17822
sS'subblocks'
p17823
NsS'parameters'
p17824
(lp17825
(dp17826
S'description'
p17827
S'Vector of nonlinear variable arguments this object depends ons\n'
p17828
sS'cpp_type'
p17829
S'std::vector<VariableName>'
p17830
sS'default'
p17831
g3
sS'name'
p17832
S'args'
p17833
sS'required'
p17834
I00
sS'group_name'
p17835
Nsa(dp17836
S'description'
p17837
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17838
sS'cpp_type'
p17839
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p17840
sS'default'
p17841
g3
sS'name'
p17842
S'block'
p17843
sS'required'
p17844
I00
sS'group_name'
p17845
Nsa(dp17846
S'description'
p17847
S'Other species concentration\n'
p17848
sS'cpp_type'
p17849
S'std::vector<VariableName>'
p17850
sS'default'
p17851
g3
sS'name'
p17852
S'c'
p17853
sS'required'
p17854
I01
sS'group_name'
p17855
Nsa(dp17856
S'description'
p17857
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17858
sS'cpp_type'
p17859
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p17860
sS'default'
p17861
g3
sS'name'
p17862
S'diag_save_in'
p17863
sS'required'
p17864
I00
sS'group_name'
p17865
S'Advanced'
p17866
sa(dp17867
S'description'
p17868
S'Ratio of surface energy to GB energy\n'
p17869
sS'cpp_type'
p17870
S'double'
p17871
sS'default'
p17872
S'1'
p17873
sS'name'
p17874
S'en_ratio'
p17875
sS'required'
p17876
I00
sS'group_name'
p17877
Nsa(dp17878
S'description'
p17879
S'Determines whether this object is calculated using an implicit or explicit form\n'
p17880
sS'cpp_type'
p17881
S'bool'
p17882
sS'default'
p17883
S'1'
p17884
sS'name'
p17885
S'implicit'
p17886
sS'required'
p17887
I00
sS'group_name'
p17888
S'Advanced'
p17889
sa(dp17890
S'description'
p17891
S'The mobility used with the kernel\n'
p17892
sS'cpp_type'
p17893
S'MaterialPropertyName'
p17894
sS'default'
p17895
S'L'
p17896
sS'name'
p17897
S'mob_name'
p17898
sS'required'
p17899
I00
sS'group_name'
p17900
Nsa(dp17901
S'description'
p17902
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17903
sS'cpp_type'
p17904
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p17905
sS'default'
p17906
g3
sS'name'
p17907
S'save_in'
p17908
sS'required'
p17909
I00
sS'group_name'
p17910
S'Advanced'
p17911
sa(dp17912
S'description'
p17913
S'The seed for the master random number generator\n'
p17914
sS'cpp_type'
p17915
S'unsigned int'
p17916
sS'default'
p17917
S'0'
p17918
sS'name'
p17919
S'seed'
p17920
sS'required'
p17921
I00
sS'group_name'
p17922
S'Advanced'
p17923
sa(dp17924
S'description'
p17925
g3
sS'cpp_type'
p17926
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p17927
sS'default'
p17928
S'ACGBPoly'
p17929
sS'name'
p17930
S'type'
p17931
sS'required'
p17932
I00
sS'group_name'
p17933
Nsa(dp17934
S'description'
p17935
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p17936
sS'cpp_type'
p17937
S'bool'
p17938
sS'default'
p17939
S'0'
p17940
sS'name'
p17941
S'use_displaced_mesh'
p17942
sS'required'
p17943
I00
sS'group_name'
p17944
S'Advanced'
p17945
sa(dp17946
S'description'
p17947
S'The name of the variable that this Kernel operates on\n'
p17948
sS'cpp_type'
p17949
S'NonlinearVariableName'
p17950
sS'default'
p17951
g3
sS'name'
p17952
S'variable'
p17953
sS'required'
p17954
I01
sS'group_name'
p17955
NsasS'name'
p17956
S'/Kernels/ACGBPoly'
p17957
sa(dp17958
S'description'
p17959
S'Grain-Boundary model poly crystaline interface Allen-Cahn Kernel\n'
p17960
sS'subblocks'
p17961
NsS'parameters'
p17962
(lp17963
(dp17964
S'description'
p17965
S'temperature\n'
p17966
sS'cpp_type'
p17967
S'std::vector<VariableName>'
p17968
sS'default'
p17969
g3
sS'name'
p17970
S'T'
p17971
sS'required'
p17972
I00
sS'group_name'
p17973
Nsa(dp17974
S'description'
p17975
S'Vector of nonlinear variable arguments this object depends ons\n'
p17976
sS'cpp_type'
p17977
S'std::vector<VariableName>'
p17978
sS'default'
p17979
g3
sS'name'
p17980
S'args'
p17981
sS'required'
p17982
I00
sS'group_name'
p17983
Nsa(dp17984
S'description'
p17985
S'The list of block ids (SubdomainID) that this object will be applied\n'
p17986
sS'cpp_type'
p17987
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p17988
sS'default'
p17989
g3
sS'name'
p17990
S'block'
p17991
sS'required'
p17992
I00
sS'group_name'
p17993
Nsa(dp17994
S'description'
p17995
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p17996
sS'cpp_type'
p17997
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p17998
sS'default'
p17999
g3
sS'name'
p18000
S'diag_save_in'
p18001
sS'required'
p18002
I00
sS'group_name'
p18003
S'Advanced'
p18004
sa(dp18005
S'description'
p18006
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18007
sS'cpp_type'
p18008
S'bool'
p18009
sS'default'
p18010
S'1'
p18011
sS'name'
p18012
S'implicit'
p18013
sS'required'
p18014
I00
sS'group_name'
p18015
S'Advanced'
p18016
sa(dp18017
S'description'
p18018
S'The mobility used with the kernel\n'
p18019
sS'cpp_type'
p18020
S'MaterialPropertyName'
p18021
sS'default'
p18022
S'L'
p18023
sS'name'
p18024
S'mob_name'
p18025
sS'required'
p18026
I00
sS'group_name'
p18027
Nsa(dp18028
S'description'
p18029
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18030
sS'cpp_type'
p18031
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18032
sS'default'
p18033
g3
sS'name'
p18034
S'save_in'
p18035
sS'required'
p18036
I00
sS'group_name'
p18037
S'Advanced'
p18038
sa(dp18039
S'description'
p18040
S'The seed for the master random number generator\n'
p18041
sS'cpp_type'
p18042
S'unsigned int'
p18043
sS'default'
p18044
S'0'
p18045
sS'name'
p18046
S'seed'
p18047
sS'required'
p18048
I00
sS'group_name'
p18049
S'Advanced'
p18050
sa(dp18051
S'description'
p18052
g3
sS'cpp_type'
p18053
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18054
sS'default'
p18055
S'ACGrGrPoly'
p18056
sS'name'
p18057
S'type'
p18058
sS'required'
p18059
I00
sS'group_name'
p18060
Nsa(dp18061
S'description'
p18062
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18063
sS'cpp_type'
p18064
S'bool'
p18065
sS'default'
p18066
S'0'
p18067
sS'name'
p18068
S'use_displaced_mesh'
p18069
sS'required'
p18070
I00
sS'group_name'
p18071
S'Advanced'
p18072
sa(dp18073
S'description'
p18074
S'Array of coupled variable names\n'
p18075
sS'cpp_type'
p18076
S'std::vector<VariableName>'
p18077
sS'default'
p18078
g3
sS'name'
p18079
S'v'
p18080
sS'required'
p18081
I01
sS'group_name'
p18082
Nsa(dp18083
S'description'
p18084
S'The name of the variable that this Kernel operates on\n'
p18085
sS'cpp_type'
p18086
S'NonlinearVariableName'
p18087
sS'default'
p18088
g3
sS'name'
p18089
S'variable'
p18090
sS'required'
p18091
I01
sS'group_name'
p18092
NsasS'name'
p18093
S'/Kernels/ACGrGrPoly'
p18094
sa(dp18095
S'description'
p18096
S'Gradient energy Allen-Cahn Kernel\n'
p18097
sS'subblocks'
p18098
NsS'parameters'
p18099
(lp18100
(dp18101
S'description'
p18102
S'Vector of nonlinear variable arguments this object depends on\n'
p18103
sS'cpp_type'
p18104
S'std::vector<VariableName>'
p18105
sS'default'
p18106
g3
sS'name'
p18107
S'args'
p18108
sS'required'
p18109
I00
sS'group_name'
p18110
Nsa(dp18111
S'description'
p18112
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18113
sS'cpp_type'
p18114
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p18115
sS'default'
p18116
g3
sS'name'
p18117
S'block'
p18118
sS'required'
p18119
I00
sS'group_name'
p18120
Nsa(dp18121
S'description'
p18122
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18123
sS'cpp_type'
p18124
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18125
sS'default'
p18126
g3
sS'name'
p18127
S'diag_save_in'
p18128
sS'required'
p18129
I00
sS'group_name'
p18130
S'Advanced'
p18131
sa(dp18132
S'description'
p18133
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18134
sS'cpp_type'
p18135
S'bool'
p18136
sS'default'
p18137
S'1'
p18138
sS'name'
p18139
S'implicit'
p18140
sS'required'
p18141
I00
sS'group_name'
p18142
S'Advanced'
p18143
sa(dp18144
S'description'
p18145
S'The kappa used with the kernel\n'
p18146
sS'cpp_type'
p18147
S'MaterialPropertyName'
p18148
sS'default'
p18149
S'kappa_op'
p18150
sS'name'
p18151
S'kappa_name'
p18152
sS'required'
p18153
I00
sS'group_name'
p18154
Nsa(dp18155
S'description'
p18156
S'The mobility used with the kernel\n'
p18157
sS'cpp_type'
p18158
S'MaterialPropertyName'
p18159
sS'default'
p18160
S'L'
p18161
sS'name'
p18162
S'mob_name'
p18163
sS'required'
p18164
I00
sS'group_name'
p18165
Nsa(dp18166
S'description'
p18167
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18168
sS'cpp_type'
p18169
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18170
sS'default'
p18171
g3
sS'name'
p18172
S'save_in'
p18173
sS'required'
p18174
I00
sS'group_name'
p18175
S'Advanced'
p18176
sa(dp18177
S'description'
p18178
S'The seed for the master random number generator\n'
p18179
sS'cpp_type'
p18180
S'unsigned int'
p18181
sS'default'
p18182
S'0'
p18183
sS'name'
p18184
S'seed'
p18185
sS'required'
p18186
I00
sS'group_name'
p18187
S'Advanced'
p18188
sa(dp18189
S'description'
p18190
g3
sS'cpp_type'
p18191
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18192
sS'default'
p18193
S'ACInterface'
p18194
sS'name'
p18195
S'type'
p18196
sS'required'
p18197
I00
sS'group_name'
p18198
Nsa(dp18199
S'description'
p18200
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18201
sS'cpp_type'
p18202
S'bool'
p18203
sS'default'
p18204
S'0'
p18205
sS'name'
p18206
S'use_displaced_mesh'
p18207
sS'required'
p18208
I00
sS'group_name'
p18209
S'Advanced'
p18210
sa(dp18211
S'description'
p18212
S'The name of the variable that this Kernel operates on\n'
p18213
sS'cpp_type'
p18214
S'NonlinearVariableName'
p18215
sS'default'
p18216
g3
sS'name'
p18217
S'variable'
p18218
sS'required'
p18219
I01
sS'group_name'
p18220
NsasS'name'
p18221
S'/Kernels/ACInterface'
p18222
sa(dp18223
S'description'
p18224
g3
sS'subblocks'
p18225
NsS'parameters'
p18226
(lp18227
(dp18228
S'description'
p18229
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18230
sS'cpp_type'
p18231
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p18232
sS'default'
p18233
g3
sS'name'
p18234
S'block'
p18235
sS'required'
p18236
I00
sS'group_name'
p18237
Nsa(dp18238
S'description'
p18239
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18240
sS'cpp_type'
p18241
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18242
sS'default'
p18243
g3
sS'name'
p18244
S'diag_save_in'
p18245
sS'required'
p18246
I00
sS'group_name'
p18247
S'Advanced'
p18248
sa(dp18249
S'description'
p18250
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18251
sS'cpp_type'
p18252
S'bool'
p18253
sS'default'
p18254
S'1'
p18255
sS'name'
p18256
S'implicit'
p18257
sS'required'
p18258
I00
sS'group_name'
p18259
S'Advanced'
p18260
sa(dp18261
S'description'
p18262
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18263
sS'cpp_type'
p18264
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18265
sS'default'
p18266
g3
sS'name'
p18267
S'save_in'
p18268
sS'required'
p18269
I00
sS'group_name'
p18270
S'Advanced'
p18271
sa(dp18272
S'description'
p18273
S'The seed for the master random number generator\n'
p18274
sS'cpp_type'
p18275
S'unsigned int'
p18276
sS'default'
p18277
S'0'
p18278
sS'name'
p18279
S'seed'
p18280
sS'required'
p18281
I00
sS'group_name'
p18282
S'Advanced'
p18283
sa(dp18284
S'description'
p18285
S'The Tensor to multiply the Diffusion operator by\n'
p18286
sS'cpp_type'
p18287
S'libMesh::TensorValue<double>'
p18288
sS'default'
p18289
g3
sS'name'
p18290
S'tensor_coeff'
p18291
sS'required'
p18292
I01
sS'group_name'
p18293
Nsa(dp18294
S'description'
p18295
g3
sS'cpp_type'
p18296
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18297
sS'default'
p18298
S'AnisotropicDiffusion'
p18299
sS'name'
p18300
S'type'
p18301
sS'required'
p18302
I00
sS'group_name'
p18303
Nsa(dp18304
S'description'
p18305
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18306
sS'cpp_type'
p18307
S'bool'
p18308
sS'default'
p18309
S'0'
p18310
sS'name'
p18311
S'use_displaced_mesh'
p18312
sS'required'
p18313
I00
sS'group_name'
p18314
S'Advanced'
p18315
sa(dp18316
S'description'
p18317
S'The name of the variable that this Kernel operates on\n'
p18318
sS'cpp_type'
p18319
S'NonlinearVariableName'
p18320
sS'default'
p18321
g3
sS'name'
p18322
S'variable'
p18323
sS'required'
p18324
I01
sS'group_name'
p18325
NsasS'name'
p18326
S'/Kernels/AnisotropicDiffusion'
p18327
sa(dp18328
S'description'
p18329
g3
sS'subblocks'
p18330
NsS'parameters'
p18331
(lp18332
(dp18333
S'description'
p18334
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18335
sS'cpp_type'
p18336
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p18337
sS'default'
p18338
g3
sS'name'
p18339
S'block'
p18340
sS'required'
p18341
I00
sS'group_name'
p18342
Nsa(dp18343
S'description'
p18344
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18345
sS'cpp_type'
p18346
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18347
sS'default'
p18348
g3
sS'name'
p18349
S'diag_save_in'
p18350
sS'required'
p18351
I00
sS'group_name'
p18352
S'Advanced'
p18353
sa(dp18354
S'description'
p18355
S'A function that describes the body force\n'
p18356
sS'cpp_type'
p18357
S'FunctionName'
p18358
sS'default'
p18359
S'1'
p18360
sS'name'
p18361
S'function'
p18362
sS'required'
p18363
I00
sS'group_name'
p18364
Nsa(dp18365
S'description'
p18366
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18367
sS'cpp_type'
p18368
S'bool'
p18369
sS'default'
p18370
S'1'
p18371
sS'name'
p18372
S'implicit'
p18373
sS'required'
p18374
I00
sS'group_name'
p18375
S'Advanced'
p18376
sa(dp18377
S'description'
p18378
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18379
sS'cpp_type'
p18380
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18381
sS'default'
p18382
g3
sS'name'
p18383
S'save_in'
p18384
sS'required'
p18385
I00
sS'group_name'
p18386
S'Advanced'
p18387
sa(dp18388
S'description'
p18389
S'The seed for the master random number generator\n'
p18390
sS'cpp_type'
p18391
S'unsigned int'
p18392
sS'default'
p18393
S'0'
p18394
sS'name'
p18395
S'seed'
p18396
sS'required'
p18397
I00
sS'group_name'
p18398
S'Advanced'
p18399
sa(dp18400
S'description'
p18401
g3
sS'cpp_type'
p18402
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18403
sS'default'
p18404
S'BodyForce'
p18405
sS'name'
p18406
S'type'
p18407
sS'required'
p18408
I00
sS'group_name'
p18409
Nsa(dp18410
S'description'
p18411
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18412
sS'cpp_type'
p18413
S'bool'
p18414
sS'default'
p18415
S'0'
p18416
sS'name'
p18417
S'use_displaced_mesh'
p18418
sS'required'
p18419
I00
sS'group_name'
p18420
S'Advanced'
p18421
sa(dp18422
S'description'
p18423
g3
sS'cpp_type'
p18424
S'double'
p18425
sS'default'
p18426
S'0'
p18427
sS'name'
p18428
S'value'
p18429
sS'required'
p18430
I00
sS'group_name'
p18431
Nsa(dp18432
S'description'
p18433
S'The name of the variable that this Kernel operates on\n'
p18434
sS'cpp_type'
p18435
S'NonlinearVariableName'
p18436
sS'default'
p18437
g3
sS'name'
p18438
S'variable'
p18439
sS'required'
p18440
I01
sS'group_name'
p18441
NsasS'name'
p18442
S'/Kernels/BodyForce'
p18443
sa(dp18444
S'description'
p18445
S'Gradient energy Cahn-Hilliard Kernel\n'
p18446
sS'subblocks'
p18447
NsS'parameters'
p18448
(lp18449
(dp18450
S'description'
p18451
S'Vector of arguments to mobility\n'
p18452
sS'cpp_type'
p18453
S'std::vector<VariableName>'
p18454
sS'default'
p18455
g3
sS'name'
p18456
S'args'
p18457
sS'required'
p18458
I00
sS'group_name'
p18459
Nsa(dp18460
S'description'
p18461
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18462
sS'cpp_type'
p18463
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p18464
sS'default'
p18465
g3
sS'name'
p18466
S'block'
p18467
sS'required'
p18468
I00
sS'group_name'
p18469
Nsa(dp18470
S'description'
p18471
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18472
sS'cpp_type'
p18473
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18474
sS'default'
p18475
g3
sS'name'
p18476
S'diag_save_in'
p18477
sS'required'
p18478
I00
sS'group_name'
p18479
S'Advanced'
p18480
sa(dp18481
S'description'
p18482
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18483
sS'cpp_type'
p18484
S'bool'
p18485
sS'default'
p18486
S'1'
p18487
sS'name'
p18488
S'implicit'
p18489
sS'required'
p18490
I00
sS'group_name'
p18491
S'Advanced'
p18492
sa(dp18493
S'description'
p18494
S'The kappa used with the kernel\n'
p18495
sS'cpp_type'
p18496
S'MaterialPropertyName'
p18497
sS'default'
p18498
g3
sS'name'
p18499
S'kappa_name'
p18500
sS'required'
p18501
I01
sS'group_name'
p18502
Nsa(dp18503
S'description'
p18504
S'The mobility used with the kernel\n'
p18505
sS'cpp_type'
p18506
S'MaterialPropertyName'
p18507
sS'default'
p18508
g3
sS'name'
p18509
S'mob_name'
p18510
sS'required'
p18511
I01
sS'group_name'
p18512
Nsa(dp18513
S'description'
p18514
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18515
sS'cpp_type'
p18516
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18517
sS'default'
p18518
g3
sS'name'
p18519
S'save_in'
p18520
sS'required'
p18521
I00
sS'group_name'
p18522
S'Advanced'
p18523
sa(dp18524
S'description'
p18525
S'The seed for the master random number generator\n'
p18526
sS'cpp_type'
p18527
S'unsigned int'
p18528
sS'default'
p18529
S'0'
p18530
sS'name'
p18531
S'seed'
p18532
sS'required'
p18533
I00
sS'group_name'
p18534
S'Advanced'
p18535
sa(dp18536
S'description'
p18537
g3
sS'cpp_type'
p18538
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18539
sS'default'
p18540
S'CHInterface'
p18541
sS'name'
p18542
S'type'
p18543
sS'required'
p18544
I00
sS'group_name'
p18545
Nsa(dp18546
S'description'
p18547
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18548
sS'cpp_type'
p18549
S'bool'
p18550
sS'default'
p18551
S'0'
p18552
sS'name'
p18553
S'use_displaced_mesh'
p18554
sS'required'
p18555
I00
sS'group_name'
p18556
S'Advanced'
p18557
sa(dp18558
S'description'
p18559
S'The name of the variable that this Kernel operates on\n'
p18560
sS'cpp_type'
p18561
S'NonlinearVariableName'
p18562
sS'default'
p18563
g3
sS'name'
p18564
S'variable'
p18565
sS'required'
p18566
I01
sS'group_name'
p18567
NsasS'name'
p18568
S'/Kernels/CHInterface'
p18569
sa(dp18570
S'description'
p18571
S'Simple demonstration Cahn-Hilliard Kernel using an algebraic double-well potential\n'
p18572
sS'subblocks'
p18573
NsS'parameters'
p18574
(lp18575
(dp18576
S'description'
p18577
S'Vector of arguments to mobility\n'
p18578
sS'cpp_type'
p18579
S'std::vector<VariableName>'
p18580
sS'default'
p18581
g3
sS'name'
p18582
S'args'
p18583
sS'required'
p18584
I00
sS'group_name'
p18585
Nsa(dp18586
S'description'
p18587
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18588
sS'cpp_type'
p18589
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p18590
sS'default'
p18591
g3
sS'name'
p18592
S'block'
p18593
sS'required'
p18594
I00
sS'group_name'
p18595
Nsa(dp18596
S'description'
p18597
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18598
sS'cpp_type'
p18599
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18600
sS'default'
p18601
g3
sS'name'
p18602
S'diag_save_in'
p18603
sS'required'
p18604
I00
sS'group_name'
p18605
S'Advanced'
p18606
sa(dp18607
S'description'
p18608
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18609
sS'cpp_type'
p18610
S'bool'
p18611
sS'default'
p18612
S'1'
p18613
sS'name'
p18614
S'implicit'
p18615
sS'required'
p18616
I00
sS'group_name'
p18617
S'Advanced'
p18618
sa(dp18619
S'description'
p18620
S'The mobility used with the kernel\n'
p18621
sS'cpp_type'
p18622
S'MaterialPropertyName'
p18623
sS'default'
p18624
S'M'
p18625
sS'name'
p18626
S'mob_name'
p18627
sS'required'
p18628
I00
sS'group_name'
p18629
Nsa(dp18630
S'description'
p18631
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18632
sS'cpp_type'
p18633
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18634
sS'default'
p18635
g3
sS'name'
p18636
S'save_in'
p18637
sS'required'
p18638
I00
sS'group_name'
p18639
S'Advanced'
p18640
sa(dp18641
S'description'
p18642
S'The seed for the master random number generator\n'
p18643
sS'cpp_type'
p18644
S'unsigned int'
p18645
sS'default'
p18646
S'0'
p18647
sS'name'
p18648
S'seed'
p18649
sS'required'
p18650
I00
sS'group_name'
p18651
S'Advanced'
p18652
sa(dp18653
S'description'
p18654
g3
sS'cpp_type'
p18655
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18656
sS'default'
p18657
S'CHMath'
p18658
sS'name'
p18659
S'type'
p18660
sS'required'
p18661
I00
sS'group_name'
p18662
Nsa(dp18663
S'description'
p18664
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18665
sS'cpp_type'
p18666
S'bool'
p18667
sS'default'
p18668
S'0'
p18669
sS'name'
p18670
S'use_displaced_mesh'
p18671
sS'required'
p18672
I00
sS'group_name'
p18673
S'Advanced'
p18674
sa(dp18675
S'description'
p18676
S'The name of the variable that this Kernel operates on\n'
p18677
sS'cpp_type'
p18678
S'NonlinearVariableName'
p18679
sS'default'
p18680
g3
sS'name'
p18681
S'variable'
p18682
sS'required'
p18683
I01
sS'group_name'
p18684
NsasS'name'
p18685
S'/Kernels/CHMath'
p18686
sa(dp18687
S'description'
p18688
g3
sS'subblocks'
p18689
NsS'parameters'
p18690
(lp18691
(dp18692
S'description'
p18693
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18694
sS'cpp_type'
p18695
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p18696
sS'default'
p18697
g3
sS'name'
p18698
S'block'
p18699
sS'required'
p18700
I00
sS'group_name'
p18701
Nsa(dp18702
S'description'
p18703
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18704
sS'cpp_type'
p18705
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18706
sS'default'
p18707
g3
sS'name'
p18708
S'diag_save_in'
p18709
sS'required'
p18710
I00
sS'group_name'
p18711
S'Advanced'
p18712
sa(dp18713
S'description'
p18714
S'Field variable for gradient of convective term\n'
p18715
sS'cpp_type'
p18716
S'std::vector<VariableName>'
p18717
sS'default'
p18718
g3
sS'name'
p18719
S'grad_velocity'
p18720
sS'required'
p18721
I01
sS'group_name'
p18722
Nsa(dp18723
S'description'
p18724
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18725
sS'cpp_type'
p18726
S'bool'
p18727
sS'default'
p18728
S'1'
p18729
sS'name'
p18730
S'implicit'
p18731
sS'required'
p18732
I00
sS'group_name'
p18733
S'Advanced'
p18734
sa(dp18735
S'description'
p18736
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18737
sS'cpp_type'
p18738
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18739
sS'default'
p18740
g3
sS'name'
p18741
S'save_in'
p18742
sS'required'
p18743
I00
sS'group_name'
p18744
S'Advanced'
p18745
sa(dp18746
S'description'
p18747
S'The seed for the master random number generator\n'
p18748
sS'cpp_type'
p18749
S'unsigned int'
p18750
sS'default'
p18751
S'0'
p18752
sS'name'
p18753
S'seed'
p18754
sS'required'
p18755
I00
sS'group_name'
p18756
S'Advanced'
p18757
sa(dp18758
S'description'
p18759
g3
sS'cpp_type'
p18760
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18761
sS'default'
p18762
S'ConvectionSK'
p18763
sS'name'
p18764
S'type'
p18765
sS'required'
p18766
I00
sS'group_name'
p18767
Nsa(dp18768
S'description'
p18769
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18770
sS'cpp_type'
p18771
S'bool'
p18772
sS'default'
p18773
S'0'
p18774
sS'name'
p18775
S'use_displaced_mesh'
p18776
sS'required'
p18777
I00
sS'group_name'
p18778
S'Advanced'
p18779
sa(dp18780
S'description'
p18781
S'The name of the variable that this Kernel operates on\n'
p18782
sS'cpp_type'
p18783
S'NonlinearVariableName'
p18784
sS'default'
p18785
g3
sS'name'
p18786
S'variable'
p18787
sS'required'
p18788
I01
sS'group_name'
p18789
NsasS'name'
p18790
S'/Kernels/ConvectionSK'
p18791
sa(dp18792
S'description'
p18793
g3
sS'subblocks'
p18794
NsS'parameters'
p18795
(lp18796
(dp18797
S'description'
p18798
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18799
sS'cpp_type'
p18800
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p18801
sS'default'
p18802
g3
sS'name'
p18803
S'block'
p18804
sS'required'
p18805
I00
sS'group_name'
p18806
Nsa(dp18807
S'description'
p18808
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18809
sS'cpp_type'
p18810
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18811
sS'default'
p18812
g3
sS'name'
p18813
S'diag_save_in'
p18814
sS'required'
p18815
I00
sS'group_name'
p18816
S'Advanced'
p18817
sa(dp18818
S'description'
p18819
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18820
sS'cpp_type'
p18821
S'bool'
p18822
sS'default'
p18823
S'1'
p18824
sS'name'
p18825
S'implicit'
p18826
sS'required'
p18827
I00
sS'group_name'
p18828
S'Advanced'
p18829
sa(dp18830
S'description'
p18831
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18832
sS'cpp_type'
p18833
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18834
sS'default'
p18835
g3
sS'name'
p18836
S'save_in'
p18837
sS'required'
p18838
I00
sS'group_name'
p18839
S'Advanced'
p18840
sa(dp18841
S'description'
p18842
S'The seed for the master random number generator\n'
p18843
sS'cpp_type'
p18844
S'unsigned int'
p18845
sS'default'
p18846
S'0'
p18847
sS'name'
p18848
S'seed'
p18849
sS'required'
p18850
I00
sS'group_name'
p18851
S'Advanced'
p18852
sa(dp18853
S'description'
p18854
g3
sS'cpp_type'
p18855
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18856
sS'default'
p18857
S'CoupledForce'
p18858
sS'name'
p18859
S'type'
p18860
sS'required'
p18861
I00
sS'group_name'
p18862
Nsa(dp18863
S'description'
p18864
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18865
sS'cpp_type'
p18866
S'bool'
p18867
sS'default'
p18868
S'0'
p18869
sS'name'
p18870
S'use_displaced_mesh'
p18871
sS'required'
p18872
I00
sS'group_name'
p18873
S'Advanced'
p18874
sa(dp18875
S'description'
p18876
S'The coupled variable which provides the force\n'
p18877
sS'cpp_type'
p18878
S'std::vector<VariableName>'
p18879
sS'default'
p18880
g3
sS'name'
p18881
S'v'
p18882
sS'required'
p18883
I01
sS'group_name'
p18884
Nsa(dp18885
S'description'
p18886
S'The name of the variable that this Kernel operates on\n'
p18887
sS'cpp_type'
p18888
S'NonlinearVariableName'
p18889
sS'default'
p18890
g3
sS'name'
p18891
S'variable'
p18892
sS'required'
p18893
I01
sS'group_name'
p18894
NsasS'name'
p18895
S'/Kernels/CoupledForce'
p18896
sa(dp18897
S'description'
p18898
S'Time derivative Kernel that acts on a coupled variable\n'
p18899
sS'subblocks'
p18900
NsS'parameters'
p18901
(lp18902
(dp18903
S'description'
p18904
S'The list of block ids (SubdomainID) that this object will be applied\n'
p18905
sS'cpp_type'
p18906
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p18907
sS'default'
p18908
g3
sS'name'
p18909
S'block'
p18910
sS'required'
p18911
I00
sS'group_name'
p18912
Nsa(dp18913
S'description'
p18914
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18915
sS'cpp_type'
p18916
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18917
sS'default'
p18918
g3
sS'name'
p18919
S'diag_save_in'
p18920
sS'required'
p18921
I00
sS'group_name'
p18922
S'Advanced'
p18923
sa(dp18924
S'description'
p18925
S'Determines whether this object is calculated using an implicit or explicit form\n'
p18926
sS'cpp_type'
p18927
S'bool'
p18928
sS'default'
p18929
S'1'
p18930
sS'name'
p18931
S'implicit'
p18932
sS'required'
p18933
I00
sS'group_name'
p18934
S'Advanced'
p18935
sa(dp18936
S'description'
p18937
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p18938
sS'cpp_type'
p18939
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p18940
sS'default'
p18941
g3
sS'name'
p18942
S'save_in'
p18943
sS'required'
p18944
I00
sS'group_name'
p18945
S'Advanced'
p18946
sa(dp18947
S'description'
p18948
S'The seed for the master random number generator\n'
p18949
sS'cpp_type'
p18950
S'unsigned int'
p18951
sS'default'
p18952
S'0'
p18953
sS'name'
p18954
S'seed'
p18955
sS'required'
p18956
I00
sS'group_name'
p18957
S'Advanced'
p18958
sa(dp18959
S'description'
p18960
g3
sS'cpp_type'
p18961
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p18962
sS'default'
p18963
S'CoupledTimeDerivative'
p18964
sS'name'
p18965
S'type'
p18966
sS'required'
p18967
I00
sS'group_name'
p18968
Nsa(dp18969
S'description'
p18970
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p18971
sS'cpp_type'
p18972
S'bool'
p18973
sS'default'
p18974
S'0'
p18975
sS'name'
p18976
S'use_displaced_mesh'
p18977
sS'required'
p18978
I00
sS'group_name'
p18979
S'Advanced'
p18980
sa(dp18981
S'description'
p18982
S'Coupled variable\n'
p18983
sS'cpp_type'
p18984
S'std::vector<VariableName>'
p18985
sS'default'
p18986
g3
sS'name'
p18987
S'v'
p18988
sS'required'
p18989
I01
sS'group_name'
p18990
Nsa(dp18991
S'description'
p18992
S'The name of the variable that this Kernel operates on\n'
p18993
sS'cpp_type'
p18994
S'NonlinearVariableName'
p18995
sS'default'
p18996
g3
sS'name'
p18997
S'variable'
p18998
sS'required'
p18999
I01
sS'group_name'
p19000
NsasS'name'
p19001
S'/Kernels/CoupledTimeDerivative'
p19002
sa(dp19003
S'description'
p19004
g3
sS'subblocks'
p19005
NsS'parameters'
p19006
(lp19007
(dp19008
S'description'
p19009
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19010
sS'cpp_type'
p19011
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19012
sS'default'
p19013
g3
sS'name'
p19014
S'block'
p19015
sS'required'
p19016
I00
sS'group_name'
p19017
Nsa(dp19018
S'description'
p19019
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19020
sS'cpp_type'
p19021
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19022
sS'default'
p19023
g3
sS'name'
p19024
S'diag_save_in'
p19025
sS'required'
p19026
I00
sS'group_name'
p19027
S'Advanced'
p19028
sa(dp19029
S'description'
p19030
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19031
sS'cpp_type'
p19032
S'bool'
p19033
sS'default'
p19034
S'1'
p19035
sS'name'
p19036
S'implicit'
p19037
sS'required'
p19038
I00
sS'group_name'
p19039
S'Advanced'
p19040
sa(dp19041
S'description'
p19042
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19043
sS'cpp_type'
p19044
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19045
sS'default'
p19046
g3
sS'name'
p19047
S'save_in'
p19048
sS'required'
p19049
I00
sS'group_name'
p19050
S'Advanced'
p19051
sa(dp19052
S'description'
p19053
S'The seed for the master random number generator\n'
p19054
sS'cpp_type'
p19055
S'unsigned int'
p19056
sS'default'
p19057
S'0'
p19058
sS'name'
p19059
S'seed'
p19060
sS'required'
p19061
I00
sS'group_name'
p19062
S'Advanced'
p19063
sa(dp19064
S'description'
p19065
g3
sS'cpp_type'
p19066
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19067
sS'default'
p19068
S'Diffusion'
p19069
sS'name'
p19070
S'type'
p19071
sS'required'
p19072
I00
sS'group_name'
p19073
Nsa(dp19074
S'description'
p19075
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19076
sS'cpp_type'
p19077
S'bool'
p19078
sS'default'
p19079
S'0'
p19080
sS'name'
p19081
S'use_displaced_mesh'
p19082
sS'required'
p19083
I00
sS'group_name'
p19084
S'Advanced'
p19085
sa(dp19086
S'description'
p19087
S'The name of the variable that this Kernel operates on\n'
p19088
sS'cpp_type'
p19089
S'NonlinearVariableName'
p19090
sS'default'
p19091
g3
sS'name'
p19092
S'variable'
p19093
sS'required'
p19094
I01
sS'group_name'
p19095
NsasS'name'
p19096
S'/Kernels/Diffusion'
p19097
sa(dp19098
S'description'
p19099
g3
sS'subblocks'
p19100
NsS'parameters'
p19101
(lp19102
(dp19103
S'description'
p19104
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19105
sS'cpp_type'
p19106
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19107
sS'default'
p19108
g3
sS'name'
p19109
S'block'
p19110
sS'required'
p19111
I00
sS'group_name'
p19112
Nsa(dp19113
S'description'
p19114
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19115
sS'cpp_type'
p19116
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19117
sS'default'
p19118
g3
sS'name'
p19119
S'diag_save_in'
p19120
sS'required'
p19121
I00
sS'group_name'
p19122
S'Advanced'
p19123
sa(dp19124
S'description'
p19125
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19126
sS'cpp_type'
p19127
S'bool'
p19128
sS'default'
p19129
S'1'
p19130
sS'name'
p19131
S'implicit'
p19132
sS'required'
p19133
I00
sS'group_name'
p19134
S'Advanced'
p19135
sa(dp19136
S'description'
p19137
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19138
sS'cpp_type'
p19139
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19140
sS'default'
p19141
g3
sS'name'
p19142
S'save_in'
p19143
sS'required'
p19144
I00
sS'group_name'
p19145
S'Advanced'
p19146
sa(dp19147
S'description'
p19148
S'The seed for the master random number generator\n'
p19149
sS'cpp_type'
p19150
S'unsigned int'
p19151
sS'default'
p19152
S'0'
p19153
sS'name'
p19154
S'seed'
p19155
sS'required'
p19156
I00
sS'group_name'
p19157
S'Advanced'
p19158
sa(dp19159
S'description'
p19160
g3
sS'cpp_type'
p19161
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19162
sS'default'
p19163
S'DiffusionSK'
p19164
sS'name'
p19165
S'type'
p19166
sS'required'
p19167
I00
sS'group_name'
p19168
Nsa(dp19169
S'description'
p19170
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19171
sS'cpp_type'
p19172
S'bool'
p19173
sS'default'
p19174
S'0'
p19175
sS'name'
p19176
S'use_displaced_mesh'
p19177
sS'required'
p19178
I00
sS'group_name'
p19179
S'Advanced'
p19180
sa(dp19181
S'description'
p19182
S'The name of the variable that this Kernel operates on\n'
p19183
sS'cpp_type'
p19184
S'NonlinearVariableName'
p19185
sS'default'
p19186
g3
sS'name'
p19187
S'variable'
p19188
sS'required'
p19189
I01
sS'group_name'
p19190
NsasS'name'
p19191
S'/Kernels/DiffusionSK'
p19192
sa(dp19193
S'description'
p19194
g3
sS'subblocks'
p19195
NsS'parameters'
p19196
(lp19197
(dp19198
S'description'
p19199
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19200
sS'cpp_type'
p19201
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19202
sS'default'
p19203
g3
sS'name'
p19204
S'block'
p19205
sS'required'
p19206
I00
sS'group_name'
p19207
Nsa(dp19208
S'description'
p19209
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19210
sS'cpp_type'
p19211
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19212
sS'default'
p19213
g3
sS'name'
p19214
S'diag_save_in'
p19215
sS'required'
p19216
I00
sS'group_name'
p19217
S'Advanced'
p19218
sa(dp19219
S'description'
p19220
S'Use for eigenvalue problem (true) or source problem (false)\n'
p19221
sS'cpp_type'
p19222
S'bool'
p19223
sS'default'
p19224
S'1'
p19225
sS'name'
p19226
S'eigen'
p19227
sS'required'
p19228
I00
sS'group_name'
p19229
Nsa(dp19230
S'description'
p19231
S'The name of the postprocessor that provides the eigenvalue.\n'
p19232
sS'cpp_type'
p19233
S'PostprocessorName'
p19234
sS'default'
p19235
S'1'
p19236
sS'name'
p19237
S'eigen_postprocessor'
p19238
sS'required'
p19239
I00
sS'group_name'
p19240
Nsa(dp19241
S'description'
p19242
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19243
sS'cpp_type'
p19244
S'bool'
p19245
sS'default'
p19246
S'1'
p19247
sS'name'
p19248
S'implicit'
p19249
sS'required'
p19250
I00
sS'group_name'
p19251
S'Advanced'
p19252
sa(dp19253
S'description'
p19254
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19255
sS'cpp_type'
p19256
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19257
sS'default'
p19258
g3
sS'name'
p19259
S'save_in'
p19260
sS'required'
p19261
I00
sS'group_name'
p19262
S'Advanced'
p19263
sa(dp19264
S'description'
p19265
S'The seed for the master random number generator\n'
p19266
sS'cpp_type'
p19267
S'unsigned int'
p19268
sS'default'
p19269
S'0'
p19270
sS'name'
p19271
S'seed'
p19272
sS'required'
p19273
I00
sS'group_name'
p19274
S'Advanced'
p19275
sa(dp19276
S'description'
p19277
g3
sS'cpp_type'
p19278
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19279
sS'default'
p19280
S'MassEigenKernel'
p19281
sS'name'
p19282
S'type'
p19283
sS'required'
p19284
I00
sS'group_name'
p19285
Nsa(dp19286
S'description'
p19287
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19288
sS'cpp_type'
p19289
S'bool'
p19290
sS'default'
p19291
S'0'
p19292
sS'name'
p19293
S'use_displaced_mesh'
p19294
sS'required'
p19295
I00
sS'group_name'
p19296
S'Advanced'
p19297
sa(dp19298
S'description'
p19299
S'The name of the variable that this Kernel operates on\n'
p19300
sS'cpp_type'
p19301
S'NonlinearVariableName'
p19302
sS'default'
p19303
g3
sS'name'
p19304
S'variable'
p19305
sS'required'
p19306
I01
sS'group_name'
p19307
NsasS'name'
p19308
S'/Kernels/MassEigenKernel'
p19309
sa(dp19310
S'description'
p19311
g3
sS'subblocks'
p19312
NsS'parameters'
p19313
(lp19314
(dp19315
S'description'
p19316
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19317
sS'cpp_type'
p19318
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19319
sS'default'
p19320
g3
sS'name'
p19321
S'block'
p19322
sS'required'
p19323
I00
sS'group_name'
p19324
Nsa(dp19325
S'description'
p19326
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19327
sS'cpp_type'
p19328
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19329
sS'default'
p19330
g3
sS'name'
p19331
S'diag_save_in'
p19332
sS'required'
p19333
I00
sS'group_name'
p19334
S'Advanced'
p19335
sa(dp19336
S'description'
p19337
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19338
sS'cpp_type'
p19339
S'bool'
p19340
sS'default'
p19341
S'1'
p19342
sS'name'
p19343
S'implicit'
p19344
sS'required'
p19345
I00
sS'group_name'
p19346
S'Advanced'
p19347
sa(dp19348
S'description'
p19349
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19350
sS'cpp_type'
p19351
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19352
sS'default'
p19353
g3
sS'name'
p19354
S'save_in'
p19355
sS'required'
p19356
I00
sS'group_name'
p19357
S'Advanced'
p19358
sa(dp19359
S'description'
p19360
S'The seed for the master random number generator\n'
p19361
sS'cpp_type'
p19362
S'unsigned int'
p19363
sS'default'
p19364
S'0'
p19365
sS'name'
p19366
S'seed'
p19367
sS'required'
p19368
I00
sS'group_name'
p19369
S'Advanced'
p19370
sa(dp19371
S'description'
p19372
g3
sS'cpp_type'
p19373
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19374
sS'default'
p19375
S'MassLumpedTimeDerivative'
p19376
sS'name'
p19377
S'type'
p19378
sS'required'
p19379
I00
sS'group_name'
p19380
Nsa(dp19381
S'description'
p19382
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19383
sS'cpp_type'
p19384
S'bool'
p19385
sS'default'
p19386
S'0'
p19387
sS'name'
p19388
S'use_displaced_mesh'
p19389
sS'required'
p19390
I00
sS'group_name'
p19391
S'Advanced'
p19392
sa(dp19393
S'description'
p19394
S'The name of the variable that this Kernel operates on\n'
p19395
sS'cpp_type'
p19396
S'NonlinearVariableName'
p19397
sS'default'
p19398
g3
sS'name'
p19399
S'variable'
p19400
sS'required'
p19401
I01
sS'group_name'
p19402
NsasS'name'
p19403
S'/Kernels/MassLumpedTimeDerivative'
p19404
sa(dp19405
S'description'
p19406
S'Diffusion equation Kernel that takes teh Diffusivity from a material property\n'
p19407
sS'subblocks'
p19408
NsS'parameters'
p19409
(lp19410
(dp19411
S'description'
p19412
S'The name of the diffusivity\n'
p19413
sS'cpp_type'
p19414
S'MaterialPropertyName'
p19415
sS'default'
p19416
S'D'
p19417
sS'name'
p19418
S'D_name'
p19419
sS'required'
p19420
I00
sS'group_name'
p19421
Nsa(dp19422
S'description'
p19423
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19424
sS'cpp_type'
p19425
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19426
sS'default'
p19427
g3
sS'name'
p19428
S'block'
p19429
sS'required'
p19430
I00
sS'group_name'
p19431
Nsa(dp19432
S'description'
p19433
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19434
sS'cpp_type'
p19435
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19436
sS'default'
p19437
g3
sS'name'
p19438
S'diag_save_in'
p19439
sS'required'
p19440
I00
sS'group_name'
p19441
S'Advanced'
p19442
sa(dp19443
S'description'
p19444
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19445
sS'cpp_type'
p19446
S'bool'
p19447
sS'default'
p19448
S'1'
p19449
sS'name'
p19450
S'implicit'
p19451
sS'required'
p19452
I00
sS'group_name'
p19453
S'Advanced'
p19454
sa(dp19455
S'description'
p19456
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19457
sS'cpp_type'
p19458
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19459
sS'default'
p19460
g3
sS'name'
p19461
S'save_in'
p19462
sS'required'
p19463
I00
sS'group_name'
p19464
S'Advanced'
p19465
sa(dp19466
S'description'
p19467
S'The seed for the master random number generator\n'
p19468
sS'cpp_type'
p19469
S'unsigned int'
p19470
sS'default'
p19471
S'0'
p19472
sS'name'
p19473
S'seed'
p19474
sS'required'
p19475
I00
sS'group_name'
p19476
S'Advanced'
p19477
sa(dp19478
S'description'
p19479
g3
sS'cpp_type'
p19480
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19481
sS'default'
p19482
S'MatDiffusion'
p19483
sS'name'
p19484
S'type'
p19485
sS'required'
p19486
I00
sS'group_name'
p19487
Nsa(dp19488
S'description'
p19489
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19490
sS'cpp_type'
p19491
S'bool'
p19492
sS'default'
p19493
S'0'
p19494
sS'name'
p19495
S'use_displaced_mesh'
p19496
sS'required'
p19497
I00
sS'group_name'
p19498
S'Advanced'
p19499
sa(dp19500
S'description'
p19501
S'The name of the variable that this Kernel operates on\n'
p19502
sS'cpp_type'
p19503
S'NonlinearVariableName'
p19504
sS'default'
p19505
g3
sS'name'
p19506
S'variable'
p19507
sS'required'
p19508
I01
sS'group_name'
p19509
NsasS'name'
p19510
S'/Kernels/MatDiffusion'
p19511
sa(dp19512
S'description'
p19513
g3
sS'subblocks'
p19514
NsS'parameters'
p19515
(lp19516
(dp19517
S'description'
p19518
S'Name of temperature variable\n'
p19519
sS'cpp_type'
p19520
S'VariableName'
p19521
sS'default'
p19522
S'NONE'
p19523
sS'name'
p19524
S'T'
p19525
sS'required'
p19526
I00
sS'group_name'
p19527
Nsa(dp19528
S'description'
p19529
S'Name of coupled concentration variable\n'
p19530
sS'cpp_type'
p19531
S'VariableName'
p19532
sS'default'
p19533
S'NONE'
p19534
sS'name'
p19535
S'c'
p19536
sS'required'
p19537
I00
sS'group_name'
p19538
Nsa(dp19539
S'description'
p19540
S'Ratio of surface to GB energy\n'
p19541
sS'cpp_type'
p19542
S'double'
p19543
sS'default'
p19544
S'1'
p19545
sS'name'
p19546
S'en_ratio'
p19547
sS'required'
p19548
I00
sS'group_name'
p19549
Nsa(dp19550
S'description'
p19551
S'Whether kernels are implicit or not\n'
p19552
sS'cpp_type'
p19553
S'bool'
p19554
sS'default'
p19555
S'1'
p19556
sS'name'
p19557
S'implicit'
p19558
sS'required'
p19559
I00
sS'group_name'
p19560
Nsa(dp19561
S'description'
p19562
S'specifies the number of grains to create\n'
p19563
sS'cpp_type'
p19564
S'unsigned int'
p19565
sS'default'
p19566
g3
sS'name'
p19567
S'op_num'
p19568
sS'required'
p19569
I01
sS'group_name'
p19570
Nsa(dp19571
S'description'
p19572
S'Whether to use displaced mesh in the kernels\n'
p19573
sS'cpp_type'
p19574
S'bool'
p19575
sS'default'
p19576
S'0'
p19577
sS'name'
p19578
S'use_displaced_mesh'
p19579
sS'required'
p19580
I00
sS'group_name'
p19581
Nsa(dp19582
S'description'
p19583
S'specifies the base name of the variables\n'
p19584
sS'cpp_type'
p19585
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19586
sS'default'
p19587
g3
sS'name'
p19588
S'var_name_base'
p19589
sS'required'
p19590
I01
sS'group_name'
p19591
NsasS'name'
p19592
S'/Kernels/PolycrystalKernel'
p19593
sa(dp19594
S'description'
p19595
g3
sS'subblocks'
p19596
NsS'parameters'
p19597
(lp19598
(dp19599
S'description'
p19600
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19601
sS'cpp_type'
p19602
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19603
sS'default'
p19604
g3
sS'name'
p19605
S'block'
p19606
sS'required'
p19607
I00
sS'group_name'
p19608
Nsa(dp19609
S'description'
p19610
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19611
sS'cpp_type'
p19612
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19613
sS'default'
p19614
g3
sS'name'
p19615
S'diag_save_in'
p19616
sS'required'
p19617
I00
sS'group_name'
p19618
S'Advanced'
p19619
sa(dp19620
S'description'
p19621
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19622
sS'cpp_type'
p19623
S'bool'
p19624
sS'default'
p19625
S'1'
p19626
sS'name'
p19627
S'implicit'
p19628
sS'required'
p19629
I00
sS'group_name'
p19630
S'Advanced'
p19631
sa(dp19632
S'description'
p19633
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19634
sS'cpp_type'
p19635
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19636
sS'default'
p19637
g3
sS'name'
p19638
S'save_in'
p19639
sS'required'
p19640
I00
sS'group_name'
p19641
S'Advanced'
p19642
sa(dp19643
S'description'
p19644
S'The seed for the master random number generator\n'
p19645
sS'cpp_type'
p19646
S'unsigned int'
p19647
sS'default'
p19648
S'0'
p19649
sS'name'
p19650
S'seed'
p19651
sS'required'
p19652
I00
sS'group_name'
p19653
S'Advanced'
p19654
sa(dp19655
S'description'
p19656
g3
sS'cpp_type'
p19657
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19658
sS'default'
p19659
S'Reaction'
p19660
sS'name'
p19661
S'type'
p19662
sS'required'
p19663
I00
sS'group_name'
p19664
Nsa(dp19665
S'description'
p19666
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19667
sS'cpp_type'
p19668
S'bool'
p19669
sS'default'
p19670
S'0'
p19671
sS'name'
p19672
S'use_displaced_mesh'
p19673
sS'required'
p19674
I00
sS'group_name'
p19675
S'Advanced'
p19676
sa(dp19677
S'description'
p19678
S'The name of the variable that this Kernel operates on\n'
p19679
sS'cpp_type'
p19680
S'NonlinearVariableName'
p19681
sS'default'
p19682
g3
sS'name'
p19683
S'variable'
p19684
sS'required'
p19685
I01
sS'group_name'
p19686
NsasS'name'
p19687
S'/Kernels/Reaction'
p19688
sa(dp19689
S'description'
p19690
S'Simple demonstration split formulation Cahn-Hilliard Kernel using an algebraic double-well potential\n'
p19691
sS'subblocks'
p19692
NsS'parameters'
p19693
(lp19694
(dp19695
S'description'
p19696
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19697
sS'cpp_type'
p19698
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19699
sS'default'
p19700
g3
sS'name'
p19701
S'block'
p19702
sS'required'
p19703
I00
sS'group_name'
p19704
Nsa(dp19705
S'description'
p19706
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19707
sS'cpp_type'
p19708
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19709
sS'default'
p19710
g3
sS'name'
p19711
S'diag_save_in'
p19712
sS'required'
p19713
I00
sS'group_name'
p19714
S'Advanced'
p19715
sa(dp19716
S'description'
p19717
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19718
sS'cpp_type'
p19719
S'bool'
p19720
sS'default'
p19721
S'1'
p19722
sS'name'
p19723
S'implicit'
p19724
sS'required'
p19725
I00
sS'group_name'
p19726
S'Advanced'
p19727
sa(dp19728
S'description'
p19729
S'The kappa used with the kernel\n'
p19730
sS'cpp_type'
p19731
S'MaterialPropertyName'
p19732
sS'default'
p19733
g3
sS'name'
p19734
S'kappa_name'
p19735
sS'required'
p19736
I01
sS'group_name'
p19737
Nsa(dp19738
S'description'
p19739
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19740
sS'cpp_type'
p19741
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19742
sS'default'
p19743
g3
sS'name'
p19744
S'save_in'
p19745
sS'required'
p19746
I00
sS'group_name'
p19747
S'Advanced'
p19748
sa(dp19749
S'description'
p19750
S'The seed for the master random number generator\n'
p19751
sS'cpp_type'
p19752
S'unsigned int'
p19753
sS'default'
p19754
S'0'
p19755
sS'name'
p19756
S'seed'
p19757
sS'required'
p19758
I00
sS'group_name'
p19759
S'Advanced'
p19760
sa(dp19761
S'description'
p19762
g3
sS'cpp_type'
p19763
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19764
sS'default'
p19765
S'SplitCHMath'
p19766
sS'name'
p19767
S'type'
p19768
sS'required'
p19769
I00
sS'group_name'
p19770
Nsa(dp19771
S'description'
p19772
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19773
sS'cpp_type'
p19774
S'bool'
p19775
sS'default'
p19776
S'0'
p19777
sS'name'
p19778
S'use_displaced_mesh'
p19779
sS'required'
p19780
I00
sS'group_name'
p19781
S'Advanced'
p19782
sa(dp19783
S'description'
p19784
S'The name of the variable that this Kernel operates on\n'
p19785
sS'cpp_type'
p19786
S'NonlinearVariableName'
p19787
sS'default'
p19788
g3
sS'name'
p19789
S'variable'
p19790
sS'required'
p19791
I01
sS'group_name'
p19792
Nsa(dp19793
S'description'
p19794
S'chem poten\n'
p19795
sS'cpp_type'
p19796
S'std::vector<VariableName>'
p19797
sS'default'
p19798
g3
sS'name'
p19799
S'w'
p19800
sS'required'
p19801
I01
sS'group_name'
p19802
NsasS'name'
p19803
S'/Kernels/SplitCHMath'
p19804
sa(dp19805
S'description'
p19806
S'Split formulation Cahn-Hilliard Kernel for the chemical potential variable\n'
p19807
sS'subblocks'
p19808
NsS'parameters'
p19809
(lp19810
(dp19811
S'description'
p19812
S'Vector of arguments to mobility\n'
p19813
sS'cpp_type'
p19814
S'std::vector<VariableName>'
p19815
sS'default'
p19816
g3
sS'name'
p19817
S'args'
p19818
sS'required'
p19819
I00
sS'group_name'
p19820
Nsa(dp19821
S'description'
p19822
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19823
sS'cpp_type'
p19824
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19825
sS'default'
p19826
g3
sS'name'
p19827
S'block'
p19828
sS'required'
p19829
I00
sS'group_name'
p19830
Nsa(dp19831
S'description'
p19832
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19833
sS'cpp_type'
p19834
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19835
sS'default'
p19836
g3
sS'name'
p19837
S'diag_save_in'
p19838
sS'required'
p19839
I00
sS'group_name'
p19840
S'Advanced'
p19841
sa(dp19842
S'description'
p19843
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19844
sS'cpp_type'
p19845
S'bool'
p19846
sS'default'
p19847
S'1'
p19848
sS'name'
p19849
S'implicit'
p19850
sS'required'
p19851
I00
sS'group_name'
p19852
S'Advanced'
p19853
sa(dp19854
S'description'
p19855
S'The mobility used with the kernel\n'
p19856
sS'cpp_type'
p19857
S'MaterialPropertyName'
p19858
sS'default'
p19859
S'mobtemp'
p19860
sS'name'
p19861
S'mob_name'
p19862
sS'required'
p19863
I00
sS'group_name'
p19864
Nsa(dp19865
S'description'
p19866
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19867
sS'cpp_type'
p19868
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19869
sS'default'
p19870
g3
sS'name'
p19871
S'save_in'
p19872
sS'required'
p19873
I00
sS'group_name'
p19874
S'Advanced'
p19875
sa(dp19876
S'description'
p19877
S'The seed for the master random number generator\n'
p19878
sS'cpp_type'
p19879
S'unsigned int'
p19880
sS'default'
p19881
S'0'
p19882
sS'name'
p19883
S'seed'
p19884
sS'required'
p19885
I00
sS'group_name'
p19886
S'Advanced'
p19887
sa(dp19888
S'description'
p19889
g3
sS'cpp_type'
p19890
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19891
sS'default'
p19892
S'SplitCHWRes'
p19893
sS'name'
p19894
S'type'
p19895
sS'required'
p19896
I00
sS'group_name'
p19897
Nsa(dp19898
S'description'
p19899
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p19900
sS'cpp_type'
p19901
S'bool'
p19902
sS'default'
p19903
S'0'
p19904
sS'name'
p19905
S'use_displaced_mesh'
p19906
sS'required'
p19907
I00
sS'group_name'
p19908
S'Advanced'
p19909
sa(dp19910
S'description'
p19911
S'The name of the variable that this Kernel operates on\n'
p19912
sS'cpp_type'
p19913
S'NonlinearVariableName'
p19914
sS'default'
p19915
g3
sS'name'
p19916
S'variable'
p19917
sS'required'
p19918
I01
sS'group_name'
p19919
NsasS'name'
p19920
S'/Kernels/SplitCHWRes'
p19921
sa(dp19922
S'description'
p19923
g3
sS'subblocks'
p19924
NsS'parameters'
p19925
(lp19926
(dp19927
S'description'
p19928
S'The list of block ids (SubdomainID) that this object will be applied\n'
p19929
sS'cpp_type'
p19930
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p19931
sS'default'
p19932
g3
sS'name'
p19933
S'block'
p19934
sS'required'
p19935
I00
sS'group_name'
p19936
Nsa(dp19937
S'description'
p19938
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19939
sS'cpp_type'
p19940
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19941
sS'default'
p19942
g3
sS'name'
p19943
S'diag_save_in'
p19944
sS'required'
p19945
I00
sS'group_name'
p19946
S'Advanced'
p19947
sa(dp19948
S'description'
p19949
S'Determines whether this object is calculated using an implicit or explicit form\n'
p19950
sS'cpp_type'
p19951
S'bool'
p19952
sS'default'
p19953
S'1'
p19954
sS'name'
p19955
S'implicit'
p19956
sS'required'
p19957
I00
sS'group_name'
p19958
S'Advanced'
p19959
sa(dp19960
S'description'
p19961
S'True for mass matrix lumping, false otherwise\n'
p19962
sS'cpp_type'
p19963
S'bool'
p19964
sS'default'
p19965
S'0'
p19966
sS'name'
p19967
S'lumping'
p19968
sS'required'
p19969
I00
sS'group_name'
p19970
Nsa(dp19971
S'description'
p19972
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p19973
sS'cpp_type'
p19974
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p19975
sS'default'
p19976
g3
sS'name'
p19977
S'save_in'
p19978
sS'required'
p19979
I00
sS'group_name'
p19980
S'Advanced'
p19981
sa(dp19982
S'description'
p19983
S'The seed for the master random number generator\n'
p19984
sS'cpp_type'
p19985
S'unsigned int'
p19986
sS'default'
p19987
S'0'
p19988
sS'name'
p19989
S'seed'
p19990
sS'required'
p19991
I00
sS'group_name'
p19992
S'Advanced'
p19993
sa(dp19994
S'description'
p19995
g3
sS'cpp_type'
p19996
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p19997
sS'default'
p19998
S'TimeDerivative'
p19999
sS'name'
p20000
S'type'
p20001
sS'required'
p20002
I00
sS'group_name'
p20003
Nsa(dp20004
S'description'
p20005
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20006
sS'cpp_type'
p20007
S'bool'
p20008
sS'default'
p20009
S'0'
p20010
sS'name'
p20011
S'use_displaced_mesh'
p20012
sS'required'
p20013
I00
sS'group_name'
p20014
S'Advanced'
p20015
sa(dp20016
S'description'
p20017
S'The name of the variable that this Kernel operates on\n'
p20018
sS'cpp_type'
p20019
S'NonlinearVariableName'
p20020
sS'default'
p20021
g3
sS'name'
p20022
S'variable'
p20023
sS'required'
p20024
I01
sS'group_name'
p20025
NsasS'name'
p20026
S'/Kernels/TimeDerivative'
p20027
sa(dp20028
S'description'
p20029
g3
sS'subblocks'
p20030
NsS'parameters'
p20031
(lp20032
(dp20033
S'description'
p20034
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20035
sS'cpp_type'
p20036
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20037
sS'default'
p20038
g3
sS'name'
p20039
S'block'
p20040
sS'required'
p20041
I00
sS'group_name'
p20042
Nsa(dp20043
S'description'
p20044
S"The name of auxiliary variables to save this Kernel's diagonal Jacobian contributions to. Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20045
sS'cpp_type'
p20046
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20047
sS'default'
p20048
g3
sS'name'
p20049
S'diag_save_in'
p20050
sS'required'
p20051
I00
sS'group_name'
p20052
S'Advanced'
p20053
sa(dp20054
S'description'
p20055
S'The forcing function\n'
p20056
sS'cpp_type'
p20057
S'FunctionName'
p20058
sS'default'
p20059
g3
sS'name'
p20060
S'function'
p20061
sS'required'
p20062
I01
sS'group_name'
p20063
Nsa(dp20064
S'description'
p20065
S'Determines whether this object is calculated using an implicit or explicit form\n'
p20066
sS'cpp_type'
p20067
S'bool'
p20068
sS'default'
p20069
S'1'
p20070
sS'name'
p20071
S'implicit'
p20072
sS'required'
p20073
I00
sS'group_name'
p20074
S'Advanced'
p20075
sa(dp20076
S'description'
p20077
S"The name of auxiliary variables to save this Kernel's residual contributions to.  Everything about that variable must match everything about this variable (the type, what blocks it's on, etc.)\n"
p20078
sS'cpp_type'
p20079
S'std::__1::vector<AuxVariableName, std::__1::allocator<AuxVariableName> >'
p20080
sS'default'
p20081
g3
sS'name'
p20082
S'save_in'
p20083
sS'required'
p20084
I00
sS'group_name'
p20085
S'Advanced'
p20086
sa(dp20087
S'description'
p20088
S'The seed for the master random number generator\n'
p20089
sS'cpp_type'
p20090
S'unsigned int'
p20091
sS'default'
p20092
S'0'
p20093
sS'name'
p20094
S'seed'
p20095
sS'required'
p20096
I00
sS'group_name'
p20097
S'Advanced'
p20098
sa(dp20099
S'description'
p20100
g3
sS'cpp_type'
p20101
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20102
sS'default'
p20103
S'UserForcingFunction'
p20104
sS'name'
p20105
S'type'
p20106
sS'required'
p20107
I00
sS'group_name'
p20108
Nsa(dp20109
S'description'
p20110
S'Whether or not this object should use the displaced mesh for computation. Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20111
sS'cpp_type'
p20112
S'bool'
p20113
sS'default'
p20114
S'0'
p20115
sS'name'
p20116
S'use_displaced_mesh'
p20117
sS'required'
p20118
I00
sS'group_name'
p20119
S'Advanced'
p20120
sa(dp20121
S'description'
p20122
S'The name of the variable that this Kernel operates on\n'
p20123
sS'cpp_type'
p20124
S'NonlinearVariableName'
p20125
sS'default'
p20126
g3
sS'name'
p20127
S'variable'
p20128
sS'required'
p20129
I01
sS'group_name'
p20130
NsasS'name'
p20131
S'/Kernels/UserForcingFunction'
p20132
sasS'parameters'
p20133
NsS'name'
p20134
S'/Kernels'
p20135
sa(dp20136
S'description'
p20137
g3
sS'subblocks'
p20138
(lp20139
(dp20140
S'description'
p20141
g3
sS'subblocks'
p20142
NsS'parameters'
p20143
(lp20144
(dp20145
S'description'
p20146
S'A string representing the Moose Object that will be built by this Action\n'
p20147
sS'cpp_type'
p20148
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20149
sS'default'
p20150
g3
sS'name'
p20151
S'type'
p20152
sS'required'
p20153
I01
sS'group_name'
p20154
NsasS'name'
p20155
S'/Materials/*'
p20156
sa(dp20157
S'description'
p20158
g3
sS'subblocks'
p20159
NsS'parameters'
p20160
(lp20161
(dp20162
S'description'
p20163
S'GB mobility input in m^4/(J*s), that overrides the temperature dependent calculation\n'
p20164
sS'cpp_type'
p20165
S'double'
p20166
sS'default'
p20167
S'-1'
p20168
sS'name'
p20169
S'GBMobility'
p20170
sS'required'
p20171
I00
sS'group_name'
p20172
Nsa(dp20173
S'description'
p20174
S'Grain boundary energy in J/m^2\n'
p20175
sS'cpp_type'
p20176
S'double'
p20177
sS'default'
p20178
g3
sS'name'
p20179
S'GBenergy'
p20180
sS'required'
p20181
I01
sS'group_name'
p20182
Nsa(dp20183
S'description'
p20184
S'Grain boundary mobility prefactor in m^4/(J*s)\n'
p20185
sS'cpp_type'
p20186
S'double'
p20187
sS'default'
p20188
S'0'
p20189
sS'name'
p20190
S'GBmob0'
p20191
sS'required'
p20192
I00
sS'group_name'
p20193
Nsa(dp20194
S'description'
p20195
S'Grain boundary migration activation energy in eV\n'
p20196
sS'cpp_type'
p20197
S'double'
p20198
sS'default'
p20199
S'0'
p20200
sS'name'
p20201
S'Q'
p20202
sS'required'
p20203
I00
sS'group_name'
p20204
Nsa(dp20205
S'description'
p20206
S'Temperature in Kelvin\n'
p20207
sS'cpp_type'
p20208
S'std::vector<VariableName>'
p20209
sS'default'
p20210
g3
sS'name'
p20211
S'T'
p20212
sS'required'
p20213
I01
sS'group_name'
p20214
Nsa(dp20215
S'description'
p20216
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20217
sS'cpp_type'
p20218
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20219
sS'default'
p20220
g3
sS'name'
p20221
S'block'
p20222
sS'required'
p20223
I00
sS'group_name'
p20224
Nsa(dp20225
S'description'
p20226
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20227
sS'cpp_type'
p20228
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20229
sS'default'
p20230
g3
sS'name'
p20231
S'boundary'
p20232
sS'required'
p20233
I00
sS'group_name'
p20234
Nsa(dp20235
S'description'
p20236
S'The GB energy constant \n'
p20237
sS'cpp_type'
p20238
S'double'
p20239
sS'default'
p20240
S'0.125'
p20241
sS'name'
p20242
S'f0s'
p20243
sS'required'
p20244
I00
sS'group_name'
p20245
Nsa(dp20246
S'description'
p20247
S'Length scale in m, where default is nm\n'
p20248
sS'cpp_type'
p20249
S'double'
p20250
sS'default'
p20251
S'1e-09'
p20252
sS'name'
p20253
S'length_scale'
p20254
sS'required'
p20255
I00
sS'group_name'
p20256
Nsa(dp20257
S'description'
p20258
S'Molar volume in m^3/mol, needed for temperature gradient driving force\n'
p20259
sS'cpp_type'
p20260
S'double'
p20261
sS'default'
p20262
S'2.462e-05'
p20263
sS'name'
p20264
S'molar_volume'
p20265
sS'required'
p20266
I00
sS'group_name'
p20267
Nsa(dp20268
S'description'
p20269
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p20270
sS'cpp_type'
p20271
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20272
sS'default'
p20273
g3
sS'name'
p20274
S'output_properties'
p20275
sS'required'
p20276
I00
sS'group_name'
p20277
S'Outputs'
p20278
sa(dp20279
S'description'
p20280
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p20281
sS'cpp_type'
p20282
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p20283
sS'default'
p20284
S'none'
p20285
sS'name'
p20286
S'outputs'
p20287
sS'required'
p20288
I00
sS'group_name'
p20289
S'Outputs'
p20290
sa(dp20291
S'description'
p20292
S'The seed for the master random number generator\n'
p20293
sS'cpp_type'
p20294
S'unsigned int'
p20295
sS'default'
p20296
S'0'
p20297
sS'name'
p20298
S'seed'
p20299
sS'required'
p20300
I00
sS'group_name'
p20301
S'Advanced'
p20302
sa(dp20303
S'description'
p20304
S'Time scale in s, where default is ns\n'
p20305
sS'cpp_type'
p20306
S'double'
p20307
sS'default'
p20308
S'1e-09'
p20309
sS'name'
p20310
S'time_scale'
p20311
sS'required'
p20312
I00
sS'group_name'
p20313
Nsa(dp20314
S'description'
p20315
g3
sS'cpp_type'
p20316
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20317
sS'default'
p20318
S'GBEvolution'
p20319
sS'name'
p20320
S'type'
p20321
sS'required'
p20322
I00
sS'group_name'
p20323
Nsa(dp20324
S'description'
p20325
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20326
sS'cpp_type'
p20327
S'bool'
p20328
sS'default'
p20329
S'0'
p20330
sS'name'
p20331
S'use_displaced_mesh'
p20332
sS'required'
p20333
I00
sS'group_name'
p20334
S'Advanced'
p20335
sa(dp20336
S'description'
p20337
S'Diffuse GB width in nm \n'
p20338
sS'cpp_type'
p20339
S'double'
p20340
sS'default'
p20341
g3
sS'name'
p20342
S'wGB'
p20343
sS'required'
p20344
I01
sS'group_name'
p20345
NsasS'name'
p20346
S'/Materials/GBEvolution'
p20347
sa(dp20348
S'description'
p20349
g3
sS'subblocks'
p20350
NsS'parameters'
p20351
(lp20352
(dp20353
S'description'
p20354
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20355
sS'cpp_type'
p20356
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20357
sS'default'
p20358
g3
sS'name'
p20359
S'block'
p20360
sS'required'
p20361
I00
sS'group_name'
p20362
Nsa(dp20363
S'description'
p20364
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20365
sS'cpp_type'
p20366
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20367
sS'default'
p20368
g3
sS'name'
p20369
S'boundary'
p20370
sS'required'
p20371
I00
sS'group_name'
p20372
Nsa(dp20373
S'description'
p20374
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p20375
sS'cpp_type'
p20376
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20377
sS'default'
p20378
g3
sS'name'
p20379
S'output_properties'
p20380
sS'required'
p20381
I00
sS'group_name'
p20382
S'Outputs'
p20383
sa(dp20384
S'description'
p20385
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p20386
sS'cpp_type'
p20387
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p20388
sS'default'
p20389
S'none'
p20390
sS'name'
p20391
S'outputs'
p20392
sS'required'
p20393
I00
sS'group_name'
p20394
S'Outputs'
p20395
sa(dp20396
S'description'
p20397
S'The names of the properties this material will have\n'
p20398
sS'cpp_type'
p20399
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20400
sS'default'
p20401
g3
sS'name'
p20402
S'prop_names'
p20403
sS'required'
p20404
I00
sS'group_name'
p20405
Nsa(dp20406
S'description'
p20407
S'The values associated with the named properties\n'
p20408
sS'cpp_type'
p20409
S'std::__1::vector<double, std::__1::allocator<double> >'
p20410
sS'default'
p20411
g3
sS'name'
p20412
S'prop_values'
p20413
sS'required'
p20414
I00
sS'group_name'
p20415
Nsa(dp20416
S'description'
p20417
S'The seed for the master random number generator\n'
p20418
sS'cpp_type'
p20419
S'unsigned int'
p20420
sS'default'
p20421
S'0'
p20422
sS'name'
p20423
S'seed'
p20424
sS'required'
p20425
I00
sS'group_name'
p20426
S'Advanced'
p20427
sa(dp20428
S'description'
p20429
g3
sS'cpp_type'
p20430
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20431
sS'default'
p20432
S'GenericConstantMaterial'
p20433
sS'name'
p20434
S'type'
p20435
sS'required'
p20436
I00
sS'group_name'
p20437
Nsa(dp20438
S'description'
p20439
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20440
sS'cpp_type'
p20441
S'bool'
p20442
sS'default'
p20443
S'0'
p20444
sS'name'
p20445
S'use_displaced_mesh'
p20446
sS'required'
p20447
I00
sS'group_name'
p20448
S'Advanced'
p20449
sasS'name'
p20450
S'/Materials/GenericConstantMaterial'
p20451
sa(dp20452
S'description'
p20453
g3
sS'subblocks'
p20454
NsS'parameters'
p20455
(lp20456
(dp20457
S'description'
p20458
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20459
sS'cpp_type'
p20460
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20461
sS'default'
p20462
g3
sS'name'
p20463
S'block'
p20464
sS'required'
p20465
I00
sS'group_name'
p20466
Nsa(dp20467
S'description'
p20468
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20469
sS'cpp_type'
p20470
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20471
sS'default'
p20472
g3
sS'name'
p20473
S'boundary'
p20474
sS'required'
p20475
I00
sS'group_name'
p20476
Nsa(dp20477
S'description'
p20478
S'Enable the declaration of old and older values\n'
p20479
sS'cpp_type'
p20480
S'bool'
p20481
sS'default'
p20482
S'0'
p20483
sS'name'
p20484
S'enable_stateful'
p20485
sS'required'
p20486
I00
sS'group_name'
p20487
Nsa(dp20488
S'description'
p20489
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p20490
sS'cpp_type'
p20491
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20492
sS'default'
p20493
g3
sS'name'
p20494
S'output_properties'
p20495
sS'required'
p20496
I00
sS'group_name'
p20497
S'Outputs'
p20498
sa(dp20499
S'description'
p20500
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p20501
sS'cpp_type'
p20502
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p20503
sS'default'
p20504
S'none'
p20505
sS'name'
p20506
S'outputs'
p20507
sS'required'
p20508
I00
sS'group_name'
p20509
S'Outputs'
p20510
sa(dp20511
S'description'
p20512
S'The names of the properties this material will have\n'
p20513
sS'cpp_type'
p20514
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20515
sS'default'
p20516
g3
sS'name'
p20517
S'prop_names'
p20518
sS'required'
p20519
I00
sS'group_name'
p20520
Nsa(dp20521
S'description'
p20522
S'The corresponding names of the functions that are going to provide the values for the variables\n'
p20523
sS'cpp_type'
p20524
S'std::__1::vector<FunctionName, std::__1::allocator<FunctionName> >'
p20525
sS'default'
p20526
g3
sS'name'
p20527
S'prop_values'
p20528
sS'required'
p20529
I00
sS'group_name'
p20530
Nsa(dp20531
S'description'
p20532
S'The seed for the master random number generator\n'
p20533
sS'cpp_type'
p20534
S'unsigned int'
p20535
sS'default'
p20536
S'0'
p20537
sS'name'
p20538
S'seed'
p20539
sS'required'
p20540
I00
sS'group_name'
p20541
S'Advanced'
p20542
sa(dp20543
S'description'
p20544
g3
sS'cpp_type'
p20545
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20546
sS'default'
p20547
S'GenericFunctionMaterial'
p20548
sS'name'
p20549
S'type'
p20550
sS'required'
p20551
I00
sS'group_name'
p20552
Nsa(dp20553
S'description'
p20554
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20555
sS'cpp_type'
p20556
S'bool'
p20557
sS'default'
p20558
S'0'
p20559
sS'name'
p20560
S'use_displaced_mesh'
p20561
sS'required'
p20562
I00
sS'group_name'
p20563
S'Advanced'
p20564
sasS'name'
p20565
S'/Materials/GenericFunctionMaterial'
p20566
sa(dp20567
S'description'
p20568
g3
sS'subblocks'
p20569
NsS'parameters'
p20570
(lp20571
(dp20572
S'description'
p20573
S'The list of block ids (SubdomainID) that this object will be applied\n'
p20574
sS'cpp_type'
p20575
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p20576
sS'default'
p20577
g3
sS'name'
p20578
S'block'
p20579
sS'required'
p20580
I00
sS'group_name'
p20581
Nsa(dp20582
S'description'
p20583
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p20584
sS'cpp_type'
p20585
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p20586
sS'default'
p20587
g3
sS'name'
p20588
S'boundary'
p20589
sS'required'
p20590
I00
sS'group_name'
p20591
Nsa(dp20592
S'description'
p20593
S'The kappa parameter for the vacancy concentration\n'
p20594
sS'cpp_type'
p20595
S'double'
p20596
sS'default'
p20597
S'1'
p20598
sS'name'
p20599
S'kappa'
p20600
sS'required'
p20601
I00
sS'group_name'
p20602
Nsa(dp20603
S'description'
p20604
S'The mobility value\n'
p20605
sS'cpp_type'
p20606
S'double'
p20607
sS'default'
p20608
g3
sS'name'
p20609
S'mob'
p20610
sS'required'
p20611
I01
sS'group_name'
p20612
Nsa(dp20613
S'description'
p20614
S'List of material properties, from this material, to output (outputs must also be defined to an output type)\n'
p20615
sS'cpp_type'
p20616
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p20617
sS'default'
p20618
g3
sS'name'
p20619
S'output_properties'
p20620
sS'required'
p20621
I00
sS'group_name'
p20622
S'Outputs'
p20623
sa(dp20624
S'description'
p20625
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p20626
sS'cpp_type'
p20627
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p20628
sS'default'
p20629
S'none'
p20630
sS'name'
p20631
S'outputs'
p20632
sS'required'
p20633
I00
sS'group_name'
p20634
S'Outputs'
p20635
sa(dp20636
S'description'
p20637
S'The seed for the master random number generator\n'
p20638
sS'cpp_type'
p20639
S'unsigned int'
p20640
sS'default'
p20641
S'0'
p20642
sS'name'
p20643
S'seed'
p20644
sS'required'
p20645
I00
sS'group_name'
p20646
S'Advanced'
p20647
sa(dp20648
S'description'
p20649
g3
sS'cpp_type'
p20650
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20651
sS'default'
p20652
S'PFMobility'
p20653
sS'name'
p20654
S'type'
p20655
sS'required'
p20656
I00
sS'group_name'
p20657
Nsa(dp20658
S'description'
p20659
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p20660
sS'cpp_type'
p20661
S'bool'
p20662
sS'default'
p20663
S'0'
p20664
sS'name'
p20665
S'use_displaced_mesh'
p20666
sS'required'
p20667
I00
sS'group_name'
p20668
S'Advanced'
p20669
sasS'name'
p20670
S'/Materials/PFMobility'
p20671
sasS'parameters'
p20672
NsS'name'
p20673
S'/Materials'
p20674
sa(dp20675
S'description'
p20676
g3
sS'subblocks'
p20677
(lp20678
(dp20679
S'description'
p20680
g3
sS'subblocks'
p20681
(lp20682
(dp20683
S'description'
p20684
g3
sS'subblocks'
p20685
NsS'parameters'
p20686
(lp20687
(dp20688
S'name'
p20689
S'centroid_partitioner_direction'
p20690
sS'cpp_type'
p20691
S'MooseEnum'
p20692
sS'default'
p20693
g3
sS'description'
p20694
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p20695
sS'required'
p20696
I00
sS'options'
p20697
S'x y z radial'
p20698
sS'group_name'
p20699
S'Partitioning'
p20700
sa(dp20701
S'name'
p20702
S'dim'
p20703
sS'cpp_type'
p20704
S'MooseEnum'
p20705
sS'default'
p20706
S'3'
p20707
sS'description'
p20708
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n'
p20709
sS'required'
p20710
I00
sS'options'
p20711
S'1 2 3'
p20712
sS'group_name'
p20713
S'Advanced'
p20714
sa(dp20715
S'name'
p20716
S'distribution'
p20717
sS'cpp_type'
p20718
S'MooseEnum'
p20719
sS'default'
p20720
S'DEFAULT'
p20721
sS'description'
p20722
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p20723
sS'required'
p20724
I00
sS'options'
p20725
S'PARALLEL SERIAL DEFAULT'
p20726
sS'group_name'
p20727
Nsa(dp20728
S'description'
p20729
S'The name of the mesh file to read\n'
p20730
sS'cpp_type'
p20731
S'MeshFileName'
p20732
sS'default'
p20733
g3
sS'name'
p20734
S'file'
p20735
sS'required'
p20736
I01
sS'group_name'
p20737
Nsa(dp20738
S'description'
p20739
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p20740
sS'cpp_type'
p20741
S'bool'
p20742
sS'default'
p20743
S'0'
p20744
sS'name'
p20745
S'nemesis'
p20746
sS'required'
p20747
I00
sS'group_name'
p20748
S'Advanced'
p20749
sa(dp20750
S'name'
p20751
S'partitioner'
p20752
sS'cpp_type'
p20753
S'MooseEnum'
p20754
sS'default'
p20755
S'default'
p20756
sS'description'
p20757
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p20758
sS'required'
p20759
I00
sS'options'
p20760
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p20761
sS'group_name'
p20762
S'Partitioning'
p20763
sa(dp20764
S'name'
p20765
S'patch_update_strategy'
p20766
sS'cpp_type'
p20767
S'MooseEnum'
p20768
sS'default'
p20769
S'never'
p20770
sS'description'
p20771
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p20772
sS'required'
p20773
I00
sS'options'
p20774
S'never always auto'
p20775
sS'group_name'
p20776
S'Advanced'
p20777
sa(dp20778
S'description'
p20779
g3
sS'cpp_type'
p20780
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20781
sS'default'
p20782
S'FileMesh'
p20783
sS'name'
p20784
S'type'
p20785
sS'required'
p20786
I00
sS'group_name'
p20787
NsasS'name'
p20788
S'/Mesh/<type>/FileMesh'
p20789
sa(dp20790
S'description'
p20791
g3
sS'subblocks'
p20792
NsS'parameters'
p20793
(lp20794
(dp20795
S'name'
p20796
S'centroid_partitioner_direction'
p20797
sS'cpp_type'
p20798
S'MooseEnum'
p20799
sS'default'
p20800
g3
sS'description'
p20801
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p20802
sS'required'
p20803
I00
sS'options'
p20804
S'x y z radial'
p20805
sS'group_name'
p20806
S'Partitioning'
p20807
sa(dp20808
S'name'
p20809
S'dim'
p20810
sS'cpp_type'
p20811
S'MooseEnum'
p20812
sS'default'
p20813
g3
sS'description'
p20814
S'The dimension of the mesh to be generated\n'
p20815
sS'required'
p20816
I01
sS'options'
p20817
S'1 2 3'
p20818
sS'group_name'
p20819
S'Main'
p20820
sa(dp20821
S'name'
p20822
S'distribution'
p20823
sS'cpp_type'
p20824
S'MooseEnum'
p20825
sS'default'
p20826
S'DEFAULT'
p20827
sS'description'
p20828
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p20829
sS'required'
p20830
I00
sS'options'
p20831
S'PARALLEL SERIAL DEFAULT'
p20832
sS'group_name'
p20833
Nsa(dp20834
S'name'
p20835
S'elem_type'
p20836
sS'cpp_type'
p20837
S'MooseEnum'
p20838
sS'default'
p20839
g3
sS'description'
p20840
S'The type of element from libMesh to generate (default: linear element for requested dimension)\n'
p20841
sS'required'
p20842
I00
sS'options'
p20843
S'EDGE EDGE2 EDGE3 EDGE4 QUAD QUAD4 QUAD8 QUAD9 TRI3 TRI6 HEX HEX8 HEX20 HEX27 TET4 TET10 PRISM6 PRISM15 PRISM18 PYRAMID5 PYRAMID13 PYRAMID14'
p20844
sS'group_name'
p20845
Nsa(dp20846
S'description'
p20847
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p20848
sS'cpp_type'
p20849
S'bool'
p20850
sS'default'
p20851
S'0'
p20852
sS'name'
p20853
S'nemesis'
p20854
sS'required'
p20855
I00
sS'group_name'
p20856
S'Advanced'
p20857
sa(dp20858
S'description'
p20859
S'Number of elements in the X direction\n'
p20860
sS'cpp_type'
p20861
S'int'
p20862
sS'default'
p20863
S'1'
p20864
sS'name'
p20865
S'nx'
p20866
sS'required'
p20867
I00
sS'group_name'
p20868
Nsa(dp20869
S'description'
p20870
S'Number of elements in the Y direction\n'
p20871
sS'cpp_type'
p20872
S'int'
p20873
sS'default'
p20874
S'1'
p20875
sS'name'
p20876
S'ny'
p20877
sS'required'
p20878
I00
sS'group_name'
p20879
Nsa(dp20880
S'description'
p20881
S'Number of elements in the Z direction\n'
p20882
sS'cpp_type'
p20883
S'int'
p20884
sS'default'
p20885
S'1'
p20886
sS'name'
p20887
S'nz'
p20888
sS'required'
p20889
I00
sS'group_name'
p20890
Nsa(dp20891
S'name'
p20892
S'partitioner'
p20893
sS'cpp_type'
p20894
S'MooseEnum'
p20895
sS'default'
p20896
S'default'
p20897
sS'description'
p20898
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p20899
sS'required'
p20900
I00
sS'options'
p20901
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p20902
sS'group_name'
p20903
S'Partitioning'
p20904
sa(dp20905
S'name'
p20906
S'patch_update_strategy'
p20907
sS'cpp_type'
p20908
S'MooseEnum'
p20909
sS'default'
p20910
S'never'
p20911
sS'description'
p20912
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p20913
sS'required'
p20914
I00
sS'options'
p20915
S'never always auto'
p20916
sS'group_name'
p20917
S'Advanced'
p20918
sa(dp20919
S'description'
p20920
g3
sS'cpp_type'
p20921
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p20922
sS'default'
p20923
S'GeneratedMesh'
p20924
sS'name'
p20925
S'type'
p20926
sS'required'
p20927
I00
sS'group_name'
p20928
Nsa(dp20929
S'description'
p20930
S'Upper X Coordinate of the generated mesh\n'
p20931
sS'cpp_type'
p20932
S'double'
p20933
sS'default'
p20934
S'1'
p20935
sS'name'
p20936
S'xmax'
p20937
sS'required'
p20938
I00
sS'group_name'
p20939
Nsa(dp20940
S'description'
p20941
S'Lower X Coordinate of the generated mesh\n'
p20942
sS'cpp_type'
p20943
S'double'
p20944
sS'default'
p20945
S'0'
p20946
sS'name'
p20947
S'xmin'
p20948
sS'required'
p20949
I00
sS'group_name'
p20950
Nsa(dp20951
S'description'
p20952
S'Upper Y Coordinate of the generated mesh\n'
p20953
sS'cpp_type'
p20954
S'double'
p20955
sS'default'
p20956
S'1'
p20957
sS'name'
p20958
S'ymax'
p20959
sS'required'
p20960
I00
sS'group_name'
p20961
Nsa(dp20962
S'description'
p20963
S'Lower Y Coordinate of the generated mesh\n'
p20964
sS'cpp_type'
p20965
S'double'
p20966
sS'default'
p20967
S'0'
p20968
sS'name'
p20969
S'ymin'
p20970
sS'required'
p20971
I00
sS'group_name'
p20972
Nsa(dp20973
S'description'
p20974
S'Upper Z Coordinate of the generated mesh\n'
p20975
sS'cpp_type'
p20976
S'double'
p20977
sS'default'
p20978
S'1'
p20979
sS'name'
p20980
S'zmax'
p20981
sS'required'
p20982
I00
sS'group_name'
p20983
Nsa(dp20984
S'description'
p20985
S'Lower Z Coordinate of the generated mesh\n'
p20986
sS'cpp_type'
p20987
S'double'
p20988
sS'default'
p20989
S'0'
p20990
sS'name'
p20991
S'zmin'
p20992
sS'required'
p20993
I00
sS'group_name'
p20994
NsasS'name'
p20995
S'/Mesh/<type>/GeneratedMesh'
p20996
sa(dp20997
S'description'
p20998
g3
sS'subblocks'
p20999
NsS'parameters'
p21000
(lp21001
(dp21002
S'description'
p21003
S'name of the back (z) boundary\n'
p21004
sS'cpp_type'
p21005
S'BoundaryName'
p21006
sS'default'
p21007
S'back_boundary'
p21008
sS'name'
p21009
S'back_boundary'
p21010
sS'required'
p21011
I00
sS'group_name'
p21012
Nsa(dp21013
S'description'
p21014
S'name of the bottom (y) boundary\n'
p21015
sS'cpp_type'
p21016
S'BoundaryName'
p21017
sS'default'
p21018
S'bottom_boundary'
p21019
sS'name'
p21020
S'bottom_boundary'
p21021
sS'required'
p21022
I00
sS'group_name'
p21023
Nsa(dp21024
S'name'
p21025
S'centroid_partitioner_direction'
p21026
sS'cpp_type'
p21027
S'MooseEnum'
p21028
sS'default'
p21029
g3
sS'description'
p21030
S'Specifies the sort direction if using the centroid partitioner. Available options: x, y, z, radial\n'
p21031
sS'required'
p21032
I00
sS'options'
p21033
S'x y z radial'
p21034
sS'group_name'
p21035
S'Partitioning'
p21036
sa(dp21037
S'name'
p21038
S'dim'
p21039
sS'cpp_type'
p21040
S'MooseEnum'
p21041
sS'default'
p21042
S'3'
p21043
sS'description'
p21044
S'This is only required for certain mesh formats where the dimension of the mesh cannot be autodetected.  In particular you must supply this for GMSH meshes.  Note: This is completely ignored for ExodusII meshes!\n'
p21045
sS'required'
p21046
I00
sS'options'
p21047
S'1 2 3'
p21048
sS'group_name'
p21049
S'Advanced'
p21050
sa(dp21051
S'name'
p21052
S'distribution'
p21053
sS'cpp_type'
p21054
S'MooseEnum'
p21055
sS'default'
p21056
S'DEFAULT'
p21057
sS'description'
p21058
S'PARALLEL: Always use libMesh::ParallelMesh SERIAL: Always use libMesh::SerialMesh DEFAULT: Use libMesh::SerialMesh unless --parallel-mesh is specified on the command line\n'
p21059
sS'required'
p21060
I00
sS'options'
p21061
S'PARALLEL SERIAL DEFAULT'
p21062
sS'group_name'
p21063
Nsa(dp21064
S'description'
p21065
S'The name of the mesh file to read\n'
p21066
sS'cpp_type'
p21067
S'MeshFileName'
p21068
sS'default'
p21069
g3
sS'name'
p21070
S'file'
p21071
sS'required'
p21072
I01
sS'group_name'
p21073
Nsa(dp21074
S'description'
p21075
S'name of the front (z) boundary\n'
p21076
sS'cpp_type'
p21077
S'BoundaryName'
p21078
sS'default'
p21079
S'front_boundary'
p21080
sS'name'
p21081
S'front_boundary'
p21082
sS'required'
p21083
I00
sS'group_name'
p21084
Nsa(dp21085
S'description'
p21086
S'name of the left (x) boundary\n'
p21087
sS'cpp_type'
p21088
S'BoundaryName'
p21089
sS'default'
p21090
S'left_boundary'
p21091
sS'name'
p21092
S'left_boundary'
p21093
sS'required'
p21094
I00
sS'group_name'
p21095
Nsa(dp21096
S'description'
p21097
S'If nemesis=true and file=foo.e, actually reads foo.e.N.0, foo.e.N.1, ... foo.e.N.N-1, where N = # CPUs, with NemesisIO.\n'
p21098
sS'cpp_type'
p21099
S'bool'
p21100
sS'default'
p21101
S'0'
p21102
sS'name'
p21103
S'nemesis'
p21104
sS'required'
p21105
I00
sS'group_name'
p21106
S'Advanced'
p21107
sa(dp21108
S'name'
p21109
S'partitioner'
p21110
sS'cpp_type'
p21111
S'MooseEnum'
p21112
sS'default'
p21113
S'default'
p21114
sS'description'
p21115
S'Specifies a mesh partitioner to use when splitting the mesh for a parallel computation.\n'
p21116
sS'required'
p21117
I00
sS'options'
p21118
S'default metis parmetis linear centroid hilbert_sfc morton_sfc'
p21119
sS'group_name'
p21120
S'Partitioning'
p21121
sa(dp21122
S'name'
p21123
S'patch_update_strategy'
p21124
sS'cpp_type'
p21125
S'MooseEnum'
p21126
sS'default'
p21127
S'never'
p21128
sS'description'
p21129
S"How often to update the geometric search 'patch'.  The default is to never update it (which is the most efficient but could be a problem with lots of relative motion).  'always' will update the patch every timestep which might be time consuming.  'auto' will attempt to determine when the patch size needs to be updated automatically.\n"
p21130
sS'required'
p21131
I00
sS'options'
p21132
S'never always auto'
p21133
sS'group_name'
p21134
S'Advanced'
p21135
sa(dp21136
S'description'
p21137
S'name of the right (x) boundary\n'
p21138
sS'cpp_type'
p21139
S'BoundaryName'
p21140
sS'default'
p21141
S'right_boundary'
p21142
sS'name'
p21143
S'right_boundary'
p21144
sS'required'
p21145
I00
sS'group_name'
p21146
Nsa(dp21147
S'description'
p21148
S'name of the top (y) boundary\n'
p21149
sS'cpp_type'
p21150
S'BoundaryName'
p21151
sS'default'
p21152
S'top_boundary'
p21153
sS'name'
p21154
S'top_boundary'
p21155
sS'required'
p21156
I00
sS'group_name'
p21157
Nsa(dp21158
S'description'
p21159
g3
sS'cpp_type'
p21160
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21161
sS'default'
p21162
S'TiledMesh'
p21163
sS'name'
p21164
S'type'
p21165
sS'required'
p21166
I00
sS'group_name'
p21167
Nsa(dp21168
S'description'
p21169
S'Number of tiles to stitch together (left to right) in the x-direction\n'
p21170
sS'cpp_type'
p21171
S'unsigned int'
p21172
sS'default'
p21173
S'1'
p21174
sS'name'
p21175
S'x_tiles'
p21176
sS'required'
p21177
I00
sS'group_name'
p21178
Nsa(dp21179
S'description'
p21180
S'The tile width in the x direction\n'
p21181
sS'cpp_type'
p21182
S'double'
p21183
sS'default'
p21184
S'0'
p21185
sS'name'
p21186
S'x_width'
p21187
sS'required'
p21188
I00
sS'group_name'
p21189
Nsa(dp21190
S'description'
p21191
S'Number of tiles to stitch together (top to bottom) in the y-direction\n'
p21192
sS'cpp_type'
p21193
S'unsigned int'
p21194
sS'default'
p21195
S'1'
p21196
sS'name'
p21197
S'y_tiles'
p21198
sS'required'
p21199
I00
sS'group_name'
p21200
Nsa(dp21201
S'description'
p21202
S'The tile width in the y direction\n'
p21203
sS'cpp_type'
p21204
S'double'
p21205
sS'default'
p21206
S'0'
p21207
sS'name'
p21208
S'y_width'
p21209
sS'required'
p21210
I00
sS'group_name'
p21211
Nsa(dp21212
S'description'
p21213
S'Number of tiles to stitch together (front to back) in the z-direction\n'
p21214
sS'cpp_type'
p21215
S'unsigned int'
p21216
sS'default'
p21217
S'1'
p21218
sS'name'
p21219
S'z_tiles'
p21220
sS'required'
p21221
I00
sS'group_name'
p21222
Nsa(dp21223
S'description'
p21224
S'The tile width in the z direction\n'
p21225
sS'cpp_type'
p21226
S'double'
p21227
sS'default'
p21228
S'0'
p21229
sS'name'
p21230
S'z_width'
p21231
sS'required'
p21232
I00
sS'group_name'
p21233
NsasS'name'
p21234
S'/Mesh/<type>/TiledMesh'
p21235
sasS'parameters'
p21236
NsS'name'
p21237
S'/Mesh/<type>'
p21238
sa(dp21239
S'description'
p21240
g3
sS'subblocks'
p21241
(lp21242
(dp21243
S'description'
p21244
g3
sS'subblocks'
p21245
NsS'parameters'
p21246
(lp21247
(dp21248
S'description'
p21249
S'Master side ID\n'
p21250
sS'cpp_type'
p21251
S'BoundaryName'
p21252
sS'default'
p21253
g3
sS'name'
p21254
S'master'
p21255
sS'required'
p21256
I01
sS'group_name'
p21257
Nsa(dp21258
S'description'
p21259
S'Slave side ID\n'
p21260
sS'cpp_type'
p21261
S'BoundaryName'
p21262
sS'default'
p21263
g3
sS'name'
p21264
S'slave'
p21265
sS'required'
p21266
I01
sS'group_name'
p21267
Nsa(dp21268
S'description'
p21269
S'Subdomain name that is the mortar interface\n'
p21270
sS'cpp_type'
p21271
S'SubdomainName'
p21272
sS'default'
p21273
g3
sS'name'
p21274
S'subdomain'
p21275
sS'required'
p21276
I01
sS'group_name'
p21277
NsasS'name'
p21278
S'/Mesh/MortarInterfaces/*'
p21279
sasS'parameters'
p21280
NsS'name'
p21281
S'/Mesh/MortarInterfaces'
p21282
sasS'parameters'
p21283
(lp21284
(dp21285
S'description'
p21286
S'The variables corresponding to the x y z displacements of the mesh.  If this is provided then the displacements will be taken into account during the computation.\n'
p21287
sS'cpp_type'
p21288
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p21289
sS'default'
p21290
g3
sS'name'
p21291
S'displacements'
p21292
sS'required'
p21293
I00
sS'group_name'
p21294
Nsa(dp21295
S'description'
p21296
S'IDs of the block id/name pairs\n'
p21297
sS'cpp_type'
p21298
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p21299
sS'default'
p21300
g3
sS'name'
p21301
S'block_id'
p21302
sS'required'
p21303
I00
sS'group_name'
p21304
S'Add Names'
p21305
sa(dp21306
S'description'
p21307
S'Names of the block id/name pairs (must correspond with "block_id"\n'
p21308
sS'cpp_type'
p21309
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21310
sS'default'
p21311
g3
sS'name'
p21312
S'block_name'
p21313
sS'required'
p21314
I00
sS'group_name'
p21315
S'Add Names'
p21316
sa(dp21317
S'description'
p21318
S'IDs of the boundary id/name pairs\n'
p21319
sS'cpp_type'
p21320
S'std::__1::vector<short, std::__1::allocator<short> >'
p21321
sS'default'
p21322
g3
sS'name'
p21323
S'boundary_id'
p21324
sS'required'
p21325
I00
sS'group_name'
p21326
S'Add Names'
p21327
sa(dp21328
S'description'
p21329
S'Names of the boundary id/name pairs (must correspond with "boundary_id"\n'
p21330
sS'cpp_type'
p21331
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21332
sS'default'
p21333
g3
sS'name'
p21334
S'boundary_name'
p21335
sS'required'
p21336
I00
sS'group_name'
p21337
S'Add Names'
p21338
sa(dp21339
S'description'
p21340
S'If true, construct side lists from the nodesets in the mesh (i.e. if every node on a give side is in a nodeset then add that side to a sideset\n'
p21341
sS'cpp_type'
p21342
S'bool'
p21343
sS'default'
p21344
S'0'
p21345
sS'name'
p21346
S'construct_side_list_from_node_list'
p21347
sS'required'
p21348
I00
sS'group_name'
p21349
S'Advanced'
p21350
sa(dp21351
S'description'
p21352
S'Boundaries to be ghosted if using Nemesis\n'
p21353
sS'cpp_type'
p21354
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21355
sS'default'
p21356
g3
sS'name'
p21357
S'ghosted_boundaries'
p21358
sS'required'
p21359
I00
sS'group_name'
p21360
S'Advanced'
p21361
sa(dp21362
S'description'
p21363
S"If you are using ghosted boundaries you will want to set this value to a vector of amounts to inflate the bounding boxes by.  ie if you are running a 3D problem you might set it to '0.2 0.1 0.4'\n"
p21364
sS'cpp_type'
p21365
S'std::__1::vector<double, std::__1::allocator<double> >'
p21366
sS'default'
p21367
g3
sS'name'
p21368
S'ghosted_boundaries_inflation'
p21369
sS'required'
p21370
I00
sS'group_name'
p21371
S'Advanced'
p21372
sa(dp21373
S'description'
p21374
S'The number of nodes to consider in the NearestNode neighborhood.\n'
p21375
sS'cpp_type'
p21376
S'unsigned int'
p21377
sS'default'
p21378
S'40'
p21379
sS'name'
p21380
S'patch_size'
p21381
sS'required'
p21382
I00
sS'group_name'
p21383
S'Advanced'
p21384
sa(dp21385
S'description'
p21386
S'Converts a first order mesh to a second order mesh.  Note: This is NOT needed if you are reading an actual first order mesh.\n'
p21387
sS'cpp_type'
p21388
S'bool'
p21389
sS'default'
p21390
S'0'
p21391
sS'name'
p21392
S'second_order'
p21393
sS'required'
p21394
I00
sS'group_name'
p21395
S'Advanced'
p21396
sa(dp21397
S'description'
p21398
S"If true the mesh won't be partitioned. This may cause large load imbalanced but is currently required if you have a simulation containing uniform refinement, adaptivity and stateful material properties\n"
p21399
sS'cpp_type'
p21400
S'bool'
p21401
sS'default'
p21402
S'0'
p21403
sS'name'
p21404
S'skip_partitioning'
p21405
sS'required'
p21406
I00
sS'group_name'
p21407
S'Advanced'
p21408
sa(dp21409
S'description'
p21410
S'A string representing the Moose Object that will be built by this Action\n'
p21411
sS'cpp_type'
p21412
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21413
sS'default'
p21414
S'FileMesh'
p21415
sS'name'
p21416
S'type'
p21417
sS'required'
p21418
I01
sS'group_name'
p21419
Nsa(dp21420
S'description'
p21421
S'Specify the level of uniform refinement applied to the initial mesh\n'
p21422
sS'cpp_type'
p21423
S'unsigned int'
p21424
sS'default'
p21425
S'0'
p21426
sS'name'
p21427
S'uniform_refine'
p21428
sS'required'
p21429
I00
sS'group_name'
p21430
NsasS'name'
p21431
S'/Mesh'
p21432
sa(dp21433
S'description'
p21434
g3
sS'subblocks'
p21435
(lp21436
(dp21437
S'description'
p21438
g3
sS'subblocks'
p21439
NsS'parameters'
p21440
(lp21441
(dp21442
S'description'
p21443
S'A string representing the Moose Object that will be built by this Action\n'
p21444
sS'cpp_type'
p21445
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21446
sS'default'
p21447
g3
sS'name'
p21448
S'type'
p21449
sS'required'
p21450
I01
sS'group_name'
p21451
NsasS'name'
p21452
S'/MeshModifiers/*'
p21453
sa(dp21454
S'description'
p21455
g3
sS'subblocks'
p21456
NsS'parameters'
p21457
(lp21458
(dp21459
S'description'
p21460
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p21461
sS'cpp_type'
p21462
S'bool'
p21463
sS'default'
p21464
S'0'
p21465
sS'name'
p21466
S'fixed_normal'
p21467
sS'required'
p21468
I00
sS'group_name'
p21469
Nsa(dp21470
S'description'
p21471
g3
sS'cpp_type'
p21472
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21473
sS'default'
p21474
S'AddAllSideSetsByNormals'
p21475
sS'name'
p21476
S'type'
p21477
sS'required'
p21478
I00
sS'group_name'
p21479
Nsa(dp21480
S'description'
p21481
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p21482
sS'cpp_type'
p21483
S'double'
p21484
sS'default'
p21485
S'0.1'
p21486
sS'name'
p21487
S'variance'
p21488
sS'required'
p21489
I00
sS'group_name'
p21490
NsasS'name'
p21491
S'/MeshModifiers/AddAllSideSetsByNormals'
p21492
sa(dp21493
S'description'
p21494
g3
sS'subblocks'
p21495
NsS'parameters'
p21496
(lp21497
(dp21498
S'description'
p21499
S'The nodes with coordinates you want to be in the nodeset (Either this parameter or "nodes" must be supplied).\n'
p21500
sS'cpp_type'
p21501
S'std::__1::vector<double, std::__1::allocator<double> >'
p21502
sS'default'
p21503
g3
sS'name'
p21504
S'coord'
p21505
sS'required'
p21506
I00
sS'group_name'
p21507
Nsa(dp21508
S'description'
p21509
S'The name of the boundary to create\n'
p21510
sS'cpp_type'
p21511
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21512
sS'default'
p21513
g3
sS'name'
p21514
S'new_boundary'
p21515
sS'required'
p21516
I01
sS'group_name'
p21517
Nsa(dp21518
S'description'
p21519
S'The nodes you want to be in the nodeset (Either this parameter or "coord" must be supplied).\n'
p21520
sS'cpp_type'
p21521
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p21522
sS'default'
p21523
g3
sS'name'
p21524
S'nodes'
p21525
sS'required'
p21526
I00
sS'group_name'
p21527
Nsa(dp21528
S'description'
p21529
S'The tolerance in which two nodes are considered identical\n'
p21530
sS'cpp_type'
p21531
S'double'
p21532
sS'default'
p21533
S'1e-06'
p21534
sS'name'
p21535
S'tolerance'
p21536
sS'required'
p21537
I00
sS'group_name'
p21538
Nsa(dp21539
S'description'
p21540
g3
sS'cpp_type'
p21541
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21542
sS'default'
p21543
S'AddExtraNodeset'
p21544
sS'name'
p21545
S'type'
p21546
sS'required'
p21547
I00
sS'group_name'
p21548
NsasS'name'
p21549
S'/MeshModifiers/AddExtraNodeset'
p21550
sa(dp21551
S'description'
p21552
g3
sS'subblocks'
p21553
NsS'parameters'
p21554
(lp21555
(dp21556
S'description'
p21557
S'The bottom left point (in x,y,z with spaces in-between) of the box which contains the centroids of the elements whose nodes will be selected.\n'
p21558
sS'cpp_type'
p21559
S'libMesh::VectorValue<double>'
p21560
sS'default'
p21561
g3
sS'name'
p21562
S'bottom_left'
p21563
sS'required'
p21564
I00
sS'group_name'
p21565
Nsa(dp21566
S'name'
p21567
S'location'
p21568
sS'cpp_type'
p21569
S'MooseEnum'
p21570
sS'default'
p21571
S'INSIDE'
p21572
sS'description'
p21573
S'Control of where the nodeset is to be set\n'
p21574
sS'required'
p21575
I00
sS'options'
p21576
S'INSIDE OUTSIDE'
p21577
sS'group_name'
p21578
Nsa(dp21579
S'description'
p21580
S'The name of the nodeset to create\n'
p21581
sS'cpp_type'
p21582
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21583
sS'default'
p21584
g3
sS'name'
p21585
S'new_boundary'
p21586
sS'required'
p21587
I01
sS'group_name'
p21588
Nsa(dp21589
S'description'
p21590
S'The bottom left point (in x,y,z with spaces in-between) of the box which contains the centroids of the elements whose nodes will be selected.\n'
p21591
sS'cpp_type'
p21592
S'libMesh::VectorValue<double>'
p21593
sS'default'
p21594
g3
sS'name'
p21595
S'top_right'
p21596
sS'required'
p21597
I00
sS'group_name'
p21598
Nsa(dp21599
S'description'
p21600
g3
sS'cpp_type'
p21601
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21602
sS'default'
p21603
S'BoundingBoxNodeSet'
p21604
sS'name'
p21605
S'type'
p21606
sS'required'
p21607
I00
sS'group_name'
p21608
NsasS'name'
p21609
S'/MeshModifiers/BoundingBoxNodeSet'
p21610
sa(dp21611
S'description'
p21612
g3
sS'subblocks'
p21613
NsS'parameters'
p21614
(lp21615
(dp21616
S'description'
p21617
S'The boundary that will be applied to the bottom of the extruded mesh\n'
p21618
sS'cpp_type'
p21619
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21620
sS'default'
p21621
g3
sS'name'
p21622
S'bottom_sideset'
p21623
sS'required'
p21624
I00
sS'group_name'
p21625
Nsa(dp21626
S'description'
p21627
S'The direction and length of the extrusion\n'
p21628
sS'cpp_type'
p21629
S'libMesh::VectorValue<double>'
p21630
sS'default'
p21631
g3
sS'name'
p21632
S'extrusion_vector'
p21633
sS'required'
p21634
I01
sS'group_name'
p21635
Nsa(dp21636
S'description'
p21637
S'The number of layers in the extruded mesh\n'
p21638
sS'cpp_type'
p21639
S'unsigned int'
p21640
sS'default'
p21641
g3
sS'name'
p21642
S'num_layers'
p21643
sS'required'
p21644
I01
sS'group_name'
p21645
Nsa(dp21646
S'description'
p21647
S'The boundary that will be to the top of the extruded mesh\n'
p21648
sS'cpp_type'
p21649
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21650
sS'default'
p21651
g3
sS'name'
p21652
S'top_sideset'
p21653
sS'required'
p21654
I00
sS'group_name'
p21655
Nsa(dp21656
S'description'
p21657
g3
sS'cpp_type'
p21658
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21659
sS'default'
p21660
S'MeshExtruder'
p21661
sS'name'
p21662
S'type'
p21663
sS'required'
p21664
I00
sS'group_name'
p21665
NsasS'name'
p21666
S'/MeshModifiers/MeshExtruder'
p21667
sa(dp21668
S'description'
p21669
g3
sS'subblocks'
p21670
NsS'parameters'
p21671
(lp21672
(dp21673
S'description'
p21674
S'Subdomain id to set for inside/outside the bounding box\n'
p21675
sS'cpp_type'
p21676
S'unsigned short'
p21677
sS'default'
p21678
g3
sS'name'
p21679
S'block_id'
p21680
sS'required'
p21681
I01
sS'group_name'
p21682
Nsa(dp21683
S'description'
p21684
S"The center (many people spell this 'center') of the box.\n"
p21685
sS'cpp_type'
p21686
S'libMesh::Point'
p21687
sS'default'
p21688
g3
sS'name'
p21689
S'center'
p21690
sS'required'
p21691
I01
sS'group_name'
p21692
Nsa(dp21693
S'description'
p21694
S'The height of the box\n'
p21695
sS'cpp_type'
p21696
S'double'
p21697
sS'default'
p21698
g3
sS'name'
p21699
S'height'
p21700
sS'required'
p21701
I01
sS'group_name'
p21702
Nsa(dp21703
S'description'
p21704
S'The length of the box\n'
p21705
sS'cpp_type'
p21706
S'double'
p21707
sS'default'
p21708
g3
sS'name'
p21709
S'length'
p21710
sS'required'
p21711
I01
sS'group_name'
p21712
Nsa(dp21713
S'description'
p21714
S'The direction along which the length is oriented (must be perpendicular to width_direction).\n'
p21715
sS'cpp_type'
p21716
S'libMesh::VectorValue<double>'
p21717
sS'default'
p21718
g3
sS'name'
p21719
S'length_direction'
p21720
sS'required'
p21721
I01
sS'group_name'
p21722
Nsa(dp21723
S'name'
p21724
S'location'
p21725
sS'cpp_type'
p21726
S'MooseEnum'
p21727
sS'default'
p21728
S'INSIDE'
p21729
sS'description'
p21730
S'Control of where the subdomain id is to be set\n'
p21731
sS'required'
p21732
I00
sS'options'
p21733
S'INSIDE OUTSIDE'
p21734
sS'group_name'
p21735
Nsa(dp21736
S'description'
p21737
g3
sS'cpp_type'
p21738
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21739
sS'default'
p21740
S'OrientedSubdomainBoundingBox'
p21741
sS'name'
p21742
S'type'
p21743
sS'required'
p21744
I00
sS'group_name'
p21745
Nsa(dp21746
S'description'
p21747
S'The width of the box\n'
p21748
sS'cpp_type'
p21749
S'double'
p21750
sS'default'
p21751
g3
sS'name'
p21752
S'width'
p21753
sS'required'
p21754
I01
sS'group_name'
p21755
Nsa(dp21756
S'description'
p21757
S'The direction along which the width is oriented.\n'
p21758
sS'cpp_type'
p21759
S'libMesh::VectorValue<double>'
p21760
sS'default'
p21761
g3
sS'name'
p21762
S'width_direction'
p21763
sS'required'
p21764
I01
sS'group_name'
p21765
NsasS'name'
p21766
S'/MeshModifiers/OrientedSubdomainBoundingBox'
p21767
sa(dp21768
S'description'
p21769
S'RenameBlock re-numbers or re-names an old_block_id or old_block_name with a new_block_id or new_block_name\n'
p21770
sS'subblocks'
p21771
NsS'parameters'
p21772
(lp21773
(dp21774
S'description'
p21775
S'Elements with the old block number (or name) will be given this block number.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p21776
sS'cpp_type'
p21777
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p21778
sS'default'
p21779
g3
sS'name'
p21780
S'new_block_id'
p21781
sS'required'
p21782
I00
sS'group_name'
p21783
Nsa(dp21784
S'description'
p21785
S'Elements with the old block number (or name) will be given this block name.  You must supply either new_block_id or new_block_name.  You may supply a vector of new_block_id, in which case the old_block information must also be a vector.\n'
p21786
sS'cpp_type'
p21787
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21788
sS'default'
p21789
g3
sS'name'
p21790
S'new_block_name'
p21791
sS'required'
p21792
I00
sS'group_name'
p21793
Nsa(dp21794
S'description'
p21795
S'Elements with this block number will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_id, in which case the new_block information must also be a vector.\n'
p21796
sS'cpp_type'
p21797
S'std::__1::vector<unsigned short, std::__1::allocator<unsigned short> >'
p21798
sS'default'
p21799
g3
sS'name'
p21800
S'old_block_id'
p21801
sS'required'
p21802
I00
sS'group_name'
p21803
Nsa(dp21804
S'description'
p21805
S'Elements with this block name will be given the new_block_number or new_block_name.  You must supply either old_block_id or old_block_name.  You may supply a vector of old_block_name, in which case the new_block information must also be a vector.\n'
p21806
sS'cpp_type'
p21807
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21808
sS'default'
p21809
g3
sS'name'
p21810
S'old_block_name'
p21811
sS'required'
p21812
I00
sS'group_name'
p21813
Nsa(dp21814
S'description'
p21815
g3
sS'cpp_type'
p21816
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21817
sS'default'
p21818
S'RenameBlock'
p21819
sS'name'
p21820
S'type'
p21821
sS'required'
p21822
I00
sS'group_name'
p21823
NsasS'name'
p21824
S'/MeshModifiers/RenameBlock'
p21825
sa(dp21826
S'description'
p21827
S'Adds element faces that are on the exterior of the given block to the sidesets specified\n'
p21828
sS'subblocks'
p21829
NsS'parameters'
p21830
(lp21831
(dp21832
S'description'
p21833
S'The list of block ids (SubdomainID) that this object will be applied\n'
p21834
sS'cpp_type'
p21835
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p21836
sS'default'
p21837
g3
sS'name'
p21838
S'block'
p21839
sS'required'
p21840
I00
sS'group_name'
p21841
Nsa(dp21842
S'description'
p21843
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p21844
sS'cpp_type'
p21845
S'bool'
p21846
sS'default'
p21847
S'0'
p21848
sS'name'
p21849
S'fixed_normal'
p21850
sS'required'
p21851
I00
sS'group_name'
p21852
Nsa(dp21853
S'description'
p21854
S'The list of boundary IDs to create on the supplied subdomain\n'
p21855
sS'cpp_type'
p21856
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21857
sS'default'
p21858
g3
sS'name'
p21859
S'new_boundary'
p21860
sS'required'
p21861
I01
sS'group_name'
p21862
Nsa(dp21863
S'description'
p21864
S'If supplied, only faces with normal equal to this, up to normal_tol, will be added to the sidesets specified\n'
p21865
sS'cpp_type'
p21866
S'libMesh::Point'
p21867
sS'default'
p21868
g3
sS'name'
p21869
S'normal'
p21870
sS'required'
p21871
I00
sS'group_name'
p21872
Nsa(dp21873
S'description'
p21874
S'If normal is supplied then faces are only added if face_normal.normal_hat >= 1 - normal_tol, where normal_hat = normal/|normal|\n'
p21875
sS'cpp_type'
p21876
S'double'
p21877
sS'default'
p21878
S'0.1'
p21879
sS'name'
p21880
S'normal_tol'
p21881
sS'required'
p21882
I00
sS'group_name'
p21883
Nsa(dp21884
S'description'
p21885
g3
sS'cpp_type'
p21886
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21887
sS'default'
p21888
S'SideSetsAroundSubdomain'
p21889
sS'name'
p21890
S'type'
p21891
sS'required'
p21892
I00
sS'group_name'
p21893
Nsa(dp21894
S'description'
p21895
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p21896
sS'cpp_type'
p21897
S'double'
p21898
sS'default'
p21899
S'0.1'
p21900
sS'name'
p21901
S'variance'
p21902
sS'required'
p21903
I00
sS'group_name'
p21904
NsasS'name'
p21905
S'/MeshModifiers/SideSetsAroundSubdomain'
p21906
sa(dp21907
S'description'
p21908
g3
sS'subblocks'
p21909
NsS'parameters'
p21910
(lp21911
(dp21912
S'description'
p21913
S'The first block for which to draw a sideset between\n'
p21914
sS'cpp_type'
p21915
S'SubdomainName'
p21916
sS'default'
p21917
g3
sS'name'
p21918
S'master_block'
p21919
sS'required'
p21920
I01
sS'group_name'
p21921
Nsa(dp21922
S'description'
p21923
S'The name of the boundary to create\n'
p21924
sS'cpp_type'
p21925
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21926
sS'default'
p21927
g3
sS'name'
p21928
S'new_boundary'
p21929
sS'required'
p21930
I01
sS'group_name'
p21931
Nsa(dp21932
S'description'
p21933
S'The second block for which to draw a sideset between\n'
p21934
sS'cpp_type'
p21935
S'SubdomainName'
p21936
sS'default'
p21937
g3
sS'name'
p21938
S'paired_block'
p21939
sS'required'
p21940
I01
sS'group_name'
p21941
Nsa(dp21942
S'description'
p21943
g3
sS'cpp_type'
p21944
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21945
sS'default'
p21946
S'SideSetsBetweenSubdomains'
p21947
sS'name'
p21948
S'type'
p21949
sS'required'
p21950
I00
sS'group_name'
p21951
NsasS'name'
p21952
S'/MeshModifiers/SideSetsBetweenSubdomains'
p21953
sa(dp21954
S'description'
p21955
g3
sS'subblocks'
p21956
NsS'parameters'
p21957
(lp21958
(dp21959
S'description'
p21960
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p21961
sS'cpp_type'
p21962
S'bool'
p21963
sS'default'
p21964
S'0'
p21965
sS'name'
p21966
S'fixed_normal'
p21967
sS'required'
p21968
I00
sS'group_name'
p21969
Nsa(dp21970
S'description'
p21971
S'The name of the boundary to create\n'
p21972
sS'cpp_type'
p21973
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p21974
sS'default'
p21975
g3
sS'name'
p21976
S'new_boundary'
p21977
sS'required'
p21978
I01
sS'group_name'
p21979
Nsa(dp21980
S'description'
p21981
S'A list of normals for which to start painting sidesets\n'
p21982
sS'cpp_type'
p21983
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p21984
sS'default'
p21985
g3
sS'name'
p21986
S'normals'
p21987
sS'required'
p21988
I01
sS'group_name'
p21989
Nsa(dp21990
S'description'
p21991
g3
sS'cpp_type'
p21992
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p21993
sS'default'
p21994
S'SideSetsFromNormals'
p21995
sS'name'
p21996
S'type'
p21997
sS'required'
p21998
I00
sS'group_name'
p21999
Nsa(dp22000
S'description'
p22001
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p22002
sS'cpp_type'
p22003
S'double'
p22004
sS'default'
p22005
S'0.1'
p22006
sS'name'
p22007
S'variance'
p22008
sS'required'
p22009
I00
sS'group_name'
p22010
NsasS'name'
p22011
S'/MeshModifiers/SideSetsFromNormals'
p22012
sa(dp22013
S'description'
p22014
g3
sS'subblocks'
p22015
NsS'parameters'
p22016
(lp22017
(dp22018
S'description'
p22019
S'This Boolean determines whether we fix our normal or allow it to vary to "paint" around curves\n'
p22020
sS'cpp_type'
p22021
S'bool'
p22022
sS'default'
p22023
S'0'
p22024
sS'name'
p22025
S'fixed_normal'
p22026
sS'required'
p22027
I00
sS'group_name'
p22028
Nsa(dp22029
S'description'
p22030
S'The name of the boundary to create\n'
p22031
sS'cpp_type'
p22032
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22033
sS'default'
p22034
g3
sS'name'
p22035
S'new_boundary'
p22036
sS'required'
p22037
I01
sS'group_name'
p22038
Nsa(dp22039
S'description'
p22040
S'A list of points from which to start painting sidesets\n'
p22041
sS'cpp_type'
p22042
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p22043
sS'default'
p22044
g3
sS'name'
p22045
S'points'
p22046
sS'required'
p22047
I01
sS'group_name'
p22048
Nsa(dp22049
S'description'
p22050
g3
sS'cpp_type'
p22051
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22052
sS'default'
p22053
S'SideSetsFromPoints'
p22054
sS'name'
p22055
S'type'
p22056
sS'required'
p22057
I00
sS'group_name'
p22058
Nsa(dp22059
S'description'
p22060
S'The variance [0.0 - 1.0] allowed when comparing normals\n'
p22061
sS'cpp_type'
p22062
S'double'
p22063
sS'default'
p22064
S'0.1'
p22065
sS'name'
p22066
S'variance'
p22067
sS'required'
p22068
I00
sS'group_name'
p22069
NsasS'name'
p22070
S'/MeshModifiers/SideSetsFromPoints'
p22071
sa(dp22072
S'description'
p22073
g3
sS'subblocks'
p22074
NsS'parameters'
p22075
(lp22076
(dp22077
S'description'
p22078
S'Subdomain id to set for inside/outside the bounding box\n'
p22079
sS'cpp_type'
p22080
S'unsigned short'
p22081
sS'default'
p22082
g3
sS'name'
p22083
S'block_id'
p22084
sS'required'
p22085
I01
sS'group_name'
p22086
Nsa(dp22087
S'description'
p22088
S'Subdomain name to set for inside/outside the bounding box (optional)\n'
p22089
sS'cpp_type'
p22090
S'SubdomainName'
p22091
sS'default'
p22092
g3
sS'name'
p22093
S'block_name'
p22094
sS'required'
p22095
I00
sS'group_name'
p22096
Nsa(dp22097
S'description'
p22098
S'The bottom left point (in x,y,z with spaces in-between).\n'
p22099
sS'cpp_type'
p22100
S'libMesh::VectorValue<double>'
p22101
sS'default'
p22102
g3
sS'name'
p22103
S'bottom_left'
p22104
sS'required'
p22105
I01
sS'group_name'
p22106
Nsa(dp22107
S'name'
p22108
S'location'
p22109
sS'cpp_type'
p22110
S'MooseEnum'
p22111
sS'default'
p22112
S'INSIDE'
p22113
sS'description'
p22114
S'Control of where the subdomain id is to be set\n'
p22115
sS'required'
p22116
I00
sS'options'
p22117
S'INSIDE OUTSIDE'
p22118
sS'group_name'
p22119
Nsa(dp22120
S'description'
p22121
S'The bottom left point (in x,y,z with spaces in-between).\n'
p22122
sS'cpp_type'
p22123
S'libMesh::VectorValue<double>'
p22124
sS'default'
p22125
g3
sS'name'
p22126
S'top_right'
p22127
sS'required'
p22128
I01
sS'group_name'
p22129
Nsa(dp22130
S'description'
p22131
g3
sS'cpp_type'
p22132
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22133
sS'default'
p22134
S'SubdomainBoundingBox'
p22135
sS'name'
p22136
S'type'
p22137
sS'required'
p22138
I00
sS'group_name'
p22139
NsasS'name'
p22140
S'/MeshModifiers/SubdomainBoundingBox'
p22141
sa(dp22142
S'description'
p22143
g3
sS'subblocks'
p22144
NsS'parameters'
p22145
(lp22146
(dp22147
S'name'
p22148
S'transform'
p22149
sS'cpp_type'
p22150
S'MooseEnum'
p22151
sS'default'
p22152
g3
sS'description'
p22153
S'The type of transformation to perform (TRANSLATE, ROTATE, SCALE)\n'
p22154
sS'required'
p22155
I01
sS'options'
p22156
S'TRANSLATE ROTATE SCALE'
p22157
sS'group_name'
p22158
Nsa(dp22159
S'description'
p22160
g3
sS'cpp_type'
p22161
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22162
sS'default'
p22163
S'Transform'
p22164
sS'name'
p22165
S'type'
p22166
sS'required'
p22167
I00
sS'group_name'
p22168
Nsa(dp22169
S'description'
p22170
S'The value to use for the transformation. When using TRANSLATE or SCALE, the xyz coordinates are applied in each direction respectively. When using ROTATE, the values are interpreted as the Euler angles phi, theta and psi given in degrees.\n'
p22171
sS'cpp_type'
p22172
S'libMesh::VectorValue<double>'
p22173
sS'default'
p22174
g3
sS'name'
p22175
S'vector_value'
p22176
sS'required'
p22177
I01
sS'group_name'
p22178
NsasS'name'
p22179
S'/MeshModifiers/Transform'
p22180
sasS'parameters'
p22181
NsS'name'
p22182
S'/MeshModifiers'
p22183
sa(dp22184
S'description'
p22185
g3
sS'subblocks'
p22186
(lp22187
(dp22188
S'description'
p22189
g3
sS'subblocks'
p22190
NsS'parameters'
p22191
(lp22192
(dp22193
S'description'
p22194
S'A string representing the Moose Object that will be built by this Action\n'
p22195
sS'cpp_type'
p22196
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22197
sS'default'
p22198
g3
sS'name'
p22199
S'type'
p22200
sS'required'
p22201
I01
sS'group_name'
p22202
NsasS'name'
p22203
S'/MultiApps/*'
p22204
sa(dp22205
S'description'
p22206
g3
sS'subblocks'
p22207
NsS'parameters'
p22208
(lp22209
(dp22210
S'name'
p22211
S'app_type'
p22212
sS'cpp_type'
p22213
S'MooseEnum'
p22214
sS'default'
p22215
g3
sS'description'
p22216
S'The type of application to build (applications not registered can be loaded with dynamic libraries.\n'
p22217
sS'required'
p22218
I01
sS'options'
p22219
S'OtterApp'
p22220
sS'group_name'
p22221
Nsa(dp22222
S'description'
p22223
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p22224
sS'cpp_type'
p22225
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22226
sS'default'
p22227
g3
sS'name'
p22228
S'boundary'
p22229
sS'required'
p22230
I00
sS'group_name'
p22231
Nsa(dp22232
S'description'
p22233
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p22234
sS'cpp_type'
p22235
S'double'
p22236
sS'default'
p22237
S'0.01'
p22238
sS'name'
p22239
S'bounding_box_inflation'
p22240
sS'required'
p22241
I00
sS'group_name'
p22242
Nsa(dp22243
S'description'
p22244
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p22245
sS'cpp_type'
p22246
S'bool'
p22247
sS'default'
p22248
S'0'
p22249
sS'name'
p22250
S'catch_up'
p22251
sS'required'
p22252
I00
sS'group_name'
p22253
Nsa(dp22254
S'description'
p22255
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p22256
sS'cpp_type'
p22257
S'bool'
p22258
sS'default'
p22259
S'0'
p22260
sS'name'
p22261
S'detect_steady_state'
p22262
sS'required'
p22263
I00
sS'group_name'
p22264
Nsa(dp22265
S'name'
p22266
S'execute_on'
p22267
sS'cpp_type'
p22268
S'MultiMooseEnum'
p22269
sS'default'
p22270
S'TIMESTEP_BEGIN'
p22271
sS'description'
p22272
S'Set to (linear|nonlinear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22273
sS'required'
p22274
I00
sS'options'
p22275
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p22276
sS'group_name'
p22277
Nsa(dp22278
S'description'
p22279
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22280
sS'cpp_type'
p22281
S'bool'
p22282
sS'default'
p22283
S'1'
p22284
sS'name'
p22285
S'implicit'
p22286
sS'required'
p22287
I00
sS'group_name'
p22288
S'Advanced'
p22289
sa(dp22290
S'description'
p22291
S'The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n'
p22292
sS'cpp_type'
p22293
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22294
sS'default'
p22295
g3
sS'name'
p22296
S'input_files'
p22297
sS'required'
p22298
I01
sS'group_name'
p22299
Nsa(dp22300
S'description'
p22301
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p22302
sS'cpp_type'
p22303
S'bool'
p22304
sS'default'
p22305
S'0'
p22306
sS'name'
p22307
S'interpolate_transfers'
p22308
sS'required'
p22309
I00
sS'group_name'
p22310
Nsa(dp22311
S'description'
p22312
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p22313
sS'cpp_type'
p22314
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22315
sS'default'
p22316
g3
sS'name'
p22317
S'library_path'
p22318
sS'required'
p22319
I00
sS'group_name'
p22320
Nsa(dp22321
S'description'
p22322
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p22323
sS'cpp_type'
p22324
S'double'
p22325
sS'default'
p22326
S'2'
p22327
sS'name'
p22328
S'max_catch_up_steps'
p22329
sS'required'
p22330
I00
sS'group_name'
p22331
Nsa(dp22332
S'description'
p22333
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p22334
sS'cpp_type'
p22335
S'unsigned int'
p22336
sS'default'
p22337
S'0'
p22338
sS'name'
p22339
S'max_failures'
p22340
sS'required'
p22341
I00
sS'group_name'
p22342
Nsa(dp22343
S'description'
p22344
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p22345
sS'cpp_type'
p22346
S'unsigned int'
p22347
sS'default'
p22348
S'4294967295'
p22349
sS'name'
p22350
S'max_procs_per_app'
p22351
sS'required'
p22352
I00
sS'group_name'
p22353
Nsa(dp22354
S'description'
p22355
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p22356
sS'cpp_type'
p22357
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p22358
sS'default'
p22359
g3
sS'name'
p22360
S'move_apps'
p22361
sS'required'
p22362
I00
sS'group_name'
p22363
Nsa(dp22364
S'description'
p22365
S'The positions corresponding to each move_app.\n'
p22366
sS'cpp_type'
p22367
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p22368
sS'default'
p22369
g3
sS'name'
p22370
S'move_positions'
p22371
sS'required'
p22372
I00
sS'group_name'
p22373
Nsa(dp22374
S'description'
p22375
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p22376
sS'cpp_type'
p22377
S'double'
p22378
sS'default'
p22379
S'1.79769e+308'
p22380
sS'name'
p22381
S'move_time'
p22382
sS'required'
p22383
I00
sS'group_name'
p22384
Nsa(dp22385
S'description'
p22386
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p22387
sS'cpp_type'
p22388
S'bool'
p22389
sS'default'
p22390
S'0'
p22391
sS'name'
p22392
S'output_in_position'
p22393
sS'required'
p22394
I00
sS'group_name'
p22395
Nsa(dp22396
S'description'
p22397
S'If true then every sub-cycle will be output.\n'
p22398
sS'cpp_type'
p22399
S'bool'
p22400
sS'default'
p22401
S'0'
p22402
sS'name'
p22403
S'output_sub_cycles'
p22404
sS'required'
p22405
I00
sS'group_name'
p22406
Nsa(dp22407
S'description'
p22408
S'Toggle the display of sub-cycles on the screen.\n'
p22409
sS'cpp_type'
p22410
S'bool'
p22411
sS'default'
p22412
S'1'
p22413
sS'name'
p22414
S'print_sub_cycles'
p22415
sS'required'
p22416
I00
sS'group_name'
p22417
Nsa(dp22418
S'description'
p22419
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p22420
sS'cpp_type'
p22421
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p22422
sS'default'
p22423
g3
sS'name'
p22424
S'reset_apps'
p22425
sS'required'
p22426
I00
sS'group_name'
p22427
Nsa(dp22428
S'description'
p22429
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p22430
sS'cpp_type'
p22431
S'double'
p22432
sS'default'
p22433
S'1.79769e+308'
p22434
sS'name'
p22435
S'reset_time'
p22436
sS'required'
p22437
I00
sS'group_name'
p22438
Nsa(dp22439
S'description'
p22440
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p22441
sS'cpp_type'
p22442
S'double'
p22443
sS'default'
p22444
S'1e-08'
p22445
sS'name'
p22446
S'steady_state_tol'
p22447
sS'required'
p22448
I00
sS'group_name'
p22449
Nsa(dp22450
S'description'
p22451
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p22452
sS'cpp_type'
p22453
S'bool'
p22454
sS'default'
p22455
S'0'
p22456
sS'name'
p22457
S'sub_cycling'
p22458
sS'required'
p22459
I00
sS'group_name'
p22460
Nsa(dp22461
S'description'
p22462
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p22463
sS'cpp_type'
p22464
S'bool'
p22465
sS'default'
p22466
S'0'
p22467
sS'name'
p22468
S'tolerate_failure'
p22469
sS'required'
p22470
I00
sS'group_name'
p22471
Nsa(dp22472
S'description'
p22473
g3
sS'cpp_type'
p22474
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22475
sS'default'
p22476
S'AutoPositionsMultiApp'
p22477
sS'name'
p22478
S'type'
p22479
sS'required'
p22480
I00
sS'group_name'
p22481
Nsa(dp22482
S'description'
p22483
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22484
sS'cpp_type'
p22485
S'bool'
p22486
sS'default'
p22487
S'0'
p22488
sS'name'
p22489
S'use_displaced_mesh'
p22490
sS'required'
p22491
I00
sS'group_name'
p22492
S'Advanced'
p22493
sasS'name'
p22494
S'/MultiApps/AutoPositionsMultiApp'
p22495
sa(dp22496
S'description'
p22497
g3
sS'subblocks'
p22498
NsS'parameters'
p22499
(lp22500
(dp22501
S'name'
p22502
S'app_type'
p22503
sS'cpp_type'
p22504
S'MooseEnum'
p22505
sS'default'
p22506
g3
sS'description'
p22507
S'The type of application to build (applications not registered can be loaded with dynamic libraries.\n'
p22508
sS'required'
p22509
I01
sS'options'
p22510
S'OtterApp'
p22511
sS'group_name'
p22512
Nsa(dp22513
S'description'
p22514
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p22515
sS'cpp_type'
p22516
S'double'
p22517
sS'default'
p22518
S'0.01'
p22519
sS'name'
p22520
S'bounding_box_inflation'
p22521
sS'required'
p22522
I00
sS'group_name'
p22523
Nsa(dp22524
S'name'
p22525
S'execute_on'
p22526
sS'cpp_type'
p22527
S'MultiMooseEnum'
p22528
sS'default'
p22529
S'TIMESTEP_BEGIN'
p22530
sS'description'
p22531
S'Set to (linear|nonlinear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22532
sS'required'
p22533
I00
sS'options'
p22534
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p22535
sS'group_name'
p22536
Nsa(dp22537
S'description'
p22538
S'The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n'
p22539
sS'cpp_type'
p22540
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22541
sS'default'
p22542
g3
sS'name'
p22543
S'input_files'
p22544
sS'required'
p22545
I01
sS'group_name'
p22546
Nsa(dp22547
S'description'
p22548
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p22549
sS'cpp_type'
p22550
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22551
sS'default'
p22552
g3
sS'name'
p22553
S'library_path'
p22554
sS'required'
p22555
I00
sS'group_name'
p22556
Nsa(dp22557
S'description'
p22558
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p22559
sS'cpp_type'
p22560
S'unsigned int'
p22561
sS'default'
p22562
S'4294967295'
p22563
sS'name'
p22564
S'max_procs_per_app'
p22565
sS'required'
p22566
I00
sS'group_name'
p22567
Nsa(dp22568
S'description'
p22569
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p22570
sS'cpp_type'
p22571
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p22572
sS'default'
p22573
g3
sS'name'
p22574
S'move_apps'
p22575
sS'required'
p22576
I00
sS'group_name'
p22577
Nsa(dp22578
S'description'
p22579
S'The positions corresponding to each move_app.\n'
p22580
sS'cpp_type'
p22581
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p22582
sS'default'
p22583
g3
sS'name'
p22584
S'move_positions'
p22585
sS'required'
p22586
I00
sS'group_name'
p22587
Nsa(dp22588
S'description'
p22589
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p22590
sS'cpp_type'
p22591
S'double'
p22592
sS'default'
p22593
S'1.79769e+308'
p22594
sS'name'
p22595
S'move_time'
p22596
sS'required'
p22597
I00
sS'group_name'
p22598
Nsa(dp22599
S'description'
p22600
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p22601
sS'cpp_type'
p22602
S'bool'
p22603
sS'default'
p22604
S'0'
p22605
sS'name'
p22606
S'output_in_position'
p22607
sS'required'
p22608
I00
sS'group_name'
p22609
Nsa(dp22610
S'description'
p22611
S"The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or 'positions_file'\n"
p22612
sS'cpp_type'
p22613
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p22614
sS'default'
p22615
g3
sS'name'
p22616
S'positions'
p22617
sS'required'
p22618
I00
sS'group_name'
p22619
Nsa(dp22620
S'description'
p22621
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or 'positions'\n"
p22622
sS'cpp_type'
p22623
S'FileName'
p22624
sS'default'
p22625
g3
sS'name'
p22626
S'positions_file'
p22627
sS'required'
p22628
I00
sS'group_name'
p22629
Nsa(dp22630
S'description'
p22631
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p22632
sS'cpp_type'
p22633
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p22634
sS'default'
p22635
g3
sS'name'
p22636
S'reset_apps'
p22637
sS'required'
p22638
I00
sS'group_name'
p22639
Nsa(dp22640
S'description'
p22641
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p22642
sS'cpp_type'
p22643
S'double'
p22644
sS'default'
p22645
S'1.79769e+308'
p22646
sS'name'
p22647
S'reset_time'
p22648
sS'required'
p22649
I00
sS'group_name'
p22650
Nsa(dp22651
S'description'
p22652
g3
sS'cpp_type'
p22653
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22654
sS'default'
p22655
S'FullSolveMultiApp'
p22656
sS'name'
p22657
S'type'
p22658
sS'required'
p22659
I00
sS'group_name'
p22660
Nsa(dp22661
S'description'
p22662
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22663
sS'cpp_type'
p22664
S'bool'
p22665
sS'default'
p22666
S'0'
p22667
sS'name'
p22668
S'use_displaced_mesh'
p22669
sS'required'
p22670
I00
sS'group_name'
p22671
S'Advanced'
p22672
sasS'name'
p22673
S'/MultiApps/FullSolveMultiApp'
p22674
sa(dp22675
S'description'
p22676
g3
sS'subblocks'
p22677
NsS'parameters'
p22678
(lp22679
(dp22680
S'name'
p22681
S'app_type'
p22682
sS'cpp_type'
p22683
S'MooseEnum'
p22684
sS'default'
p22685
g3
sS'description'
p22686
S'The type of application to build (applications not registered can be loaded with dynamic libraries.\n'
p22687
sS'required'
p22688
I01
sS'options'
p22689
S'OtterApp'
p22690
sS'group_name'
p22691
Nsa(dp22692
S'description'
p22693
S"Relative amount to 'inflate' the bounding box of this MultiApp.\n"
p22694
sS'cpp_type'
p22695
S'double'
p22696
sS'default'
p22697
S'0.01'
p22698
sS'name'
p22699
S'bounding_box_inflation'
p22700
sS'required'
p22701
I00
sS'group_name'
p22702
Nsa(dp22703
S'description'
p22704
S"If true this will allow failed solves to attempt to 'catch up' using smaller timesteps.\n"
p22705
sS'cpp_type'
p22706
S'bool'
p22707
sS'default'
p22708
S'0'
p22709
sS'name'
p22710
S'catch_up'
p22711
sS'required'
p22712
I00
sS'group_name'
p22713
Nsa(dp22714
S'description'
p22715
S'If true then while sub_cycling a steady state check will be done.  In this mode output will only be done once the MultiApp reaches the target time or steady state is reached\n'
p22716
sS'cpp_type'
p22717
S'bool'
p22718
sS'default'
p22719
S'0'
p22720
sS'name'
p22721
S'detect_steady_state'
p22722
sS'required'
p22723
I00
sS'group_name'
p22724
Nsa(dp22725
S'name'
p22726
S'execute_on'
p22727
sS'cpp_type'
p22728
S'MultiMooseEnum'
p22729
sS'default'
p22730
S'TIMESTEP_BEGIN'
p22731
sS'description'
p22732
S'Set to (linear|nonlinear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p22733
sS'required'
p22734
I00
sS'options'
p22735
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p22736
sS'group_name'
p22737
Nsa(dp22738
S'description'
p22739
S'Determines whether this object is calculated using an implicit or explicit form\n'
p22740
sS'cpp_type'
p22741
S'bool'
p22742
sS'default'
p22743
S'1'
p22744
sS'name'
p22745
S'implicit'
p22746
sS'required'
p22747
I00
sS'group_name'
p22748
S'Advanced'
p22749
sa(dp22750
S'description'
p22751
S'The input file for each App.  If this parameter only contains one input file it will be used for all of the Apps.\n'
p22752
sS'cpp_type'
p22753
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p22754
sS'default'
p22755
g3
sS'name'
p22756
S'input_files'
p22757
sS'required'
p22758
I01
sS'group_name'
p22759
Nsa(dp22760
S'description'
p22761
S'Only valid when sub_cycling.  This allows transferred values to be interpolated over the time frame the MultiApp is executing over when sub_cycling\n'
p22762
sS'cpp_type'
p22763
S'bool'
p22764
sS'default'
p22765
S'0'
p22766
sS'name'
p22767
S'interpolate_transfers'
p22768
sS'required'
p22769
I00
sS'group_name'
p22770
Nsa(dp22771
S'description'
p22772
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p22773
sS'cpp_type'
p22774
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22775
sS'default'
p22776
g3
sS'name'
p22777
S'library_path'
p22778
sS'required'
p22779
I00
sS'group_name'
p22780
Nsa(dp22781
S'description'
p22782
S'Maximum number of steps to allow an app to take when trying to catch back up after a failed solve.\n'
p22783
sS'cpp_type'
p22784
S'double'
p22785
sS'default'
p22786
S'2'
p22787
sS'name'
p22788
S'max_catch_up_steps'
p22789
sS'required'
p22790
I00
sS'group_name'
p22791
Nsa(dp22792
S'description'
p22793
S'Maximum number of solve failures tolerated while sub_cycling.\n'
p22794
sS'cpp_type'
p22795
S'unsigned int'
p22796
sS'default'
p22797
S'0'
p22798
sS'name'
p22799
S'max_failures'
p22800
sS'required'
p22801
I00
sS'group_name'
p22802
Nsa(dp22803
S'description'
p22804
S"Maximum number of processors to give to each App in this MultiApp.  Useful for restricting small solves to just a few procs so they don't get spread out\n"
p22805
sS'cpp_type'
p22806
S'unsigned int'
p22807
sS'default'
p22808
S'4294967295'
p22809
sS'name'
p22810
S'max_procs_per_app'
p22811
sS'required'
p22812
I00
sS'group_name'
p22813
Nsa(dp22814
S'description'
p22815
S"Apps, designated by their 'numbers' starting with 0 corresponding to the order of the App positions, to be moved at move_time to move_positions\n"
p22816
sS'cpp_type'
p22817
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p22818
sS'default'
p22819
g3
sS'name'
p22820
S'move_apps'
p22821
sS'required'
p22822
I00
sS'group_name'
p22823
Nsa(dp22824
S'description'
p22825
S'The positions corresponding to each move_app.\n'
p22826
sS'cpp_type'
p22827
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p22828
sS'default'
p22829
g3
sS'name'
p22830
S'move_positions'
p22831
sS'required'
p22832
I00
sS'group_name'
p22833
Nsa(dp22834
S'description'
p22835
S'The time at which Apps designated by move_apps are moved to move_positions.\n'
p22836
sS'cpp_type'
p22837
S'double'
p22838
sS'default'
p22839
S'1.79769e+308'
p22840
sS'name'
p22841
S'move_time'
p22842
sS'required'
p22843
I00
sS'group_name'
p22844
Nsa(dp22845
S'description'
p22846
S"If true this will cause the output from the MultiApp to be 'moved' by its position vector\n"
p22847
sS'cpp_type'
p22848
S'bool'
p22849
sS'default'
p22850
S'0'
p22851
sS'name'
p22852
S'output_in_position'
p22853
sS'required'
p22854
I00
sS'group_name'
p22855
Nsa(dp22856
S'description'
p22857
S'If true then every sub-cycle will be output.\n'
p22858
sS'cpp_type'
p22859
S'bool'
p22860
sS'default'
p22861
S'0'
p22862
sS'name'
p22863
S'output_sub_cycles'
p22864
sS'required'
p22865
I00
sS'group_name'
p22866
Nsa(dp22867
S'description'
p22868
S"The positions of the App locations.  Each set of 3 values will represent a Point.  Either this must be supplied or 'positions_file'\n"
p22869
sS'cpp_type'
p22870
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p22871
sS'default'
p22872
g3
sS'name'
p22873
S'positions'
p22874
sS'required'
p22875
I00
sS'group_name'
p22876
Nsa(dp22877
S'description'
p22878
S"A filename that should be looked in for positions. Each set of 3 values in that file will represent a Point.  Either this must be supplied or 'positions'\n"
p22879
sS'cpp_type'
p22880
S'FileName'
p22881
sS'default'
p22882
g3
sS'name'
p22883
S'positions_file'
p22884
sS'required'
p22885
I00
sS'group_name'
p22886
Nsa(dp22887
S'description'
p22888
S'Toggle the display of sub-cycles on the screen.\n'
p22889
sS'cpp_type'
p22890
S'bool'
p22891
sS'default'
p22892
S'1'
p22893
sS'name'
p22894
S'print_sub_cycles'
p22895
sS'required'
p22896
I00
sS'group_name'
p22897
Nsa(dp22898
S'description'
p22899
S"The Apps that will be reset when 'reset_time' is hit.  These are the App 'numbers' starting with 0 corresponding to the order of the App positions.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p22900
sS'cpp_type'
p22901
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p22902
sS'default'
p22903
g3
sS'name'
p22904
S'reset_apps'
p22905
sS'required'
p22906
I00
sS'group_name'
p22907
Nsa(dp22908
S'description'
p22909
S"The time at which to reset Apps given by the 'reset_apps' parameter.  Resetting an App means that it is destroyed and recreated, possibly modeling the insertion of 'new' material for that app.\n"
p22910
sS'cpp_type'
p22911
S'double'
p22912
sS'default'
p22913
S'1.79769e+308'
p22914
sS'name'
p22915
S'reset_time'
p22916
sS'required'
p22917
I00
sS'group_name'
p22918
Nsa(dp22919
S'description'
p22920
S'The relative difference between the new solution and the old solution that will be considered to be at steady state\n'
p22921
sS'cpp_type'
p22922
S'double'
p22923
sS'default'
p22924
S'1e-08'
p22925
sS'name'
p22926
S'steady_state_tol'
p22927
sS'required'
p22928
I00
sS'group_name'
p22929
Nsa(dp22930
S'description'
p22931
S"Set to true to allow this MultiApp to take smaller timesteps than the rest of the simulation.  More than one timestep will be performed for each 'master' timestep\n"
p22932
sS'cpp_type'
p22933
S'bool'
p22934
sS'default'
p22935
S'0'
p22936
sS'name'
p22937
S'sub_cycling'
p22938
sS'required'
p22939
I00
sS'group_name'
p22940
Nsa(dp22941
S'description'
p22942
S"If true this MultiApp won't participate in dt decisions and will always be fast-forwarded to the current time.\n"
p22943
sS'cpp_type'
p22944
S'bool'
p22945
sS'default'
p22946
S'0'
p22947
sS'name'
p22948
S'tolerate_failure'
p22949
sS'required'
p22950
I00
sS'group_name'
p22951
Nsa(dp22952
S'description'
p22953
g3
sS'cpp_type'
p22954
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p22955
sS'default'
p22956
S'TransientMultiApp'
p22957
sS'name'
p22958
S'type'
p22959
sS'required'
p22960
I00
sS'group_name'
p22961
Nsa(dp22962
S'description'
p22963
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p22964
sS'cpp_type'
p22965
S'bool'
p22966
sS'default'
p22967
S'0'
p22968
sS'name'
p22969
S'use_displaced_mesh'
p22970
sS'required'
p22971
I00
sS'group_name'
p22972
S'Advanced'
p22973
sasS'name'
p22974
S'/MultiApps/TransientMultiApp'
p22975
sasS'parameters'
p22976
NsS'name'
p22977
S'/MultiApps'
p22978
sa(dp22979
S'description'
p22980
g3
sS'subblocks'
p22981
NsS'parameters'
p22982
(lp22983
(dp22984
S'description'
p22985
S'The boundary ID or name where the normals will be computed\n'
p22986
sS'cpp_type'
p22987
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p22988
sS'default'
p22989
S'ANY_BOUNDARY_ID'
p22990
sS'name'
p22991
S'boundary'
p22992
sS'required'
p22993
I00
sS'group_name'
p22994
Nsa(dp22995
S'description'
p22996
S"boundary ID or name with nodes at 'corners'\n"
p22997
sS'cpp_type'
p22998
S'BoundaryName'
p22999
sS'default'
p23000
g3
sS'name'
p23001
S'corner_boundary'
p23002
sS'required'
p23003
I00
sS'group_name'
p23004
Nsa(dp23005
S'name'
p23006
S'order'
p23007
sS'cpp_type'
p23008
S'MooseEnum'
p23009
sS'default'
p23010
S'FIRST'
p23011
sS'description'
p23012
S'Specifies the order of variables that hold the nodal normals. Needs to match the order of the mesh\n'
p23013
sS'required'
p23014
I00
sS'options'
p23015
S'FIRST SECOND'
p23016
sS'group_name'
p23017
NsasS'name'
p23018
S'/NodalNormals'
p23019
sa(dp23020
S'description'
p23021
g3
sS'subblocks'
p23022
(lp23023
(dp23024
S'description'
p23025
g3
sS'subblocks'
p23026
NsS'parameters'
p23027
(lp23028
(dp23029
S'description'
p23030
S'A string representing the Moose Object that will be built by this Action\n'
p23031
sS'cpp_type'
p23032
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23033
sS'default'
p23034
g3
sS'name'
p23035
S'type'
p23036
sS'required'
p23037
I01
sS'group_name'
p23038
NsasS'name'
p23039
S'/Outputs/*'
p23040
sa(dp23041
S'description'
p23042
g3
sS'subblocks'
p23043
NsS'parameters'
p23044
(lp23045
(dp23046
S'name'
p23047
S'additional_output_on'
p23048
sS'cpp_type'
p23049
S'MultiMooseEnum'
p23050
sS'default'
p23051
g3
sS'description'
p23052
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p23053
sS'required'
p23054
I00
sS'options'
p23055
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p23056
sS'group_name'
p23057
Nsa(dp23058
S'description'
p23059
S'Align the outputted csv data by padding the numbers with trailing whitespace\n'
p23060
sS'cpp_type'
p23061
S'bool'
p23062
sS'default'
p23063
S'0'
p23064
sS'name'
p23065
S'align'
p23066
sS'required'
p23067
I00
sS'group_name'
p23068
Nsa(dp23069
S'description'
p23070
S"Append '_displaced' to the output file base\n"
p23071
sS'cpp_type'
p23072
S'bool'
p23073
sS'default'
p23074
S'0'
p23075
sS'name'
p23076
S'append_displaced'
p23077
sS'required'
p23078
I00
sS'group_name'
p23079
Nsa(dp23080
S'description'
p23081
S'Append existing file on restart\n'
p23082
sS'cpp_type'
p23083
S'bool'
p23084
sS'default'
p23085
S'0'
p23086
sS'name'
p23087
S'append_restart'
p23088
sS'required'
p23089
I00
sS'group_name'
p23090
Nsa(dp23091
S'description'
p23092
S"Assign the delimiter (default is ','\n"
p23093
sS'cpp_type'
p23094
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23095
sS'default'
p23096
g3
sS'name'
p23097
S'delimiter'
p23098
sS'required'
p23099
I00
sS'group_name'
p23100
Nsa(dp23101
S'description'
p23102
S'Time at which this output object stop operating\n'
p23103
sS'cpp_type'
p23104
S'double'
p23105
sS'default'
p23106
g3
sS'name'
p23107
S'end_time'
p23108
sS'required'
p23109
I00
sS'group_name'
p23110
S'Timing'
p23111
sa(dp23112
S'description'
p23113
S'The desired solution output name without an extension\n'
p23114
sS'cpp_type'
p23115
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23116
sS'default'
p23117
g3
sS'name'
p23118
S'file_base'
p23119
sS'required'
p23120
I00
sS'group_name'
p23121
Nsa(dp23122
S'description'
p23123
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23124
sS'cpp_type'
p23125
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p23126
sS'default'
p23127
g3
sS'name'
p23128
S'hide'
p23129
sS'required'
p23130
I00
sS'group_name'
p23131
S'Variables'
p23132
sa(dp23133
S'description'
p23134
S'The interval at which time steps are output to the solution file\n'
p23135
sS'cpp_type'
p23136
S'unsigned int'
p23137
sS'default'
p23138
S'1'
p23139
sS'name'
p23140
S'interval'
p23141
sS'required'
p23142
I00
sS'group_name'
p23143
S'Timing'
p23144
sa(dp23145
S'description'
p23146
S'Number of divisions applied to time step when outputting linear residuals\n'
p23147
sS'cpp_type'
p23148
S'double'
p23149
sS'default'
p23150
S'1000'
p23151
sS'name'
p23152
S'linear_residual_dt_divisor'
p23153
sS'required'
p23154
I00
sS'group_name'
p23155
S'PETSc'
p23156
sa(dp23157
S'description'
p23158
S'Specifies an end time to begin output on each linear residual evaluation\n'
p23159
sS'cpp_type'
p23160
S'double'
p23161
sS'default'
p23162
g3
sS'name'
p23163
S'linear_residual_end_time'
p23164
sS'required'
p23165
I00
sS'group_name'
p23166
S'PETSc'
p23167
sa(dp23168
S'description'
p23169
S'Specifies a start time to begin output on each linear residual evaluation\n'
p23170
sS'cpp_type'
p23171
S'double'
p23172
sS'default'
p23173
g3
sS'name'
p23174
S'linear_residual_start_time'
p23175
sS'required'
p23176
I00
sS'group_name'
p23177
S'PETSc'
p23178
sa(dp23179
S'description'
p23180
S'Specifies whether output occurs on each linear residual evaluation\n'
p23181
sS'cpp_type'
p23182
S'bool'
p23183
sS'default'
p23184
S'0'
p23185
sS'name'
p23186
S'linear_residuals'
p23187
sS'required'
p23188
I00
sS'group_name'
p23189
S'PETSc'
p23190
sa(dp23191
S'description'
p23192
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p23193
sS'cpp_type'
p23194
S'double'
p23195
sS'default'
p23196
S'1000'
p23197
sS'name'
p23198
S'nonlinear_residual_dt_divisor'
p23199
sS'required'
p23200
I00
sS'group_name'
p23201
S'PETSc'
p23202
sa(dp23203
S'description'
p23204
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p23205
sS'cpp_type'
p23206
S'double'
p23207
sS'default'
p23208
g3
sS'name'
p23209
S'nonlinear_residual_end_time'
p23210
sS'required'
p23211
I00
sS'group_name'
p23212
S'PETSc'
p23213
sa(dp23214
S'description'
p23215
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p23216
sS'cpp_type'
p23217
S'double'
p23218
sS'default'
p23219
g3
sS'name'
p23220
S'nonlinear_residual_start_time'
p23221
sS'required'
p23222
I00
sS'group_name'
p23223
S'PETSc'
p23224
sa(dp23225
S'description'
p23226
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p23227
sS'cpp_type'
p23228
S'bool'
p23229
sS'default'
p23230
S'0'
p23231
sS'name'
p23232
S'nonlinear_residuals'
p23233
sS'required'
p23234
I00
sS'group_name'
p23235
S'PETSc'
p23236
sa(dp23237
S'description'
p23238
S'Enable/disable the output of elemental variables\n'
p23239
sS'cpp_type'
p23240
S'bool'
p23241
sS'default'
p23242
S'1'
p23243
sS'name'
p23244
S'output_elemental_variables'
p23245
sS'required'
p23246
I00
sS'group_name'
p23247
Nsa(dp23248
S'description'
p23249
S'When true all time attempted time steps are output\n'
p23250
sS'cpp_type'
p23251
S'bool'
p23252
sS'default'
p23253
S'0'
p23254
sS'name'
p23255
S'output_failed'
p23256
sS'required'
p23257
I00
sS'group_name'
p23258
Nsa(dp23259
S'description'
p23260
S'Force the final time step to be output, regardless of output interval\n'
p23261
sS'cpp_type'
p23262
S'bool'
p23263
sS'default'
p23264
S'0'
p23265
sS'name'
p23266
S'output_final'
p23267
sS'required'
p23268
I00
sS'group_name'
p23269
S'Timing'
p23270
sa(dp23271
S'description'
p23272
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p23273
sS'cpp_type'
p23274
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23275
sS'default'
p23276
g3
sS'name'
p23277
S'output_if_base_contains'
p23278
sS'required'
p23279
I00
sS'group_name'
p23280
S'Advanced'
p23281
sa(dp23282
S'description'
p23283
S'Request that the initial condition is output to the solution file\n'
p23284
sS'cpp_type'
p23285
S'bool'
p23286
sS'default'
p23287
S'0'
p23288
sS'name'
p23289
S'output_initial'
p23290
sS'required'
p23291
I00
sS'group_name'
p23292
S'Timing'
p23293
sa(dp23294
S'description'
p23295
S'Enable/disable the output of input file information\n'
p23296
sS'cpp_type'
p23297
S'bool'
p23298
sS'default'
p23299
S'1'
p23300
sS'name'
p23301
S'output_input'
p23302
sS'required'
p23303
I00
sS'group_name'
p23304
Nsa(dp23305
S'description'
p23306
S'Request that all intermediate steps (not initial or final) are output\n'
p23307
sS'cpp_type'
p23308
S'bool'
p23309
sS'default'
p23310
S'1'
p23311
sS'name'
p23312
S'output_intermediate'
p23313
sS'required'
p23314
I00
sS'group_name'
p23315
Nsa(dp23316
S'description'
p23317
S'Specifies whether output occurs on each linear residual evaluation\n'
p23318
sS'cpp_type'
p23319
S'bool'
p23320
sS'default'
p23321
S'0'
p23322
sS'name'
p23323
S'output_linear'
p23324
sS'required'
p23325
I00
sS'group_name'
p23326
Nsa(dp23327
S'description'
p23328
S'Enable/disable the output of nodal variables\n'
p23329
sS'cpp_type'
p23330
S'bool'
p23331
sS'default'
p23332
S'1'
p23333
sS'name'
p23334
S'output_nodal_variables'
p23335
sS'required'
p23336
I00
sS'group_name'
p23337
Nsa(dp23338
S'description'
p23339
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p23340
sS'cpp_type'
p23341
S'bool'
p23342
sS'default'
p23343
S'0'
p23344
sS'name'
p23345
S'output_nonlinear'
p23346
sS'required'
p23347
I00
sS'group_name'
p23348
Nsa(dp23349
S'name'
p23350
S'output_on'
p23351
sS'cpp_type'
p23352
S'MultiMooseEnum'
p23353
sS'default'
p23354
S'TIMESTEP_END'
p23355
sS'description'
p23356
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p23357
sS'required'
p23358
I00
sS'options'
p23359
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p23360
sS'group_name'
p23361
Nsa(dp23362
S'description'
p23363
S'Enable/disable the output of postprocessors\n'
p23364
sS'cpp_type'
p23365
S'bool'
p23366
sS'default'
p23367
S'1'
p23368
sS'name'
p23369
S'output_postprocessors'
p23370
sS'required'
p23371
I00
sS'group_name'
p23372
Nsa(dp23373
S'name'
p23374
S'output_postprocessors_on'
p23375
sS'cpp_type'
p23376
S'MultiMooseEnum'
p23377
sS'default'
p23378
g3
sS'description'
p23379
S'Control of when postprocessors are output\n'
p23380
sS'required'
p23381
I00
sS'options'
p23382
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p23383
sS'group_name'
p23384
S'Variables'
p23385
sa(dp23386
S'description'
p23387
S'Enable/disable the output of aux scalar variables\n'
p23388
sS'cpp_type'
p23389
S'bool'
p23390
sS'default'
p23391
S'1'
p23392
sS'name'
p23393
S'output_scalar_variables'
p23394
sS'required'
p23395
I00
sS'group_name'
p23396
Nsa(dp23397
S'name'
p23398
S'output_scalars_on'
p23399
sS'cpp_type'
p23400
S'MultiMooseEnum'
p23401
sS'default'
p23402
g3
sS'description'
p23403
S'Control the output of scalar variables\n'
p23404
sS'required'
p23405
I00
sS'options'
p23406
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p23407
sS'group_name'
p23408
S'Variables'
p23409
sa(dp23410
S'description'
p23411
S'Enable/disable the output of the simulation information\n'
p23412
sS'cpp_type'
p23413
S'bool'
p23414
sS'default'
p23415
S'1'
p23416
sS'name'
p23417
S'output_system_information'
p23418
sS'required'
p23419
I00
sS'group_name'
p23420
Nsa(dp23421
S'description'
p23422
S'Request that data be output at the end of the timestep\n'
p23423
sS'cpp_type'
p23424
S'bool'
p23425
sS'default'
p23426
S'1'
p23427
sS'name'
p23428
S'output_timestep_end'
p23429
sS'required'
p23430
I00
sS'group_name'
p23431
Nsa(dp23432
S'description'
p23433
S'Enable/disable the output of vector postprocessors\n'
p23434
sS'cpp_type'
p23435
S'bool'
p23436
sS'default'
p23437
S'1'
p23438
sS'name'
p23439
S'output_vector_postprocessors'
p23440
sS'required'
p23441
I00
sS'group_name'
p23442
Nsa(dp23443
S'name'
p23444
S'output_vector_postprocessors_on'
p23445
sS'cpp_type'
p23446
S'MultiMooseEnum'
p23447
sS'default'
p23448
g3
sS'description'
p23449
S'Enable/disable the output of VectorPostprocessors\n'
p23450
sS'required'
p23451
I00
sS'options'
p23452
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p23453
sS'group_name'
p23454
S'Variables'
p23455
sa(dp23456
S'description'
p23457
S'Set the output precision\n'
p23458
sS'cpp_type'
p23459
S'unsigned int'
p23460
sS'default'
p23461
S'14'
p23462
sS'name'
p23463
S'precision'
p23464
sS'required'
p23465
I00
sS'group_name'
p23466
Nsa(dp23467
S'description'
p23468
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p23469
sS'cpp_type'
p23470
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p23471
sS'default'
p23472
g3
sS'name'
p23473
S'show'
p23474
sS'required'
p23475
I00
sS'group_name'
p23476
S'Variables'
p23477
sa(dp23478
S'description'
p23479
S'Time at which this output object begins to operate\n'
p23480
sS'cpp_type'
p23481
S'double'
p23482
sS'default'
p23483
g3
sS'name'
p23484
S'start_time'
p23485
sS'required'
p23486
I00
sS'group_name'
p23487
S'Timing'
p23488
sa(dp23489
S'description'
p23490
S'Only export results at sync times\n'
p23491
sS'cpp_type'
p23492
S'bool'
p23493
sS'default'
p23494
S'0'
p23495
sS'name'
p23496
S'sync_only'
p23497
sS'required'
p23498
I00
sS'group_name'
p23499
S'Timing'
p23500
sa(dp23501
S'description'
p23502
S'Times at which the output and solution is forced to occur\n'
p23503
sS'cpp_type'
p23504
S'std::__1::vector<double, std::__1::allocator<double> >'
p23505
sS'default'
p23506
g3
sS'name'
p23507
S'sync_times'
p23508
sS'required'
p23509
I00
sS'group_name'
p23510
S'Timing'
p23511
sa(dp23512
S'description'
p23513
S'Time tolerance utilized checking start and end times\n'
p23514
sS'cpp_type'
p23515
S'double'
p23516
sS'default'
p23517
S'1e-14'
p23518
sS'name'
p23519
S'time_tolerance'
p23520
sS'required'
p23521
I00
sS'group_name'
p23522
S'Timing'
p23523
sa(dp23524
S'description'
p23525
g3
sS'cpp_type'
p23526
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23527
sS'default'
p23528
S'CSV'
p23529
sS'name'
p23530
S'type'
p23531
sS'required'
p23532
I00
sS'group_name'
p23533
Nsa(dp23534
S'description'
p23535
S'Enable/disable the use of the displaced mesh for outputting\n'
p23536
sS'cpp_type'
p23537
S'bool'
p23538
sS'default'
p23539
S'0'
p23540
sS'name'
p23541
S'use_displaced'
p23542
sS'required'
p23543
I00
sS'group_name'
p23544
NsasS'name'
p23545
S'/Outputs/CSV'
p23546
sa(dp23547
S'description'
p23548
g3
sS'subblocks'
p23549
NsS'parameters'
p23550
(lp23551
(dp23552
S'name'
p23553
S'additional_output_on'
p23554
sS'cpp_type'
p23555
S'MultiMooseEnum'
p23556
sS'default'
p23557
g3
sS'description'
p23558
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p23559
sS'required'
p23560
I00
sS'options'
p23561
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p23562
sS'group_name'
p23563
Nsa(dp23564
S'description'
p23565
S"Append '_displaced' to the output file base\n"
p23566
sS'cpp_type'
p23567
S'bool'
p23568
sS'default'
p23569
S'0'
p23570
sS'name'
p23571
S'append_displaced'
p23572
sS'required'
p23573
I00
sS'group_name'
p23574
Nsa(dp23575
S'description'
p23576
S'Toggle the output of binary files\n'
p23577
sS'cpp_type'
p23578
S'bool'
p23579
sS'default'
p23580
S'1'
p23581
sS'name'
p23582
S'binary'
p23583
sS'required'
p23584
I00
sS'group_name'
p23585
S'Advanced'
p23586
sa(dp23587
S'description'
p23588
S'Time at which this output object stop operating\n'
p23589
sS'cpp_type'
p23590
S'double'
p23591
sS'default'
p23592
g3
sS'name'
p23593
S'end_time'
p23594
sS'required'
p23595
I00
sS'group_name'
p23596
S'Timing'
p23597
sa(dp23598
S'description'
p23599
S'The desired solution output name without an extension\n'
p23600
sS'cpp_type'
p23601
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23602
sS'default'
p23603
g3
sS'name'
p23604
S'file_base'
p23605
sS'required'
p23606
I00
sS'group_name'
p23607
Nsa(dp23608
S'description'
p23609
S'The interval at which time steps are output to the solution file\n'
p23610
sS'cpp_type'
p23611
S'unsigned int'
p23612
sS'default'
p23613
S'1'
p23614
sS'name'
p23615
S'interval'
p23616
sS'required'
p23617
I00
sS'group_name'
p23618
S'Timing'
p23619
sa(dp23620
S'description'
p23621
S'Number of divisions applied to time step when outputting linear residuals\n'
p23622
sS'cpp_type'
p23623
S'double'
p23624
sS'default'
p23625
S'1000'
p23626
sS'name'
p23627
S'linear_residual_dt_divisor'
p23628
sS'required'
p23629
I00
sS'group_name'
p23630
S'PETSc'
p23631
sa(dp23632
S'description'
p23633
S'Specifies an end time to begin output on each linear residual evaluation\n'
p23634
sS'cpp_type'
p23635
S'double'
p23636
sS'default'
p23637
g3
sS'name'
p23638
S'linear_residual_end_time'
p23639
sS'required'
p23640
I00
sS'group_name'
p23641
S'PETSc'
p23642
sa(dp23643
S'description'
p23644
S'Specifies a start time to begin output on each linear residual evaluation\n'
p23645
sS'cpp_type'
p23646
S'double'
p23647
sS'default'
p23648
g3
sS'name'
p23649
S'linear_residual_start_time'
p23650
sS'required'
p23651
I00
sS'group_name'
p23652
S'PETSc'
p23653
sa(dp23654
S'description'
p23655
S'Specifies whether output occurs on each linear residual evaluation\n'
p23656
sS'cpp_type'
p23657
S'bool'
p23658
sS'default'
p23659
S'0'
p23660
sS'name'
p23661
S'linear_residuals'
p23662
sS'required'
p23663
I00
sS'group_name'
p23664
S'PETSc'
p23665
sa(dp23666
S'description'
p23667
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p23668
sS'cpp_type'
p23669
S'double'
p23670
sS'default'
p23671
S'1000'
p23672
sS'name'
p23673
S'nonlinear_residual_dt_divisor'
p23674
sS'required'
p23675
I00
sS'group_name'
p23676
S'PETSc'
p23677
sa(dp23678
S'description'
p23679
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p23680
sS'cpp_type'
p23681
S'double'
p23682
sS'default'
p23683
g3
sS'name'
p23684
S'nonlinear_residual_end_time'
p23685
sS'required'
p23686
I00
sS'group_name'
p23687
S'PETSc'
p23688
sa(dp23689
S'description'
p23690
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p23691
sS'cpp_type'
p23692
S'double'
p23693
sS'default'
p23694
g3
sS'name'
p23695
S'nonlinear_residual_start_time'
p23696
sS'required'
p23697
I00
sS'group_name'
p23698
S'PETSc'
p23699
sa(dp23700
S'description'
p23701
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p23702
sS'cpp_type'
p23703
S'bool'
p23704
sS'default'
p23705
S'0'
p23706
sS'name'
p23707
S'nonlinear_residuals'
p23708
sS'required'
p23709
I00
sS'group_name'
p23710
S'PETSc'
p23711
sa(dp23712
S'description'
p23713
S'Number of the restart files to save\n'
p23714
sS'cpp_type'
p23715
S'unsigned int'
p23716
sS'default'
p23717
S'2'
p23718
sS'name'
p23719
S'num_files'
p23720
sS'required'
p23721
I00
sS'group_name'
p23722
Nsa(dp23723
S'description'
p23724
S'When true all time attempted time steps are output\n'
p23725
sS'cpp_type'
p23726
S'bool'
p23727
sS'default'
p23728
S'0'
p23729
sS'name'
p23730
S'output_failed'
p23731
sS'required'
p23732
I00
sS'group_name'
p23733
Nsa(dp23734
S'description'
p23735
S'Force the final time step to be output, regardless of output interval\n'
p23736
sS'cpp_type'
p23737
S'bool'
p23738
sS'default'
p23739
S'0'
p23740
sS'name'
p23741
S'output_final'
p23742
sS'required'
p23743
I00
sS'group_name'
p23744
S'Timing'
p23745
sa(dp23746
S'description'
p23747
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p23748
sS'cpp_type'
p23749
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p23750
sS'default'
p23751
g3
sS'name'
p23752
S'output_if_base_contains'
p23753
sS'required'
p23754
I00
sS'group_name'
p23755
S'Advanced'
p23756
sa(dp23757
S'description'
p23758
S'Request that the initial condition is output to the solution file\n'
p23759
sS'cpp_type'
p23760
S'bool'
p23761
sS'default'
p23762
S'0'
p23763
sS'name'
p23764
S'output_initial'
p23765
sS'required'
p23766
I00
sS'group_name'
p23767
S'Timing'
p23768
sa(dp23769
S'description'
p23770
S'Request that all intermediate steps (not initial or final) are output\n'
p23771
sS'cpp_type'
p23772
S'bool'
p23773
sS'default'
p23774
S'1'
p23775
sS'name'
p23776
S'output_intermediate'
p23777
sS'required'
p23778
I00
sS'group_name'
p23779
Nsa(dp23780
S'description'
p23781
S'Specifies whether output occurs on each linear residual evaluation\n'
p23782
sS'cpp_type'
p23783
S'bool'
p23784
sS'default'
p23785
S'0'
p23786
sS'name'
p23787
S'output_linear'
p23788
sS'required'
p23789
I00
sS'group_name'
p23790
Nsa(dp23791
S'description'
p23792
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p23793
sS'cpp_type'
p23794
S'bool'
p23795
sS'default'
p23796
S'0'
p23797
sS'name'
p23798
S'output_nonlinear'
p23799
sS'required'
p23800
I00
sS'group_name'
p23801
Nsa(dp23802
S'name'
p23803
S'output_on'
p23804
sS'cpp_type'
p23805
S'MultiMooseEnum'
p23806
sS'default'
p23807
S'TIMESTEP_END'
p23808
sS'description'
p23809
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p23810
sS'required'
p23811
I00
sS'options'
p23812
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p23813
sS'group_name'
p23814
Nsa(dp23815
S'description'
p23816
S'Request that data be output at the end of the timestep\n'
p23817
sS'cpp_type'
p23818
S'bool'
p23819
sS'default'
p23820
S'1'
p23821
sS'name'
p23822
S'output_timestep_end'
p23823
sS'required'
p23824
I00
sS'group_name'
p23825
Nsa(dp23826
S'description'
p23827
S'The number of for extension suffix (e.g., out.e-s002)\n'
p23828
sS'cpp_type'
p23829
S'unsigned int'
p23830
sS'default'
p23831
S'4'
p23832
sS'name'
p23833
S'padding'
p23834
sS'required'
p23835
I00
sS'group_name'
p23836
S'Advanced'
p23837
sa(dp23838
S'description'
p23839
S'Time at which this output object begins to operate\n'
p23840
sS'cpp_type'
p23841
S'double'
p23842
sS'default'
p23843
g3
sS'name'
p23844
S'start_time'
p23845
sS'required'
p23846
I00
sS'group_name'
p23847
S'Timing'
p23848
sa(dp23849
S'description'
p23850
S'This will be appended to the file_base to create the directory name for checkpoint files.\n'
p23851
sS'cpp_type'
p23852
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23853
sS'default'
p23854
S'cp'
p23855
sS'name'
p23856
S'suffix'
p23857
sS'required'
p23858
I00
sS'group_name'
p23859
Nsa(dp23860
S'description'
p23861
S'Only export results at sync times\n'
p23862
sS'cpp_type'
p23863
S'bool'
p23864
sS'default'
p23865
S'0'
p23866
sS'name'
p23867
S'sync_only'
p23868
sS'required'
p23869
I00
sS'group_name'
p23870
S'Timing'
p23871
sa(dp23872
S'description'
p23873
S'Times at which the output and solution is forced to occur\n'
p23874
sS'cpp_type'
p23875
S'std::__1::vector<double, std::__1::allocator<double> >'
p23876
sS'default'
p23877
g3
sS'name'
p23878
S'sync_times'
p23879
sS'required'
p23880
I00
sS'group_name'
p23881
S'Timing'
p23882
sa(dp23883
S'description'
p23884
S'Time tolerance utilized checking start and end times\n'
p23885
sS'cpp_type'
p23886
S'double'
p23887
sS'default'
p23888
S'1e-14'
p23889
sS'name'
p23890
S'time_tolerance'
p23891
sS'required'
p23892
I00
sS'group_name'
p23893
S'Timing'
p23894
sa(dp23895
S'description'
p23896
g3
sS'cpp_type'
p23897
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23898
sS'default'
p23899
S'Checkpoint'
p23900
sS'name'
p23901
S'type'
p23902
sS'required'
p23903
I00
sS'group_name'
p23904
Nsa(dp23905
S'description'
p23906
S'Enable/disable the use of the displaced mesh for outputting\n'
p23907
sS'cpp_type'
p23908
S'bool'
p23909
sS'default'
p23910
S'0'
p23911
sS'name'
p23912
S'use_displaced'
p23913
sS'required'
p23914
I00
sS'group_name'
p23915
NsasS'name'
p23916
S'/Outputs/Checkpoint'
p23917
sa(dp23918
S'description'
p23919
g3
sS'subblocks'
p23920
NsS'parameters'
p23921
(lp23922
(dp23923
S'name'
p23924
S'additional_output_on'
p23925
sS'cpp_type'
p23926
S'MultiMooseEnum'
p23927
sS'default'
p23928
g3
sS'description'
p23929
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p23930
sS'required'
p23931
I00
sS'options'
p23932
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p23933
sS'group_name'
p23934
Nsa(dp23935
S'description'
p23936
S'If true, all variable norms will be printed after each solve\n'
p23937
sS'cpp_type'
p23938
S'bool'
p23939
sS'default'
p23940
S'0'
p23941
sS'name'
p23942
S'all_variable_norms'
p23943
sS'required'
p23944
I00
sS'group_name'
p23945
S'Norms'
p23946
sa(dp23947
S'description'
p23948
S"Append '_displaced' to the output file base\n"
p23949
sS'cpp_type'
p23950
S'bool'
p23951
sS'default'
p23952
S'0'
p23953
sS'name'
p23954
S'append_displaced'
p23955
sS'required'
p23956
I00
sS'group_name'
p23957
Nsa(dp23958
S'description'
p23959
S'Append existing file on restart\n'
p23960
sS'cpp_type'
p23961
S'bool'
p23962
sS'default'
p23963
S'0'
p23964
sS'name'
p23965
S'append_restart'
p23966
sS'required'
p23967
I00
sS'group_name'
p23968
Nsa(dp23969
S'description'
p23970
S'Time at which this output object stop operating\n'
p23971
sS'cpp_type'
p23972
S'double'
p23973
sS'default'
p23974
g3
sS'name'
p23975
S'end_time'
p23976
sS'required'
p23977
I00
sS'group_name'
p23978
S'Timing'
p23979
sa(dp23980
S'description'
p23981
S'The desired solution output name without an extension\n'
p23982
sS'cpp_type'
p23983
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p23984
sS'default'
p23985
g3
sS'name'
p23986
S'file_base'
p23987
sS'required'
p23988
I00
sS'group_name'
p23989
Nsa(dp23990
S'name'
p23991
S'fit_mode'
p23992
sS'cpp_type'
p23993
S'MooseEnum'
p23994
sS'default'
p23995
S'ENVIRONMENT'
p23996
sS'description'
p23997
S'Specifies the wrapping mode for post-processor tables that are printed to the screen (ENVIRONMENT: Read "MOOSE_PPS_WIDTH" for desired width, AUTO: Attempt to determine width automatically (serial only), <n>: Desired width\n'
p23998
sS'required'
p23999
I00
sS'options'
p24000
S'ENVIRONMENT AUTO 80 120 160'
p24001
sS'group_name'
p24002
Nsa(dp24003
S'description'
p24004
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24005
sS'cpp_type'
p24006
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p24007
sS'default'
p24008
g3
sS'name'
p24009
S'hide'
p24010
sS'required'
p24011
I00
sS'group_name'
p24012
S'Variables'
p24013
sa(dp24014
S'description'
p24015
S'The interval at which time steps are output to the solution file\n'
p24016
sS'cpp_type'
p24017
S'unsigned int'
p24018
sS'default'
p24019
S'1'
p24020
sS'name'
p24021
S'interval'
p24022
sS'required'
p24023
I00
sS'group_name'
p24024
S'Timing'
p24025
sa(dp24026
S'description'
p24027
S'Number of divisions applied to time step when outputting linear residuals\n'
p24028
sS'cpp_type'
p24029
S'double'
p24030
sS'default'
p24031
S'1000'
p24032
sS'name'
p24033
S'linear_residual_dt_divisor'
p24034
sS'required'
p24035
I00
sS'group_name'
p24036
S'PETSc'
p24037
sa(dp24038
S'description'
p24039
S'Specifies an end time to begin output on each linear residual evaluation\n'
p24040
sS'cpp_type'
p24041
S'double'
p24042
sS'default'
p24043
g3
sS'name'
p24044
S'linear_residual_end_time'
p24045
sS'required'
p24046
I00
sS'group_name'
p24047
S'PETSc'
p24048
sa(dp24049
S'description'
p24050
S'Specifies a start time to begin output on each linear residual evaluation\n'
p24051
sS'cpp_type'
p24052
S'double'
p24053
sS'default'
p24054
g3
sS'name'
p24055
S'linear_residual_start_time'
p24056
sS'required'
p24057
I00
sS'group_name'
p24058
S'PETSc'
p24059
sa(dp24060
S'description'
p24061
S'Specifies whether output occurs on each linear residual evaluation\n'
p24062
sS'cpp_type'
p24063
S'bool'
p24064
sS'default'
p24065
S'0'
p24066
sS'name'
p24067
S'linear_residuals'
p24068
sS'required'
p24069
I00
sS'group_name'
p24070
S'PETSc'
p24071
sa(dp24072
S'description'
p24073
S'The maximum number of postprocessor/scalar values displayed on screen during a timestep (set to 0 for unlimited)\n'
p24074
sS'cpp_type'
p24075
S'unsigned int'
p24076
sS'default'
p24077
S'15'
p24078
sS'name'
p24079
S'max_rows'
p24080
sS'required'
p24081
I00
sS'group_name'
p24082
S'Advanced'
p24083
sa(dp24084
S'description'
p24085
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p24086
sS'cpp_type'
p24087
S'double'
p24088
sS'default'
p24089
S'1000'
p24090
sS'name'
p24091
S'nonlinear_residual_dt_divisor'
p24092
sS'required'
p24093
I00
sS'group_name'
p24094
S'PETSc'
p24095
sa(dp24096
S'description'
p24097
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p24098
sS'cpp_type'
p24099
S'double'
p24100
sS'default'
p24101
g3
sS'name'
p24102
S'nonlinear_residual_end_time'
p24103
sS'required'
p24104
I00
sS'group_name'
p24105
S'PETSc'
p24106
sa(dp24107
S'description'
p24108
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p24109
sS'cpp_type'
p24110
S'double'
p24111
sS'default'
p24112
g3
sS'name'
p24113
S'nonlinear_residual_start_time'
p24114
sS'required'
p24115
I00
sS'group_name'
p24116
S'PETSc'
p24117
sa(dp24118
S'description'
p24119
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24120
sS'cpp_type'
p24121
S'bool'
p24122
sS'default'
p24123
S'0'
p24124
sS'name'
p24125
S'nonlinear_residuals'
p24126
sS'required'
p24127
I00
sS'group_name'
p24128
S'PETSc'
p24129
sa(dp24130
S'description'
p24131
S'Multiplier utilized to determine if a residual norm is an outlier. If the variable residual is less than multiplier[0] times the total residual it is colored red. If the variable residual is less than multiplier[1] times the average residual it is colored yellow.\n'
p24132
sS'cpp_type'
p24133
S'std::__1::vector<double, std::__1::allocator<double> >'
p24134
sS'default'
p24135
S'0.8 2'
p24136
sS'name'
p24137
S'outlier_multiplier'
p24138
sS'required'
p24139
I00
sS'group_name'
p24140
S'Norms'
p24141
sa(dp24142
S'description'
p24143
S'If true, outlier variable norms will be printed after each solve\n'
p24144
sS'cpp_type'
p24145
S'bool'
p24146
sS'default'
p24147
S'1'
p24148
sS'name'
p24149
S'outlier_variable_norms'
p24150
sS'required'
p24151
I00
sS'group_name'
p24152
S'Norms'
p24153
sa(dp24154
S'description'
p24155
S'Enable/disable the output of elemental variables\n'
p24156
sS'cpp_type'
p24157
S'bool'
p24158
sS'default'
p24159
S'1'
p24160
sS'name'
p24161
S'output_elemental_variables'
p24162
sS'required'
p24163
I00
sS'group_name'
p24164
Nsa(dp24165
S'description'
p24166
S'When true all time attempted time steps are output\n'
p24167
sS'cpp_type'
p24168
S'bool'
p24169
sS'default'
p24170
S'0'
p24171
sS'name'
p24172
S'output_failed'
p24173
sS'required'
p24174
I00
sS'group_name'
p24175
Nsa(dp24176
S'description'
p24177
S'Output to the file\n'
p24178
sS'cpp_type'
p24179
S'bool'
p24180
sS'default'
p24181
S'0'
p24182
sS'name'
p24183
S'output_file'
p24184
sS'required'
p24185
I00
sS'group_name'
p24186
Nsa(dp24187
S'description'
p24188
S'Force the final time step to be output, regardless of output interval\n'
p24189
sS'cpp_type'
p24190
S'bool'
p24191
sS'default'
p24192
S'0'
p24193
sS'name'
p24194
S'output_final'
p24195
sS'required'
p24196
I00
sS'group_name'
p24197
S'Timing'
p24198
sa(dp24199
S'description'
p24200
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p24201
sS'cpp_type'
p24202
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24203
sS'default'
p24204
g3
sS'name'
p24205
S'output_if_base_contains'
p24206
sS'required'
p24207
I00
sS'group_name'
p24208
S'Advanced'
p24209
sa(dp24210
S'description'
p24211
S'Request that the initial condition is output to the solution file\n'
p24212
sS'cpp_type'
p24213
S'bool'
p24214
sS'default'
p24215
S'0'
p24216
sS'name'
p24217
S'output_initial'
p24218
sS'required'
p24219
I00
sS'group_name'
p24220
S'Timing'
p24221
sa(dp24222
S'description'
p24223
S'Enable/disable the output of input file information\n'
p24224
sS'cpp_type'
p24225
S'bool'
p24226
sS'default'
p24227
S'1'
p24228
sS'name'
p24229
S'output_input'
p24230
sS'required'
p24231
I00
sS'group_name'
p24232
Nsa(dp24233
S'name'
p24234
S'output_input_on'
p24235
sS'cpp_type'
p24236
S'MultiMooseEnum'
p24237
sS'default'
p24238
g3
sS'description'
p24239
S'Enable/disable the output of the input file\n'
p24240
sS'required'
p24241
I00
sS'options'
p24242
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p24243
sS'group_name'
p24244
S'Variables'
p24245
sa(dp24246
S'description'
p24247
S'Request that all intermediate steps (not initial or final) are output\n'
p24248
sS'cpp_type'
p24249
S'bool'
p24250
sS'default'
p24251
S'1'
p24252
sS'name'
p24253
S'output_intermediate'
p24254
sS'required'
p24255
I00
sS'group_name'
p24256
Nsa(dp24257
S'description'
p24258
S'Specifies whether output occurs on each linear residual evaluation\n'
p24259
sS'cpp_type'
p24260
S'bool'
p24261
sS'default'
p24262
S'0'
p24263
sS'name'
p24264
S'output_linear'
p24265
sS'required'
p24266
I00
sS'group_name'
p24267
Nsa(dp24268
S'description'
p24269
S'Enable/disable the output of nodal variables\n'
p24270
sS'cpp_type'
p24271
S'bool'
p24272
sS'default'
p24273
S'1'
p24274
sS'name'
p24275
S'output_nodal_variables'
p24276
sS'required'
p24277
I00
sS'group_name'
p24278
Nsa(dp24279
S'description'
p24280
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24281
sS'cpp_type'
p24282
S'bool'
p24283
sS'default'
p24284
S'0'
p24285
sS'name'
p24286
S'output_nonlinear'
p24287
sS'required'
p24288
I00
sS'group_name'
p24289
Nsa(dp24290
S'name'
p24291
S'output_on'
p24292
sS'cpp_type'
p24293
S'MultiMooseEnum'
p24294
sS'default'
p24295
S'FAILED NONLINEAR TIMESTEP_BEGIN TIMESTEP_END'
p24296
sS'description'
p24297
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p24298
sS'required'
p24299
I00
sS'options'
p24300
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p24301
sS'group_name'
p24302
Nsa(dp24303
S'description'
p24304
S'Enable/disable the output of postprocessors\n'
p24305
sS'cpp_type'
p24306
S'bool'
p24307
sS'default'
p24308
S'1'
p24309
sS'name'
p24310
S'output_postprocessors'
p24311
sS'required'
p24312
I00
sS'group_name'
p24313
Nsa(dp24314
S'name'
p24315
S'output_postprocessors_on'
p24316
sS'cpp_type'
p24317
S'MultiMooseEnum'
p24318
sS'default'
p24319
S'TIMESTEP_END'
p24320
sS'description'
p24321
S'Control of when postprocessors are output\n'
p24322
sS'required'
p24323
I00
sS'options'
p24324
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p24325
sS'group_name'
p24326
S'Variables'
p24327
sa(dp24328
S'description'
p24329
S'Enable/disable the output of aux scalar variables\n'
p24330
sS'cpp_type'
p24331
S'bool'
p24332
sS'default'
p24333
S'1'
p24334
sS'name'
p24335
S'output_scalar_variables'
p24336
sS'required'
p24337
I00
sS'group_name'
p24338
Nsa(dp24339
S'name'
p24340
S'output_scalars_on'
p24341
sS'cpp_type'
p24342
S'MultiMooseEnum'
p24343
sS'default'
p24344
S'TIMESTEP_END'
p24345
sS'description'
p24346
S'Control the output of scalar variables\n'
p24347
sS'required'
p24348
I00
sS'options'
p24349
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p24350
sS'group_name'
p24351
S'Variables'
p24352
sa(dp24353
S'description'
p24354
S'Output to the screen\n'
p24355
sS'cpp_type'
p24356
S'bool'
p24357
sS'default'
p24358
S'1'
p24359
sS'name'
p24360
S'output_screen'
p24361
sS'required'
p24362
I00
sS'group_name'
p24363
Nsa(dp24364
S'description'
p24365
S'Enable/disable the output of the simulation information\n'
p24366
sS'cpp_type'
p24367
S'bool'
p24368
sS'default'
p24369
S'1'
p24370
sS'name'
p24371
S'output_system_information'
p24372
sS'required'
p24373
I00
sS'group_name'
p24374
Nsa(dp24375
S'name'
p24376
S'output_system_information_on'
p24377
sS'cpp_type'
p24378
S'MultiMooseEnum'
p24379
sS'default'
p24380
S'INITIAL'
p24381
sS'description'
p24382
S'Control when the output of the simulation information occurs\n'
p24383
sS'required'
p24384
I00
sS'options'
p24385
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p24386
sS'group_name'
p24387
S'Variables'
p24388
sa(dp24389
S'description'
p24390
S'Request that data be output at the end of the timestep\n'
p24391
sS'cpp_type'
p24392
S'bool'
p24393
sS'default'
p24394
S'1'
p24395
sS'name'
p24396
S'output_timestep_end'
p24397
sS'required'
p24398
I00
sS'group_name'
p24399
Nsa(dp24400
S'description'
p24401
S'Enable/disable the output of vector postprocessors\n'
p24402
sS'cpp_type'
p24403
S'bool'
p24404
sS'default'
p24405
S'1'
p24406
sS'name'
p24407
S'output_vector_postprocessors'
p24408
sS'required'
p24409
I00
sS'group_name'
p24410
Nsa(dp24411
S'name'
p24412
S'output_vector_postprocessors_on'
p24413
sS'cpp_type'
p24414
S'MultiMooseEnum'
p24415
sS'default'
p24416
S'TIMESTEP_END'
p24417
sS'description'
p24418
S'Enable/disable the output of VectorPostprocessors\n'
p24419
sS'required'
p24420
I00
sS'options'
p24421
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p24422
sS'group_name'
p24423
S'Variables'
p24424
sa(dp24425
S'description'
p24426
S'The number of for extension suffix (e.g., out.e-s002)\n'
p24427
sS'cpp_type'
p24428
S'unsigned int'
p24429
sS'default'
p24430
S'4'
p24431
sS'name'
p24432
S'padding'
p24433
sS'required'
p24434
I00
sS'group_name'
p24435
S'Advanced'
p24436
sa(dp24437
S'description'
p24438
S"Print the libMesh performance log header (requires that 'perf_log = true')\n"
p24439
sS'cpp_type'
p24440
S'bool'
p24441
sS'default'
p24442
g3
sS'name'
p24443
S'perf_header'
p24444
sS'required'
p24445
I00
sS'group_name'
p24446
S'Perf Log'
p24447
sa(dp24448
S'description'
p24449
S'If true, all performance logs will be printed. The individual log settings will override this option.\n'
p24450
sS'cpp_type'
p24451
S'bool'
p24452
sS'default'
p24453
S'0'
p24454
sS'name'
p24455
S'perf_log'
p24456
sS'required'
p24457
I00
sS'group_name'
p24458
S'Perf Log'
p24459
sa(dp24460
S'description'
p24461
S'When true, each time the mesh is changed the mesh information is printed\n'
p24462
sS'cpp_type'
p24463
S'bool'
p24464
sS'default'
p24465
S'0'
p24466
sS'name'
p24467
S'print_mesh_changed_info'
p24468
sS'required'
p24469
I00
sS'group_name'
p24470
Nsa(dp24471
S'description'
p24472
S'Control the printing of time and dt in scientific notation\n'
p24473
sS'cpp_type'
p24474
S'bool'
p24475
sS'default'
p24476
S'0'
p24477
sS'name'
p24478
S'scientific_time'
p24479
sS'required'
p24480
I00
sS'group_name'
p24481
Nsa(dp24482
S'description'
p24483
S"Toggles the printing of the 'Setup Performance' log\n"
p24484
sS'cpp_type'
p24485
S'bool'
p24486
sS'default'
p24487
g3
sS'name'
p24488
S'setup_log'
p24489
sS'required'
p24490
I00
sS'group_name'
p24491
S'Perf Log'
p24492
sa(dp24493
S'description'
p24494
S'Specifies whether or not the Setup Performance log should be printed before the first time step.  It will still be printed at the end if perf_log is also enabled and likewise disabled if perf_log is false\n'
p24495
sS'cpp_type'
p24496
S'bool'
p24497
sS'default'
p24498
S'0'
p24499
sS'name'
p24500
S'setup_log_early'
p24501
sS'required'
p24502
I00
sS'group_name'
p24503
S'Perf Log'
p24504
sa(dp24505
S'description'
p24506
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p24507
sS'cpp_type'
p24508
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p24509
sS'default'
p24510
g3
sS'name'
p24511
S'show'
p24512
sS'required'
p24513
I00
sS'group_name'
p24514
S'Variables'
p24515
sa(dp24516
S'description'
p24517
S'Indent multiapp output using the multiapp name\n'
p24518
sS'cpp_type'
p24519
S'bool'
p24520
sS'default'
p24521
S'0'
p24522
sS'name'
p24523
S'show_multiapp_name'
p24524
sS'required'
p24525
I00
sS'group_name'
p24526
S'Advanced'
p24527
sa(dp24528
S'description'
p24529
S"Toggles the printing of the 'Moose Test Performance' log\n"
p24530
sS'cpp_type'
p24531
S'bool'
p24532
sS'default'
p24533
g3
sS'name'
p24534
S'solve_log'
p24535
sS'required'
p24536
I00
sS'group_name'
p24537
S'Perf Log'
p24538
sa(dp24539
S'description'
p24540
S'Time at which this output object begins to operate\n'
p24541
sS'cpp_type'
p24542
S'double'
p24543
sS'default'
p24544
g3
sS'name'
p24545
S'start_time'
p24546
sS'required'
p24547
I00
sS'group_name'
p24548
S'Timing'
p24549
sa(dp24550
S'description'
p24551
S'Only export results at sync times\n'
p24552
sS'cpp_type'
p24553
S'bool'
p24554
sS'default'
p24555
S'0'
p24556
sS'name'
p24557
S'sync_only'
p24558
sS'required'
p24559
I00
sS'group_name'
p24560
S'Timing'
p24561
sa(dp24562
S'description'
p24563
S'Times at which the output and solution is forced to occur\n'
p24564
sS'cpp_type'
p24565
S'std::__1::vector<double, std::__1::allocator<double> >'
p24566
sS'default'
p24567
g3
sS'name'
p24568
S'sync_times'
p24569
sS'required'
p24570
I00
sS'group_name'
p24571
S'Timing'
p24572
sa(dp24573
S'name'
p24574
S'system_info'
p24575
sS'cpp_type'
p24576
S'MultiMooseEnum'
p24577
sS'default'
p24578
S'AUX EXECUTION FRAMEWORK HEADER MESH NONLINEAR'
p24579
sS'description'
p24580
S"List of information types to display ('framework', 'mesh', 'aux', 'nonlinear', 'execution', 'output', 'header')\n"
p24581
sS'required'
p24582
I00
sS'options'
p24583
S'framework mesh aux nonlinear execution output header'
p24584
sS'group_name'
p24585
S'Advanced'
p24586
sa(dp24587
S'description'
p24588
S'The number of significant digits that are printed on time related outputs\n'
p24589
sS'cpp_type'
p24590
S'unsigned int'
p24591
sS'default'
p24592
g3
sS'name'
p24593
S'time_precision'
p24594
sS'required'
p24595
I00
sS'group_name'
p24596
Nsa(dp24597
S'description'
p24598
S'Time tolerance utilized checking start and end times\n'
p24599
sS'cpp_type'
p24600
S'double'
p24601
sS'default'
p24602
S'1e-14'
p24603
sS'name'
p24604
S'time_tolerance'
p24605
sS'required'
p24606
I00
sS'group_name'
p24607
S'Timing'
p24608
sa(dp24609
S'description'
p24610
g3
sS'cpp_type'
p24611
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24612
sS'default'
p24613
S'Console'
p24614
sS'name'
p24615
S'type'
p24616
sS'required'
p24617
I00
sS'group_name'
p24618
Nsa(dp24619
S'description'
p24620
S'Enable/disable the use of the displaced mesh for outputting\n'
p24621
sS'cpp_type'
p24622
S'bool'
p24623
sS'default'
p24624
S'0'
p24625
sS'name'
p24626
S'use_displaced'
p24627
sS'required'
p24628
I00
sS'group_name'
p24629
Nsa(dp24630
S'description'
p24631
S'Print detailed diagnostics on timestep calculation\n'
p24632
sS'cpp_type'
p24633
S'bool'
p24634
sS'default'
p24635
S'0'
p24636
sS'name'
p24637
S'verbose'
p24638
sS'required'
p24639
I00
sS'group_name'
p24640
S'Advanced'
p24641
sasS'name'
p24642
S'/Outputs/Console'
p24643
sa(dp24644
S'description'
p24645
g3
sS'subblocks'
p24646
NsS'parameters'
p24647
(lp24648
(dp24649
S'name'
p24650
S'additional_output_on'
p24651
sS'cpp_type'
p24652
S'MultiMooseEnum'
p24653
sS'default'
p24654
g3
sS'description'
p24655
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p24656
sS'required'
p24657
I00
sS'options'
p24658
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p24659
sS'group_name'
p24660
Nsa(dp24661
S'description'
p24662
S"Append '_displaced' to the output file base\n"
p24663
sS'cpp_type'
p24664
S'bool'
p24665
sS'default'
p24666
S'0'
p24667
sS'name'
p24668
S'append_displaced'
p24669
sS'required'
p24670
I00
sS'group_name'
p24671
Nsa(dp24672
S'description'
p24673
S'Time at which this output object stop operating\n'
p24674
sS'cpp_type'
p24675
S'double'
p24676
sS'default'
p24677
g3
sS'name'
p24678
S'end_time'
p24679
sS'required'
p24680
I00
sS'group_name'
p24681
S'Timing'
p24682
sa(dp24683
S'description'
p24684
S'The desired solution output name without an extension\n'
p24685
sS'cpp_type'
p24686
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24687
sS'default'
p24688
g3
sS'name'
p24689
S'file_base'
p24690
sS'required'
p24691
I00
sS'group_name'
p24692
Nsa(dp24693
S'description'
p24694
S'The interval at which time steps are output to the solution file\n'
p24695
sS'cpp_type'
p24696
S'unsigned int'
p24697
sS'default'
p24698
S'1'
p24699
sS'name'
p24700
S'interval'
p24701
sS'required'
p24702
I00
sS'group_name'
p24703
S'Timing'
p24704
sa(dp24705
S'description'
p24706
S'Number of divisions applied to time step when outputting linear residuals\n'
p24707
sS'cpp_type'
p24708
S'double'
p24709
sS'default'
p24710
S'1000'
p24711
sS'name'
p24712
S'linear_residual_dt_divisor'
p24713
sS'required'
p24714
I00
sS'group_name'
p24715
S'PETSc'
p24716
sa(dp24717
S'description'
p24718
S'Specifies an end time to begin output on each linear residual evaluation\n'
p24719
sS'cpp_type'
p24720
S'double'
p24721
sS'default'
p24722
g3
sS'name'
p24723
S'linear_residual_end_time'
p24724
sS'required'
p24725
I00
sS'group_name'
p24726
S'PETSc'
p24727
sa(dp24728
S'description'
p24729
S'Specifies a start time to begin output on each linear residual evaluation\n'
p24730
sS'cpp_type'
p24731
S'double'
p24732
sS'default'
p24733
g3
sS'name'
p24734
S'linear_residual_start_time'
p24735
sS'required'
p24736
I00
sS'group_name'
p24737
S'PETSc'
p24738
sa(dp24739
S'description'
p24740
S'Specifies whether output occurs on each linear residual evaluation\n'
p24741
sS'cpp_type'
p24742
S'bool'
p24743
sS'default'
p24744
S'0'
p24745
sS'name'
p24746
S'linear_residuals'
p24747
sS'required'
p24748
I00
sS'group_name'
p24749
S'PETSc'
p24750
sa(dp24751
S'description'
p24752
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p24753
sS'cpp_type'
p24754
S'double'
p24755
sS'default'
p24756
S'1000'
p24757
sS'name'
p24758
S'nonlinear_residual_dt_divisor'
p24759
sS'required'
p24760
I00
sS'group_name'
p24761
S'PETSc'
p24762
sa(dp24763
S'description'
p24764
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p24765
sS'cpp_type'
p24766
S'double'
p24767
sS'default'
p24768
g3
sS'name'
p24769
S'nonlinear_residual_end_time'
p24770
sS'required'
p24771
I00
sS'group_name'
p24772
S'PETSc'
p24773
sa(dp24774
S'description'
p24775
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p24776
sS'cpp_type'
p24777
S'double'
p24778
sS'default'
p24779
g3
sS'name'
p24780
S'nonlinear_residual_start_time'
p24781
sS'required'
p24782
I00
sS'group_name'
p24783
S'PETSc'
p24784
sa(dp24785
S'description'
p24786
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24787
sS'cpp_type'
p24788
S'bool'
p24789
sS'default'
p24790
S'0'
p24791
sS'name'
p24792
S'nonlinear_residuals'
p24793
sS'required'
p24794
I00
sS'group_name'
p24795
S'PETSc'
p24796
sa(dp24797
S'description'
p24798
S'When true all time attempted time steps are output\n'
p24799
sS'cpp_type'
p24800
S'bool'
p24801
sS'default'
p24802
S'0'
p24803
sS'name'
p24804
S'output_failed'
p24805
sS'required'
p24806
I00
sS'group_name'
p24807
Nsa(dp24808
S'description'
p24809
S'Output to the file\n'
p24810
sS'cpp_type'
p24811
S'bool'
p24812
sS'default'
p24813
S'1'
p24814
sS'name'
p24815
S'output_file'
p24816
sS'required'
p24817
I00
sS'group_name'
p24818
Nsa(dp24819
S'description'
p24820
S'Force the final time step to be output, regardless of output interval\n'
p24821
sS'cpp_type'
p24822
S'bool'
p24823
sS'default'
p24824
S'0'
p24825
sS'name'
p24826
S'output_final'
p24827
sS'required'
p24828
I00
sS'group_name'
p24829
S'Timing'
p24830
sa(dp24831
S'description'
p24832
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p24833
sS'cpp_type'
p24834
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p24835
sS'default'
p24836
g3
sS'name'
p24837
S'output_if_base_contains'
p24838
sS'required'
p24839
I00
sS'group_name'
p24840
S'Advanced'
p24841
sa(dp24842
S'description'
p24843
S'Request that the initial condition is output to the solution file\n'
p24844
sS'cpp_type'
p24845
S'bool'
p24846
sS'default'
p24847
S'0'
p24848
sS'name'
p24849
S'output_initial'
p24850
sS'required'
p24851
I00
sS'group_name'
p24852
S'Timing'
p24853
sa(dp24854
S'description'
p24855
S'Request that all intermediate steps (not initial or final) are output\n'
p24856
sS'cpp_type'
p24857
S'bool'
p24858
sS'default'
p24859
S'1'
p24860
sS'name'
p24861
S'output_intermediate'
p24862
sS'required'
p24863
I00
sS'group_name'
p24864
Nsa(dp24865
S'description'
p24866
S'Specifies whether output occurs on each linear residual evaluation\n'
p24867
sS'cpp_type'
p24868
S'bool'
p24869
sS'default'
p24870
S'0'
p24871
sS'name'
p24872
S'output_linear'
p24873
sS'required'
p24874
I00
sS'group_name'
p24875
Nsa(dp24876
S'description'
p24877
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p24878
sS'cpp_type'
p24879
S'bool'
p24880
sS'default'
p24881
S'0'
p24882
sS'name'
p24883
S'output_nonlinear'
p24884
sS'required'
p24885
I00
sS'group_name'
p24886
Nsa(dp24887
S'name'
p24888
S'output_on'
p24889
sS'cpp_type'
p24890
S'MultiMooseEnum'
p24891
sS'default'
p24892
S'INITIAL'
p24893
sS'description'
p24894
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p24895
sS'required'
p24896
I00
sS'options'
p24897
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p24898
sS'group_name'
p24899
Nsa(dp24900
S'description'
p24901
S'Output to the screen\n'
p24902
sS'cpp_type'
p24903
S'bool'
p24904
sS'default'
p24905
S'0'
p24906
sS'name'
p24907
S'output_screen'
p24908
sS'required'
p24909
I00
sS'group_name'
p24910
Nsa(dp24911
S'description'
p24912
S'Request that data be output at the end of the timestep\n'
p24913
sS'cpp_type'
p24914
S'bool'
p24915
sS'default'
p24916
S'1'
p24917
sS'name'
p24918
S'output_timestep_end'
p24919
sS'required'
p24920
I00
sS'group_name'
p24921
Nsa(dp24922
S'description'
p24923
S'The number of for extension suffix (e.g., out.e-s002)\n'
p24924
sS'cpp_type'
p24925
S'unsigned int'
p24926
sS'default'
p24927
S'4'
p24928
sS'name'
p24929
S'padding'
p24930
sS'required'
p24931
I00
sS'group_name'
p24932
S'Advanced'
p24933
sa(dp24934
S'description'
p24935
S'Time at which this output object begins to operate\n'
p24936
sS'cpp_type'
p24937
S'double'
p24938
sS'default'
p24939
g3
sS'name'
p24940
S'start_time'
p24941
sS'required'
p24942
I00
sS'group_name'
p24943
S'Timing'
p24944
sa(dp24945
S'description'
p24946
S'Only export results at sync times\n'
p24947
sS'cpp_type'
p24948
S'bool'
p24949
sS'default'
p24950
S'0'
p24951
sS'name'
p24952
S'sync_only'
p24953
sS'required'
p24954
I00
sS'group_name'
p24955
S'Timing'
p24956
sa(dp24957
S'description'
p24958
S'Times at which the output and solution is forced to occur\n'
p24959
sS'cpp_type'
p24960
S'std::__1::vector<double, std::__1::allocator<double> >'
p24961
sS'default'
p24962
g3
sS'name'
p24963
S'sync_times'
p24964
sS'required'
p24965
I00
sS'group_name'
p24966
S'Timing'
p24967
sa(dp24968
S'description'
p24969
S'System to output\n'
p24970
sS'cpp_type'
p24971
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24972
sS'default'
p24973
S'nl0'
p24974
sS'name'
p24975
S'system_name'
p24976
sS'required'
p24977
I00
sS'group_name'
p24978
Nsa(dp24979
S'description'
p24980
S'Time tolerance utilized checking start and end times\n'
p24981
sS'cpp_type'
p24982
S'double'
p24983
sS'default'
p24984
S'1e-14'
p24985
sS'name'
p24986
S'time_tolerance'
p24987
sS'required'
p24988
I00
sS'group_name'
p24989
S'Timing'
p24990
sa(dp24991
S'description'
p24992
g3
sS'cpp_type'
p24993
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p24994
sS'default'
p24995
S'DOFMap'
p24996
sS'name'
p24997
S'type'
p24998
sS'required'
p24999
I00
sS'group_name'
p25000
Nsa(dp25001
S'description'
p25002
S'Enable/disable the use of the displaced mesh for outputting\n'
p25003
sS'cpp_type'
p25004
S'bool'
p25005
sS'default'
p25006
S'0'
p25007
sS'name'
p25008
S'use_displaced'
p25009
sS'required'
p25010
I00
sS'group_name'
p25011
NsasS'name'
p25012
S'/Outputs/DOFMap'
p25013
sa(dp25014
S'description'
p25015
S'Object for output data in the Exodus II format\n'
p25016
sS'subblocks'
p25017
NsS'parameters'
p25018
(lp25019
(dp25020
S'name'
p25021
S'additional_output_on'
p25022
sS'cpp_type'
p25023
S'MultiMooseEnum'
p25024
sS'default'
p25025
g3
sS'description'
p25026
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p25027
sS'required'
p25028
I00
sS'options'
p25029
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25030
sS'group_name'
p25031
Nsa(dp25032
S'description'
p25033
S"Append '_displaced' to the output file base\n"
p25034
sS'cpp_type'
p25035
S'bool'
p25036
sS'default'
p25037
S'0'
p25038
sS'name'
p25039
S'append_displaced'
p25040
sS'required'
p25041
I00
sS'group_name'
p25042
Nsa(dp25043
S'description'
p25044
S"Append '_oversample' to the output file base\n"
p25045
sS'cpp_type'
p25046
S'bool'
p25047
sS'default'
p25048
S'0'
p25049
sS'name'
p25050
S'append_oversample'
p25051
sS'required'
p25052
I00
sS'group_name'
p25053
Nsa(dp25054
S'description'
p25055
S'Output elemental nonlinear variables as nodal\n'
p25056
sS'cpp_type'
p25057
S'bool'
p25058
sS'default'
p25059
S'0'
p25060
sS'name'
p25061
S'elemental_as_nodal'
p25062
sS'required'
p25063
I00
sS'group_name'
p25064
S'Variables'
p25065
sa(dp25066
S'description'
p25067
S'Time at which this output object stop operating\n'
p25068
sS'cpp_type'
p25069
S'double'
p25070
sS'default'
p25071
g3
sS'name'
p25072
S'end_time'
p25073
sS'required'
p25074
I00
sS'group_name'
p25075
S'Timing'
p25076
sa(dp25077
S'description'
p25078
S'The name of the mesh file to read, for oversampling\n'
p25079
sS'cpp_type'
p25080
S'MeshFileName'
p25081
sS'default'
p25082
g3
sS'name'
p25083
S'file'
p25084
sS'required'
p25085
I00
sS'group_name'
p25086
S'Oversampling'
p25087
sa(dp25088
S'description'
p25089
S'The desired solution output name without an extension\n'
p25090
sS'cpp_type'
p25091
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25092
sS'default'
p25093
g3
sS'name'
p25094
S'file_base'
p25095
sS'required'
p25096
I00
sS'group_name'
p25097
Nsa(dp25098
S'description'
p25099
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25100
sS'cpp_type'
p25101
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p25102
sS'default'
p25103
g3
sS'name'
p25104
S'hide'
p25105
sS'required'
p25106
I00
sS'group_name'
p25107
S'Variables'
p25108
sa(dp25109
S'description'
p25110
S'The interval at which time steps are output to the solution file\n'
p25111
sS'cpp_type'
p25112
S'unsigned int'
p25113
sS'default'
p25114
S'1'
p25115
sS'name'
p25116
S'interval'
p25117
sS'required'
p25118
I00
sS'group_name'
p25119
S'Timing'
p25120
sa(dp25121
S'description'
p25122
S'Number of divisions applied to time step when outputting linear residuals\n'
p25123
sS'cpp_type'
p25124
S'double'
p25125
sS'default'
p25126
S'1000'
p25127
sS'name'
p25128
S'linear_residual_dt_divisor'
p25129
sS'required'
p25130
I00
sS'group_name'
p25131
S'PETSc'
p25132
sa(dp25133
S'description'
p25134
S'Specifies an end time to begin output on each linear residual evaluation\n'
p25135
sS'cpp_type'
p25136
S'double'
p25137
sS'default'
p25138
g3
sS'name'
p25139
S'linear_residual_end_time'
p25140
sS'required'
p25141
I00
sS'group_name'
p25142
S'PETSc'
p25143
sa(dp25144
S'description'
p25145
S'Specifies a start time to begin output on each linear residual evaluation\n'
p25146
sS'cpp_type'
p25147
S'double'
p25148
sS'default'
p25149
g3
sS'name'
p25150
S'linear_residual_start_time'
p25151
sS'required'
p25152
I00
sS'group_name'
p25153
S'PETSc'
p25154
sa(dp25155
S'description'
p25156
S'Specifies whether output occurs on each linear residual evaluation\n'
p25157
sS'cpp_type'
p25158
S'bool'
p25159
sS'default'
p25160
S'0'
p25161
sS'name'
p25162
S'linear_residuals'
p25163
sS'required'
p25164
I00
sS'group_name'
p25165
S'PETSc'
p25166
sa(dp25167
S'description'
p25168
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p25169
sS'cpp_type'
p25170
S'double'
p25171
sS'default'
p25172
S'1000'
p25173
sS'name'
p25174
S'nonlinear_residual_dt_divisor'
p25175
sS'required'
p25176
I00
sS'group_name'
p25177
S'PETSc'
p25178
sa(dp25179
S'description'
p25180
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p25181
sS'cpp_type'
p25182
S'double'
p25183
sS'default'
p25184
g3
sS'name'
p25185
S'nonlinear_residual_end_time'
p25186
sS'required'
p25187
I00
sS'group_name'
p25188
S'PETSc'
p25189
sa(dp25190
S'description'
p25191
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p25192
sS'cpp_type'
p25193
S'double'
p25194
sS'default'
p25195
g3
sS'name'
p25196
S'nonlinear_residual_start_time'
p25197
sS'required'
p25198
I00
sS'group_name'
p25199
S'PETSc'
p25200
sa(dp25201
S'description'
p25202
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p25203
sS'cpp_type'
p25204
S'bool'
p25205
sS'default'
p25206
S'0'
p25207
sS'name'
p25208
S'nonlinear_residuals'
p25209
sS'required'
p25210
I00
sS'group_name'
p25211
S'PETSc'
p25212
sa(dp25213
S'name'
p25214
S'output_elemental_on'
p25215
sS'cpp_type'
p25216
S'MultiMooseEnum'
p25217
sS'default'
p25218
g3
sS'description'
p25219
S'Control the output of elemental variables\n'
p25220
sS'required'
p25221
I00
sS'options'
p25222
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25223
sS'group_name'
p25224
S'Variables'
p25225
sa(dp25226
S'description'
p25227
S'Enable/disable the output of elemental variables\n'
p25228
sS'cpp_type'
p25229
S'bool'
p25230
sS'default'
p25231
S'1'
p25232
sS'name'
p25233
S'output_elemental_variables'
p25234
sS'required'
p25235
I00
sS'group_name'
p25236
Nsa(dp25237
S'description'
p25238
S'When true all time attempted time steps are output\n'
p25239
sS'cpp_type'
p25240
S'bool'
p25241
sS'default'
p25242
S'0'
p25243
sS'name'
p25244
S'output_failed'
p25245
sS'required'
p25246
I00
sS'group_name'
p25247
Nsa(dp25248
S'description'
p25249
S'Force the final time step to be output, regardless of output interval\n'
p25250
sS'cpp_type'
p25251
S'bool'
p25252
sS'default'
p25253
S'0'
p25254
sS'name'
p25255
S'output_final'
p25256
sS'required'
p25257
I00
sS'group_name'
p25258
S'Timing'
p25259
sa(dp25260
S'description'
p25261
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p25262
sS'cpp_type'
p25263
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25264
sS'default'
p25265
g3
sS'name'
p25266
S'output_if_base_contains'
p25267
sS'required'
p25268
I00
sS'group_name'
p25269
S'Advanced'
p25270
sa(dp25271
S'description'
p25272
S'Request that the initial condition is output to the solution file\n'
p25273
sS'cpp_type'
p25274
S'bool'
p25275
sS'default'
p25276
S'0'
p25277
sS'name'
p25278
S'output_initial'
p25279
sS'required'
p25280
I00
sS'group_name'
p25281
S'Timing'
p25282
sa(dp25283
S'description'
p25284
S'Enable/disable the output of input file information\n'
p25285
sS'cpp_type'
p25286
S'bool'
p25287
sS'default'
p25288
S'1'
p25289
sS'name'
p25290
S'output_input'
p25291
sS'required'
p25292
I00
sS'group_name'
p25293
Nsa(dp25294
S'name'
p25295
S'output_input_on'
p25296
sS'cpp_type'
p25297
S'MultiMooseEnum'
p25298
sS'default'
p25299
S'INITIAL'
p25300
sS'description'
p25301
S'Enable/disable the output of the input file\n'
p25302
sS'required'
p25303
I00
sS'options'
p25304
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25305
sS'group_name'
p25306
S'Variables'
p25307
sa(dp25308
S'description'
p25309
S'Request that all intermediate steps (not initial or final) are output\n'
p25310
sS'cpp_type'
p25311
S'bool'
p25312
sS'default'
p25313
S'1'
p25314
sS'name'
p25315
S'output_intermediate'
p25316
sS'required'
p25317
I00
sS'group_name'
p25318
Nsa(dp25319
S'description'
p25320
S'Specifies whether output occurs on each linear residual evaluation\n'
p25321
sS'cpp_type'
p25322
S'bool'
p25323
sS'default'
p25324
S'0'
p25325
sS'name'
p25326
S'output_linear'
p25327
sS'required'
p25328
I00
sS'group_name'
p25329
Nsa(dp25330
S'description'
p25331
S'Flag indicating if material properties should be output\n'
p25332
sS'cpp_type'
p25333
S'bool'
p25334
sS'default'
p25335
S'0'
p25336
sS'name'
p25337
S'output_material_properties'
p25338
sS'required'
p25339
I00
sS'group_name'
p25340
S'Materials'
p25341
sa(dp25342
S'name'
p25343
S'output_nodal_on'
p25344
sS'cpp_type'
p25345
S'MultiMooseEnum'
p25346
sS'default'
p25347
g3
sS'description'
p25348
S'Control the output of nodal variables\n'
p25349
sS'required'
p25350
I00
sS'options'
p25351
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25352
sS'group_name'
p25353
S'Variables'
p25354
sa(dp25355
S'description'
p25356
S'Enable/disable the output of nodal variables\n'
p25357
sS'cpp_type'
p25358
S'bool'
p25359
sS'default'
p25360
S'1'
p25361
sS'name'
p25362
S'output_nodal_variables'
p25363
sS'required'
p25364
I00
sS'group_name'
p25365
Nsa(dp25366
S'description'
p25367
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p25368
sS'cpp_type'
p25369
S'bool'
p25370
sS'default'
p25371
S'0'
p25372
sS'name'
p25373
S'output_nonlinear'
p25374
sS'required'
p25375
I00
sS'group_name'
p25376
Nsa(dp25377
S'name'
p25378
S'output_on'
p25379
sS'cpp_type'
p25380
S'MultiMooseEnum'
p25381
sS'default'
p25382
S'TIMESTEP_END'
p25383
sS'description'
p25384
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p25385
sS'required'
p25386
I00
sS'options'
p25387
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25388
sS'group_name'
p25389
Nsa(dp25390
S'description'
p25391
S'Enable/disable the output of postprocessors\n'
p25392
sS'cpp_type'
p25393
S'bool'
p25394
sS'default'
p25395
S'1'
p25396
sS'name'
p25397
S'output_postprocessors'
p25398
sS'required'
p25399
I00
sS'group_name'
p25400
Nsa(dp25401
S'name'
p25402
S'output_postprocessors_on'
p25403
sS'cpp_type'
p25404
S'MultiMooseEnum'
p25405
sS'default'
p25406
g3
sS'description'
p25407
S'Control of when postprocessors are output\n'
p25408
sS'required'
p25409
I00
sS'options'
p25410
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25411
sS'group_name'
p25412
S'Variables'
p25413
sa(dp25414
S'description'
p25415
S'Enable/disable the output of aux scalar variables\n'
p25416
sS'cpp_type'
p25417
S'bool'
p25418
sS'default'
p25419
S'1'
p25420
sS'name'
p25421
S'output_scalar_variables'
p25422
sS'required'
p25423
I00
sS'group_name'
p25424
Nsa(dp25425
S'name'
p25426
S'output_scalars_on'
p25427
sS'cpp_type'
p25428
S'MultiMooseEnum'
p25429
sS'default'
p25430
g3
sS'description'
p25431
S'Control the output of scalar variables\n'
p25432
sS'required'
p25433
I00
sS'options'
p25434
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25435
sS'group_name'
p25436
S'Variables'
p25437
sa(dp25438
S'description'
p25439
S'Enable/disable the output of the simulation information\n'
p25440
sS'cpp_type'
p25441
S'bool'
p25442
sS'default'
p25443
S'1'
p25444
sS'name'
p25445
S'output_system_information'
p25446
sS'required'
p25447
I00
sS'group_name'
p25448
Nsa(dp25449
S'description'
p25450
S'Request that data be output at the end of the timestep\n'
p25451
sS'cpp_type'
p25452
S'bool'
p25453
sS'default'
p25454
S'1'
p25455
sS'name'
p25456
S'output_timestep_end'
p25457
sS'required'
p25458
I00
sS'group_name'
p25459
Nsa(dp25460
S'description'
p25461
S'Enable/disable the output of vector postprocessors\n'
p25462
sS'cpp_type'
p25463
S'bool'
p25464
sS'default'
p25465
S'1'
p25466
sS'name'
p25467
S'output_vector_postprocessors'
p25468
sS'required'
p25469
I00
sS'group_name'
p25470
Nsa(dp25471
S'description'
p25472
S'Set to true to enable oversampling\n'
p25473
sS'cpp_type'
p25474
S'bool'
p25475
sS'default'
p25476
S'0'
p25477
sS'name'
p25478
S'oversample'
p25479
sS'required'
p25480
I00
sS'group_name'
p25481
Nsa(dp25482
S'description'
p25483
S'The number of for extension suffix (e.g., out.e-s002)\n'
p25484
sS'cpp_type'
p25485
S'unsigned int'
p25486
sS'default'
p25487
S'3'
p25488
sS'name'
p25489
S'padding'
p25490
sS'required'
p25491
I00
sS'group_name'
p25492
S'Advanced'
p25493
sa(dp25494
S'description'
p25495
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p25496
sS'cpp_type'
p25497
S'libMesh::Point'
p25498
sS'default'
p25499
g3
sS'name'
p25500
S'position'
p25501
sS'required'
p25502
I00
sS'group_name'
p25503
S'Oversampling'
p25504
sa(dp25505
S'description'
p25506
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p25507
sS'cpp_type'
p25508
S'unsigned int'
p25509
sS'default'
p25510
S'0'
p25511
sS'name'
p25512
S'refinements'
p25513
sS'required'
p25514
I00
sS'group_name'
p25515
S'Oversampling'
p25516
sa(dp25517
S'description'
p25518
S'Output scalar variables as nodal\n'
p25519
sS'cpp_type'
p25520
S'bool'
p25521
sS'default'
p25522
S'0'
p25523
sS'name'
p25524
S'scalar_as_nodal'
p25525
sS'required'
p25526
I00
sS'group_name'
p25527
S'Variables'
p25528
sa(dp25529
S'description'
p25530
S"Enable/disable sequential file output (enabled by default when 'use_displace = true', otherwise defaults to false\n"
p25531
sS'cpp_type'
p25532
S'bool'
p25533
sS'default'
p25534
g3
sS'name'
p25535
S'sequence'
p25536
sS'required'
p25537
I00
sS'group_name'
p25538
Nsa(dp25539
S'description'
p25540
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p25541
sS'cpp_type'
p25542
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p25543
sS'default'
p25544
g3
sS'name'
p25545
S'show'
p25546
sS'required'
p25547
I00
sS'group_name'
p25548
S'Variables'
p25549
sa(dp25550
S'description'
p25551
S'List of materialproperties that should be written to the output\n'
p25552
sS'cpp_type'
p25553
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25554
sS'default'
p25555
g3
sS'name'
p25556
S'show_material_properties'
p25557
sS'required'
p25558
I00
sS'group_name'
p25559
S'Materials'
p25560
sa(dp25561
S'description'
p25562
S'Time at which this output object begins to operate\n'
p25563
sS'cpp_type'
p25564
S'double'
p25565
sS'default'
p25566
g3
sS'name'
p25567
S'start_time'
p25568
sS'required'
p25569
I00
sS'group_name'
p25570
S'Timing'
p25571
sa(dp25572
S'description'
p25573
S'Only export results at sync times\n'
p25574
sS'cpp_type'
p25575
S'bool'
p25576
sS'default'
p25577
S'0'
p25578
sS'name'
p25579
S'sync_only'
p25580
sS'required'
p25581
I00
sS'group_name'
p25582
S'Timing'
p25583
sa(dp25584
S'description'
p25585
S'Times at which the output and solution is forced to occur\n'
p25586
sS'cpp_type'
p25587
S'std::__1::vector<double, std::__1::allocator<double> >'
p25588
sS'default'
p25589
g3
sS'name'
p25590
S'sync_times'
p25591
sS'required'
p25592
I00
sS'group_name'
p25593
S'Timing'
p25594
sa(dp25595
S'description'
p25596
S'Time tolerance utilized checking start and end times\n'
p25597
sS'cpp_type'
p25598
S'double'
p25599
sS'default'
p25600
S'1e-14'
p25601
sS'name'
p25602
S'time_tolerance'
p25603
sS'required'
p25604
I00
sS'group_name'
p25605
S'Timing'
p25606
sa(dp25607
S'description'
p25608
g3
sS'cpp_type'
p25609
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25610
sS'default'
p25611
S'Exodus'
p25612
sS'name'
p25613
S'type'
p25614
sS'required'
p25615
I00
sS'group_name'
p25616
Nsa(dp25617
S'description'
p25618
S'Enable/disable the use of the displaced mesh for outputting\n'
p25619
sS'cpp_type'
p25620
S'bool'
p25621
sS'default'
p25622
S'0'
p25623
sS'name'
p25624
S'use_displaced'
p25625
sS'required'
p25626
I00
sS'group_name'
p25627
NsasS'name'
p25628
S'/Outputs/Exodus'
p25629
sa(dp25630
S'description'
p25631
S'Object for outputting data in the GMV format\n'
p25632
sS'subblocks'
p25633
NsS'parameters'
p25634
(lp25635
(dp25636
S'name'
p25637
S'additional_output_on'
p25638
sS'cpp_type'
p25639
S'MultiMooseEnum'
p25640
sS'default'
p25641
g3
sS'description'
p25642
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p25643
sS'required'
p25644
I00
sS'options'
p25645
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25646
sS'group_name'
p25647
Nsa(dp25648
S'description'
p25649
S"Append '_displaced' to the output file base\n"
p25650
sS'cpp_type'
p25651
S'bool'
p25652
sS'default'
p25653
S'0'
p25654
sS'name'
p25655
S'append_displaced'
p25656
sS'required'
p25657
I00
sS'group_name'
p25658
Nsa(dp25659
S'description'
p25660
S"Append '_oversample' to the output file base\n"
p25661
sS'cpp_type'
p25662
S'bool'
p25663
sS'default'
p25664
S'0'
p25665
sS'name'
p25666
S'append_oversample'
p25667
sS'required'
p25668
I00
sS'group_name'
p25669
Nsa(dp25670
S'description'
p25671
S'Output the file in binary format\n'
p25672
sS'cpp_type'
p25673
S'bool'
p25674
sS'default'
p25675
S'1'
p25676
sS'name'
p25677
S'binary'
p25678
sS'required'
p25679
I00
sS'group_name'
p25680
S'Advanced'
p25681
sa(dp25682
S'description'
p25683
S'Time at which this output object stop operating\n'
p25684
sS'cpp_type'
p25685
S'double'
p25686
sS'default'
p25687
g3
sS'name'
p25688
S'end_time'
p25689
sS'required'
p25690
I00
sS'group_name'
p25691
S'Timing'
p25692
sa(dp25693
S'description'
p25694
S'The name of the mesh file to read, for oversampling\n'
p25695
sS'cpp_type'
p25696
S'MeshFileName'
p25697
sS'default'
p25698
g3
sS'name'
p25699
S'file'
p25700
sS'required'
p25701
I00
sS'group_name'
p25702
S'Oversampling'
p25703
sa(dp25704
S'description'
p25705
S'The desired solution output name without an extension\n'
p25706
sS'cpp_type'
p25707
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p25708
sS'default'
p25709
g3
sS'name'
p25710
S'file_base'
p25711
sS'required'
p25712
I00
sS'group_name'
p25713
Nsa(dp25714
S'description'
p25715
S'The interval at which time steps are output to the solution file\n'
p25716
sS'cpp_type'
p25717
S'unsigned int'
p25718
sS'default'
p25719
S'1'
p25720
sS'name'
p25721
S'interval'
p25722
sS'required'
p25723
I00
sS'group_name'
p25724
S'Timing'
p25725
sa(dp25726
S'description'
p25727
S'Number of divisions applied to time step when outputting linear residuals\n'
p25728
sS'cpp_type'
p25729
S'double'
p25730
sS'default'
p25731
S'1000'
p25732
sS'name'
p25733
S'linear_residual_dt_divisor'
p25734
sS'required'
p25735
I00
sS'group_name'
p25736
S'PETSc'
p25737
sa(dp25738
S'description'
p25739
S'Specifies an end time to begin output on each linear residual evaluation\n'
p25740
sS'cpp_type'
p25741
S'double'
p25742
sS'default'
p25743
g3
sS'name'
p25744
S'linear_residual_end_time'
p25745
sS'required'
p25746
I00
sS'group_name'
p25747
S'PETSc'
p25748
sa(dp25749
S'description'
p25750
S'Specifies a start time to begin output on each linear residual evaluation\n'
p25751
sS'cpp_type'
p25752
S'double'
p25753
sS'default'
p25754
g3
sS'name'
p25755
S'linear_residual_start_time'
p25756
sS'required'
p25757
I00
sS'group_name'
p25758
S'PETSc'
p25759
sa(dp25760
S'description'
p25761
S'Specifies whether output occurs on each linear residual evaluation\n'
p25762
sS'cpp_type'
p25763
S'bool'
p25764
sS'default'
p25765
S'0'
p25766
sS'name'
p25767
S'linear_residuals'
p25768
sS'required'
p25769
I00
sS'group_name'
p25770
S'PETSc'
p25771
sa(dp25772
S'description'
p25773
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p25774
sS'cpp_type'
p25775
S'double'
p25776
sS'default'
p25777
S'1000'
p25778
sS'name'
p25779
S'nonlinear_residual_dt_divisor'
p25780
sS'required'
p25781
I00
sS'group_name'
p25782
S'PETSc'
p25783
sa(dp25784
S'description'
p25785
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p25786
sS'cpp_type'
p25787
S'double'
p25788
sS'default'
p25789
g3
sS'name'
p25790
S'nonlinear_residual_end_time'
p25791
sS'required'
p25792
I00
sS'group_name'
p25793
S'PETSc'
p25794
sa(dp25795
S'description'
p25796
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p25797
sS'cpp_type'
p25798
S'double'
p25799
sS'default'
p25800
g3
sS'name'
p25801
S'nonlinear_residual_start_time'
p25802
sS'required'
p25803
I00
sS'group_name'
p25804
S'PETSc'
p25805
sa(dp25806
S'description'
p25807
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p25808
sS'cpp_type'
p25809
S'bool'
p25810
sS'default'
p25811
S'0'
p25812
sS'name'
p25813
S'nonlinear_residuals'
p25814
sS'required'
p25815
I00
sS'group_name'
p25816
S'PETSc'
p25817
sa(dp25818
S'description'
p25819
S'When true all time attempted time steps are output\n'
p25820
sS'cpp_type'
p25821
S'bool'
p25822
sS'default'
p25823
S'0'
p25824
sS'name'
p25825
S'output_failed'
p25826
sS'required'
p25827
I00
sS'group_name'
p25828
Nsa(dp25829
S'description'
p25830
S'Force the final time step to be output, regardless of output interval\n'
p25831
sS'cpp_type'
p25832
S'bool'
p25833
sS'default'
p25834
S'0'
p25835
sS'name'
p25836
S'output_final'
p25837
sS'required'
p25838
I00
sS'group_name'
p25839
S'Timing'
p25840
sa(dp25841
S'description'
p25842
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p25843
sS'cpp_type'
p25844
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p25845
sS'default'
p25846
g3
sS'name'
p25847
S'output_if_base_contains'
p25848
sS'required'
p25849
I00
sS'group_name'
p25850
S'Advanced'
p25851
sa(dp25852
S'description'
p25853
S'Request that the initial condition is output to the solution file\n'
p25854
sS'cpp_type'
p25855
S'bool'
p25856
sS'default'
p25857
S'0'
p25858
sS'name'
p25859
S'output_initial'
p25860
sS'required'
p25861
I00
sS'group_name'
p25862
S'Timing'
p25863
sa(dp25864
S'description'
p25865
S'Request that all intermediate steps (not initial or final) are output\n'
p25866
sS'cpp_type'
p25867
S'bool'
p25868
sS'default'
p25869
S'1'
p25870
sS'name'
p25871
S'output_intermediate'
p25872
sS'required'
p25873
I00
sS'group_name'
p25874
Nsa(dp25875
S'description'
p25876
S'Specifies whether output occurs on each linear residual evaluation\n'
p25877
sS'cpp_type'
p25878
S'bool'
p25879
sS'default'
p25880
S'0'
p25881
sS'name'
p25882
S'output_linear'
p25883
sS'required'
p25884
I00
sS'group_name'
p25885
Nsa(dp25886
S'description'
p25887
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p25888
sS'cpp_type'
p25889
S'bool'
p25890
sS'default'
p25891
S'0'
p25892
sS'name'
p25893
S'output_nonlinear'
p25894
sS'required'
p25895
I00
sS'group_name'
p25896
Nsa(dp25897
S'name'
p25898
S'output_on'
p25899
sS'cpp_type'
p25900
S'MultiMooseEnum'
p25901
sS'default'
p25902
S'TIMESTEP_END'
p25903
sS'description'
p25904
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p25905
sS'required'
p25906
I00
sS'options'
p25907
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p25908
sS'group_name'
p25909
Nsa(dp25910
S'description'
p25911
S'Request that data be output at the end of the timestep\n'
p25912
sS'cpp_type'
p25913
S'bool'
p25914
sS'default'
p25915
S'1'
p25916
sS'name'
p25917
S'output_timestep_end'
p25918
sS'required'
p25919
I00
sS'group_name'
p25920
Nsa(dp25921
S'description'
p25922
S'Set to true to enable oversampling\n'
p25923
sS'cpp_type'
p25924
S'bool'
p25925
sS'default'
p25926
S'0'
p25927
sS'name'
p25928
S'oversample'
p25929
sS'required'
p25930
I00
sS'group_name'
p25931
Nsa(dp25932
S'description'
p25933
S'The number of for extension suffix (e.g., out.e-s002)\n'
p25934
sS'cpp_type'
p25935
S'unsigned int'
p25936
sS'default'
p25937
S'4'
p25938
sS'name'
p25939
S'padding'
p25940
sS'required'
p25941
I00
sS'group_name'
p25942
S'Advanced'
p25943
sa(dp25944
S'description'
p25945
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p25946
sS'cpp_type'
p25947
S'libMesh::Point'
p25948
sS'default'
p25949
g3
sS'name'
p25950
S'position'
p25951
sS'required'
p25952
I00
sS'group_name'
p25953
S'Oversampling'
p25954
sa(dp25955
S'description'
p25956
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p25957
sS'cpp_type'
p25958
S'unsigned int'
p25959
sS'default'
p25960
S'0'
p25961
sS'name'
p25962
S'refinements'
p25963
sS'required'
p25964
I00
sS'group_name'
p25965
S'Oversampling'
p25966
sa(dp25967
S'description'
p25968
S'Time at which this output object begins to operate\n'
p25969
sS'cpp_type'
p25970
S'double'
p25971
sS'default'
p25972
g3
sS'name'
p25973
S'start_time'
p25974
sS'required'
p25975
I00
sS'group_name'
p25976
S'Timing'
p25977
sa(dp25978
S'description'
p25979
S'Only export results at sync times\n'
p25980
sS'cpp_type'
p25981
S'bool'
p25982
sS'default'
p25983
S'0'
p25984
sS'name'
p25985
S'sync_only'
p25986
sS'required'
p25987
I00
sS'group_name'
p25988
S'Timing'
p25989
sa(dp25990
S'description'
p25991
S'Times at which the output and solution is forced to occur\n'
p25992
sS'cpp_type'
p25993
S'std::__1::vector<double, std::__1::allocator<double> >'
p25994
sS'default'
p25995
g3
sS'name'
p25996
S'sync_times'
p25997
sS'required'
p25998
I00
sS'group_name'
p25999
S'Timing'
p26000
sa(dp26001
S'description'
p26002
S'Time tolerance utilized checking start and end times\n'
p26003
sS'cpp_type'
p26004
S'double'
p26005
sS'default'
p26006
S'1e-14'
p26007
sS'name'
p26008
S'time_tolerance'
p26009
sS'required'
p26010
I00
sS'group_name'
p26011
S'Timing'
p26012
sa(dp26013
S'description'
p26014
g3
sS'cpp_type'
p26015
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26016
sS'default'
p26017
S'GMV'
p26018
sS'name'
p26019
S'type'
p26020
sS'required'
p26021
I00
sS'group_name'
p26022
Nsa(dp26023
S'description'
p26024
S'Enable/disable the use of the displaced mesh for outputting\n'
p26025
sS'cpp_type'
p26026
S'bool'
p26027
sS'default'
p26028
S'0'
p26029
sS'name'
p26030
S'use_displaced'
p26031
sS'required'
p26032
I00
sS'group_name'
p26033
NsasS'name'
p26034
S'/Outputs/GMV'
p26035
sa(dp26036
S'description'
p26037
g3
sS'subblocks'
p26038
NsS'parameters'
p26039
(lp26040
(dp26041
S'name'
p26042
S'additional_output_on'
p26043
sS'cpp_type'
p26044
S'MultiMooseEnum'
p26045
sS'default'
p26046
g3
sS'description'
p26047
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p26048
sS'required'
p26049
I00
sS'options'
p26050
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p26051
sS'group_name'
p26052
Nsa(dp26053
S'description'
p26054
S"Append '_displaced' to the output file base\n"
p26055
sS'cpp_type'
p26056
S'bool'
p26057
sS'default'
p26058
S'0'
p26059
sS'name'
p26060
S'append_displaced'
p26061
sS'required'
p26062
I00
sS'group_name'
p26063
Nsa(dp26064
S'description'
p26065
S'Append existing file on restart\n'
p26066
sS'cpp_type'
p26067
S'bool'
p26068
sS'default'
p26069
S'0'
p26070
sS'name'
p26071
S'append_restart'
p26072
sS'required'
p26073
I00
sS'group_name'
p26074
Nsa(dp26075
S'description'
p26076
S'Time at which this output object stop operating\n'
p26077
sS'cpp_type'
p26078
S'double'
p26079
sS'default'
p26080
g3
sS'name'
p26081
S'end_time'
p26082
sS'required'
p26083
I00
sS'group_name'
p26084
S'Timing'
p26085
sa(dp26086
S'name'
p26087
S'extension'
p26088
sS'cpp_type'
p26089
S'MooseEnum'
p26090
sS'default'
p26091
S'png'
p26092
sS'description'
p26093
S'GNU plot file extension\n'
p26094
sS'required'
p26095
I00
sS'options'
p26096
S'png ps gif'
p26097
sS'group_name'
p26098
Nsa(dp26099
S'description'
p26100
S'The desired solution output name without an extension\n'
p26101
sS'cpp_type'
p26102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26103
sS'default'
p26104
g3
sS'name'
p26105
S'file_base'
p26106
sS'required'
p26107
I00
sS'group_name'
p26108
Nsa(dp26109
S'description'
p26110
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p26111
sS'cpp_type'
p26112
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p26113
sS'default'
p26114
g3
sS'name'
p26115
S'hide'
p26116
sS'required'
p26117
I00
sS'group_name'
p26118
S'Variables'
p26119
sa(dp26120
S'description'
p26121
S'The interval at which time steps are output to the solution file\n'
p26122
sS'cpp_type'
p26123
S'unsigned int'
p26124
sS'default'
p26125
S'1'
p26126
sS'name'
p26127
S'interval'
p26128
sS'required'
p26129
I00
sS'group_name'
p26130
S'Timing'
p26131
sa(dp26132
S'description'
p26133
S'Number of divisions applied to time step when outputting linear residuals\n'
p26134
sS'cpp_type'
p26135
S'double'
p26136
sS'default'
p26137
S'1000'
p26138
sS'name'
p26139
S'linear_residual_dt_divisor'
p26140
sS'required'
p26141
I00
sS'group_name'
p26142
S'PETSc'
p26143
sa(dp26144
S'description'
p26145
S'Specifies an end time to begin output on each linear residual evaluation\n'
p26146
sS'cpp_type'
p26147
S'double'
p26148
sS'default'
p26149
g3
sS'name'
p26150
S'linear_residual_end_time'
p26151
sS'required'
p26152
I00
sS'group_name'
p26153
S'PETSc'
p26154
sa(dp26155
S'description'
p26156
S'Specifies a start time to begin output on each linear residual evaluation\n'
p26157
sS'cpp_type'
p26158
S'double'
p26159
sS'default'
p26160
g3
sS'name'
p26161
S'linear_residual_start_time'
p26162
sS'required'
p26163
I00
sS'group_name'
p26164
S'PETSc'
p26165
sa(dp26166
S'description'
p26167
S'Specifies whether output occurs on each linear residual evaluation\n'
p26168
sS'cpp_type'
p26169
S'bool'
p26170
sS'default'
p26171
S'0'
p26172
sS'name'
p26173
S'linear_residuals'
p26174
sS'required'
p26175
I00
sS'group_name'
p26176
S'PETSc'
p26177
sa(dp26178
S'description'
p26179
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p26180
sS'cpp_type'
p26181
S'double'
p26182
sS'default'
p26183
S'1000'
p26184
sS'name'
p26185
S'nonlinear_residual_dt_divisor'
p26186
sS'required'
p26187
I00
sS'group_name'
p26188
S'PETSc'
p26189
sa(dp26190
S'description'
p26191
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p26192
sS'cpp_type'
p26193
S'double'
p26194
sS'default'
p26195
g3
sS'name'
p26196
S'nonlinear_residual_end_time'
p26197
sS'required'
p26198
I00
sS'group_name'
p26199
S'PETSc'
p26200
sa(dp26201
S'description'
p26202
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p26203
sS'cpp_type'
p26204
S'double'
p26205
sS'default'
p26206
g3
sS'name'
p26207
S'nonlinear_residual_start_time'
p26208
sS'required'
p26209
I00
sS'group_name'
p26210
S'PETSc'
p26211
sa(dp26212
S'description'
p26213
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p26214
sS'cpp_type'
p26215
S'bool'
p26216
sS'default'
p26217
S'0'
p26218
sS'name'
p26219
S'nonlinear_residuals'
p26220
sS'required'
p26221
I00
sS'group_name'
p26222
S'PETSc'
p26223
sa(dp26224
S'description'
p26225
S'Enable/disable the output of elemental variables\n'
p26226
sS'cpp_type'
p26227
S'bool'
p26228
sS'default'
p26229
S'1'
p26230
sS'name'
p26231
S'output_elemental_variables'
p26232
sS'required'
p26233
I00
sS'group_name'
p26234
Nsa(dp26235
S'description'
p26236
S'When true all time attempted time steps are output\n'
p26237
sS'cpp_type'
p26238
S'bool'
p26239
sS'default'
p26240
S'0'
p26241
sS'name'
p26242
S'output_failed'
p26243
sS'required'
p26244
I00
sS'group_name'
p26245
Nsa(dp26246
S'description'
p26247
S'Force the final time step to be output, regardless of output interval\n'
p26248
sS'cpp_type'
p26249
S'bool'
p26250
sS'default'
p26251
S'0'
p26252
sS'name'
p26253
S'output_final'
p26254
sS'required'
p26255
I00
sS'group_name'
p26256
S'Timing'
p26257
sa(dp26258
S'description'
p26259
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p26260
sS'cpp_type'
p26261
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26262
sS'default'
p26263
g3
sS'name'
p26264
S'output_if_base_contains'
p26265
sS'required'
p26266
I00
sS'group_name'
p26267
S'Advanced'
p26268
sa(dp26269
S'description'
p26270
S'Request that the initial condition is output to the solution file\n'
p26271
sS'cpp_type'
p26272
S'bool'
p26273
sS'default'
p26274
S'0'
p26275
sS'name'
p26276
S'output_initial'
p26277
sS'required'
p26278
I00
sS'group_name'
p26279
S'Timing'
p26280
sa(dp26281
S'description'
p26282
S'Enable/disable the output of input file information\n'
p26283
sS'cpp_type'
p26284
S'bool'
p26285
sS'default'
p26286
S'1'
p26287
sS'name'
p26288
S'output_input'
p26289
sS'required'
p26290
I00
sS'group_name'
p26291
Nsa(dp26292
S'description'
p26293
S'Request that all intermediate steps (not initial or final) are output\n'
p26294
sS'cpp_type'
p26295
S'bool'
p26296
sS'default'
p26297
S'1'
p26298
sS'name'
p26299
S'output_intermediate'
p26300
sS'required'
p26301
I00
sS'group_name'
p26302
Nsa(dp26303
S'description'
p26304
S'Specifies whether output occurs on each linear residual evaluation\n'
p26305
sS'cpp_type'
p26306
S'bool'
p26307
sS'default'
p26308
S'0'
p26309
sS'name'
p26310
S'output_linear'
p26311
sS'required'
p26312
I00
sS'group_name'
p26313
Nsa(dp26314
S'description'
p26315
S'Enable/disable the output of nodal variables\n'
p26316
sS'cpp_type'
p26317
S'bool'
p26318
sS'default'
p26319
S'1'
p26320
sS'name'
p26321
S'output_nodal_variables'
p26322
sS'required'
p26323
I00
sS'group_name'
p26324
Nsa(dp26325
S'description'
p26326
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p26327
sS'cpp_type'
p26328
S'bool'
p26329
sS'default'
p26330
S'0'
p26331
sS'name'
p26332
S'output_nonlinear'
p26333
sS'required'
p26334
I00
sS'group_name'
p26335
Nsa(dp26336
S'name'
p26337
S'output_on'
p26338
sS'cpp_type'
p26339
S'MultiMooseEnum'
p26340
sS'default'
p26341
S'TIMESTEP_END'
p26342
sS'description'
p26343
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p26344
sS'required'
p26345
I00
sS'options'
p26346
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p26347
sS'group_name'
p26348
Nsa(dp26349
S'description'
p26350
S'Enable/disable the output of postprocessors\n'
p26351
sS'cpp_type'
p26352
S'bool'
p26353
sS'default'
p26354
S'1'
p26355
sS'name'
p26356
S'output_postprocessors'
p26357
sS'required'
p26358
I00
sS'group_name'
p26359
Nsa(dp26360
S'name'
p26361
S'output_postprocessors_on'
p26362
sS'cpp_type'
p26363
S'MultiMooseEnum'
p26364
sS'default'
p26365
g3
sS'description'
p26366
S'Control of when postprocessors are output\n'
p26367
sS'required'
p26368
I00
sS'options'
p26369
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p26370
sS'group_name'
p26371
S'Variables'
p26372
sa(dp26373
S'description'
p26374
S'Enable/disable the output of aux scalar variables\n'
p26375
sS'cpp_type'
p26376
S'bool'
p26377
sS'default'
p26378
S'1'
p26379
sS'name'
p26380
S'output_scalar_variables'
p26381
sS'required'
p26382
I00
sS'group_name'
p26383
Nsa(dp26384
S'name'
p26385
S'output_scalars_on'
p26386
sS'cpp_type'
p26387
S'MultiMooseEnum'
p26388
sS'default'
p26389
g3
sS'description'
p26390
S'Control the output of scalar variables\n'
p26391
sS'required'
p26392
I00
sS'options'
p26393
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p26394
sS'group_name'
p26395
S'Variables'
p26396
sa(dp26397
S'description'
p26398
S'Enable/disable the output of the simulation information\n'
p26399
sS'cpp_type'
p26400
S'bool'
p26401
sS'default'
p26402
S'1'
p26403
sS'name'
p26404
S'output_system_information'
p26405
sS'required'
p26406
I00
sS'group_name'
p26407
Nsa(dp26408
S'description'
p26409
S'Request that data be output at the end of the timestep\n'
p26410
sS'cpp_type'
p26411
S'bool'
p26412
sS'default'
p26413
S'1'
p26414
sS'name'
p26415
S'output_timestep_end'
p26416
sS'required'
p26417
I00
sS'group_name'
p26418
Nsa(dp26419
S'description'
p26420
S'Enable/disable the output of vector postprocessors\n'
p26421
sS'cpp_type'
p26422
S'bool'
p26423
sS'default'
p26424
S'1'
p26425
sS'name'
p26426
S'output_vector_postprocessors'
p26427
sS'required'
p26428
I00
sS'group_name'
p26429
Nsa(dp26430
S'name'
p26431
S'output_vector_postprocessors_on'
p26432
sS'cpp_type'
p26433
S'MultiMooseEnum'
p26434
sS'default'
p26435
g3
sS'description'
p26436
S'Enable/disable the output of VectorPostprocessors\n'
p26437
sS'required'
p26438
I00
sS'options'
p26439
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p26440
sS'group_name'
p26441
S'Variables'
p26442
sa(dp26443
S'description'
p26444
S'The number of for extension suffix (e.g., out.e-s002)\n'
p26445
sS'cpp_type'
p26446
S'unsigned int'
p26447
sS'default'
p26448
S'4'
p26449
sS'name'
p26450
S'padding'
p26451
sS'required'
p26452
I00
sS'group_name'
p26453
S'Advanced'
p26454
sa(dp26455
S'description'
p26456
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p26457
sS'cpp_type'
p26458
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p26459
sS'default'
p26460
g3
sS'name'
p26461
S'show'
p26462
sS'required'
p26463
I00
sS'group_name'
p26464
S'Variables'
p26465
sa(dp26466
S'description'
p26467
S'Time at which this output object begins to operate\n'
p26468
sS'cpp_type'
p26469
S'double'
p26470
sS'default'
p26471
g3
sS'name'
p26472
S'start_time'
p26473
sS'required'
p26474
I00
sS'group_name'
p26475
S'Timing'
p26476
sa(dp26477
S'description'
p26478
S'Only export results at sync times\n'
p26479
sS'cpp_type'
p26480
S'bool'
p26481
sS'default'
p26482
S'0'
p26483
sS'name'
p26484
S'sync_only'
p26485
sS'required'
p26486
I00
sS'group_name'
p26487
S'Timing'
p26488
sa(dp26489
S'description'
p26490
S'Times at which the output and solution is forced to occur\n'
p26491
sS'cpp_type'
p26492
S'std::__1::vector<double, std::__1::allocator<double> >'
p26493
sS'default'
p26494
g3
sS'name'
p26495
S'sync_times'
p26496
sS'required'
p26497
I00
sS'group_name'
p26498
S'Timing'
p26499
sa(dp26500
S'description'
p26501
S'Time tolerance utilized checking start and end times\n'
p26502
sS'cpp_type'
p26503
S'double'
p26504
sS'default'
p26505
S'1e-14'
p26506
sS'name'
p26507
S'time_tolerance'
p26508
sS'required'
p26509
I00
sS'group_name'
p26510
S'Timing'
p26511
sa(dp26512
S'description'
p26513
g3
sS'cpp_type'
p26514
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26515
sS'default'
p26516
S'Gnuplot'
p26517
sS'name'
p26518
S'type'
p26519
sS'required'
p26520
I00
sS'group_name'
p26521
Nsa(dp26522
S'description'
p26523
S'Enable/disable the use of the displaced mesh for outputting\n'
p26524
sS'cpp_type'
p26525
S'bool'
p26526
sS'default'
p26527
S'0'
p26528
sS'name'
p26529
S'use_displaced'
p26530
sS'required'
p26531
I00
sS'group_name'
p26532
NsasS'name'
p26533
S'/Outputs/Gnuplot'
p26534
sa(dp26535
S'description'
p26536
g3
sS'subblocks'
p26537
NsS'parameters'
p26538
(lp26539
(dp26540
S'name'
p26541
S'additional_output_on'
p26542
sS'cpp_type'
p26543
S'MultiMooseEnum'
p26544
sS'default'
p26545
g3
sS'description'
p26546
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p26547
sS'required'
p26548
I00
sS'options'
p26549
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p26550
sS'group_name'
p26551
Nsa(dp26552
S'description'
p26553
S'Time at which this output object stop operating\n'
p26554
sS'cpp_type'
p26555
S'double'
p26556
sS'default'
p26557
g3
sS'name'
p26558
S'end_time'
p26559
sS'required'
p26560
I00
sS'group_name'
p26561
S'Timing'
p26562
sa(dp26563
S'description'
p26564
S'The interval at which time steps are output to the solution file\n'
p26565
sS'cpp_type'
p26566
S'unsigned int'
p26567
sS'default'
p26568
S'1'
p26569
sS'name'
p26570
S'interval'
p26571
sS'required'
p26572
I00
sS'group_name'
p26573
S'Timing'
p26574
sa(dp26575
S'description'
p26576
S'When true all time attempted time steps are output\n'
p26577
sS'cpp_type'
p26578
S'bool'
p26579
sS'default'
p26580
S'0'
p26581
sS'name'
p26582
S'output_failed'
p26583
sS'required'
p26584
I00
sS'group_name'
p26585
Nsa(dp26586
S'description'
p26587
S'Force the final time step to be output, regardless of output interval\n'
p26588
sS'cpp_type'
p26589
S'bool'
p26590
sS'default'
p26591
S'0'
p26592
sS'name'
p26593
S'output_final'
p26594
sS'required'
p26595
I00
sS'group_name'
p26596
S'Timing'
p26597
sa(dp26598
S'description'
p26599
S'Request that the initial condition is output to the solution file\n'
p26600
sS'cpp_type'
p26601
S'bool'
p26602
sS'default'
p26603
S'0'
p26604
sS'name'
p26605
S'output_initial'
p26606
sS'required'
p26607
I00
sS'group_name'
p26608
S'Timing'
p26609
sa(dp26610
S'description'
p26611
S'Request that all intermediate steps (not initial or final) are output\n'
p26612
sS'cpp_type'
p26613
S'bool'
p26614
sS'default'
p26615
S'1'
p26616
sS'name'
p26617
S'output_intermediate'
p26618
sS'required'
p26619
I00
sS'group_name'
p26620
Nsa(dp26621
S'description'
p26622
S'Request that data be output at the end of the timestep\n'
p26623
sS'cpp_type'
p26624
S'bool'
p26625
sS'default'
p26626
S'1'
p26627
sS'name'
p26628
S'output_timestep_end'
p26629
sS'required'
p26630
I00
sS'group_name'
p26631
Nsa(dp26632
S'description'
p26633
S'Time at which this output object begins to operate\n'
p26634
sS'cpp_type'
p26635
S'double'
p26636
sS'default'
p26637
g3
sS'name'
p26638
S'start_time'
p26639
sS'required'
p26640
I00
sS'group_name'
p26641
S'Timing'
p26642
sa(dp26643
S'description'
p26644
S'Only export results at sync times\n'
p26645
sS'cpp_type'
p26646
S'bool'
p26647
sS'default'
p26648
S'0'
p26649
sS'name'
p26650
S'sync_only'
p26651
sS'required'
p26652
I00
sS'group_name'
p26653
S'Timing'
p26654
sa(dp26655
S'description'
p26656
S'Times at which the output and solution is forced to occur\n'
p26657
sS'cpp_type'
p26658
S'std::__1::vector<double, std::__1::allocator<double> >'
p26659
sS'default'
p26660
g3
sS'name'
p26661
S'sync_times'
p26662
sS'required'
p26663
I00
sS'group_name'
p26664
S'Timing'
p26665
sa(dp26666
S'description'
p26667
S'Time tolerance utilized checking start and end times\n'
p26668
sS'cpp_type'
p26669
S'double'
p26670
sS'default'
p26671
S'1e-14'
p26672
sS'name'
p26673
S'time_tolerance'
p26674
sS'required'
p26675
I00
sS'group_name'
p26676
S'Timing'
p26677
sa(dp26678
S'description'
p26679
g3
sS'cpp_type'
p26680
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26681
sS'default'
p26682
S'MaterialPropertyDebugOutput'
p26683
sS'name'
p26684
S'type'
p26685
sS'required'
p26686
I00
sS'group_name'
p26687
Nsa(dp26688
S'description'
p26689
S'Enable/disable the use of the displaced mesh for outputting\n'
p26690
sS'cpp_type'
p26691
S'bool'
p26692
sS'default'
p26693
S'0'
p26694
sS'name'
p26695
S'use_displaced'
p26696
sS'required'
p26697
I00
sS'group_name'
p26698
NsasS'name'
p26699
S'/Outputs/MaterialPropertyDebugOutput'
p26700
sa(dp26701
S'description'
p26702
S'Object for output data in the Nemesis format\n'
p26703
sS'subblocks'
p26704
NsS'parameters'
p26705
(lp26706
(dp26707
S'name'
p26708
S'additional_output_on'
p26709
sS'cpp_type'
p26710
S'MultiMooseEnum'
p26711
sS'default'
p26712
g3
sS'description'
p26713
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p26714
sS'required'
p26715
I00
sS'options'
p26716
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p26717
sS'group_name'
p26718
Nsa(dp26719
S'description'
p26720
S"Append '_displaced' to the output file base\n"
p26721
sS'cpp_type'
p26722
S'bool'
p26723
sS'default'
p26724
S'0'
p26725
sS'name'
p26726
S'append_displaced'
p26727
sS'required'
p26728
I00
sS'group_name'
p26729
Nsa(dp26730
S'description'
p26731
S"Append '_oversample' to the output file base\n"
p26732
sS'cpp_type'
p26733
S'bool'
p26734
sS'default'
p26735
S'0'
p26736
sS'name'
p26737
S'append_oversample'
p26738
sS'required'
p26739
I00
sS'group_name'
p26740
Nsa(dp26741
S'description'
p26742
S'Time at which this output object stop operating\n'
p26743
sS'cpp_type'
p26744
S'double'
p26745
sS'default'
p26746
g3
sS'name'
p26747
S'end_time'
p26748
sS'required'
p26749
I00
sS'group_name'
p26750
S'Timing'
p26751
sa(dp26752
S'description'
p26753
S'The name of the mesh file to read, for oversampling\n'
p26754
sS'cpp_type'
p26755
S'MeshFileName'
p26756
sS'default'
p26757
g3
sS'name'
p26758
S'file'
p26759
sS'required'
p26760
I00
sS'group_name'
p26761
S'Oversampling'
p26762
sa(dp26763
S'description'
p26764
S'The desired solution output name without an extension\n'
p26765
sS'cpp_type'
p26766
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p26767
sS'default'
p26768
g3
sS'name'
p26769
S'file_base'
p26770
sS'required'
p26771
I00
sS'group_name'
p26772
Nsa(dp26773
S'description'
p26774
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p26775
sS'cpp_type'
p26776
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p26777
sS'default'
p26778
g3
sS'name'
p26779
S'hide'
p26780
sS'required'
p26781
I00
sS'group_name'
p26782
S'Variables'
p26783
sa(dp26784
S'description'
p26785
S'The interval at which time steps are output to the solution file\n'
p26786
sS'cpp_type'
p26787
S'unsigned int'
p26788
sS'default'
p26789
S'1'
p26790
sS'name'
p26791
S'interval'
p26792
sS'required'
p26793
I00
sS'group_name'
p26794
S'Timing'
p26795
sa(dp26796
S'description'
p26797
S'Number of divisions applied to time step when outputting linear residuals\n'
p26798
sS'cpp_type'
p26799
S'double'
p26800
sS'default'
p26801
S'1000'
p26802
sS'name'
p26803
S'linear_residual_dt_divisor'
p26804
sS'required'
p26805
I00
sS'group_name'
p26806
S'PETSc'
p26807
sa(dp26808
S'description'
p26809
S'Specifies an end time to begin output on each linear residual evaluation\n'
p26810
sS'cpp_type'
p26811
S'double'
p26812
sS'default'
p26813
g3
sS'name'
p26814
S'linear_residual_end_time'
p26815
sS'required'
p26816
I00
sS'group_name'
p26817
S'PETSc'
p26818
sa(dp26819
S'description'
p26820
S'Specifies a start time to begin output on each linear residual evaluation\n'
p26821
sS'cpp_type'
p26822
S'double'
p26823
sS'default'
p26824
g3
sS'name'
p26825
S'linear_residual_start_time'
p26826
sS'required'
p26827
I00
sS'group_name'
p26828
S'PETSc'
p26829
sa(dp26830
S'description'
p26831
S'Specifies whether output occurs on each linear residual evaluation\n'
p26832
sS'cpp_type'
p26833
S'bool'
p26834
sS'default'
p26835
S'0'
p26836
sS'name'
p26837
S'linear_residuals'
p26838
sS'required'
p26839
I00
sS'group_name'
p26840
S'PETSc'
p26841
sa(dp26842
S'description'
p26843
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p26844
sS'cpp_type'
p26845
S'double'
p26846
sS'default'
p26847
S'1000'
p26848
sS'name'
p26849
S'nonlinear_residual_dt_divisor'
p26850
sS'required'
p26851
I00
sS'group_name'
p26852
S'PETSc'
p26853
sa(dp26854
S'description'
p26855
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p26856
sS'cpp_type'
p26857
S'double'
p26858
sS'default'
p26859
g3
sS'name'
p26860
S'nonlinear_residual_end_time'
p26861
sS'required'
p26862
I00
sS'group_name'
p26863
S'PETSc'
p26864
sa(dp26865
S'description'
p26866
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p26867
sS'cpp_type'
p26868
S'double'
p26869
sS'default'
p26870
g3
sS'name'
p26871
S'nonlinear_residual_start_time'
p26872
sS'required'
p26873
I00
sS'group_name'
p26874
S'PETSc'
p26875
sa(dp26876
S'description'
p26877
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p26878
sS'cpp_type'
p26879
S'bool'
p26880
sS'default'
p26881
S'0'
p26882
sS'name'
p26883
S'nonlinear_residuals'
p26884
sS'required'
p26885
I00
sS'group_name'
p26886
S'PETSc'
p26887
sa(dp26888
S'description'
p26889
S'Enable/disable the output of elemental variables\n'
p26890
sS'cpp_type'
p26891
S'bool'
p26892
sS'default'
p26893
S'1'
p26894
sS'name'
p26895
S'output_elemental_variables'
p26896
sS'required'
p26897
I00
sS'group_name'
p26898
Nsa(dp26899
S'description'
p26900
S'When true all time attempted time steps are output\n'
p26901
sS'cpp_type'
p26902
S'bool'
p26903
sS'default'
p26904
S'0'
p26905
sS'name'
p26906
S'output_failed'
p26907
sS'required'
p26908
I00
sS'group_name'
p26909
Nsa(dp26910
S'description'
p26911
S'Force the final time step to be output, regardless of output interval\n'
p26912
sS'cpp_type'
p26913
S'bool'
p26914
sS'default'
p26915
S'0'
p26916
sS'name'
p26917
S'output_final'
p26918
sS'required'
p26919
I00
sS'group_name'
p26920
S'Timing'
p26921
sa(dp26922
S'description'
p26923
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p26924
sS'cpp_type'
p26925
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p26926
sS'default'
p26927
g3
sS'name'
p26928
S'output_if_base_contains'
p26929
sS'required'
p26930
I00
sS'group_name'
p26931
S'Advanced'
p26932
sa(dp26933
S'description'
p26934
S'Request that the initial condition is output to the solution file\n'
p26935
sS'cpp_type'
p26936
S'bool'
p26937
sS'default'
p26938
S'0'
p26939
sS'name'
p26940
S'output_initial'
p26941
sS'required'
p26942
I00
sS'group_name'
p26943
S'Timing'
p26944
sa(dp26945
S'description'
p26946
S'Enable/disable the output of input file information\n'
p26947
sS'cpp_type'
p26948
S'bool'
p26949
sS'default'
p26950
S'1'
p26951
sS'name'
p26952
S'output_input'
p26953
sS'required'
p26954
I00
sS'group_name'
p26955
Nsa(dp26956
S'name'
p26957
S'output_input_on'
p26958
sS'cpp_type'
p26959
S'MultiMooseEnum'
p26960
sS'default'
p26961
g3
sS'description'
p26962
S'Enable/disable the output of the input file\n'
p26963
sS'required'
p26964
I00
sS'options'
p26965
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p26966
sS'group_name'
p26967
S'Variables'
p26968
sa(dp26969
S'description'
p26970
S'Request that all intermediate steps (not initial or final) are output\n'
p26971
sS'cpp_type'
p26972
S'bool'
p26973
sS'default'
p26974
S'1'
p26975
sS'name'
p26976
S'output_intermediate'
p26977
sS'required'
p26978
I00
sS'group_name'
p26979
Nsa(dp26980
S'description'
p26981
S'Specifies whether output occurs on each linear residual evaluation\n'
p26982
sS'cpp_type'
p26983
S'bool'
p26984
sS'default'
p26985
S'0'
p26986
sS'name'
p26987
S'output_linear'
p26988
sS'required'
p26989
I00
sS'group_name'
p26990
Nsa(dp26991
S'description'
p26992
S'Enable/disable the output of nodal variables\n'
p26993
sS'cpp_type'
p26994
S'bool'
p26995
sS'default'
p26996
S'1'
p26997
sS'name'
p26998
S'output_nodal_variables'
p26999
sS'required'
p27000
I00
sS'group_name'
p27001
Nsa(dp27002
S'description'
p27003
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p27004
sS'cpp_type'
p27005
S'bool'
p27006
sS'default'
p27007
S'0'
p27008
sS'name'
p27009
S'output_nonlinear'
p27010
sS'required'
p27011
I00
sS'group_name'
p27012
Nsa(dp27013
S'name'
p27014
S'output_on'
p27015
sS'cpp_type'
p27016
S'MultiMooseEnum'
p27017
sS'default'
p27018
S'TIMESTEP_END'
p27019
sS'description'
p27020
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p27021
sS'required'
p27022
I00
sS'options'
p27023
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p27024
sS'group_name'
p27025
Nsa(dp27026
S'description'
p27027
S'Enable/disable the output of postprocessors\n'
p27028
sS'cpp_type'
p27029
S'bool'
p27030
sS'default'
p27031
S'1'
p27032
sS'name'
p27033
S'output_postprocessors'
p27034
sS'required'
p27035
I00
sS'group_name'
p27036
Nsa(dp27037
S'name'
p27038
S'output_postprocessors_on'
p27039
sS'cpp_type'
p27040
S'MultiMooseEnum'
p27041
sS'default'
p27042
g3
sS'description'
p27043
S'Control of when postprocessors are output\n'
p27044
sS'required'
p27045
I00
sS'options'
p27046
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p27047
sS'group_name'
p27048
S'Variables'
p27049
sa(dp27050
S'description'
p27051
S'Enable/disable the output of aux scalar variables\n'
p27052
sS'cpp_type'
p27053
S'bool'
p27054
sS'default'
p27055
S'1'
p27056
sS'name'
p27057
S'output_scalar_variables'
p27058
sS'required'
p27059
I00
sS'group_name'
p27060
Nsa(dp27061
S'name'
p27062
S'output_scalars_on'
p27063
sS'cpp_type'
p27064
S'MultiMooseEnum'
p27065
sS'default'
p27066
g3
sS'description'
p27067
S'Control the output of scalar variables\n'
p27068
sS'required'
p27069
I00
sS'options'
p27070
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p27071
sS'group_name'
p27072
S'Variables'
p27073
sa(dp27074
S'description'
p27075
S'Enable/disable the output of the simulation information\n'
p27076
sS'cpp_type'
p27077
S'bool'
p27078
sS'default'
p27079
S'1'
p27080
sS'name'
p27081
S'output_system_information'
p27082
sS'required'
p27083
I00
sS'group_name'
p27084
Nsa(dp27085
S'description'
p27086
S'Request that data be output at the end of the timestep\n'
p27087
sS'cpp_type'
p27088
S'bool'
p27089
sS'default'
p27090
S'1'
p27091
sS'name'
p27092
S'output_timestep_end'
p27093
sS'required'
p27094
I00
sS'group_name'
p27095
Nsa(dp27096
S'description'
p27097
S'Enable/disable the output of vector postprocessors\n'
p27098
sS'cpp_type'
p27099
S'bool'
p27100
sS'default'
p27101
S'1'
p27102
sS'name'
p27103
S'output_vector_postprocessors'
p27104
sS'required'
p27105
I00
sS'group_name'
p27106
Nsa(dp27107
S'description'
p27108
S'Set to true to enable oversampling\n'
p27109
sS'cpp_type'
p27110
S'bool'
p27111
sS'default'
p27112
S'0'
p27113
sS'name'
p27114
S'oversample'
p27115
sS'required'
p27116
I00
sS'group_name'
p27117
Nsa(dp27118
S'description'
p27119
S'The number of for extension suffix (e.g., out.e-s002)\n'
p27120
sS'cpp_type'
p27121
S'unsigned int'
p27122
sS'default'
p27123
S'4'
p27124
sS'name'
p27125
S'padding'
p27126
sS'required'
p27127
I00
sS'group_name'
p27128
S'Advanced'
p27129
sa(dp27130
S'description'
p27131
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p27132
sS'cpp_type'
p27133
S'libMesh::Point'
p27134
sS'default'
p27135
g3
sS'name'
p27136
S'position'
p27137
sS'required'
p27138
I00
sS'group_name'
p27139
S'Oversampling'
p27140
sa(dp27141
S'description'
p27142
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p27143
sS'cpp_type'
p27144
S'unsigned int'
p27145
sS'default'
p27146
S'0'
p27147
sS'name'
p27148
S'refinements'
p27149
sS'required'
p27150
I00
sS'group_name'
p27151
S'Oversampling'
p27152
sa(dp27153
S'description'
p27154
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p27155
sS'cpp_type'
p27156
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p27157
sS'default'
p27158
g3
sS'name'
p27159
S'show'
p27160
sS'required'
p27161
I00
sS'group_name'
p27162
S'Variables'
p27163
sa(dp27164
S'description'
p27165
S'Time at which this output object begins to operate\n'
p27166
sS'cpp_type'
p27167
S'double'
p27168
sS'default'
p27169
g3
sS'name'
p27170
S'start_time'
p27171
sS'required'
p27172
I00
sS'group_name'
p27173
S'Timing'
p27174
sa(dp27175
S'description'
p27176
S'Only export results at sync times\n'
p27177
sS'cpp_type'
p27178
S'bool'
p27179
sS'default'
p27180
S'0'
p27181
sS'name'
p27182
S'sync_only'
p27183
sS'required'
p27184
I00
sS'group_name'
p27185
S'Timing'
p27186
sa(dp27187
S'description'
p27188
S'Times at which the output and solution is forced to occur\n'
p27189
sS'cpp_type'
p27190
S'std::__1::vector<double, std::__1::allocator<double> >'
p27191
sS'default'
p27192
g3
sS'name'
p27193
S'sync_times'
p27194
sS'required'
p27195
I00
sS'group_name'
p27196
S'Timing'
p27197
sa(dp27198
S'description'
p27199
S'Time tolerance utilized checking start and end times\n'
p27200
sS'cpp_type'
p27201
S'double'
p27202
sS'default'
p27203
S'1e-14'
p27204
sS'name'
p27205
S'time_tolerance'
p27206
sS'required'
p27207
I00
sS'group_name'
p27208
S'Timing'
p27209
sa(dp27210
S'description'
p27211
g3
sS'cpp_type'
p27212
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27213
sS'default'
p27214
S'Nemesis'
p27215
sS'name'
p27216
S'type'
p27217
sS'required'
p27218
I00
sS'group_name'
p27219
Nsa(dp27220
S'description'
p27221
S'Enable/disable the use of the displaced mesh for outputting\n'
p27222
sS'cpp_type'
p27223
S'bool'
p27224
sS'default'
p27225
S'0'
p27226
sS'name'
p27227
S'use_displaced'
p27228
sS'required'
p27229
I00
sS'group_name'
p27230
NsasS'name'
p27231
S'/Outputs/Nemesis'
p27232
sa(dp27233
S'description'
p27234
g3
sS'subblocks'
p27235
NsS'parameters'
p27236
(lp27237
(dp27238
S'name'
p27239
S'additional_output_on'
p27240
sS'cpp_type'
p27241
S'MultiMooseEnum'
p27242
sS'default'
p27243
g3
sS'description'
p27244
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p27245
sS'required'
p27246
I00
sS'options'
p27247
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p27248
sS'group_name'
p27249
Nsa(dp27250
S'description'
p27251
S"Append '_displaced' to the output file base\n"
p27252
sS'cpp_type'
p27253
S'bool'
p27254
sS'default'
p27255
S'0'
p27256
sS'name'
p27257
S'append_displaced'
p27258
sS'required'
p27259
I00
sS'group_name'
p27260
Nsa(dp27261
S'description'
p27262
S'Time at which this output object stop operating\n'
p27263
sS'cpp_type'
p27264
S'double'
p27265
sS'default'
p27266
g3
sS'name'
p27267
S'end_time'
p27268
sS'required'
p27269
I00
sS'group_name'
p27270
S'Timing'
p27271
sa(dp27272
S'description'
p27273
S'The desired solution output name without an extension\n'
p27274
sS'cpp_type'
p27275
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27276
sS'default'
p27277
g3
sS'name'
p27278
S'file_base'
p27279
sS'required'
p27280
I00
sS'group_name'
p27281
Nsa(dp27282
S'description'
p27283
S'The interval at which time steps are output to the solution file\n'
p27284
sS'cpp_type'
p27285
S'unsigned int'
p27286
sS'default'
p27287
S'1'
p27288
sS'name'
p27289
S'interval'
p27290
sS'required'
p27291
I00
sS'group_name'
p27292
S'Timing'
p27293
sa(dp27294
S'description'
p27295
S'Number of divisions applied to time step when outputting linear residuals\n'
p27296
sS'cpp_type'
p27297
S'double'
p27298
sS'default'
p27299
S'1000'
p27300
sS'name'
p27301
S'linear_residual_dt_divisor'
p27302
sS'required'
p27303
I00
sS'group_name'
p27304
S'PETSc'
p27305
sa(dp27306
S'description'
p27307
S'Specifies an end time to begin output on each linear residual evaluation\n'
p27308
sS'cpp_type'
p27309
S'double'
p27310
sS'default'
p27311
g3
sS'name'
p27312
S'linear_residual_end_time'
p27313
sS'required'
p27314
I00
sS'group_name'
p27315
S'PETSc'
p27316
sa(dp27317
S'description'
p27318
S'Specifies a start time to begin output on each linear residual evaluation\n'
p27319
sS'cpp_type'
p27320
S'double'
p27321
sS'default'
p27322
g3
sS'name'
p27323
S'linear_residual_start_time'
p27324
sS'required'
p27325
I00
sS'group_name'
p27326
S'PETSc'
p27327
sa(dp27328
S'description'
p27329
S'Specifies whether output occurs on each linear residual evaluation\n'
p27330
sS'cpp_type'
p27331
S'bool'
p27332
sS'default'
p27333
S'0'
p27334
sS'name'
p27335
S'linear_residuals'
p27336
sS'required'
p27337
I00
sS'group_name'
p27338
S'PETSc'
p27339
sa(dp27340
S'description'
p27341
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p27342
sS'cpp_type'
p27343
S'double'
p27344
sS'default'
p27345
S'1000'
p27346
sS'name'
p27347
S'nonlinear_residual_dt_divisor'
p27348
sS'required'
p27349
I00
sS'group_name'
p27350
S'PETSc'
p27351
sa(dp27352
S'description'
p27353
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p27354
sS'cpp_type'
p27355
S'double'
p27356
sS'default'
p27357
g3
sS'name'
p27358
S'nonlinear_residual_end_time'
p27359
sS'required'
p27360
I00
sS'group_name'
p27361
S'PETSc'
p27362
sa(dp27363
S'description'
p27364
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p27365
sS'cpp_type'
p27366
S'double'
p27367
sS'default'
p27368
g3
sS'name'
p27369
S'nonlinear_residual_start_time'
p27370
sS'required'
p27371
I00
sS'group_name'
p27372
S'PETSc'
p27373
sa(dp27374
S'description'
p27375
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p27376
sS'cpp_type'
p27377
S'bool'
p27378
sS'default'
p27379
S'0'
p27380
sS'name'
p27381
S'nonlinear_residuals'
p27382
sS'required'
p27383
I00
sS'group_name'
p27384
S'PETSc'
p27385
sa(dp27386
S'description'
p27387
S'When true all time attempted time steps are output\n'
p27388
sS'cpp_type'
p27389
S'bool'
p27390
sS'default'
p27391
S'0'
p27392
sS'name'
p27393
S'output_failed'
p27394
sS'required'
p27395
I00
sS'group_name'
p27396
Nsa(dp27397
S'description'
p27398
S'Force the final time step to be output, regardless of output interval\n'
p27399
sS'cpp_type'
p27400
S'bool'
p27401
sS'default'
p27402
S'0'
p27403
sS'name'
p27404
S'output_final'
p27405
sS'required'
p27406
I00
sS'group_name'
p27407
S'Timing'
p27408
sa(dp27409
S'description'
p27410
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p27411
sS'cpp_type'
p27412
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27413
sS'default'
p27414
g3
sS'name'
p27415
S'output_if_base_contains'
p27416
sS'required'
p27417
I00
sS'group_name'
p27418
S'Advanced'
p27419
sa(dp27420
S'description'
p27421
S'Request that the initial condition is output to the solution file\n'
p27422
sS'cpp_type'
p27423
S'bool'
p27424
sS'default'
p27425
S'0'
p27426
sS'name'
p27427
S'output_initial'
p27428
sS'required'
p27429
I00
sS'group_name'
p27430
S'Timing'
p27431
sa(dp27432
S'description'
p27433
S'Request that all intermediate steps (not initial or final) are output\n'
p27434
sS'cpp_type'
p27435
S'bool'
p27436
sS'default'
p27437
S'1'
p27438
sS'name'
p27439
S'output_intermediate'
p27440
sS'required'
p27441
I00
sS'group_name'
p27442
Nsa(dp27443
S'description'
p27444
S'Specifies whether output occurs on each linear residual evaluation\n'
p27445
sS'cpp_type'
p27446
S'bool'
p27447
sS'default'
p27448
S'0'
p27449
sS'name'
p27450
S'output_linear'
p27451
sS'required'
p27452
I00
sS'group_name'
p27453
Nsa(dp27454
S'description'
p27455
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p27456
sS'cpp_type'
p27457
S'bool'
p27458
sS'default'
p27459
S'0'
p27460
sS'name'
p27461
S'output_nonlinear'
p27462
sS'required'
p27463
I00
sS'group_name'
p27464
Nsa(dp27465
S'name'
p27466
S'output_on'
p27467
sS'cpp_type'
p27468
S'MultiMooseEnum'
p27469
sS'default'
p27470
S'TIMESTEP_END'
p27471
sS'description'
p27472
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p27473
sS'required'
p27474
I00
sS'options'
p27475
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p27476
sS'group_name'
p27477
Nsa(dp27478
S'description'
p27479
S'Request that data be output at the end of the timestep\n'
p27480
sS'cpp_type'
p27481
S'bool'
p27482
sS'default'
p27483
S'1'
p27484
sS'name'
p27485
S'output_timestep_end'
p27486
sS'required'
p27487
I00
sS'group_name'
p27488
Nsa(dp27489
S'description'
p27490
S'The number of for extension suffix (e.g., out.e-s002)\n'
p27491
sS'cpp_type'
p27492
S'unsigned int'
p27493
sS'default'
p27494
S'4'
p27495
sS'name'
p27496
S'padding'
p27497
sS'required'
p27498
I00
sS'group_name'
p27499
S'Advanced'
p27500
sa(dp27501
S'description'
p27502
S'Time at which this output object begins to operate\n'
p27503
sS'cpp_type'
p27504
S'double'
p27505
sS'default'
p27506
g3
sS'name'
p27507
S'start_time'
p27508
sS'required'
p27509
I00
sS'group_name'
p27510
S'Timing'
p27511
sa(dp27512
S'description'
p27513
S'Only export results at sync times\n'
p27514
sS'cpp_type'
p27515
S'bool'
p27516
sS'default'
p27517
S'0'
p27518
sS'name'
p27519
S'sync_only'
p27520
sS'required'
p27521
I00
sS'group_name'
p27522
S'Timing'
p27523
sa(dp27524
S'description'
p27525
S'Times at which the output and solution is forced to occur\n'
p27526
sS'cpp_type'
p27527
S'std::__1::vector<double, std::__1::allocator<double> >'
p27528
sS'default'
p27529
g3
sS'name'
p27530
S'sync_times'
p27531
sS'required'
p27532
I00
sS'group_name'
p27533
S'Timing'
p27534
sa(dp27535
S'description'
p27536
S'Time tolerance utilized checking start and end times\n'
p27537
sS'cpp_type'
p27538
S'double'
p27539
sS'default'
p27540
S'1e-14'
p27541
sS'name'
p27542
S'time_tolerance'
p27543
sS'required'
p27544
I00
sS'group_name'
p27545
S'Timing'
p27546
sa(dp27547
S'description'
p27548
g3
sS'cpp_type'
p27549
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27550
sS'default'
p27551
S'SolutionHistory'
p27552
sS'name'
p27553
S'type'
p27554
sS'required'
p27555
I00
sS'group_name'
p27556
Nsa(dp27557
S'description'
p27558
S'Enable/disable the use of the displaced mesh for outputting\n'
p27559
sS'cpp_type'
p27560
S'bool'
p27561
sS'default'
p27562
S'0'
p27563
sS'name'
p27564
S'use_displaced'
p27565
sS'required'
p27566
I00
sS'group_name'
p27567
NsasS'name'
p27568
S'/Outputs/SolutionHistory'
p27569
sa(dp27570
S'description'
p27571
S'Object for outputting data in the Tecplot format\n'
p27572
sS'subblocks'
p27573
NsS'parameters'
p27574
(lp27575
(dp27576
S'name'
p27577
S'additional_output_on'
p27578
sS'cpp_type'
p27579
S'MultiMooseEnum'
p27580
sS'default'
p27581
g3
sS'description'
p27582
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p27583
sS'required'
p27584
I00
sS'options'
p27585
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p27586
sS'group_name'
p27587
Nsa(dp27588
S'description'
p27589
S"Append '_displaced' to the output file base\n"
p27590
sS'cpp_type'
p27591
S'bool'
p27592
sS'default'
p27593
S'0'
p27594
sS'name'
p27595
S'append_displaced'
p27596
sS'required'
p27597
I00
sS'group_name'
p27598
Nsa(dp27599
S'description'
p27600
S"Append '_oversample' to the output file base\n"
p27601
sS'cpp_type'
p27602
S'bool'
p27603
sS'default'
p27604
S'0'
p27605
sS'name'
p27606
S'append_oversample'
p27607
sS'required'
p27608
I00
sS'group_name'
p27609
Nsa(dp27610
S'description'
p27611
S'If true, append to an existing ASCII file rather than creating a new file each time\n'
p27612
sS'cpp_type'
p27613
S'bool'
p27614
sS'default'
p27615
S'0'
p27616
sS'name'
p27617
S'ascii_append'
p27618
sS'required'
p27619
I00
sS'group_name'
p27620
Nsa(dp27621
S'description'
p27622
S'Set Tecplot files to output in binary format\n'
p27623
sS'cpp_type'
p27624
S'bool'
p27625
sS'default'
p27626
S'0'
p27627
sS'name'
p27628
S'binary'
p27629
sS'required'
p27630
I00
sS'group_name'
p27631
S'Advanced'
p27632
sa(dp27633
S'description'
p27634
S'Time at which this output object stop operating\n'
p27635
sS'cpp_type'
p27636
S'double'
p27637
sS'default'
p27638
g3
sS'name'
p27639
S'end_time'
p27640
sS'required'
p27641
I00
sS'group_name'
p27642
S'Timing'
p27643
sa(dp27644
S'description'
p27645
S'The name of the mesh file to read, for oversampling\n'
p27646
sS'cpp_type'
p27647
S'MeshFileName'
p27648
sS'default'
p27649
g3
sS'name'
p27650
S'file'
p27651
sS'required'
p27652
I00
sS'group_name'
p27653
S'Oversampling'
p27654
sa(dp27655
S'description'
p27656
S'The desired solution output name without an extension\n'
p27657
sS'cpp_type'
p27658
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27659
sS'default'
p27660
g3
sS'name'
p27661
S'file_base'
p27662
sS'required'
p27663
I00
sS'group_name'
p27664
Nsa(dp27665
S'description'
p27666
S'The interval at which time steps are output to the solution file\n'
p27667
sS'cpp_type'
p27668
S'unsigned int'
p27669
sS'default'
p27670
S'1'
p27671
sS'name'
p27672
S'interval'
p27673
sS'required'
p27674
I00
sS'group_name'
p27675
S'Timing'
p27676
sa(dp27677
S'description'
p27678
S'Number of divisions applied to time step when outputting linear residuals\n'
p27679
sS'cpp_type'
p27680
S'double'
p27681
sS'default'
p27682
S'1000'
p27683
sS'name'
p27684
S'linear_residual_dt_divisor'
p27685
sS'required'
p27686
I00
sS'group_name'
p27687
S'PETSc'
p27688
sa(dp27689
S'description'
p27690
S'Specifies an end time to begin output on each linear residual evaluation\n'
p27691
sS'cpp_type'
p27692
S'double'
p27693
sS'default'
p27694
g3
sS'name'
p27695
S'linear_residual_end_time'
p27696
sS'required'
p27697
I00
sS'group_name'
p27698
S'PETSc'
p27699
sa(dp27700
S'description'
p27701
S'Specifies a start time to begin output on each linear residual evaluation\n'
p27702
sS'cpp_type'
p27703
S'double'
p27704
sS'default'
p27705
g3
sS'name'
p27706
S'linear_residual_start_time'
p27707
sS'required'
p27708
I00
sS'group_name'
p27709
S'PETSc'
p27710
sa(dp27711
S'description'
p27712
S'Specifies whether output occurs on each linear residual evaluation\n'
p27713
sS'cpp_type'
p27714
S'bool'
p27715
sS'default'
p27716
S'0'
p27717
sS'name'
p27718
S'linear_residuals'
p27719
sS'required'
p27720
I00
sS'group_name'
p27721
S'PETSc'
p27722
sa(dp27723
S'description'
p27724
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p27725
sS'cpp_type'
p27726
S'double'
p27727
sS'default'
p27728
S'1000'
p27729
sS'name'
p27730
S'nonlinear_residual_dt_divisor'
p27731
sS'required'
p27732
I00
sS'group_name'
p27733
S'PETSc'
p27734
sa(dp27735
S'description'
p27736
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p27737
sS'cpp_type'
p27738
S'double'
p27739
sS'default'
p27740
g3
sS'name'
p27741
S'nonlinear_residual_end_time'
p27742
sS'required'
p27743
I00
sS'group_name'
p27744
S'PETSc'
p27745
sa(dp27746
S'description'
p27747
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p27748
sS'cpp_type'
p27749
S'double'
p27750
sS'default'
p27751
g3
sS'name'
p27752
S'nonlinear_residual_start_time'
p27753
sS'required'
p27754
I00
sS'group_name'
p27755
S'PETSc'
p27756
sa(dp27757
S'description'
p27758
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p27759
sS'cpp_type'
p27760
S'bool'
p27761
sS'default'
p27762
S'0'
p27763
sS'name'
p27764
S'nonlinear_residuals'
p27765
sS'required'
p27766
I00
sS'group_name'
p27767
S'PETSc'
p27768
sa(dp27769
S'description'
p27770
S'When true all time attempted time steps are output\n'
p27771
sS'cpp_type'
p27772
S'bool'
p27773
sS'default'
p27774
S'0'
p27775
sS'name'
p27776
S'output_failed'
p27777
sS'required'
p27778
I00
sS'group_name'
p27779
Nsa(dp27780
S'description'
p27781
S'Force the final time step to be output, regardless of output interval\n'
p27782
sS'cpp_type'
p27783
S'bool'
p27784
sS'default'
p27785
S'0'
p27786
sS'name'
p27787
S'output_final'
p27788
sS'required'
p27789
I00
sS'group_name'
p27790
S'Timing'
p27791
sa(dp27792
S'description'
p27793
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p27794
sS'cpp_type'
p27795
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p27796
sS'default'
p27797
g3
sS'name'
p27798
S'output_if_base_contains'
p27799
sS'required'
p27800
I00
sS'group_name'
p27801
S'Advanced'
p27802
sa(dp27803
S'description'
p27804
S'Request that the initial condition is output to the solution file\n'
p27805
sS'cpp_type'
p27806
S'bool'
p27807
sS'default'
p27808
S'0'
p27809
sS'name'
p27810
S'output_initial'
p27811
sS'required'
p27812
I00
sS'group_name'
p27813
S'Timing'
p27814
sa(dp27815
S'description'
p27816
S'Request that all intermediate steps (not initial or final) are output\n'
p27817
sS'cpp_type'
p27818
S'bool'
p27819
sS'default'
p27820
S'1'
p27821
sS'name'
p27822
S'output_intermediate'
p27823
sS'required'
p27824
I00
sS'group_name'
p27825
Nsa(dp27826
S'description'
p27827
S'Specifies whether output occurs on each linear residual evaluation\n'
p27828
sS'cpp_type'
p27829
S'bool'
p27830
sS'default'
p27831
S'0'
p27832
sS'name'
p27833
S'output_linear'
p27834
sS'required'
p27835
I00
sS'group_name'
p27836
Nsa(dp27837
S'description'
p27838
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p27839
sS'cpp_type'
p27840
S'bool'
p27841
sS'default'
p27842
S'0'
p27843
sS'name'
p27844
S'output_nonlinear'
p27845
sS'required'
p27846
I00
sS'group_name'
p27847
Nsa(dp27848
S'name'
p27849
S'output_on'
p27850
sS'cpp_type'
p27851
S'MultiMooseEnum'
p27852
sS'default'
p27853
S'TIMESTEP_END'
p27854
sS'description'
p27855
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p27856
sS'required'
p27857
I00
sS'options'
p27858
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p27859
sS'group_name'
p27860
Nsa(dp27861
S'description'
p27862
S'Request that data be output at the end of the timestep\n'
p27863
sS'cpp_type'
p27864
S'bool'
p27865
sS'default'
p27866
S'1'
p27867
sS'name'
p27868
S'output_timestep_end'
p27869
sS'required'
p27870
I00
sS'group_name'
p27871
Nsa(dp27872
S'description'
p27873
S'Set to true to enable oversampling\n'
p27874
sS'cpp_type'
p27875
S'bool'
p27876
sS'default'
p27877
S'0'
p27878
sS'name'
p27879
S'oversample'
p27880
sS'required'
p27881
I00
sS'group_name'
p27882
Nsa(dp27883
S'description'
p27884
S'The number of for extension suffix (e.g., out.e-s002)\n'
p27885
sS'cpp_type'
p27886
S'unsigned int'
p27887
sS'default'
p27888
S'4'
p27889
sS'name'
p27890
S'padding'
p27891
sS'required'
p27892
I00
sS'group_name'
p27893
S'Advanced'
p27894
sa(dp27895
S'description'
p27896
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p27897
sS'cpp_type'
p27898
S'libMesh::Point'
p27899
sS'default'
p27900
g3
sS'name'
p27901
S'position'
p27902
sS'required'
p27903
I00
sS'group_name'
p27904
S'Oversampling'
p27905
sa(dp27906
S'description'
p27907
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p27908
sS'cpp_type'
p27909
S'unsigned int'
p27910
sS'default'
p27911
S'0'
p27912
sS'name'
p27913
S'refinements'
p27914
sS'required'
p27915
I00
sS'group_name'
p27916
S'Oversampling'
p27917
sa(dp27918
S'description'
p27919
S'Time at which this output object begins to operate\n'
p27920
sS'cpp_type'
p27921
S'double'
p27922
sS'default'
p27923
g3
sS'name'
p27924
S'start_time'
p27925
sS'required'
p27926
I00
sS'group_name'
p27927
S'Timing'
p27928
sa(dp27929
S'description'
p27930
S'Only export results at sync times\n'
p27931
sS'cpp_type'
p27932
S'bool'
p27933
sS'default'
p27934
S'0'
p27935
sS'name'
p27936
S'sync_only'
p27937
sS'required'
p27938
I00
sS'group_name'
p27939
S'Timing'
p27940
sa(dp27941
S'description'
p27942
S'Times at which the output and solution is forced to occur\n'
p27943
sS'cpp_type'
p27944
S'std::__1::vector<double, std::__1::allocator<double> >'
p27945
sS'default'
p27946
g3
sS'name'
p27947
S'sync_times'
p27948
sS'required'
p27949
I00
sS'group_name'
p27950
S'Timing'
p27951
sa(dp27952
S'description'
p27953
S'Time tolerance utilized checking start and end times\n'
p27954
sS'cpp_type'
p27955
S'double'
p27956
sS'default'
p27957
S'1e-14'
p27958
sS'name'
p27959
S'time_tolerance'
p27960
sS'required'
p27961
I00
sS'group_name'
p27962
S'Timing'
p27963
sa(dp27964
S'description'
p27965
g3
sS'cpp_type'
p27966
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p27967
sS'default'
p27968
S'Tecplot'
p27969
sS'name'
p27970
S'type'
p27971
sS'required'
p27972
I00
sS'group_name'
p27973
Nsa(dp27974
S'description'
p27975
S'Enable/disable the use of the displaced mesh for outputting\n'
p27976
sS'cpp_type'
p27977
S'bool'
p27978
sS'default'
p27979
S'0'
p27980
sS'name'
p27981
S'use_displaced'
p27982
sS'required'
p27983
I00
sS'group_name'
p27984
NsasS'name'
p27985
S'/Outputs/Tecplot'
p27986
sa(dp27987
S'description'
p27988
g3
sS'subblocks'
p27989
NsS'parameters'
p27990
(lp27991
(dp27992
S'name'
p27993
S'additional_output_on'
p27994
sS'cpp_type'
p27995
S'MultiMooseEnum'
p27996
sS'default'
p27997
g3
sS'description'
p27998
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p27999
sS'required'
p28000
I00
sS'options'
p28001
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28002
sS'group_name'
p28003
Nsa(dp28004
S'description'
p28005
S'Time at which this output object stop operating\n'
p28006
sS'cpp_type'
p28007
S'double'
p28008
sS'default'
p28009
g3
sS'name'
p28010
S'end_time'
p28011
sS'required'
p28012
I00
sS'group_name'
p28013
S'Timing'
p28014
sa(dp28015
S'description'
p28016
S'The interval at which time steps are output to the solution file\n'
p28017
sS'cpp_type'
p28018
S'unsigned int'
p28019
sS'default'
p28020
S'1'
p28021
sS'name'
p28022
S'interval'
p28023
sS'required'
p28024
I00
sS'group_name'
p28025
S'Timing'
p28026
sa(dp28027
S'description'
p28028
S'Number of divisions applied to time step when outputting linear residuals\n'
p28029
sS'cpp_type'
p28030
S'double'
p28031
sS'default'
p28032
S'1000'
p28033
sS'name'
p28034
S'linear_residual_dt_divisor'
p28035
sS'required'
p28036
I00
sS'group_name'
p28037
S'PETSc'
p28038
sa(dp28039
S'description'
p28040
S'Specifies an end time to begin output on each linear residual evaluation\n'
p28041
sS'cpp_type'
p28042
S'double'
p28043
sS'default'
p28044
g3
sS'name'
p28045
S'linear_residual_end_time'
p28046
sS'required'
p28047
I00
sS'group_name'
p28048
S'PETSc'
p28049
sa(dp28050
S'description'
p28051
S'Specifies a start time to begin output on each linear residual evaluation\n'
p28052
sS'cpp_type'
p28053
S'double'
p28054
sS'default'
p28055
g3
sS'name'
p28056
S'linear_residual_start_time'
p28057
sS'required'
p28058
I00
sS'group_name'
p28059
S'PETSc'
p28060
sa(dp28061
S'description'
p28062
S'Specifies whether output occurs on each linear residual evaluation\n'
p28063
sS'cpp_type'
p28064
S'bool'
p28065
sS'default'
p28066
S'0'
p28067
sS'name'
p28068
S'linear_residuals'
p28069
sS'required'
p28070
I00
sS'group_name'
p28071
S'PETSc'
p28072
sa(dp28073
S'description'
p28074
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p28075
sS'cpp_type'
p28076
S'double'
p28077
sS'default'
p28078
S'1000'
p28079
sS'name'
p28080
S'nonlinear_residual_dt_divisor'
p28081
sS'required'
p28082
I00
sS'group_name'
p28083
S'PETSc'
p28084
sa(dp28085
S'description'
p28086
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p28087
sS'cpp_type'
p28088
S'double'
p28089
sS'default'
p28090
g3
sS'name'
p28091
S'nonlinear_residual_end_time'
p28092
sS'required'
p28093
I00
sS'group_name'
p28094
S'PETSc'
p28095
sa(dp28096
S'description'
p28097
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p28098
sS'cpp_type'
p28099
S'double'
p28100
sS'default'
p28101
g3
sS'name'
p28102
S'nonlinear_residual_start_time'
p28103
sS'required'
p28104
I00
sS'group_name'
p28105
S'PETSc'
p28106
sa(dp28107
S'description'
p28108
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p28109
sS'cpp_type'
p28110
S'bool'
p28111
sS'default'
p28112
S'0'
p28113
sS'name'
p28114
S'nonlinear_residuals'
p28115
sS'required'
p28116
I00
sS'group_name'
p28117
S'PETSc'
p28118
sa(dp28119
S'description'
p28120
S'The number of top residuals to print out (0 = no output)\n'
p28121
sS'cpp_type'
p28122
S'unsigned int'
p28123
sS'default'
p28124
S'0'
p28125
sS'name'
p28126
S'num_residuals'
p28127
sS'required'
p28128
I00
sS'group_name'
p28129
Nsa(dp28130
S'description'
p28131
S'When true all time attempted time steps are output\n'
p28132
sS'cpp_type'
p28133
S'bool'
p28134
sS'default'
p28135
S'0'
p28136
sS'name'
p28137
S'output_failed'
p28138
sS'required'
p28139
I00
sS'group_name'
p28140
Nsa(dp28141
S'description'
p28142
S'Force the final time step to be output, regardless of output interval\n'
p28143
sS'cpp_type'
p28144
S'bool'
p28145
sS'default'
p28146
S'0'
p28147
sS'name'
p28148
S'output_final'
p28149
sS'required'
p28150
I00
sS'group_name'
p28151
S'Timing'
p28152
sa(dp28153
S'description'
p28154
S'Request that the initial condition is output to the solution file\n'
p28155
sS'cpp_type'
p28156
S'bool'
p28157
sS'default'
p28158
S'0'
p28159
sS'name'
p28160
S'output_initial'
p28161
sS'required'
p28162
I00
sS'group_name'
p28163
S'Timing'
p28164
sa(dp28165
S'description'
p28166
S'Request that all intermediate steps (not initial or final) are output\n'
p28167
sS'cpp_type'
p28168
S'bool'
p28169
sS'default'
p28170
S'1'
p28171
sS'name'
p28172
S'output_intermediate'
p28173
sS'required'
p28174
I00
sS'group_name'
p28175
Nsa(dp28176
S'description'
p28177
S'Specifies whether output occurs on each linear residual evaluation\n'
p28178
sS'cpp_type'
p28179
S'bool'
p28180
sS'default'
p28181
S'0'
p28182
sS'name'
p28183
S'output_linear'
p28184
sS'required'
p28185
I00
sS'group_name'
p28186
Nsa(dp28187
S'description'
p28188
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p28189
sS'cpp_type'
p28190
S'bool'
p28191
sS'default'
p28192
S'0'
p28193
sS'name'
p28194
S'output_nonlinear'
p28195
sS'required'
p28196
I00
sS'group_name'
p28197
Nsa(dp28198
S'name'
p28199
S'output_on'
p28200
sS'cpp_type'
p28201
S'MultiMooseEnum'
p28202
sS'default'
p28203
S'LINEAR NONLINEAR TIMESTEP_END'
p28204
sS'description'
p28205
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28206
sS'required'
p28207
I00
sS'options'
p28208
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28209
sS'group_name'
p28210
Nsa(dp28211
S'description'
p28212
S'Request that data be output at the end of the timestep\n'
p28213
sS'cpp_type'
p28214
S'bool'
p28215
sS'default'
p28216
S'1'
p28217
sS'name'
p28218
S'output_timestep_end'
p28219
sS'required'
p28220
I00
sS'group_name'
p28221
Nsa(dp28222
S'description'
p28223
S'Time at which this output object begins to operate\n'
p28224
sS'cpp_type'
p28225
S'double'
p28226
sS'default'
p28227
g3
sS'name'
p28228
S'start_time'
p28229
sS'required'
p28230
I00
sS'group_name'
p28231
S'Timing'
p28232
sa(dp28233
S'description'
p28234
S'Only export results at sync times\n'
p28235
sS'cpp_type'
p28236
S'bool'
p28237
sS'default'
p28238
S'0'
p28239
sS'name'
p28240
S'sync_only'
p28241
sS'required'
p28242
I00
sS'group_name'
p28243
S'Timing'
p28244
sa(dp28245
S'description'
p28246
S'Times at which the output and solution is forced to occur\n'
p28247
sS'cpp_type'
p28248
S'std::__1::vector<double, std::__1::allocator<double> >'
p28249
sS'default'
p28250
g3
sS'name'
p28251
S'sync_times'
p28252
sS'required'
p28253
I00
sS'group_name'
p28254
S'Timing'
p28255
sa(dp28256
S'description'
p28257
S'Time tolerance utilized checking start and end times\n'
p28258
sS'cpp_type'
p28259
S'double'
p28260
sS'default'
p28261
S'1e-14'
p28262
sS'name'
p28263
S'time_tolerance'
p28264
sS'required'
p28265
I00
sS'group_name'
p28266
S'Timing'
p28267
sa(dp28268
S'description'
p28269
g3
sS'cpp_type'
p28270
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28271
sS'default'
p28272
S'TopResidualDebugOutput'
p28273
sS'name'
p28274
S'type'
p28275
sS'required'
p28276
I00
sS'group_name'
p28277
Nsa(dp28278
S'description'
p28279
S'Enable/disable the use of the displaced mesh for outputting\n'
p28280
sS'cpp_type'
p28281
S'bool'
p28282
sS'default'
p28283
S'0'
p28284
sS'name'
p28285
S'use_displaced'
p28286
sS'required'
p28287
I00
sS'group_name'
p28288
NsasS'name'
p28289
S'/Outputs/TopResidualDebugOutput'
p28290
sa(dp28291
S'description'
p28292
g3
sS'subblocks'
p28293
NsS'parameters'
p28294
(lp28295
(dp28296
S'name'
p28297
S'additional_output_on'
p28298
sS'cpp_type'
p28299
S'MultiMooseEnum'
p28300
sS'default'
p28301
g3
sS'description'
p28302
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28303
sS'required'
p28304
I00
sS'options'
p28305
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28306
sS'group_name'
p28307
Nsa(dp28308
S'description'
p28309
S"Append '_displaced' to the output file base\n"
p28310
sS'cpp_type'
p28311
S'bool'
p28312
sS'default'
p28313
S'0'
p28314
sS'name'
p28315
S'append_displaced'
p28316
sS'required'
p28317
I00
sS'group_name'
p28318
Nsa(dp28319
S'description'
p28320
S"Append '_oversample' to the output file base\n"
p28321
sS'cpp_type'
p28322
S'bool'
p28323
sS'default'
p28324
S'0'
p28325
sS'name'
p28326
S'append_oversample'
p28327
sS'required'
p28328
I00
sS'group_name'
p28329
Nsa(dp28330
S'description'
p28331
S'Set VTK files to output in binary format\n'
p28332
sS'cpp_type'
p28333
S'bool'
p28334
sS'default'
p28335
S'0'
p28336
sS'name'
p28337
S'binary'
p28338
sS'required'
p28339
I00
sS'group_name'
p28340
S'Advanced'
p28341
sa(dp28342
S'description'
p28343
S'Time at which this output object stop operating\n'
p28344
sS'cpp_type'
p28345
S'double'
p28346
sS'default'
p28347
g3
sS'name'
p28348
S'end_time'
p28349
sS'required'
p28350
I00
sS'group_name'
p28351
S'Timing'
p28352
sa(dp28353
S'description'
p28354
S'The name of the mesh file to read, for oversampling\n'
p28355
sS'cpp_type'
p28356
S'MeshFileName'
p28357
sS'default'
p28358
g3
sS'name'
p28359
S'file'
p28360
sS'required'
p28361
I00
sS'group_name'
p28362
S'Oversampling'
p28363
sa(dp28364
S'description'
p28365
S'The desired solution output name without an extension\n'
p28366
sS'cpp_type'
p28367
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28368
sS'default'
p28369
g3
sS'name'
p28370
S'file_base'
p28371
sS'required'
p28372
I00
sS'group_name'
p28373
Nsa(dp28374
S'description'
p28375
S'The interval at which time steps are output to the solution file\n'
p28376
sS'cpp_type'
p28377
S'unsigned int'
p28378
sS'default'
p28379
S'1'
p28380
sS'name'
p28381
S'interval'
p28382
sS'required'
p28383
I00
sS'group_name'
p28384
S'Timing'
p28385
sa(dp28386
S'description'
p28387
S'Number of divisions applied to time step when outputting linear residuals\n'
p28388
sS'cpp_type'
p28389
S'double'
p28390
sS'default'
p28391
S'1000'
p28392
sS'name'
p28393
S'linear_residual_dt_divisor'
p28394
sS'required'
p28395
I00
sS'group_name'
p28396
S'PETSc'
p28397
sa(dp28398
S'description'
p28399
S'Specifies an end time to begin output on each linear residual evaluation\n'
p28400
sS'cpp_type'
p28401
S'double'
p28402
sS'default'
p28403
g3
sS'name'
p28404
S'linear_residual_end_time'
p28405
sS'required'
p28406
I00
sS'group_name'
p28407
S'PETSc'
p28408
sa(dp28409
S'description'
p28410
S'Specifies a start time to begin output on each linear residual evaluation\n'
p28411
sS'cpp_type'
p28412
S'double'
p28413
sS'default'
p28414
g3
sS'name'
p28415
S'linear_residual_start_time'
p28416
sS'required'
p28417
I00
sS'group_name'
p28418
S'PETSc'
p28419
sa(dp28420
S'description'
p28421
S'Specifies whether output occurs on each linear residual evaluation\n'
p28422
sS'cpp_type'
p28423
S'bool'
p28424
sS'default'
p28425
S'0'
p28426
sS'name'
p28427
S'linear_residuals'
p28428
sS'required'
p28429
I00
sS'group_name'
p28430
S'PETSc'
p28431
sa(dp28432
S'description'
p28433
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p28434
sS'cpp_type'
p28435
S'double'
p28436
sS'default'
p28437
S'1000'
p28438
sS'name'
p28439
S'nonlinear_residual_dt_divisor'
p28440
sS'required'
p28441
I00
sS'group_name'
p28442
S'PETSc'
p28443
sa(dp28444
S'description'
p28445
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p28446
sS'cpp_type'
p28447
S'double'
p28448
sS'default'
p28449
g3
sS'name'
p28450
S'nonlinear_residual_end_time'
p28451
sS'required'
p28452
I00
sS'group_name'
p28453
S'PETSc'
p28454
sa(dp28455
S'description'
p28456
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p28457
sS'cpp_type'
p28458
S'double'
p28459
sS'default'
p28460
g3
sS'name'
p28461
S'nonlinear_residual_start_time'
p28462
sS'required'
p28463
I00
sS'group_name'
p28464
S'PETSc'
p28465
sa(dp28466
S'description'
p28467
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p28468
sS'cpp_type'
p28469
S'bool'
p28470
sS'default'
p28471
S'0'
p28472
sS'name'
p28473
S'nonlinear_residuals'
p28474
sS'required'
p28475
I00
sS'group_name'
p28476
S'PETSc'
p28477
sa(dp28478
S'description'
p28479
S'When true all time attempted time steps are output\n'
p28480
sS'cpp_type'
p28481
S'bool'
p28482
sS'default'
p28483
S'0'
p28484
sS'name'
p28485
S'output_failed'
p28486
sS'required'
p28487
I00
sS'group_name'
p28488
Nsa(dp28489
S'description'
p28490
S'Force the final time step to be output, regardless of output interval\n'
p28491
sS'cpp_type'
p28492
S'bool'
p28493
sS'default'
p28494
S'0'
p28495
sS'name'
p28496
S'output_final'
p28497
sS'required'
p28498
I00
sS'group_name'
p28499
S'Timing'
p28500
sa(dp28501
S'description'
p28502
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p28503
sS'cpp_type'
p28504
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p28505
sS'default'
p28506
g3
sS'name'
p28507
S'output_if_base_contains'
p28508
sS'required'
p28509
I00
sS'group_name'
p28510
S'Advanced'
p28511
sa(dp28512
S'description'
p28513
S'Request that the initial condition is output to the solution file\n'
p28514
sS'cpp_type'
p28515
S'bool'
p28516
sS'default'
p28517
S'0'
p28518
sS'name'
p28519
S'output_initial'
p28520
sS'required'
p28521
I00
sS'group_name'
p28522
S'Timing'
p28523
sa(dp28524
S'description'
p28525
S'Request that all intermediate steps (not initial or final) are output\n'
p28526
sS'cpp_type'
p28527
S'bool'
p28528
sS'default'
p28529
S'1'
p28530
sS'name'
p28531
S'output_intermediate'
p28532
sS'required'
p28533
I00
sS'group_name'
p28534
Nsa(dp28535
S'description'
p28536
S'Specifies whether output occurs on each linear residual evaluation\n'
p28537
sS'cpp_type'
p28538
S'bool'
p28539
sS'default'
p28540
S'0'
p28541
sS'name'
p28542
S'output_linear'
p28543
sS'required'
p28544
I00
sS'group_name'
p28545
Nsa(dp28546
S'description'
p28547
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p28548
sS'cpp_type'
p28549
S'bool'
p28550
sS'default'
p28551
S'0'
p28552
sS'name'
p28553
S'output_nonlinear'
p28554
sS'required'
p28555
I00
sS'group_name'
p28556
Nsa(dp28557
S'name'
p28558
S'output_on'
p28559
sS'cpp_type'
p28560
S'MultiMooseEnum'
p28561
sS'default'
p28562
S'TIMESTEP_END'
p28563
sS'description'
p28564
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28565
sS'required'
p28566
I00
sS'options'
p28567
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28568
sS'group_name'
p28569
Nsa(dp28570
S'description'
p28571
S'Request that data be output at the end of the timestep\n'
p28572
sS'cpp_type'
p28573
S'bool'
p28574
sS'default'
p28575
S'1'
p28576
sS'name'
p28577
S'output_timestep_end'
p28578
sS'required'
p28579
I00
sS'group_name'
p28580
Nsa(dp28581
S'description'
p28582
S'Set to true to enable oversampling\n'
p28583
sS'cpp_type'
p28584
S'bool'
p28585
sS'default'
p28586
S'0'
p28587
sS'name'
p28588
S'oversample'
p28589
sS'required'
p28590
I00
sS'group_name'
p28591
Nsa(dp28592
S'description'
p28593
S'The number of for extension suffix (e.g., out.e-s002)\n'
p28594
sS'cpp_type'
p28595
S'unsigned int'
p28596
sS'default'
p28597
S'3'
p28598
sS'name'
p28599
S'padding'
p28600
sS'required'
p28601
I00
sS'group_name'
p28602
S'Advanced'
p28603
sa(dp28604
S'description'
p28605
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p28606
sS'cpp_type'
p28607
S'libMesh::Point'
p28608
sS'default'
p28609
g3
sS'name'
p28610
S'position'
p28611
sS'required'
p28612
I00
sS'group_name'
p28613
S'Oversampling'
p28614
sa(dp28615
S'description'
p28616
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p28617
sS'cpp_type'
p28618
S'unsigned int'
p28619
sS'default'
p28620
S'0'
p28621
sS'name'
p28622
S'refinements'
p28623
sS'required'
p28624
I00
sS'group_name'
p28625
S'Oversampling'
p28626
sa(dp28627
S'description'
p28628
S'Time at which this output object begins to operate\n'
p28629
sS'cpp_type'
p28630
S'double'
p28631
sS'default'
p28632
g3
sS'name'
p28633
S'start_time'
p28634
sS'required'
p28635
I00
sS'group_name'
p28636
S'Timing'
p28637
sa(dp28638
S'description'
p28639
S'Only export results at sync times\n'
p28640
sS'cpp_type'
p28641
S'bool'
p28642
sS'default'
p28643
S'0'
p28644
sS'name'
p28645
S'sync_only'
p28646
sS'required'
p28647
I00
sS'group_name'
p28648
S'Timing'
p28649
sa(dp28650
S'description'
p28651
S'Times at which the output and solution is forced to occur\n'
p28652
sS'cpp_type'
p28653
S'std::__1::vector<double, std::__1::allocator<double> >'
p28654
sS'default'
p28655
g3
sS'name'
p28656
S'sync_times'
p28657
sS'required'
p28658
I00
sS'group_name'
p28659
S'Timing'
p28660
sa(dp28661
S'description'
p28662
S'Time tolerance utilized checking start and end times\n'
p28663
sS'cpp_type'
p28664
S'double'
p28665
sS'default'
p28666
S'1e-14'
p28667
sS'name'
p28668
S'time_tolerance'
p28669
sS'required'
p28670
I00
sS'group_name'
p28671
S'Timing'
p28672
sa(dp28673
S'description'
p28674
g3
sS'cpp_type'
p28675
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28676
sS'default'
p28677
S'VTK'
p28678
sS'name'
p28679
S'type'
p28680
sS'required'
p28681
I00
sS'group_name'
p28682
Nsa(dp28683
S'description'
p28684
S'Enable/disable the use of the displaced mesh for outputting\n'
p28685
sS'cpp_type'
p28686
S'bool'
p28687
sS'default'
p28688
S'0'
p28689
sS'name'
p28690
S'use_displaced'
p28691
sS'required'
p28692
I00
sS'group_name'
p28693
NsasS'name'
p28694
S'/Outputs/VTK'
p28695
sa(dp28696
S'description'
p28697
g3
sS'subblocks'
p28698
NsS'parameters'
p28699
(lp28700
(dp28701
S'name'
p28702
S'additional_output_on'
p28703
sS'cpp_type'
p28704
S'MultiMooseEnum'
p28705
sS'default'
p28706
g3
sS'description'
p28707
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28708
sS'required'
p28709
I00
sS'options'
p28710
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28711
sS'group_name'
p28712
Nsa(dp28713
S'description'
p28714
S'Time at which this output object stop operating\n'
p28715
sS'cpp_type'
p28716
S'double'
p28717
sS'default'
p28718
g3
sS'name'
p28719
S'end_time'
p28720
sS'required'
p28721
I00
sS'group_name'
p28722
S'Timing'
p28723
sa(dp28724
S'description'
p28725
S'The interval at which time steps are output to the solution file\n'
p28726
sS'cpp_type'
p28727
S'unsigned int'
p28728
sS'default'
p28729
S'1'
p28730
sS'name'
p28731
S'interval'
p28732
sS'required'
p28733
I00
sS'group_name'
p28734
S'Timing'
p28735
sa(dp28736
S'description'
p28737
S'Number of divisions applied to time step when outputting linear residuals\n'
p28738
sS'cpp_type'
p28739
S'double'
p28740
sS'default'
p28741
S'1000'
p28742
sS'name'
p28743
S'linear_residual_dt_divisor'
p28744
sS'required'
p28745
I00
sS'group_name'
p28746
S'PETSc'
p28747
sa(dp28748
S'description'
p28749
S'Specifies an end time to begin output on each linear residual evaluation\n'
p28750
sS'cpp_type'
p28751
S'double'
p28752
sS'default'
p28753
g3
sS'name'
p28754
S'linear_residual_end_time'
p28755
sS'required'
p28756
I00
sS'group_name'
p28757
S'PETSc'
p28758
sa(dp28759
S'description'
p28760
S'Specifies a start time to begin output on each linear residual evaluation\n'
p28761
sS'cpp_type'
p28762
S'double'
p28763
sS'default'
p28764
g3
sS'name'
p28765
S'linear_residual_start_time'
p28766
sS'required'
p28767
I00
sS'group_name'
p28768
S'PETSc'
p28769
sa(dp28770
S'description'
p28771
S'Specifies whether output occurs on each linear residual evaluation\n'
p28772
sS'cpp_type'
p28773
S'bool'
p28774
sS'default'
p28775
S'0'
p28776
sS'name'
p28777
S'linear_residuals'
p28778
sS'required'
p28779
I00
sS'group_name'
p28780
S'PETSc'
p28781
sa(dp28782
S'description'
p28783
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p28784
sS'cpp_type'
p28785
S'double'
p28786
sS'default'
p28787
S'1000'
p28788
sS'name'
p28789
S'nonlinear_residual_dt_divisor'
p28790
sS'required'
p28791
I00
sS'group_name'
p28792
S'PETSc'
p28793
sa(dp28794
S'description'
p28795
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p28796
sS'cpp_type'
p28797
S'double'
p28798
sS'default'
p28799
g3
sS'name'
p28800
S'nonlinear_residual_end_time'
p28801
sS'required'
p28802
I00
sS'group_name'
p28803
S'PETSc'
p28804
sa(dp28805
S'description'
p28806
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p28807
sS'cpp_type'
p28808
S'double'
p28809
sS'default'
p28810
g3
sS'name'
p28811
S'nonlinear_residual_start_time'
p28812
sS'required'
p28813
I00
sS'group_name'
p28814
S'PETSc'
p28815
sa(dp28816
S'description'
p28817
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p28818
sS'cpp_type'
p28819
S'bool'
p28820
sS'default'
p28821
S'0'
p28822
sS'name'
p28823
S'nonlinear_residuals'
p28824
sS'required'
p28825
I00
sS'group_name'
p28826
S'PETSc'
p28827
sa(dp28828
S'description'
p28829
S'When true all time attempted time steps are output\n'
p28830
sS'cpp_type'
p28831
S'bool'
p28832
sS'default'
p28833
S'0'
p28834
sS'name'
p28835
S'output_failed'
p28836
sS'required'
p28837
I00
sS'group_name'
p28838
Nsa(dp28839
S'description'
p28840
S'Force the final time step to be output, regardless of output interval\n'
p28841
sS'cpp_type'
p28842
S'bool'
p28843
sS'default'
p28844
S'0'
p28845
sS'name'
p28846
S'output_final'
p28847
sS'required'
p28848
I00
sS'group_name'
p28849
S'Timing'
p28850
sa(dp28851
S'description'
p28852
S'Request that the initial condition is output to the solution file\n'
p28853
sS'cpp_type'
p28854
S'bool'
p28855
sS'default'
p28856
S'0'
p28857
sS'name'
p28858
S'output_initial'
p28859
sS'required'
p28860
I00
sS'group_name'
p28861
S'Timing'
p28862
sa(dp28863
S'description'
p28864
S'Request that all intermediate steps (not initial or final) are output\n'
p28865
sS'cpp_type'
p28866
S'bool'
p28867
sS'default'
p28868
S'1'
p28869
sS'name'
p28870
S'output_intermediate'
p28871
sS'required'
p28872
I00
sS'group_name'
p28873
Nsa(dp28874
S'description'
p28875
S'Specifies whether output occurs on each linear residual evaluation\n'
p28876
sS'cpp_type'
p28877
S'bool'
p28878
sS'default'
p28879
S'0'
p28880
sS'name'
p28881
S'output_linear'
p28882
sS'required'
p28883
I00
sS'group_name'
p28884
Nsa(dp28885
S'description'
p28886
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p28887
sS'cpp_type'
p28888
S'bool'
p28889
sS'default'
p28890
S'0'
p28891
sS'name'
p28892
S'output_nonlinear'
p28893
sS'required'
p28894
I00
sS'group_name'
p28895
Nsa(dp28896
S'name'
p28897
S'output_on'
p28898
sS'cpp_type'
p28899
S'MultiMooseEnum'
p28900
sS'default'
p28901
S'NONLINEAR'
p28902
sS'description'
p28903
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p28904
sS'required'
p28905
I00
sS'options'
p28906
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p28907
sS'group_name'
p28908
Nsa(dp28909
S'description'
p28910
S'Request that data be output at the end of the timestep\n'
p28911
sS'cpp_type'
p28912
S'bool'
p28913
sS'default'
p28914
S'1'
p28915
sS'name'
p28916
S'output_timestep_end'
p28917
sS'required'
p28918
I00
sS'group_name'
p28919
Nsa(dp28920
S'description'
p28921
S'Time at which this output object begins to operate\n'
p28922
sS'cpp_type'
p28923
S'double'
p28924
sS'default'
p28925
g3
sS'name'
p28926
S'start_time'
p28927
sS'required'
p28928
I00
sS'group_name'
p28929
S'Timing'
p28930
sa(dp28931
S'description'
p28932
S'Only export results at sync times\n'
p28933
sS'cpp_type'
p28934
S'bool'
p28935
sS'default'
p28936
S'0'
p28937
sS'name'
p28938
S'sync_only'
p28939
sS'required'
p28940
I00
sS'group_name'
p28941
S'Timing'
p28942
sa(dp28943
S'description'
p28944
S'Times at which the output and solution is forced to occur\n'
p28945
sS'cpp_type'
p28946
S'std::__1::vector<double, std::__1::allocator<double> >'
p28947
sS'default'
p28948
g3
sS'name'
p28949
S'sync_times'
p28950
sS'required'
p28951
I00
sS'group_name'
p28952
S'Timing'
p28953
sa(dp28954
S'description'
p28955
S'Time tolerance utilized checking start and end times\n'
p28956
sS'cpp_type'
p28957
S'double'
p28958
sS'default'
p28959
S'1e-14'
p28960
sS'name'
p28961
S'time_tolerance'
p28962
sS'required'
p28963
I00
sS'group_name'
p28964
S'Timing'
p28965
sa(dp28966
S'description'
p28967
g3
sS'cpp_type'
p28968
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p28969
sS'default'
p28970
S'VariableResidualNormsDebugOutput'
p28971
sS'name'
p28972
S'type'
p28973
sS'required'
p28974
I00
sS'group_name'
p28975
Nsa(dp28976
S'description'
p28977
S'Enable/disable the use of the displaced mesh for outputting\n'
p28978
sS'cpp_type'
p28979
S'bool'
p28980
sS'default'
p28981
S'0'
p28982
sS'name'
p28983
S'use_displaced'
p28984
sS'required'
p28985
I00
sS'group_name'
p28986
NsasS'name'
p28987
S'/Outputs/VariableResidualNormsDebugOutput'
p28988
sa(dp28989
S'description'
p28990
S'Object for outputting data in the XDA/XDR format\n'
p28991
sS'subblocks'
p28992
NsS'parameters'
p28993
(lp28994
(dp28995
S'name'
p28996
S'additional_output_on'
p28997
sS'cpp_type'
p28998
S'MultiMooseEnum'
p28999
sS'default'
p29000
g3
sS'description'
p29001
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29002
sS'required'
p29003
I00
sS'options'
p29004
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29005
sS'group_name'
p29006
Nsa(dp29007
S'description'
p29008
S"Append '_displaced' to the output file base\n"
p29009
sS'cpp_type'
p29010
S'bool'
p29011
sS'default'
p29012
S'0'
p29013
sS'name'
p29014
S'append_displaced'
p29015
sS'required'
p29016
I00
sS'group_name'
p29017
Nsa(dp29018
S'description'
p29019
S"Append '_oversample' to the output file base\n"
p29020
sS'cpp_type'
p29021
S'bool'
p29022
sS'default'
p29023
S'0'
p29024
sS'name'
p29025
S'append_oversample'
p29026
sS'required'
p29027
I00
sS'group_name'
p29028
Nsa(dp29029
S'description'
p29030
S'Time at which this output object stop operating\n'
p29031
sS'cpp_type'
p29032
S'double'
p29033
sS'default'
p29034
g3
sS'name'
p29035
S'end_time'
p29036
sS'required'
p29037
I00
sS'group_name'
p29038
S'Timing'
p29039
sa(dp29040
S'description'
p29041
S'The name of the mesh file to read, for oversampling\n'
p29042
sS'cpp_type'
p29043
S'MeshFileName'
p29044
sS'default'
p29045
g3
sS'name'
p29046
S'file'
p29047
sS'required'
p29048
I00
sS'group_name'
p29049
S'Oversampling'
p29050
sa(dp29051
S'description'
p29052
S'The desired solution output name without an extension\n'
p29053
sS'cpp_type'
p29054
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29055
sS'default'
p29056
g3
sS'name'
p29057
S'file_base'
p29058
sS'required'
p29059
I00
sS'group_name'
p29060
Nsa(dp29061
S'description'
p29062
S'The interval at which time steps are output to the solution file\n'
p29063
sS'cpp_type'
p29064
S'unsigned int'
p29065
sS'default'
p29066
S'1'
p29067
sS'name'
p29068
S'interval'
p29069
sS'required'
p29070
I00
sS'group_name'
p29071
S'Timing'
p29072
sa(dp29073
S'description'
p29074
S'Number of divisions applied to time step when outputting linear residuals\n'
p29075
sS'cpp_type'
p29076
S'double'
p29077
sS'default'
p29078
S'1000'
p29079
sS'name'
p29080
S'linear_residual_dt_divisor'
p29081
sS'required'
p29082
I00
sS'group_name'
p29083
S'PETSc'
p29084
sa(dp29085
S'description'
p29086
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29087
sS'cpp_type'
p29088
S'double'
p29089
sS'default'
p29090
g3
sS'name'
p29091
S'linear_residual_end_time'
p29092
sS'required'
p29093
I00
sS'group_name'
p29094
S'PETSc'
p29095
sa(dp29096
S'description'
p29097
S'Specifies a start time to begin output on each linear residual evaluation\n'
p29098
sS'cpp_type'
p29099
S'double'
p29100
sS'default'
p29101
g3
sS'name'
p29102
S'linear_residual_start_time'
p29103
sS'required'
p29104
I00
sS'group_name'
p29105
S'PETSc'
p29106
sa(dp29107
S'description'
p29108
S'Specifies whether output occurs on each linear residual evaluation\n'
p29109
sS'cpp_type'
p29110
S'bool'
p29111
sS'default'
p29112
S'0'
p29113
sS'name'
p29114
S'linear_residuals'
p29115
sS'required'
p29116
I00
sS'group_name'
p29117
S'PETSc'
p29118
sa(dp29119
S'description'
p29120
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29121
sS'cpp_type'
p29122
S'double'
p29123
sS'default'
p29124
S'1000'
p29125
sS'name'
p29126
S'nonlinear_residual_dt_divisor'
p29127
sS'required'
p29128
I00
sS'group_name'
p29129
S'PETSc'
p29130
sa(dp29131
S'description'
p29132
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29133
sS'cpp_type'
p29134
S'double'
p29135
sS'default'
p29136
g3
sS'name'
p29137
S'nonlinear_residual_end_time'
p29138
sS'required'
p29139
I00
sS'group_name'
p29140
S'PETSc'
p29141
sa(dp29142
S'description'
p29143
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29144
sS'cpp_type'
p29145
S'double'
p29146
sS'default'
p29147
g3
sS'name'
p29148
S'nonlinear_residual_start_time'
p29149
sS'required'
p29150
I00
sS'group_name'
p29151
S'PETSc'
p29152
sa(dp29153
S'description'
p29154
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29155
sS'cpp_type'
p29156
S'bool'
p29157
sS'default'
p29158
S'0'
p29159
sS'name'
p29160
S'nonlinear_residuals'
p29161
sS'required'
p29162
I00
sS'group_name'
p29163
S'PETSc'
p29164
sa(dp29165
S'description'
p29166
S'When true all time attempted time steps are output\n'
p29167
sS'cpp_type'
p29168
S'bool'
p29169
sS'default'
p29170
S'0'
p29171
sS'name'
p29172
S'output_failed'
p29173
sS'required'
p29174
I00
sS'group_name'
p29175
Nsa(dp29176
S'description'
p29177
S'Force the final time step to be output, regardless of output interval\n'
p29178
sS'cpp_type'
p29179
S'bool'
p29180
sS'default'
p29181
S'0'
p29182
sS'name'
p29183
S'output_final'
p29184
sS'required'
p29185
I00
sS'group_name'
p29186
S'Timing'
p29187
sa(dp29188
S'description'
p29189
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29190
sS'cpp_type'
p29191
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29192
sS'default'
p29193
g3
sS'name'
p29194
S'output_if_base_contains'
p29195
sS'required'
p29196
I00
sS'group_name'
p29197
S'Advanced'
p29198
sa(dp29199
S'description'
p29200
S'Request that the initial condition is output to the solution file\n'
p29201
sS'cpp_type'
p29202
S'bool'
p29203
sS'default'
p29204
S'0'
p29205
sS'name'
p29206
S'output_initial'
p29207
sS'required'
p29208
I00
sS'group_name'
p29209
S'Timing'
p29210
sa(dp29211
S'description'
p29212
S'Request that all intermediate steps (not initial or final) are output\n'
p29213
sS'cpp_type'
p29214
S'bool'
p29215
sS'default'
p29216
S'1'
p29217
sS'name'
p29218
S'output_intermediate'
p29219
sS'required'
p29220
I00
sS'group_name'
p29221
Nsa(dp29222
S'description'
p29223
S'Specifies whether output occurs on each linear residual evaluation\n'
p29224
sS'cpp_type'
p29225
S'bool'
p29226
sS'default'
p29227
S'0'
p29228
sS'name'
p29229
S'output_linear'
p29230
sS'required'
p29231
I00
sS'group_name'
p29232
Nsa(dp29233
S'description'
p29234
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29235
sS'cpp_type'
p29236
S'bool'
p29237
sS'default'
p29238
S'0'
p29239
sS'name'
p29240
S'output_nonlinear'
p29241
sS'required'
p29242
I00
sS'group_name'
p29243
Nsa(dp29244
S'name'
p29245
S'output_on'
p29246
sS'cpp_type'
p29247
S'MultiMooseEnum'
p29248
sS'default'
p29249
S'TIMESTEP_END'
p29250
sS'description'
p29251
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29252
sS'required'
p29253
I00
sS'options'
p29254
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29255
sS'group_name'
p29256
Nsa(dp29257
S'description'
p29258
S'Request that data be output at the end of the timestep\n'
p29259
sS'cpp_type'
p29260
S'bool'
p29261
sS'default'
p29262
S'1'
p29263
sS'name'
p29264
S'output_timestep_end'
p29265
sS'required'
p29266
I00
sS'group_name'
p29267
Nsa(dp29268
S'description'
p29269
S'Set to true to enable oversampling\n'
p29270
sS'cpp_type'
p29271
S'bool'
p29272
sS'default'
p29273
S'0'
p29274
sS'name'
p29275
S'oversample'
p29276
sS'required'
p29277
I00
sS'group_name'
p29278
Nsa(dp29279
S'description'
p29280
S'The number of for extension suffix (e.g., out.e-s002)\n'
p29281
sS'cpp_type'
p29282
S'unsigned int'
p29283
sS'default'
p29284
S'4'
p29285
sS'name'
p29286
S'padding'
p29287
sS'required'
p29288
I00
sS'group_name'
p29289
S'Advanced'
p29290
sa(dp29291
S'description'
p29292
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p29293
sS'cpp_type'
p29294
S'libMesh::Point'
p29295
sS'default'
p29296
g3
sS'name'
p29297
S'position'
p29298
sS'required'
p29299
I00
sS'group_name'
p29300
S'Oversampling'
p29301
sa(dp29302
S'description'
p29303
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p29304
sS'cpp_type'
p29305
S'unsigned int'
p29306
sS'default'
p29307
S'0'
p29308
sS'name'
p29309
S'refinements'
p29310
sS'required'
p29311
I00
sS'group_name'
p29312
S'Oversampling'
p29313
sa(dp29314
S'description'
p29315
S'Time at which this output object begins to operate\n'
p29316
sS'cpp_type'
p29317
S'double'
p29318
sS'default'
p29319
g3
sS'name'
p29320
S'start_time'
p29321
sS'required'
p29322
I00
sS'group_name'
p29323
S'Timing'
p29324
sa(dp29325
S'description'
p29326
S'Only export results at sync times\n'
p29327
sS'cpp_type'
p29328
S'bool'
p29329
sS'default'
p29330
S'0'
p29331
sS'name'
p29332
S'sync_only'
p29333
sS'required'
p29334
I00
sS'group_name'
p29335
S'Timing'
p29336
sa(dp29337
S'description'
p29338
S'Times at which the output and solution is forced to occur\n'
p29339
sS'cpp_type'
p29340
S'std::__1::vector<double, std::__1::allocator<double> >'
p29341
sS'default'
p29342
g3
sS'name'
p29343
S'sync_times'
p29344
sS'required'
p29345
I00
sS'group_name'
p29346
S'Timing'
p29347
sa(dp29348
S'description'
p29349
S'Time tolerance utilized checking start and end times\n'
p29350
sS'cpp_type'
p29351
S'double'
p29352
sS'default'
p29353
S'1e-14'
p29354
sS'name'
p29355
S'time_tolerance'
p29356
sS'required'
p29357
I00
sS'group_name'
p29358
S'Timing'
p29359
sa(dp29360
S'description'
p29361
g3
sS'cpp_type'
p29362
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29363
sS'default'
p29364
S'XDA'
p29365
sS'name'
p29366
S'type'
p29367
sS'required'
p29368
I00
sS'group_name'
p29369
Nsa(dp29370
S'description'
p29371
S'Enable/disable the use of the displaced mesh for outputting\n'
p29372
sS'cpp_type'
p29373
S'bool'
p29374
sS'default'
p29375
S'0'
p29376
sS'name'
p29377
S'use_displaced'
p29378
sS'required'
p29379
I00
sS'group_name'
p29380
NsasS'name'
p29381
S'/Outputs/XDA'
p29382
sa(dp29383
S'description'
p29384
S'Object for outputting data in the XDA/XDR format\n'
p29385
sS'subblocks'
p29386
NsS'parameters'
p29387
(lp29388
(dp29389
S'name'
p29390
S'additional_output_on'
p29391
sS'cpp_type'
p29392
S'MultiMooseEnum'
p29393
sS'default'
p29394
g3
sS'description'
p29395
S'This list of output flags is added to the existing flags (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29396
sS'required'
p29397
I00
sS'options'
p29398
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29399
sS'group_name'
p29400
Nsa(dp29401
S'description'
p29402
S"Append '_displaced' to the output file base\n"
p29403
sS'cpp_type'
p29404
S'bool'
p29405
sS'default'
p29406
S'0'
p29407
sS'name'
p29408
S'append_displaced'
p29409
sS'required'
p29410
I00
sS'group_name'
p29411
Nsa(dp29412
S'description'
p29413
S"Append '_oversample' to the output file base\n"
p29414
sS'cpp_type'
p29415
S'bool'
p29416
sS'default'
p29417
S'0'
p29418
sS'name'
p29419
S'append_oversample'
p29420
sS'required'
p29421
I00
sS'group_name'
p29422
Nsa(dp29423
S'description'
p29424
S'Time at which this output object stop operating\n'
p29425
sS'cpp_type'
p29426
S'double'
p29427
sS'default'
p29428
g3
sS'name'
p29429
S'end_time'
p29430
sS'required'
p29431
I00
sS'group_name'
p29432
S'Timing'
p29433
sa(dp29434
S'description'
p29435
S'The name of the mesh file to read, for oversampling\n'
p29436
sS'cpp_type'
p29437
S'MeshFileName'
p29438
sS'default'
p29439
g3
sS'name'
p29440
S'file'
p29441
sS'required'
p29442
I00
sS'group_name'
p29443
S'Oversampling'
p29444
sa(dp29445
S'description'
p29446
S'The desired solution output name without an extension\n'
p29447
sS'cpp_type'
p29448
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29449
sS'default'
p29450
g3
sS'name'
p29451
S'file_base'
p29452
sS'required'
p29453
I00
sS'group_name'
p29454
Nsa(dp29455
S'description'
p29456
S'The interval at which time steps are output to the solution file\n'
p29457
sS'cpp_type'
p29458
S'unsigned int'
p29459
sS'default'
p29460
S'1'
p29461
sS'name'
p29462
S'interval'
p29463
sS'required'
p29464
I00
sS'group_name'
p29465
S'Timing'
p29466
sa(dp29467
S'description'
p29468
S'Number of divisions applied to time step when outputting linear residuals\n'
p29469
sS'cpp_type'
p29470
S'double'
p29471
sS'default'
p29472
S'1000'
p29473
sS'name'
p29474
S'linear_residual_dt_divisor'
p29475
sS'required'
p29476
I00
sS'group_name'
p29477
S'PETSc'
p29478
sa(dp29479
S'description'
p29480
S'Specifies an end time to begin output on each linear residual evaluation\n'
p29481
sS'cpp_type'
p29482
S'double'
p29483
sS'default'
p29484
g3
sS'name'
p29485
S'linear_residual_end_time'
p29486
sS'required'
p29487
I00
sS'group_name'
p29488
S'PETSc'
p29489
sa(dp29490
S'description'
p29491
S'Specifies a start time to begin output on each linear residual evaluation\n'
p29492
sS'cpp_type'
p29493
S'double'
p29494
sS'default'
p29495
g3
sS'name'
p29496
S'linear_residual_start_time'
p29497
sS'required'
p29498
I00
sS'group_name'
p29499
S'PETSc'
p29500
sa(dp29501
S'description'
p29502
S'Specifies whether output occurs on each linear residual evaluation\n'
p29503
sS'cpp_type'
p29504
S'bool'
p29505
sS'default'
p29506
S'0'
p29507
sS'name'
p29508
S'linear_residuals'
p29509
sS'required'
p29510
I00
sS'group_name'
p29511
S'PETSc'
p29512
sa(dp29513
S'description'
p29514
S'Number of divisions applied to time step when outputting non-linear residuals\n'
p29515
sS'cpp_type'
p29516
S'double'
p29517
sS'default'
p29518
S'1000'
p29519
sS'name'
p29520
S'nonlinear_residual_dt_divisor'
p29521
sS'required'
p29522
I00
sS'group_name'
p29523
S'PETSc'
p29524
sa(dp29525
S'description'
p29526
S'Specifies an end time to begin output on each nonlinear residual evaluation\n'
p29527
sS'cpp_type'
p29528
S'double'
p29529
sS'default'
p29530
g3
sS'name'
p29531
S'nonlinear_residual_end_time'
p29532
sS'required'
p29533
I00
sS'group_name'
p29534
S'PETSc'
p29535
sa(dp29536
S'description'
p29537
S'Specifies a start time to begin output on each nonlinear residual evaluation\n'
p29538
sS'cpp_type'
p29539
S'double'
p29540
sS'default'
p29541
g3
sS'name'
p29542
S'nonlinear_residual_start_time'
p29543
sS'required'
p29544
I00
sS'group_name'
p29545
S'PETSc'
p29546
sa(dp29547
S'description'
p29548
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29549
sS'cpp_type'
p29550
S'bool'
p29551
sS'default'
p29552
S'0'
p29553
sS'name'
p29554
S'nonlinear_residuals'
p29555
sS'required'
p29556
I00
sS'group_name'
p29557
S'PETSc'
p29558
sa(dp29559
S'description'
p29560
S'When true all time attempted time steps are output\n'
p29561
sS'cpp_type'
p29562
S'bool'
p29563
sS'default'
p29564
S'0'
p29565
sS'name'
p29566
S'output_failed'
p29567
sS'required'
p29568
I00
sS'group_name'
p29569
Nsa(dp29570
S'description'
p29571
S'Force the final time step to be output, regardless of output interval\n'
p29572
sS'cpp_type'
p29573
S'bool'
p29574
sS'default'
p29575
S'0'
p29576
sS'name'
p29577
S'output_final'
p29578
sS'required'
p29579
I00
sS'group_name'
p29580
S'Timing'
p29581
sa(dp29582
S'description'
p29583
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29584
sS'cpp_type'
p29585
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29586
sS'default'
p29587
g3
sS'name'
p29588
S'output_if_base_contains'
p29589
sS'required'
p29590
I00
sS'group_name'
p29591
S'Advanced'
p29592
sa(dp29593
S'description'
p29594
S'Request that the initial condition is output to the solution file\n'
p29595
sS'cpp_type'
p29596
S'bool'
p29597
sS'default'
p29598
S'0'
p29599
sS'name'
p29600
S'output_initial'
p29601
sS'required'
p29602
I00
sS'group_name'
p29603
S'Timing'
p29604
sa(dp29605
S'description'
p29606
S'Request that all intermediate steps (not initial or final) are output\n'
p29607
sS'cpp_type'
p29608
S'bool'
p29609
sS'default'
p29610
S'1'
p29611
sS'name'
p29612
S'output_intermediate'
p29613
sS'required'
p29614
I00
sS'group_name'
p29615
Nsa(dp29616
S'description'
p29617
S'Specifies whether output occurs on each linear residual evaluation\n'
p29618
sS'cpp_type'
p29619
S'bool'
p29620
sS'default'
p29621
S'0'
p29622
sS'name'
p29623
S'output_linear'
p29624
sS'required'
p29625
I00
sS'group_name'
p29626
Nsa(dp29627
S'description'
p29628
S'Specifies whether output occurs on each nonlinear residual evaluation\n'
p29629
sS'cpp_type'
p29630
S'bool'
p29631
sS'default'
p29632
S'0'
p29633
sS'name'
p29634
S'output_nonlinear'
p29635
sS'required'
p29636
I00
sS'group_name'
p29637
Nsa(dp29638
S'name'
p29639
S'output_on'
p29640
sS'cpp_type'
p29641
S'MultiMooseEnum'
p29642
sS'default'
p29643
S'TIMESTEP_END'
p29644
sS'description'
p29645
S'Set to (none|initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment\n'
p29646
sS'required'
p29647
I00
sS'options'
p29648
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29649
sS'group_name'
p29650
Nsa(dp29651
S'description'
p29652
S'Request that data be output at the end of the timestep\n'
p29653
sS'cpp_type'
p29654
S'bool'
p29655
sS'default'
p29656
S'1'
p29657
sS'name'
p29658
S'output_timestep_end'
p29659
sS'required'
p29660
I00
sS'group_name'
p29661
Nsa(dp29662
S'description'
p29663
S'Set to true to enable oversampling\n'
p29664
sS'cpp_type'
p29665
S'bool'
p29666
sS'default'
p29667
S'0'
p29668
sS'name'
p29669
S'oversample'
p29670
sS'required'
p29671
I00
sS'group_name'
p29672
Nsa(dp29673
S'description'
p29674
S'The number of for extension suffix (e.g., out.e-s002)\n'
p29675
sS'cpp_type'
p29676
S'unsigned int'
p29677
sS'default'
p29678
S'4'
p29679
sS'name'
p29680
S'padding'
p29681
sS'required'
p29682
I00
sS'group_name'
p29683
S'Advanced'
p29684
sa(dp29685
S'description'
p29686
S'Set a positional offset, this vector will get added to the nodal coordinates to move the domain.\n'
p29687
sS'cpp_type'
p29688
S'libMesh::Point'
p29689
sS'default'
p29690
g3
sS'name'
p29691
S'position'
p29692
sS'required'
p29693
I00
sS'group_name'
p29694
S'Oversampling'
p29695
sa(dp29696
S'description'
p29697
S'Number of uniform refinements for oversampling (refinement levels beyond any uniform refinements)\n'
p29698
sS'cpp_type'
p29699
S'unsigned int'
p29700
sS'default'
p29701
S'0'
p29702
sS'name'
p29703
S'refinements'
p29704
sS'required'
p29705
I00
sS'group_name'
p29706
S'Oversampling'
p29707
sa(dp29708
S'description'
p29709
S'Time at which this output object begins to operate\n'
p29710
sS'cpp_type'
p29711
S'double'
p29712
sS'default'
p29713
g3
sS'name'
p29714
S'start_time'
p29715
sS'required'
p29716
I00
sS'group_name'
p29717
S'Timing'
p29718
sa(dp29719
S'description'
p29720
S'Only export results at sync times\n'
p29721
sS'cpp_type'
p29722
S'bool'
p29723
sS'default'
p29724
S'0'
p29725
sS'name'
p29726
S'sync_only'
p29727
sS'required'
p29728
I00
sS'group_name'
p29729
S'Timing'
p29730
sa(dp29731
S'description'
p29732
S'Times at which the output and solution is forced to occur\n'
p29733
sS'cpp_type'
p29734
S'std::__1::vector<double, std::__1::allocator<double> >'
p29735
sS'default'
p29736
g3
sS'name'
p29737
S'sync_times'
p29738
sS'required'
p29739
I00
sS'group_name'
p29740
S'Timing'
p29741
sa(dp29742
S'description'
p29743
S'Time tolerance utilized checking start and end times\n'
p29744
sS'cpp_type'
p29745
S'double'
p29746
sS'default'
p29747
S'1e-14'
p29748
sS'name'
p29749
S'time_tolerance'
p29750
sS'required'
p29751
I00
sS'group_name'
p29752
S'Timing'
p29753
sa(dp29754
S'description'
p29755
g3
sS'cpp_type'
p29756
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29757
sS'default'
p29758
S'XDR'
p29759
sS'name'
p29760
S'type'
p29761
sS'required'
p29762
I00
sS'group_name'
p29763
Nsa(dp29764
S'description'
p29765
S'Enable/disable the use of the displaced mesh for outputting\n'
p29766
sS'cpp_type'
p29767
S'bool'
p29768
sS'default'
p29769
S'0'
p29770
sS'name'
p29771
S'use_displaced'
p29772
sS'required'
p29773
I00
sS'group_name'
p29774
NsasS'name'
p29775
S'/Outputs/XDR'
p29776
sasS'parameters'
p29777
(lp29778
(dp29779
S'description'
p29780
S'Create checkpoint files using the default options.\n'
p29781
sS'cpp_type'
p29782
S'bool'
p29783
sS'default'
p29784
S'0'
p29785
sS'name'
p29786
S'checkpoint'
p29787
sS'required'
p29788
I00
sS'group_name'
p29789
Nsa(dp29790
S'description'
p29791
S'Set to false to turn off all coloring in all outputs\n'
p29792
sS'cpp_type'
p29793
S'bool'
p29794
sS'default'
p29795
S'1'
p29796
sS'name'
p29797
S'color'
p29798
sS'required'
p29799
I00
sS'group_name'
p29800
Nsa(dp29801
S'description'
p29802
S'Output the results using the default settings for Console output\n'
p29803
sS'cpp_type'
p29804
S'bool'
p29805
sS'default'
p29806
S'1'
p29807
sS'name'
p29808
S'console'
p29809
sS'required'
p29810
I00
sS'group_name'
p29811
Nsa(dp29812
S'description'
p29813
S'Output the scalar variable and postprocessors to a *.csv file using the default CSV output.\n'
p29814
sS'cpp_type'
p29815
S'bool'
p29816
sS'default'
p29817
S'0'
p29818
sS'name'
p29819
S'csv'
p29820
sS'required'
p29821
I00
sS'group_name'
p29822
Nsa(dp29823
S'description'
p29824
S'Create the dof map .json output file\n'
p29825
sS'cpp_type'
p29826
S'bool'
p29827
sS'default'
p29828
S'0'
p29829
sS'name'
p29830
S'dofmap'
p29831
sS'required'
p29832
I00
sS'group_name'
p29833
Nsa(dp29834
S'description'
p29835
S'Output the results using the default settings for Exodus output\n'
p29836
sS'cpp_type'
p29837
S'bool'
p29838
sS'default'
p29839
S'0'
p29840
sS'name'
p29841
S'exodus'
p29842
sS'required'
p29843
I00
sS'group_name'
p29844
Nsa(dp29845
S'description'
p29846
S'Common file base name to be utilized with all output objects\n'
p29847
sS'cpp_type'
p29848
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p29849
sS'default'
p29850
g3
sS'name'
p29851
S'file_base'
p29852
sS'required'
p29853
I00
sS'group_name'
p29854
Nsa(dp29855
S'description'
p29856
S'Output the results using the default settings for GMV output\n'
p29857
sS'cpp_type'
p29858
S'bool'
p29859
sS'default'
p29860
S'0'
p29861
sS'name'
p29862
S'gmv'
p29863
sS'required'
p29864
I00
sS'group_name'
p29865
Nsa(dp29866
S'description'
p29867
S'Output the scalar and postprocessor results using the default settings for GNUPlot output\n'
p29868
sS'cpp_type'
p29869
S'bool'
p29870
sS'default'
p29871
S'0'
p29872
sS'name'
p29873
S'gnuplot'
p29874
sS'required'
p29875
I00
sS'group_name'
p29876
Nsa(dp29877
S'description'
p29878
S'A list of the variables and postprocessors that should NOT be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p29879
sS'cpp_type'
p29880
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p29881
sS'default'
p29882
g3
sS'name'
p29883
S'hide'
p29884
sS'required'
p29885
I00
sS'group_name'
p29886
Nsa(dp29887
S'description'
p29888
S'The interval at which timesteps are output to the solution file\n'
p29889
sS'cpp_type'
p29890
S'unsigned int'
p29891
sS'default'
p29892
S'1'
p29893
sS'name'
p29894
S'interval'
p29895
sS'required'
p29896
I00
sS'group_name'
p29897
Nsa(dp29898
S'description'
p29899
S'Output the results using the default settings for Nemesis output\n'
p29900
sS'cpp_type'
p29901
S'bool'
p29902
sS'default'
p29903
S'0'
p29904
sS'name'
p29905
S'nemesis'
p29906
sS'required'
p29907
I00
sS'group_name'
p29908
Nsa(dp29909
S'description'
p29910
S'Force the final time step to be output, regardless of output interval\n'
p29911
sS'cpp_type'
p29912
S'bool'
p29913
sS'default'
p29914
S'0'
p29915
sS'name'
p29916
S'output_final'
p29917
sS'required'
p29918
I00
sS'group_name'
p29919
Nsa(dp29920
S'description'
p29921
S'If this is supplied then output will only be done in the case that the output base contains one of these strings.  This is helpful in outputting only a subset of outputs when using MultiApps.\n'
p29922
sS'cpp_type'
p29923
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p29924
sS'default'
p29925
g3
sS'name'
p29926
S'output_if_base_contains'
p29927
sS'required'
p29928
I00
sS'group_name'
p29929
Nsa(dp29930
S'description'
p29931
S'Request that the initial condition is output to the solution file\n'
p29932
sS'cpp_type'
p29933
S'bool'
p29934
sS'default'
p29935
S'0'
p29936
sS'name'
p29937
S'output_initial'
p29938
sS'required'
p29939
I00
sS'group_name'
p29940
Nsa(dp29941
S'description'
p29942
S'Request that all intermediate steps (not initial or final) are output\n'
p29943
sS'cpp_type'
p29944
S'bool'
p29945
sS'default'
p29946
S'1'
p29947
sS'name'
p29948
S'output_intermediate'
p29949
sS'required'
p29950
I00
sS'group_name'
p29951
Nsa(dp29952
S'name'
p29953
S'output_on'
p29954
sS'cpp_type'
p29955
S'MultiMooseEnum'
p29956
sS'default'
p29957
S'TIMESTEP_END'
p29958
sS'description'
p29959
S'Set to (initial|linear|nonlinear|timestep_end|timestep_begin|final|failed|custom) to execute only at that moment (default: timestep_end)\n'
p29960
sS'required'
p29961
I00
sS'options'
p29962
S'none initial linear nonlinear timestep_end timestep_begin final failed'
p29963
sS'group_name'
p29964
Nsa(dp29965
S'description'
p29966
S'Request that data be output at the end of the timestep\n'
p29967
sS'cpp_type'
p29968
S'bool'
p29969
sS'default'
p29970
S'1'
p29971
sS'name'
p29972
S'output_timestep_end'
p29973
sS'required'
p29974
I00
sS'group_name'
p29975
Nsa(dp29976
S'description'
p29977
S'Enable printing of linear residuals to the screen (Console)\n'
p29978
sS'cpp_type'
p29979
S'bool'
p29980
sS'default'
p29981
S'0'
p29982
sS'name'
p29983
S'print_linear_residuals'
p29984
sS'required'
p29985
I00
sS'group_name'
p29986
Nsa(dp29987
S'description'
p29988
S'When true, each time the mesh is changed the mesh information is printed\n'
p29989
sS'cpp_type'
p29990
S'bool'
p29991
sS'default'
p29992
S'0'
p29993
sS'name'
p29994
S'print_mesh_changed_info'
p29995
sS'required'
p29996
I00
sS'group_name'
p29997
Nsa(dp29998
S'description'
p29999
S'Enable printing of the performance log to the screen (Console)\n'
p30000
sS'cpp_type'
p30001
S'bool'
p30002
sS'default'
p30003
S'0'
p30004
sS'name'
p30005
S'print_perf_log'
p30006
sS'required'
p30007
I00
sS'group_name'
p30008
Nsa(dp30009
S'description'
p30010
S'A list of the variables and postprocessors that should be output to the Exodus file (may include Variables, ScalarVariables, and Postprocessor names).\n'
p30011
sS'cpp_type'
p30012
S'std::__1::vector<VariableName, std::__1::allocator<VariableName> >'
p30013
sS'default'
p30014
g3
sS'name'
p30015
S'show'
p30016
sS'required'
p30017
I00
sS'group_name'
p30018
Nsa(dp30019
S'description'
p30020
S'Print a solution history file (.slh) using the default settings\n'
p30021
sS'cpp_type'
p30022
S'bool'
p30023
sS'default'
p30024
S'0'
p30025
sS'name'
p30026
S'solution_history'
p30027
sS'required'
p30028
I00
sS'group_name'
p30029
Nsa(dp30030
S'description'
p30031
S'Times at which the output and solution is forced to occur\n'
p30032
sS'cpp_type'
p30033
S'std::__1::vector<double, std::__1::allocator<double> >'
p30034
sS'default'
p30035
g3
sS'name'
p30036
S'sync_times'
p30037
sS'required'
p30038
I00
sS'group_name'
p30039
Nsa(dp30040
S'description'
p30041
S'Output the results using the default settings for Tecplot output\n'
p30042
sS'cpp_type'
p30043
S'bool'
p30044
sS'default'
p30045
S'0'
p30046
sS'name'
p30047
S'tecplot'
p30048
sS'required'
p30049
I00
sS'group_name'
p30050
Nsa(dp30051
S'description'
p30052
S'Output the results using the default settings for VTKOutput output\n'
p30053
sS'cpp_type'
p30054
S'bool'
p30055
sS'default'
p30056
S'0'
p30057
sS'name'
p30058
S'vtk'
p30059
sS'required'
p30060
I00
sS'group_name'
p30061
Nsa(dp30062
S'description'
p30063
S'Output the results using the default settings for XDA/XDR output (ascii)\n'
p30064
sS'cpp_type'
p30065
S'bool'
p30066
sS'default'
p30067
S'0'
p30068
sS'name'
p30069
S'xda'
p30070
sS'required'
p30071
I00
sS'group_name'
p30072
Nsa(dp30073
S'description'
p30074
S'Output the results using the default settings for XDA/XDR output (binary)\n'
p30075
sS'cpp_type'
p30076
S'bool'
p30077
sS'default'
p30078
S'0'
p30079
sS'name'
p30080
S'xdr'
p30081
sS'required'
p30082
I00
sS'group_name'
p30083
NsasS'name'
p30084
S'/Outputs'
p30085
sa(dp30086
S'description'
p30087
g3
sS'subblocks'
p30088
(lp30089
(dp30090
S'description'
p30091
g3
sS'subblocks'
p30092
NsS'parameters'
p30093
(lp30094
(dp30095
S'description'
p30096
S'A string representing the Moose Object that will be built by this Action\n'
p30097
sS'cpp_type'
p30098
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30099
sS'default'
p30100
g3
sS'name'
p30101
S'type'
p30102
sS'required'
p30103
I01
sS'group_name'
p30104
NsasS'name'
p30105
S'/Postprocessors/*'
p30106
sa(dp30107
S'description'
p30108
g3
sS'subblocks'
p30109
NsS'parameters'
p30110
(lp30111
(dp30112
S'description'
p30113
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30114
sS'cpp_type'
p30115
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p30116
sS'default'
p30117
g3
sS'name'
p30118
S'boundary'
p30119
sS'required'
p30120
I00
sS'group_name'
p30121
Nsa(dp30122
S'name'
p30123
S'execute_on'
p30124
sS'cpp_type'
p30125
S'MultiMooseEnum'
p30126
sS'default'
p30127
S'TIMESTEP_END'
p30128
sS'description'
p30129
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30130
sS'required'
p30131
I00
sS'options'
p30132
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30133
sS'group_name'
p30134
Nsa(dp30135
S'description'
p30136
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30137
sS'cpp_type'
p30138
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30139
sS'default'
p30140
g3
sS'name'
p30141
S'outputs'
p30142
sS'required'
p30143
I00
sS'group_name'
p30144
S'Advanced'
p30145
sa(dp30146
S'description'
p30147
g3
sS'cpp_type'
p30148
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30149
sS'default'
p30150
S'AreaPostprocessor'
p30151
sS'name'
p30152
S'type'
p30153
sS'required'
p30154
I00
sS'group_name'
p30155
Nsa(dp30156
S'description'
p30157
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30158
sS'cpp_type'
p30159
S'bool'
p30160
sS'default'
p30161
S'0'
p30162
sS'name'
p30163
S'use_displaced_mesh'
p30164
sS'required'
p30165
I00
sS'group_name'
p30166
S'Advanced'
p30167
sasS'name'
p30168
S'/Postprocessors/AreaPostprocessor'
p30169
sa(dp30170
S'description'
p30171
g3
sS'subblocks'
p30172
NsS'parameters'
p30173
(lp30174
(dp30175
S'description'
p30176
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30177
sS'cpp_type'
p30178
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30179
sS'default'
p30180
g3
sS'name'
p30181
S'block'
p30182
sS'required'
p30183
I00
sS'group_name'
p30184
Nsa(dp30185
S'name'
p30186
S'execute_on'
p30187
sS'cpp_type'
p30188
S'MultiMooseEnum'
p30189
sS'default'
p30190
S'TIMESTEP_END'
p30191
sS'description'
p30192
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30193
sS'required'
p30194
I00
sS'options'
p30195
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30196
sS'group_name'
p30197
Nsa(dp30198
S'description'
p30199
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30200
sS'cpp_type'
p30201
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30202
sS'default'
p30203
g3
sS'name'
p30204
S'outputs'
p30205
sS'required'
p30206
I00
sS'group_name'
p30207
S'Advanced'
p30208
sa(dp30209
S'description'
p30210
S'The seed for the master random number generator\n'
p30211
sS'cpp_type'
p30212
S'unsigned int'
p30213
sS'default'
p30214
S'0'
p30215
sS'name'
p30216
S'seed'
p30217
sS'required'
p30218
I00
sS'group_name'
p30219
S'Advanced'
p30220
sa(dp30221
S'description'
p30222
g3
sS'cpp_type'
p30223
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30224
sS'default'
p30225
S'AverageElementSize'
p30226
sS'name'
p30227
S'type'
p30228
sS'required'
p30229
I00
sS'group_name'
p30230
Nsa(dp30231
S'description'
p30232
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30233
sS'cpp_type'
p30234
S'bool'
p30235
sS'default'
p30236
S'0'
p30237
sS'name'
p30238
S'use_displaced_mesh'
p30239
sS'required'
p30240
I00
sS'group_name'
p30241
S'Advanced'
p30242
sa(dp30243
S'description'
p30244
S'The name of the variable that this object operates on\n'
p30245
sS'cpp_type'
p30246
S'std::vector<VariableName>'
p30247
sS'default'
p30248
g3
sS'name'
p30249
S'variable'
p30250
sS'required'
p30251
I00
sS'group_name'
p30252
NsasS'name'
p30253
S'/Postprocessors/AverageElementSize'
p30254
sa(dp30255
S'description'
p30256
g3
sS'subblocks'
p30257
NsS'parameters'
p30258
(lp30259
(dp30260
S'description'
p30261
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30262
sS'cpp_type'
p30263
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30264
sS'default'
p30265
g3
sS'name'
p30266
S'block'
p30267
sS'required'
p30268
I00
sS'group_name'
p30269
Nsa(dp30270
S'description'
p30271
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p30272
sS'cpp_type'
p30273
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p30274
sS'default'
p30275
g3
sS'name'
p30276
S'boundary'
p30277
sS'required'
p30278
I00
sS'group_name'
p30279
Nsa(dp30280
S'name'
p30281
S'execute_on'
p30282
sS'cpp_type'
p30283
S'MultiMooseEnum'
p30284
sS'default'
p30285
S'TIMESTEP_END'
p30286
sS'description'
p30287
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30288
sS'required'
p30289
I00
sS'options'
p30290
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30291
sS'group_name'
p30292
Nsa(dp30293
S'description'
p30294
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30295
sS'cpp_type'
p30296
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30297
sS'default'
p30298
g3
sS'name'
p30299
S'outputs'
p30300
sS'required'
p30301
I00
sS'group_name'
p30302
S'Advanced'
p30303
sa(dp30304
S'description'
p30305
S'The seed for the master random number generator\n'
p30306
sS'cpp_type'
p30307
S'unsigned int'
p30308
sS'default'
p30309
S'0'
p30310
sS'name'
p30311
S'seed'
p30312
sS'required'
p30313
I00
sS'group_name'
p30314
S'Advanced'
p30315
sa(dp30316
S'description'
p30317
g3
sS'cpp_type'
p30318
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30319
sS'default'
p30320
S'AverageNodalVariableValue'
p30321
sS'name'
p30322
S'type'
p30323
sS'required'
p30324
I00
sS'group_name'
p30325
Nsa(dp30326
S'description'
p30327
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30328
sS'cpp_type'
p30329
S'bool'
p30330
sS'default'
p30331
S'0'
p30332
sS'name'
p30333
S'use_displaced_mesh'
p30334
sS'required'
p30335
I00
sS'group_name'
p30336
S'Advanced'
p30337
sa(dp30338
S'description'
p30339
S'The name of the variable that this postprocessor operates on\n'
p30340
sS'cpp_type'
p30341
S'std::vector<VariableName>'
p30342
sS'default'
p30343
g3
sS'name'
p30344
S'variable'
p30345
sS'required'
p30346
I00
sS'group_name'
p30347
NsasS'name'
p30348
S'/Postprocessors/AverageNodalVariableValue'
p30349
sa(dp30350
S'description'
p30351
g3
sS'subblocks'
p30352
NsS'parameters'
p30353
(lp30354
(dp30355
S'name'
p30356
S'execute_on'
p30357
sS'cpp_type'
p30358
S'MultiMooseEnum'
p30359
sS'default'
p30360
S'TIMESTEP_END'
p30361
sS'description'
p30362
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30363
sS'required'
p30364
I00
sS'options'
p30365
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30366
sS'group_name'
p30367
Nsa(dp30368
S'description'
p30369
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30370
sS'cpp_type'
p30371
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30372
sS'default'
p30373
g3
sS'name'
p30374
S'outputs'
p30375
sS'required'
p30376
I00
sS'group_name'
p30377
S'Advanced'
p30378
sa(dp30379
S'description'
p30380
g3
sS'cpp_type'
p30381
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30382
sS'default'
p30383
S'DifferencePostprocessor'
p30384
sS'name'
p30385
S'type'
p30386
sS'required'
p30387
I00
sS'group_name'
p30388
Nsa(dp30389
S'description'
p30390
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30391
sS'cpp_type'
p30392
S'bool'
p30393
sS'default'
p30394
S'0'
p30395
sS'name'
p30396
S'use_displaced_mesh'
p30397
sS'required'
p30398
I00
sS'group_name'
p30399
S'Advanced'
p30400
sa(dp30401
S'description'
p30402
S'First value\n'
p30403
sS'cpp_type'
p30404
S'PostprocessorName'
p30405
sS'default'
p30406
g3
sS'name'
p30407
S'value1'
p30408
sS'required'
p30409
I01
sS'group_name'
p30410
Nsa(dp30411
S'description'
p30412
S'Second value\n'
p30413
sS'cpp_type'
p30414
S'PostprocessorName'
p30415
sS'default'
p30416
g3
sS'name'
p30417
S'value2'
p30418
sS'required'
p30419
I01
sS'group_name'
p30420
NsasS'name'
p30421
S'/Postprocessors/DifferencePostprocessor'
p30422
sa(dp30423
S'description'
p30424
g3
sS'subblocks'
p30425
NsS'parameters'
p30426
(lp30427
(dp30428
S'description'
p30429
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30430
sS'cpp_type'
p30431
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30432
sS'default'
p30433
g3
sS'name'
p30434
S'block'
p30435
sS'required'
p30436
I00
sS'group_name'
p30437
Nsa(dp30438
S'name'
p30439
S'execute_on'
p30440
sS'cpp_type'
p30441
S'MultiMooseEnum'
p30442
sS'default'
p30443
S'TIMESTEP_END'
p30444
sS'description'
p30445
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30446
sS'required'
p30447
I00
sS'options'
p30448
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30449
sS'group_name'
p30450
Nsa(dp30451
S'description'
p30452
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30453
sS'cpp_type'
p30454
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30455
sS'default'
p30456
g3
sS'name'
p30457
S'outputs'
p30458
sS'required'
p30459
I00
sS'group_name'
p30460
S'Advanced'
p30461
sa(dp30462
S'description'
p30463
S'The seed for the master random number generator\n'
p30464
sS'cpp_type'
p30465
S'unsigned int'
p30466
sS'default'
p30467
S'0'
p30468
sS'name'
p30469
S'seed'
p30470
sS'required'
p30471
I00
sS'group_name'
p30472
S'Advanced'
p30473
sa(dp30474
S'description'
p30475
g3
sS'cpp_type'
p30476
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30477
sS'default'
p30478
S'ElementAverageTimeDerivative'
p30479
sS'name'
p30480
S'type'
p30481
sS'required'
p30482
I00
sS'group_name'
p30483
Nsa(dp30484
S'description'
p30485
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30486
sS'cpp_type'
p30487
S'bool'
p30488
sS'default'
p30489
S'0'
p30490
sS'name'
p30491
S'use_displaced_mesh'
p30492
sS'required'
p30493
I00
sS'group_name'
p30494
S'Advanced'
p30495
sa(dp30496
S'description'
p30497
S'The name of the variable that this object operates on\n'
p30498
sS'cpp_type'
p30499
S'std::vector<VariableName>'
p30500
sS'default'
p30501
g3
sS'name'
p30502
S'variable'
p30503
sS'required'
p30504
I00
sS'group_name'
p30505
NsasS'name'
p30506
S'/Postprocessors/ElementAverageTimeDerivative'
p30507
sa(dp30508
S'description'
p30509
g3
sS'subblocks'
p30510
NsS'parameters'
p30511
(lp30512
(dp30513
S'description'
p30514
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30515
sS'cpp_type'
p30516
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30517
sS'default'
p30518
g3
sS'name'
p30519
S'block'
p30520
sS'required'
p30521
I00
sS'group_name'
p30522
Nsa(dp30523
S'name'
p30524
S'execute_on'
p30525
sS'cpp_type'
p30526
S'MultiMooseEnum'
p30527
sS'default'
p30528
S'TIMESTEP_END'
p30529
sS'description'
p30530
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30531
sS'required'
p30532
I00
sS'options'
p30533
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30534
sS'group_name'
p30535
Nsa(dp30536
S'description'
p30537
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30538
sS'cpp_type'
p30539
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30540
sS'default'
p30541
g3
sS'name'
p30542
S'outputs'
p30543
sS'required'
p30544
I00
sS'group_name'
p30545
S'Advanced'
p30546
sa(dp30547
S'description'
p30548
S'The seed for the master random number generator\n'
p30549
sS'cpp_type'
p30550
S'unsigned int'
p30551
sS'default'
p30552
S'0'
p30553
sS'name'
p30554
S'seed'
p30555
sS'required'
p30556
I00
sS'group_name'
p30557
S'Advanced'
p30558
sa(dp30559
S'description'
p30560
g3
sS'cpp_type'
p30561
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30562
sS'default'
p30563
S'ElementAverageValue'
p30564
sS'name'
p30565
S'type'
p30566
sS'required'
p30567
I00
sS'group_name'
p30568
Nsa(dp30569
S'description'
p30570
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30571
sS'cpp_type'
p30572
S'bool'
p30573
sS'default'
p30574
S'0'
p30575
sS'name'
p30576
S'use_displaced_mesh'
p30577
sS'required'
p30578
I00
sS'group_name'
p30579
S'Advanced'
p30580
sa(dp30581
S'description'
p30582
S'The name of the variable that this object operates on\n'
p30583
sS'cpp_type'
p30584
S'std::vector<VariableName>'
p30585
sS'default'
p30586
g3
sS'name'
p30587
S'variable'
p30588
sS'required'
p30589
I00
sS'group_name'
p30590
NsasS'name'
p30591
S'/Postprocessors/ElementAverageValue'
p30592
sa(dp30593
S'description'
p30594
g3
sS'subblocks'
p30595
NsS'parameters'
p30596
(lp30597
(dp30598
S'description'
p30599
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30600
sS'cpp_type'
p30601
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30602
sS'default'
p30603
g3
sS'name'
p30604
S'block'
p30605
sS'required'
p30606
I00
sS'group_name'
p30607
Nsa(dp30608
S'name'
p30609
S'execute_on'
p30610
sS'cpp_type'
p30611
S'MultiMooseEnum'
p30612
sS'default'
p30613
S'TIMESTEP_END'
p30614
sS'description'
p30615
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30616
sS'required'
p30617
I00
sS'options'
p30618
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30619
sS'group_name'
p30620
Nsa(dp30621
S'description'
p30622
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30623
sS'cpp_type'
p30624
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30625
sS'default'
p30626
g3
sS'name'
p30627
S'outputs'
p30628
sS'required'
p30629
I00
sS'group_name'
p30630
S'Advanced'
p30631
sa(dp30632
S'description'
p30633
S'The seed for the master random number generator\n'
p30634
sS'cpp_type'
p30635
S'unsigned int'
p30636
sS'default'
p30637
S'0'
p30638
sS'name'
p30639
S'seed'
p30640
sS'required'
p30641
I00
sS'group_name'
p30642
S'Advanced'
p30643
sa(dp30644
S'description'
p30645
g3
sS'cpp_type'
p30646
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30647
sS'default'
p30648
S'ElementExtremeValue'
p30649
sS'name'
p30650
S'type'
p30651
sS'required'
p30652
I00
sS'group_name'
p30653
Nsa(dp30654
S'description'
p30655
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30656
sS'cpp_type'
p30657
S'bool'
p30658
sS'default'
p30659
S'0'
p30660
sS'name'
p30661
S'use_displaced_mesh'
p30662
sS'required'
p30663
I00
sS'group_name'
p30664
S'Advanced'
p30665
sa(dp30666
S'name'
p30667
S'value_type'
p30668
sS'cpp_type'
p30669
S'MooseEnum'
p30670
sS'default'
p30671
S'max'
p30672
sS'description'
p30673
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p30674
sS'required'
p30675
I00
sS'options'
p30676
S'max min'
p30677
sS'group_name'
p30678
Nsa(dp30679
S'description'
p30680
S'The name of the variable that this postprocessor operates on\n'
p30681
sS'cpp_type'
p30682
S'std::vector<VariableName>'
p30683
sS'default'
p30684
g3
sS'name'
p30685
S'variable'
p30686
sS'required'
p30687
I00
sS'group_name'
p30688
NsasS'name'
p30689
S'/Postprocessors/ElementExtremeValue'
p30690
sa(dp30691
S'description'
p30692
g3
sS'subblocks'
p30693
NsS'parameters'
p30694
(lp30695
(dp30696
S'description'
p30697
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30698
sS'cpp_type'
p30699
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30700
sS'default'
p30701
g3
sS'name'
p30702
S'block'
p30703
sS'required'
p30704
I00
sS'group_name'
p30705
Nsa(dp30706
S'name'
p30707
S'execute_on'
p30708
sS'cpp_type'
p30709
S'MultiMooseEnum'
p30710
sS'default'
p30711
S'TIMESTEP_END'
p30712
sS'description'
p30713
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30714
sS'required'
p30715
I00
sS'options'
p30716
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30717
sS'group_name'
p30718
Nsa(dp30719
S'description'
p30720
S'The analytic solution to compare against\n'
p30721
sS'cpp_type'
p30722
S'FunctionName'
p30723
sS'default'
p30724
g3
sS'name'
p30725
S'function'
p30726
sS'required'
p30727
I01
sS'group_name'
p30728
Nsa(dp30729
S'description'
p30730
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30731
sS'cpp_type'
p30732
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30733
sS'default'
p30734
g3
sS'name'
p30735
S'outputs'
p30736
sS'required'
p30737
I00
sS'group_name'
p30738
S'Advanced'
p30739
sa(dp30740
S'description'
p30741
S'The exponent used in the norm.\n'
p30742
sS'cpp_type'
p30743
S'double'
p30744
sS'default'
p30745
S'2'
p30746
sS'name'
p30747
S'p'
p30748
sS'required'
p30749
I00
sS'group_name'
p30750
Nsa(dp30751
S'description'
p30752
S'The seed for the master random number generator\n'
p30753
sS'cpp_type'
p30754
S'unsigned int'
p30755
sS'default'
p30756
S'0'
p30757
sS'name'
p30758
S'seed'
p30759
sS'required'
p30760
I00
sS'group_name'
p30761
S'Advanced'
p30762
sa(dp30763
S'description'
p30764
g3
sS'cpp_type'
p30765
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30766
sS'default'
p30767
S'ElementH1Error'
p30768
sS'name'
p30769
S'type'
p30770
sS'required'
p30771
I00
sS'group_name'
p30772
Nsa(dp30773
S'description'
p30774
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30775
sS'cpp_type'
p30776
S'bool'
p30777
sS'default'
p30778
S'0'
p30779
sS'name'
p30780
S'use_displaced_mesh'
p30781
sS'required'
p30782
I00
sS'group_name'
p30783
S'Advanced'
p30784
sa(dp30785
S'description'
p30786
S'The name of the variable that this object operates on\n'
p30787
sS'cpp_type'
p30788
S'std::vector<VariableName>'
p30789
sS'default'
p30790
g3
sS'name'
p30791
S'variable'
p30792
sS'required'
p30793
I00
sS'group_name'
p30794
NsasS'name'
p30795
S'/Postprocessors/ElementH1Error'
p30796
sa(dp30797
S'description'
p30798
g3
sS'subblocks'
p30799
NsS'parameters'
p30800
(lp30801
(dp30802
S'description'
p30803
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30804
sS'cpp_type'
p30805
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30806
sS'default'
p30807
g3
sS'name'
p30808
S'block'
p30809
sS'required'
p30810
I00
sS'group_name'
p30811
Nsa(dp30812
S'name'
p30813
S'execute_on'
p30814
sS'cpp_type'
p30815
S'MultiMooseEnum'
p30816
sS'default'
p30817
S'TIMESTEP_END'
p30818
sS'description'
p30819
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30820
sS'required'
p30821
I00
sS'options'
p30822
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30823
sS'group_name'
p30824
Nsa(dp30825
S'description'
p30826
S'The analytic solution to compare against\n'
p30827
sS'cpp_type'
p30828
S'FunctionName'
p30829
sS'default'
p30830
g3
sS'name'
p30831
S'function'
p30832
sS'required'
p30833
I01
sS'group_name'
p30834
Nsa(dp30835
S'description'
p30836
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30837
sS'cpp_type'
p30838
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30839
sS'default'
p30840
g3
sS'name'
p30841
S'outputs'
p30842
sS'required'
p30843
I00
sS'group_name'
p30844
S'Advanced'
p30845
sa(dp30846
S'description'
p30847
S'The seed for the master random number generator\n'
p30848
sS'cpp_type'
p30849
S'unsigned int'
p30850
sS'default'
p30851
S'0'
p30852
sS'name'
p30853
S'seed'
p30854
sS'required'
p30855
I00
sS'group_name'
p30856
S'Advanced'
p30857
sa(dp30858
S'description'
p30859
g3
sS'cpp_type'
p30860
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30861
sS'default'
p30862
S'ElementH1SemiError'
p30863
sS'name'
p30864
S'type'
p30865
sS'required'
p30866
I00
sS'group_name'
p30867
Nsa(dp30868
S'description'
p30869
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30870
sS'cpp_type'
p30871
S'bool'
p30872
sS'default'
p30873
S'0'
p30874
sS'name'
p30875
S'use_displaced_mesh'
p30876
sS'required'
p30877
I00
sS'group_name'
p30878
S'Advanced'
p30879
sa(dp30880
S'description'
p30881
S'The name of the variable that this object operates on\n'
p30882
sS'cpp_type'
p30883
S'std::vector<VariableName>'
p30884
sS'default'
p30885
g3
sS'name'
p30886
S'variable'
p30887
sS'required'
p30888
I00
sS'group_name'
p30889
NsasS'name'
p30890
S'/Postprocessors/ElementH1SemiError'
p30891
sa(dp30892
S'description'
p30893
g3
sS'subblocks'
p30894
NsS'parameters'
p30895
(lp30896
(dp30897
S'description'
p30898
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30899
sS'cpp_type'
p30900
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30901
sS'default'
p30902
g3
sS'name'
p30903
S'block'
p30904
sS'required'
p30905
I00
sS'group_name'
p30906
Nsa(dp30907
S'name'
p30908
S'execute_on'
p30909
sS'cpp_type'
p30910
S'MultiMooseEnum'
p30911
sS'default'
p30912
S'TIMESTEP_END'
p30913
sS'description'
p30914
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p30915
sS'required'
p30916
I00
sS'options'
p30917
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p30918
sS'group_name'
p30919
Nsa(dp30920
S'description'
p30921
S'The name of the material property\n'
p30922
sS'cpp_type'
p30923
S'MaterialPropertyName'
p30924
sS'default'
p30925
g3
sS'name'
p30926
S'mat_prop'
p30927
sS'required'
p30928
I01
sS'group_name'
p30929
Nsa(dp30930
S'description'
p30931
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p30932
sS'cpp_type'
p30933
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p30934
sS'default'
p30935
g3
sS'name'
p30936
S'outputs'
p30937
sS'required'
p30938
I00
sS'group_name'
p30939
S'Advanced'
p30940
sa(dp30941
S'description'
p30942
S'The seed for the master random number generator\n'
p30943
sS'cpp_type'
p30944
S'unsigned int'
p30945
sS'default'
p30946
S'0'
p30947
sS'name'
p30948
S'seed'
p30949
sS'required'
p30950
I00
sS'group_name'
p30951
S'Advanced'
p30952
sa(dp30953
S'description'
p30954
g3
sS'cpp_type'
p30955
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p30956
sS'default'
p30957
S'ElementIntegralMaterialProperty'
p30958
sS'name'
p30959
S'type'
p30960
sS'required'
p30961
I00
sS'group_name'
p30962
Nsa(dp30963
S'description'
p30964
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p30965
sS'cpp_type'
p30966
S'bool'
p30967
sS'default'
p30968
S'0'
p30969
sS'name'
p30970
S'use_displaced_mesh'
p30971
sS'required'
p30972
I00
sS'group_name'
p30973
S'Advanced'
p30974
sasS'name'
p30975
S'/Postprocessors/ElementIntegralMaterialProperty'
p30976
sa(dp30977
S'description'
p30978
g3
sS'subblocks'
p30979
NsS'parameters'
p30980
(lp30981
(dp30982
S'description'
p30983
S'The list of block ids (SubdomainID) that this object will be applied\n'
p30984
sS'cpp_type'
p30985
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p30986
sS'default'
p30987
g3
sS'name'
p30988
S'block'
p30989
sS'required'
p30990
I00
sS'group_name'
p30991
Nsa(dp30992
S'name'
p30993
S'execute_on'
p30994
sS'cpp_type'
p30995
S'MultiMooseEnum'
p30996
sS'default'
p30997
S'TIMESTEP_END'
p30998
sS'description'
p30999
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31000
sS'required'
p31001
I00
sS'options'
p31002
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31003
sS'group_name'
p31004
Nsa(dp31005
S'description'
p31006
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31007
sS'cpp_type'
p31008
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31009
sS'default'
p31010
g3
sS'name'
p31011
S'outputs'
p31012
sS'required'
p31013
I00
sS'group_name'
p31014
S'Advanced'
p31015
sa(dp31016
S'description'
p31017
S'The seed for the master random number generator\n'
p31018
sS'cpp_type'
p31019
S'unsigned int'
p31020
sS'default'
p31021
S'0'
p31022
sS'name'
p31023
S'seed'
p31024
sS'required'
p31025
I00
sS'group_name'
p31026
S'Advanced'
p31027
sa(dp31028
S'description'
p31029
g3
sS'cpp_type'
p31030
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31031
sS'default'
p31032
S'ElementIntegralVariablePostprocessor'
p31033
sS'name'
p31034
S'type'
p31035
sS'required'
p31036
I00
sS'group_name'
p31037
Nsa(dp31038
S'description'
p31039
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31040
sS'cpp_type'
p31041
S'bool'
p31042
sS'default'
p31043
S'0'
p31044
sS'name'
p31045
S'use_displaced_mesh'
p31046
sS'required'
p31047
I00
sS'group_name'
p31048
S'Advanced'
p31049
sa(dp31050
S'description'
p31051
S'The name of the variable that this object operates on\n'
p31052
sS'cpp_type'
p31053
S'std::vector<VariableName>'
p31054
sS'default'
p31055
g3
sS'name'
p31056
S'variable'
p31057
sS'required'
p31058
I00
sS'group_name'
p31059
NsasS'name'
p31060
S'/Postprocessors/ElementIntegralVariablePostprocessor'
p31061
sa(dp31062
S'description'
p31063
g3
sS'subblocks'
p31064
NsS'parameters'
p31065
(lp31066
(dp31067
S'description'
p31068
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31069
sS'cpp_type'
p31070
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p31071
sS'default'
p31072
g3
sS'name'
p31073
S'block'
p31074
sS'required'
p31075
I00
sS'group_name'
p31076
Nsa(dp31077
S'name'
p31078
S'execute_on'
p31079
sS'cpp_type'
p31080
S'MultiMooseEnum'
p31081
sS'default'
p31082
S'TIMESTEP_END'
p31083
sS'description'
p31084
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31085
sS'required'
p31086
I00
sS'options'
p31087
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31088
sS'group_name'
p31089
Nsa(dp31090
S'description'
p31091
S'The analytic solution to compare against\n'
p31092
sS'cpp_type'
p31093
S'FunctionName'
p31094
sS'default'
p31095
g3
sS'name'
p31096
S'function'
p31097
sS'required'
p31098
I01
sS'group_name'
p31099
Nsa(dp31100
S'description'
p31101
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31102
sS'cpp_type'
p31103
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31104
sS'default'
p31105
g3
sS'name'
p31106
S'outputs'
p31107
sS'required'
p31108
I00
sS'group_name'
p31109
S'Advanced'
p31110
sa(dp31111
S'description'
p31112
S'The seed for the master random number generator\n'
p31113
sS'cpp_type'
p31114
S'unsigned int'
p31115
sS'default'
p31116
S'0'
p31117
sS'name'
p31118
S'seed'
p31119
sS'required'
p31120
I00
sS'group_name'
p31121
S'Advanced'
p31122
sa(dp31123
S'description'
p31124
g3
sS'cpp_type'
p31125
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31126
sS'default'
p31127
S'ElementL2Error'
p31128
sS'name'
p31129
S'type'
p31130
sS'required'
p31131
I00
sS'group_name'
p31132
Nsa(dp31133
S'description'
p31134
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31135
sS'cpp_type'
p31136
S'bool'
p31137
sS'default'
p31138
S'0'
p31139
sS'name'
p31140
S'use_displaced_mesh'
p31141
sS'required'
p31142
I00
sS'group_name'
p31143
S'Advanced'
p31144
sa(dp31145
S'description'
p31146
S'The name of the variable that this object operates on\n'
p31147
sS'cpp_type'
p31148
S'std::vector<VariableName>'
p31149
sS'default'
p31150
g3
sS'name'
p31151
S'variable'
p31152
sS'required'
p31153
I00
sS'group_name'
p31154
NsasS'name'
p31155
S'/Postprocessors/ElementL2Error'
p31156
sa(dp31157
S'description'
p31158
g3
sS'subblocks'
p31159
NsS'parameters'
p31160
(lp31161
(dp31162
S'description'
p31163
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31164
sS'cpp_type'
p31165
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p31166
sS'default'
p31167
g3
sS'name'
p31168
S'block'
p31169
sS'required'
p31170
I00
sS'group_name'
p31171
Nsa(dp31172
S'name'
p31173
S'execute_on'
p31174
sS'cpp_type'
p31175
S'MultiMooseEnum'
p31176
sS'default'
p31177
S'TIMESTEP_END'
p31178
sS'description'
p31179
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31180
sS'required'
p31181
I00
sS'options'
p31182
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31183
sS'group_name'
p31184
Nsa(dp31185
S'description'
p31186
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31187
sS'cpp_type'
p31188
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31189
sS'default'
p31190
g3
sS'name'
p31191
S'outputs'
p31192
sS'required'
p31193
I00
sS'group_name'
p31194
S'Advanced'
p31195
sa(dp31196
S'description'
p31197
S'The seed for the master random number generator\n'
p31198
sS'cpp_type'
p31199
S'unsigned int'
p31200
sS'default'
p31201
S'0'
p31202
sS'name'
p31203
S'seed'
p31204
sS'required'
p31205
I00
sS'group_name'
p31206
S'Advanced'
p31207
sa(dp31208
S'description'
p31209
g3
sS'cpp_type'
p31210
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31211
sS'default'
p31212
S'ElementL2Norm'
p31213
sS'name'
p31214
S'type'
p31215
sS'required'
p31216
I00
sS'group_name'
p31217
Nsa(dp31218
S'description'
p31219
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31220
sS'cpp_type'
p31221
S'bool'
p31222
sS'default'
p31223
S'0'
p31224
sS'name'
p31225
S'use_displaced_mesh'
p31226
sS'required'
p31227
I00
sS'group_name'
p31228
S'Advanced'
p31229
sa(dp31230
S'description'
p31231
S'The name of the variable that this object operates on\n'
p31232
sS'cpp_type'
p31233
S'std::vector<VariableName>'
p31234
sS'default'
p31235
g3
sS'name'
p31236
S'variable'
p31237
sS'required'
p31238
I00
sS'group_name'
p31239
NsasS'name'
p31240
S'/Postprocessors/ElementL2Norm'
p31241
sa(dp31242
S'description'
p31243
g3
sS'subblocks'
p31244
NsS'parameters'
p31245
(lp31246
(dp31247
S'description'
p31248
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31249
sS'cpp_type'
p31250
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p31251
sS'default'
p31252
g3
sS'name'
p31253
S'block'
p31254
sS'required'
p31255
I00
sS'group_name'
p31256
Nsa(dp31257
S'name'
p31258
S'execute_on'
p31259
sS'cpp_type'
p31260
S'MultiMooseEnum'
p31261
sS'default'
p31262
S'TIMESTEP_END'
p31263
sS'description'
p31264
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31265
sS'required'
p31266
I00
sS'options'
p31267
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31268
sS'group_name'
p31269
Nsa(dp31270
S'description'
p31271
S'The analytic solution to compare against\n'
p31272
sS'cpp_type'
p31273
S'FunctionName'
p31274
sS'default'
p31275
g3
sS'name'
p31276
S'function_x'
p31277
sS'required'
p31278
I01
sS'group_name'
p31279
Nsa(dp31280
S'description'
p31281
S'The analytic solution to compare against\n'
p31282
sS'cpp_type'
p31283
S'FunctionName'
p31284
sS'default'
p31285
S'0'
p31286
sS'name'
p31287
S'function_y'
p31288
sS'required'
p31289
I00
sS'group_name'
p31290
Nsa(dp31291
S'description'
p31292
S'The analytic solution to compare against\n'
p31293
sS'cpp_type'
p31294
S'FunctionName'
p31295
sS'default'
p31296
S'0'
p31297
sS'name'
p31298
S'function_z'
p31299
sS'required'
p31300
I00
sS'group_name'
p31301
Nsa(dp31302
S'description'
p31303
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31304
sS'cpp_type'
p31305
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31306
sS'default'
p31307
g3
sS'name'
p31308
S'outputs'
p31309
sS'required'
p31310
I00
sS'group_name'
p31311
S'Advanced'
p31312
sa(dp31313
S'description'
p31314
S'The seed for the master random number generator\n'
p31315
sS'cpp_type'
p31316
S'unsigned int'
p31317
sS'default'
p31318
S'0'
p31319
sS'name'
p31320
S'seed'
p31321
sS'required'
p31322
I00
sS'group_name'
p31323
S'Advanced'
p31324
sa(dp31325
S'description'
p31326
g3
sS'cpp_type'
p31327
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31328
sS'default'
p31329
S'ElementVectorL2Error'
p31330
sS'name'
p31331
S'type'
p31332
sS'required'
p31333
I00
sS'group_name'
p31334
Nsa(dp31335
S'description'
p31336
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31337
sS'cpp_type'
p31338
S'bool'
p31339
sS'default'
p31340
S'0'
p31341
sS'name'
p31342
S'use_displaced_mesh'
p31343
sS'required'
p31344
I00
sS'group_name'
p31345
S'Advanced'
p31346
sa(dp31347
S'description'
p31348
S'The FE solution in x direction\n'
p31349
sS'cpp_type'
p31350
S'std::vector<VariableName>'
p31351
sS'default'
p31352
g3
sS'name'
p31353
S'var_x'
p31354
sS'required'
p31355
I01
sS'group_name'
p31356
Nsa(dp31357
S'description'
p31358
S'The FE solution in y direction\n'
p31359
sS'cpp_type'
p31360
S'std::vector<VariableName>'
p31361
sS'default'
p31362
S'0'
p31363
sS'name'
p31364
S'var_y'
p31365
sS'required'
p31366
I00
sS'group_name'
p31367
Nsa(dp31368
S'description'
p31369
S'The FE solution in z direction\n'
p31370
sS'cpp_type'
p31371
S'std::vector<VariableName>'
p31372
sS'default'
p31373
S'0'
p31374
sS'name'
p31375
S'var_z'
p31376
sS'required'
p31377
I00
sS'group_name'
p31378
NsasS'name'
p31379
S'/Postprocessors/ElementVectorL2Error'
p31380
sa(dp31381
S'description'
p31382
g3
sS'subblocks'
p31383
NsS'parameters'
p31384
(lp31385
(dp31386
S'description'
p31387
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31388
sS'cpp_type'
p31389
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p31390
sS'default'
p31391
g3
sS'name'
p31392
S'block'
p31393
sS'required'
p31394
I00
sS'group_name'
p31395
Nsa(dp31396
S'name'
p31397
S'execute_on'
p31398
sS'cpp_type'
p31399
S'MultiMooseEnum'
p31400
sS'default'
p31401
S'TIMESTEP_END'
p31402
sS'description'
p31403
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31404
sS'required'
p31405
I00
sS'options'
p31406
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31407
sS'group_name'
p31408
Nsa(dp31409
S'description'
p31410
S'The analytic solution to compare against\n'
p31411
sS'cpp_type'
p31412
S'FunctionName'
p31413
sS'default'
p31414
g3
sS'name'
p31415
S'function'
p31416
sS'required'
p31417
I01
sS'group_name'
p31418
Nsa(dp31419
S'description'
p31420
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31421
sS'cpp_type'
p31422
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31423
sS'default'
p31424
g3
sS'name'
p31425
S'outputs'
p31426
sS'required'
p31427
I00
sS'group_name'
p31428
S'Advanced'
p31429
sa(dp31430
S'description'
p31431
S'The exponent used in the norm.\n'
p31432
sS'cpp_type'
p31433
S'double'
p31434
sS'default'
p31435
S'2'
p31436
sS'name'
p31437
S'p'
p31438
sS'required'
p31439
I00
sS'group_name'
p31440
Nsa(dp31441
S'description'
p31442
S'The seed for the master random number generator\n'
p31443
sS'cpp_type'
p31444
S'unsigned int'
p31445
sS'default'
p31446
S'0'
p31447
sS'name'
p31448
S'seed'
p31449
sS'required'
p31450
I00
sS'group_name'
p31451
S'Advanced'
p31452
sa(dp31453
S'description'
p31454
g3
sS'cpp_type'
p31455
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31456
sS'default'
p31457
S'ElementW1pError'
p31458
sS'name'
p31459
S'type'
p31460
sS'required'
p31461
I00
sS'group_name'
p31462
Nsa(dp31463
S'description'
p31464
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31465
sS'cpp_type'
p31466
S'bool'
p31467
sS'default'
p31468
S'0'
p31469
sS'name'
p31470
S'use_displaced_mesh'
p31471
sS'required'
p31472
I00
sS'group_name'
p31473
S'Advanced'
p31474
sa(dp31475
S'description'
p31476
S'The name of the variable that this object operates on\n'
p31477
sS'cpp_type'
p31478
S'std::vector<VariableName>'
p31479
sS'default'
p31480
g3
sS'name'
p31481
S'variable'
p31482
sS'required'
p31483
I00
sS'group_name'
p31484
NsasS'name'
p31485
S'/Postprocessors/ElementW1pError'
p31486
sa(dp31487
S'description'
p31488
g3
sS'subblocks'
p31489
NsS'parameters'
p31490
(lp31491
(dp31492
S'description'
p31493
S'The ID of the element where we monitor\n'
p31494
sS'cpp_type'
p31495
S'unsigned int'
p31496
sS'default'
p31497
g3
sS'name'
p31498
S'elementid'
p31499
sS'required'
p31500
I01
sS'group_name'
p31501
Nsa(dp31502
S'name'
p31503
S'execute_on'
p31504
sS'cpp_type'
p31505
S'MultiMooseEnum'
p31506
sS'default'
p31507
S'TIMESTEP_END'
p31508
sS'description'
p31509
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31510
sS'required'
p31511
I00
sS'options'
p31512
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31513
sS'group_name'
p31514
Nsa(dp31515
S'description'
p31516
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31517
sS'cpp_type'
p31518
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31519
sS'default'
p31520
g3
sS'name'
p31521
S'outputs'
p31522
sS'required'
p31523
I00
sS'group_name'
p31524
S'Advanced'
p31525
sa(dp31526
S'description'
p31527
g3
sS'cpp_type'
p31528
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31529
sS'default'
p31530
S'ElementalVariableValue'
p31531
sS'name'
p31532
S'type'
p31533
sS'required'
p31534
I00
sS'group_name'
p31535
Nsa(dp31536
S'description'
p31537
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31538
sS'cpp_type'
p31539
S'bool'
p31540
sS'default'
p31541
S'0'
p31542
sS'name'
p31543
S'use_displaced_mesh'
p31544
sS'required'
p31545
I00
sS'group_name'
p31546
S'Advanced'
p31547
sa(dp31548
S'description'
p31549
S'The variable to be monitored\n'
p31550
sS'cpp_type'
p31551
S'VariableName'
p31552
sS'default'
p31553
g3
sS'name'
p31554
S'variable'
p31555
sS'required'
p31556
I01
sS'group_name'
p31557
NsasS'name'
p31558
S'/Postprocessors/ElementalVariableValue'
p31559
sa(dp31560
S'description'
p31561
g3
sS'subblocks'
p31562
NsS'parameters'
p31563
(lp31564
(dp31565
S'name'
p31566
S'execute_on'
p31567
sS'cpp_type'
p31568
S'MultiMooseEnum'
p31569
sS'default'
p31570
S'TIMESTEP_END'
p31571
sS'description'
p31572
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31573
sS'required'
p31574
I00
sS'options'
p31575
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31576
sS'group_name'
p31577
Nsa(dp31578
S'description'
p31579
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31580
sS'cpp_type'
p31581
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31582
sS'default'
p31583
g3
sS'name'
p31584
S'outputs'
p31585
sS'required'
p31586
I00
sS'group_name'
p31587
S'Advanced'
p31588
sa(dp31589
S'description'
p31590
g3
sS'cpp_type'
p31591
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31592
sS'default'
p31593
S'EmptyPostprocessor'
p31594
sS'name'
p31595
S'type'
p31596
sS'required'
p31597
I00
sS'group_name'
p31598
Nsa(dp31599
S'description'
p31600
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31601
sS'cpp_type'
p31602
S'bool'
p31603
sS'default'
p31604
S'0'
p31605
sS'name'
p31606
S'use_displaced_mesh'
p31607
sS'required'
p31608
I00
sS'group_name'
p31609
S'Advanced'
p31610
sasS'name'
p31611
S'/Postprocessors/EmptyPostprocessor'
p31612
sa(dp31613
S'description'
p31614
g3
sS'subblocks'
p31615
NsS'parameters'
p31616
(lp31617
(dp31618
S'name'
p31619
S'execute_on'
p31620
sS'cpp_type'
p31621
S'MultiMooseEnum'
p31622
sS'default'
p31623
S'TIMESTEP_END'
p31624
sS'description'
p31625
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31626
sS'required'
p31627
I00
sS'options'
p31628
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31629
sS'group_name'
p31630
Nsa(dp31631
S'description'
p31632
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31633
sS'cpp_type'
p31634
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31635
sS'default'
p31636
g3
sS'name'
p31637
S'outputs'
p31638
sS'required'
p31639
I00
sS'group_name'
p31640
S'Advanced'
p31641
sa(dp31642
S'description'
p31643
g3
sS'cpp_type'
p31644
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31645
sS'default'
p31646
S'ExecutionerAttributeReporter'
p31647
sS'name'
p31648
S'type'
p31649
sS'required'
p31650
I00
sS'group_name'
p31651
Nsa(dp31652
S'description'
p31653
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31654
sS'cpp_type'
p31655
S'bool'
p31656
sS'default'
p31657
S'0'
p31658
sS'name'
p31659
S'use_displaced_mesh'
p31660
sS'required'
p31661
I00
sS'group_name'
p31662
S'Advanced'
p31663
sasS'name'
p31664
S'/Postprocessors/ExecutionerAttributeReporter'
p31665
sa(dp31666
S'description'
p31667
g3
sS'subblocks'
p31668
NsS'parameters'
p31669
(lp31670
(dp31671
S'description'
p31672
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31673
sS'cpp_type'
p31674
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p31675
sS'default'
p31676
g3
sS'name'
p31677
S'boundary'
p31678
sS'required'
p31679
I00
sS'group_name'
p31680
Nsa(dp31681
S'name'
p31682
S'execute_on'
p31683
sS'cpp_type'
p31684
S'MultiMooseEnum'
p31685
sS'default'
p31686
S'TIMESTEP_END'
p31687
sS'description'
p31688
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31689
sS'required'
p31690
I00
sS'options'
p31691
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31692
sS'group_name'
p31693
Nsa(dp31694
S'description'
p31695
S'This postprocessor will return the integral of this function over the boundary\n'
p31696
sS'cpp_type'
p31697
S'FunctionName'
p31698
sS'default'
p31699
S'1'
p31700
sS'name'
p31701
S'function'
p31702
sS'required'
p31703
I00
sS'group_name'
p31704
Nsa(dp31705
S'description'
p31706
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31707
sS'cpp_type'
p31708
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31709
sS'default'
p31710
g3
sS'name'
p31711
S'outputs'
p31712
sS'required'
p31713
I00
sS'group_name'
p31714
S'Advanced'
p31715
sa(dp31716
S'description'
p31717
g3
sS'cpp_type'
p31718
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31719
sS'default'
p31720
S'FunctionSideIntegral'
p31721
sS'name'
p31722
S'type'
p31723
sS'required'
p31724
I00
sS'group_name'
p31725
Nsa(dp31726
S'description'
p31727
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31728
sS'cpp_type'
p31729
S'bool'
p31730
sS'default'
p31731
S'0'
p31732
sS'name'
p31733
S'use_displaced_mesh'
p31734
sS'required'
p31735
I00
sS'group_name'
p31736
S'Advanced'
p31737
sasS'name'
p31738
S'/Postprocessors/FunctionSideIntegral'
p31739
sa(dp31740
S'description'
p31741
g3
sS'subblocks'
p31742
NsS'parameters'
p31743
(lp31744
(dp31745
S'name'
p31746
S'execute_on'
p31747
sS'cpp_type'
p31748
S'MultiMooseEnum'
p31749
sS'default'
p31750
S'TIMESTEP_END'
p31751
sS'description'
p31752
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31753
sS'required'
p31754
I00
sS'options'
p31755
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31756
sS'group_name'
p31757
Nsa(dp31758
S'description'
p31759
S'The function which supplies the postprocessor value.\n'
p31760
sS'cpp_type'
p31761
S'FunctionName'
p31762
sS'default'
p31763
g3
sS'name'
p31764
S'function'
p31765
sS'required'
p31766
I01
sS'group_name'
p31767
Nsa(dp31768
S'description'
p31769
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31770
sS'cpp_type'
p31771
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31772
sS'default'
p31773
g3
sS'name'
p31774
S'outputs'
p31775
sS'required'
p31776
I00
sS'group_name'
p31777
S'Advanced'
p31778
sa(dp31779
S'description'
p31780
g3
sS'cpp_type'
p31781
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31782
sS'default'
p31783
S'FunctionValuePostprocessor'
p31784
sS'name'
p31785
S'type'
p31786
sS'required'
p31787
I00
sS'group_name'
p31788
Nsa(dp31789
S'description'
p31790
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31791
sS'cpp_type'
p31792
S'bool'
p31793
sS'default'
p31794
S'0'
p31795
sS'name'
p31796
S'use_displaced_mesh'
p31797
sS'required'
p31798
I00
sS'group_name'
p31799
S'Advanced'
p31800
sasS'name'
p31801
S'/Postprocessors/FunctionValuePostprocessor'
p31802
sa(dp31803
S'description'
p31804
g3
sS'subblocks'
p31805
NsS'parameters'
p31806
(lp31807
(dp31808
S'description'
p31809
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31810
sS'cpp_type'
p31811
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p31812
sS'default'
p31813
g3
sS'name'
p31814
S'block'
p31815
sS'required'
p31816
I00
sS'group_name'
p31817
Nsa(dp31818
S'description'
p31819
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31820
sS'cpp_type'
p31821
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p31822
sS'default'
p31823
g3
sS'name'
p31824
S'boundary'
p31825
sS'required'
p31826
I00
sS'group_name'
p31827
Nsa(dp31828
S'name'
p31829
S'execute_on'
p31830
sS'cpp_type'
p31831
S'MultiMooseEnum'
p31832
sS'default'
p31833
S'TIMESTEP_END'
p31834
sS'description'
p31835
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31836
sS'required'
p31837
I00
sS'options'
p31838
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31839
sS'group_name'
p31840
Nsa(dp31841
S'description'
p31842
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31843
sS'cpp_type'
p31844
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31845
sS'default'
p31846
g3
sS'name'
p31847
S'outputs'
p31848
sS'required'
p31849
I00
sS'group_name'
p31850
S'Advanced'
p31851
sa(dp31852
S'description'
p31853
S'The seed for the master random number generator\n'
p31854
sS'cpp_type'
p31855
S'unsigned int'
p31856
sS'default'
p31857
S'0'
p31858
sS'name'
p31859
S'seed'
p31860
sS'required'
p31861
I00
sS'group_name'
p31862
S'Advanced'
p31863
sa(dp31864
S'description'
p31865
g3
sS'cpp_type'
p31866
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31867
sS'default'
p31868
S'NodalExtremeValue'
p31869
sS'name'
p31870
S'type'
p31871
sS'required'
p31872
I00
sS'group_name'
p31873
Nsa(dp31874
S'description'
p31875
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31876
sS'cpp_type'
p31877
S'bool'
p31878
sS'default'
p31879
S'0'
p31880
sS'name'
p31881
S'use_displaced_mesh'
p31882
sS'required'
p31883
I00
sS'group_name'
p31884
S'Advanced'
p31885
sa(dp31886
S'name'
p31887
S'value_type'
p31888
sS'cpp_type'
p31889
S'MooseEnum'
p31890
sS'default'
p31891
S'max'
p31892
sS'description'
p31893
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p31894
sS'required'
p31895
I00
sS'options'
p31896
S'max min'
p31897
sS'group_name'
p31898
Nsa(dp31899
S'description'
p31900
S'The name of the variable that this postprocessor operates on\n'
p31901
sS'cpp_type'
p31902
S'std::vector<VariableName>'
p31903
sS'default'
p31904
g3
sS'name'
p31905
S'variable'
p31906
sS'required'
p31907
I00
sS'group_name'
p31908
NsasS'name'
p31909
S'/Postprocessors/NodalExtremeValue'
p31910
sa(dp31911
S'description'
p31912
g3
sS'subblocks'
p31913
NsS'parameters'
p31914
(lp31915
(dp31916
S'description'
p31917
S'The list of block ids (SubdomainID) that this object will be applied\n'
p31918
sS'cpp_type'
p31919
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p31920
sS'default'
p31921
g3
sS'name'
p31922
S'block'
p31923
sS'required'
p31924
I00
sS'group_name'
p31925
Nsa(dp31926
S'description'
p31927
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p31928
sS'cpp_type'
p31929
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p31930
sS'default'
p31931
g3
sS'name'
p31932
S'boundary'
p31933
sS'required'
p31934
I00
sS'group_name'
p31935
Nsa(dp31936
S'name'
p31937
S'execute_on'
p31938
sS'cpp_type'
p31939
S'MultiMooseEnum'
p31940
sS'default'
p31941
S'TIMESTEP_END'
p31942
sS'description'
p31943
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p31944
sS'required'
p31945
I00
sS'options'
p31946
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p31947
sS'group_name'
p31948
Nsa(dp31949
S'description'
p31950
S'The analytic solution to compare against\n'
p31951
sS'cpp_type'
p31952
S'FunctionName'
p31953
sS'default'
p31954
g3
sS'name'
p31955
S'function'
p31956
sS'required'
p31957
I01
sS'group_name'
p31958
Nsa(dp31959
S'description'
p31960
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p31961
sS'cpp_type'
p31962
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p31963
sS'default'
p31964
g3
sS'name'
p31965
S'outputs'
p31966
sS'required'
p31967
I00
sS'group_name'
p31968
S'Advanced'
p31969
sa(dp31970
S'description'
p31971
S'The seed for the master random number generator\n'
p31972
sS'cpp_type'
p31973
S'unsigned int'
p31974
sS'default'
p31975
S'0'
p31976
sS'name'
p31977
S'seed'
p31978
sS'required'
p31979
I00
sS'group_name'
p31980
S'Advanced'
p31981
sa(dp31982
S'description'
p31983
g3
sS'cpp_type'
p31984
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p31985
sS'default'
p31986
S'NodalL2Error'
p31987
sS'name'
p31988
S'type'
p31989
sS'required'
p31990
I00
sS'group_name'
p31991
Nsa(dp31992
S'description'
p31993
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p31994
sS'cpp_type'
p31995
S'bool'
p31996
sS'default'
p31997
S'0'
p31998
sS'name'
p31999
S'use_displaced_mesh'
p32000
sS'required'
p32001
I00
sS'group_name'
p32002
S'Advanced'
p32003
sa(dp32004
S'description'
p32005
S'The name of the variable that this postprocessor operates on\n'
p32006
sS'cpp_type'
p32007
S'std::vector<VariableName>'
p32008
sS'default'
p32009
g3
sS'name'
p32010
S'variable'
p32011
sS'required'
p32012
I00
sS'group_name'
p32013
NsasS'name'
p32014
S'/Postprocessors/NodalL2Error'
p32015
sa(dp32016
S'description'
p32017
g3
sS'subblocks'
p32018
NsS'parameters'
p32019
(lp32020
(dp32021
S'description'
p32022
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32023
sS'cpp_type'
p32024
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p32025
sS'default'
p32026
g3
sS'name'
p32027
S'block'
p32028
sS'required'
p32029
I00
sS'group_name'
p32030
Nsa(dp32031
S'description'
p32032
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32033
sS'cpp_type'
p32034
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p32035
sS'default'
p32036
g3
sS'name'
p32037
S'boundary'
p32038
sS'required'
p32039
I00
sS'group_name'
p32040
Nsa(dp32041
S'name'
p32042
S'execute_on'
p32043
sS'cpp_type'
p32044
S'MultiMooseEnum'
p32045
sS'default'
p32046
S'TIMESTEP_END'
p32047
sS'description'
p32048
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32049
sS'required'
p32050
I00
sS'options'
p32051
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32052
sS'group_name'
p32053
Nsa(dp32054
S'description'
p32055
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32056
sS'cpp_type'
p32057
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32058
sS'default'
p32059
g3
sS'name'
p32060
S'outputs'
p32061
sS'required'
p32062
I00
sS'group_name'
p32063
S'Advanced'
p32064
sa(dp32065
S'description'
p32066
S'The seed for the master random number generator\n'
p32067
sS'cpp_type'
p32068
S'unsigned int'
p32069
sS'default'
p32070
S'0'
p32071
sS'name'
p32072
S'seed'
p32073
sS'required'
p32074
I00
sS'group_name'
p32075
S'Advanced'
p32076
sa(dp32077
S'description'
p32078
g3
sS'cpp_type'
p32079
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32080
sS'default'
p32081
S'NodalL2Norm'
p32082
sS'name'
p32083
S'type'
p32084
sS'required'
p32085
I00
sS'group_name'
p32086
Nsa(dp32087
S'description'
p32088
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32089
sS'cpp_type'
p32090
S'bool'
p32091
sS'default'
p32092
S'0'
p32093
sS'name'
p32094
S'use_displaced_mesh'
p32095
sS'required'
p32096
I00
sS'group_name'
p32097
S'Advanced'
p32098
sa(dp32099
S'description'
p32100
S'The name of the variable that this postprocessor operates on\n'
p32101
sS'cpp_type'
p32102
S'std::vector<VariableName>'
p32103
sS'default'
p32104
g3
sS'name'
p32105
S'variable'
p32106
sS'required'
p32107
I00
sS'group_name'
p32108
NsasS'name'
p32109
S'/Postprocessors/NodalL2Norm'
p32110
sa(dp32111
S'description'
p32112
g3
sS'subblocks'
p32113
NsS'parameters'
p32114
(lp32115
(dp32116
S'description'
p32117
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32118
sS'cpp_type'
p32119
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p32120
sS'default'
p32121
g3
sS'name'
p32122
S'block'
p32123
sS'required'
p32124
I00
sS'group_name'
p32125
Nsa(dp32126
S'description'
p32127
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32128
sS'cpp_type'
p32129
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p32130
sS'default'
p32131
g3
sS'name'
p32132
S'boundary'
p32133
sS'required'
p32134
I00
sS'group_name'
p32135
Nsa(dp32136
S'name'
p32137
S'execute_on'
p32138
sS'cpp_type'
p32139
S'MultiMooseEnum'
p32140
sS'default'
p32141
S'TIMESTEP_END'
p32142
sS'description'
p32143
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32144
sS'required'
p32145
I00
sS'options'
p32146
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32147
sS'group_name'
p32148
Nsa(dp32149
S'description'
p32150
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32151
sS'cpp_type'
p32152
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32153
sS'default'
p32154
g3
sS'name'
p32155
S'outputs'
p32156
sS'required'
p32157
I00
sS'group_name'
p32158
S'Advanced'
p32159
sa(dp32160
S'description'
p32161
S'The seed for the master random number generator\n'
p32162
sS'cpp_type'
p32163
S'unsigned int'
p32164
sS'default'
p32165
S'0'
p32166
sS'name'
p32167
S'seed'
p32168
sS'required'
p32169
I00
sS'group_name'
p32170
S'Advanced'
p32171
sa(dp32172
S'description'
p32173
g3
sS'cpp_type'
p32174
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32175
sS'default'
p32176
S'NodalMaxValue'
p32177
sS'name'
p32178
S'type'
p32179
sS'required'
p32180
I00
sS'group_name'
p32181
Nsa(dp32182
S'description'
p32183
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32184
sS'cpp_type'
p32185
S'bool'
p32186
sS'default'
p32187
S'0'
p32188
sS'name'
p32189
S'use_displaced_mesh'
p32190
sS'required'
p32191
I00
sS'group_name'
p32192
S'Advanced'
p32193
sa(dp32194
S'description'
p32195
S'The name of the variable that this postprocessor operates on\n'
p32196
sS'cpp_type'
p32197
S'std::vector<VariableName>'
p32198
sS'default'
p32199
g3
sS'name'
p32200
S'variable'
p32201
sS'required'
p32202
I00
sS'group_name'
p32203
NsasS'name'
p32204
S'/Postprocessors/NodalMaxValue'
p32205
sa(dp32206
S'description'
p32207
g3
sS'subblocks'
p32208
NsS'parameters'
p32209
(lp32210
(dp32211
S'description'
p32212
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32213
sS'cpp_type'
p32214
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p32215
sS'default'
p32216
g3
sS'name'
p32217
S'block'
p32218
sS'required'
p32219
I00
sS'group_name'
p32220
Nsa(dp32221
S'description'
p32222
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32223
sS'cpp_type'
p32224
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p32225
sS'default'
p32226
g3
sS'name'
p32227
S'boundary'
p32228
sS'required'
p32229
I00
sS'group_name'
p32230
Nsa(dp32231
S'name'
p32232
S'execute_on'
p32233
sS'cpp_type'
p32234
S'MultiMooseEnum'
p32235
sS'default'
p32236
S'TIMESTEP_END'
p32237
sS'description'
p32238
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32239
sS'required'
p32240
I00
sS'options'
p32241
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32242
sS'group_name'
p32243
Nsa(dp32244
S'description'
p32245
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32246
sS'cpp_type'
p32247
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32248
sS'default'
p32249
g3
sS'name'
p32250
S'outputs'
p32251
sS'required'
p32252
I00
sS'group_name'
p32253
S'Advanced'
p32254
sa(dp32255
S'description'
p32256
S'The seed for the master random number generator\n'
p32257
sS'cpp_type'
p32258
S'unsigned int'
p32259
sS'default'
p32260
S'0'
p32261
sS'name'
p32262
S'seed'
p32263
sS'required'
p32264
I00
sS'group_name'
p32265
S'Advanced'
p32266
sa(dp32267
S'description'
p32268
g3
sS'cpp_type'
p32269
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32270
sS'default'
p32271
S'NodalProxyMaxValue'
p32272
sS'name'
p32273
S'type'
p32274
sS'required'
p32275
I00
sS'group_name'
p32276
Nsa(dp32277
S'description'
p32278
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32279
sS'cpp_type'
p32280
S'bool'
p32281
sS'default'
p32282
S'0'
p32283
sS'name'
p32284
S'use_displaced_mesh'
p32285
sS'required'
p32286
I00
sS'group_name'
p32287
S'Advanced'
p32288
sa(dp32289
S'description'
p32290
S'The name of the variable that this postprocessor operates on\n'
p32291
sS'cpp_type'
p32292
S'std::vector<VariableName>'
p32293
sS'default'
p32294
g3
sS'name'
p32295
S'variable'
p32296
sS'required'
p32297
I00
sS'group_name'
p32298
NsasS'name'
p32299
S'/Postprocessors/NodalProxyMaxValue'
p32300
sa(dp32301
S'description'
p32302
g3
sS'subblocks'
p32303
NsS'parameters'
p32304
(lp32305
(dp32306
S'description'
p32307
S'The list of block ids (SubdomainID) that this object will be applied\n'
p32308
sS'cpp_type'
p32309
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p32310
sS'default'
p32311
g3
sS'name'
p32312
S'block'
p32313
sS'required'
p32314
I00
sS'group_name'
p32315
Nsa(dp32316
S'description'
p32317
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p32318
sS'cpp_type'
p32319
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p32320
sS'default'
p32321
g3
sS'name'
p32322
S'boundary'
p32323
sS'required'
p32324
I00
sS'group_name'
p32325
Nsa(dp32326
S'name'
p32327
S'execute_on'
p32328
sS'cpp_type'
p32329
S'MultiMooseEnum'
p32330
sS'default'
p32331
S'TIMESTEP_END'
p32332
sS'description'
p32333
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32334
sS'required'
p32335
I00
sS'options'
p32336
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32337
sS'group_name'
p32338
Nsa(dp32339
S'description'
p32340
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32341
sS'cpp_type'
p32342
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32343
sS'default'
p32344
g3
sS'name'
p32345
S'outputs'
p32346
sS'required'
p32347
I00
sS'group_name'
p32348
S'Advanced'
p32349
sa(dp32350
S'description'
p32351
S'The seed for the master random number generator\n'
p32352
sS'cpp_type'
p32353
S'unsigned int'
p32354
sS'default'
p32355
S'0'
p32356
sS'name'
p32357
S'seed'
p32358
sS'required'
p32359
I00
sS'group_name'
p32360
S'Advanced'
p32361
sa(dp32362
S'description'
p32363
g3
sS'cpp_type'
p32364
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32365
sS'default'
p32366
S'NodalSum'
p32367
sS'name'
p32368
S'type'
p32369
sS'required'
p32370
I00
sS'group_name'
p32371
Nsa(dp32372
S'description'
p32373
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32374
sS'cpp_type'
p32375
S'bool'
p32376
sS'default'
p32377
S'0'
p32378
sS'name'
p32379
S'use_displaced_mesh'
p32380
sS'required'
p32381
I00
sS'group_name'
p32382
S'Advanced'
p32383
sa(dp32384
S'description'
p32385
S'The name of the variable that this postprocessor operates on\n'
p32386
sS'cpp_type'
p32387
S'std::vector<VariableName>'
p32388
sS'default'
p32389
g3
sS'name'
p32390
S'variable'
p32391
sS'required'
p32392
I00
sS'group_name'
p32393
NsasS'name'
p32394
S'/Postprocessors/NodalSum'
p32395
sa(dp32396
S'description'
p32397
g3
sS'subblocks'
p32398
NsS'parameters'
p32399
(lp32400
(dp32401
S'name'
p32402
S'execute_on'
p32403
sS'cpp_type'
p32404
S'MultiMooseEnum'
p32405
sS'default'
p32406
S'TIMESTEP_END'
p32407
sS'description'
p32408
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32409
sS'required'
p32410
I00
sS'options'
p32411
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32412
sS'group_name'
p32413
Nsa(dp32414
S'description'
p32415
S'The ID of the node where we monitor\n'
p32416
sS'cpp_type'
p32417
S'unsigned int'
p32418
sS'default'
p32419
g3
sS'name'
p32420
S'nodeid'
p32421
sS'required'
p32422
I01
sS'group_name'
p32423
Nsa(dp32424
S'description'
p32425
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32426
sS'cpp_type'
p32427
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32428
sS'default'
p32429
g3
sS'name'
p32430
S'outputs'
p32431
sS'required'
p32432
I00
sS'group_name'
p32433
S'Advanced'
p32434
sa(dp32435
S'description'
p32436
S'A scale factor to be applied to the variable\n'
p32437
sS'cpp_type'
p32438
S'double'
p32439
sS'default'
p32440
S'1'
p32441
sS'name'
p32442
S'scale_factor'
p32443
sS'required'
p32444
I00
sS'group_name'
p32445
Nsa(dp32446
S'description'
p32447
g3
sS'cpp_type'
p32448
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32449
sS'default'
p32450
S'NodalVariableValue'
p32451
sS'name'
p32452
S'type'
p32453
sS'required'
p32454
I00
sS'group_name'
p32455
Nsa(dp32456
S'description'
p32457
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32458
sS'cpp_type'
p32459
S'bool'
p32460
sS'default'
p32461
S'0'
p32462
sS'name'
p32463
S'use_displaced_mesh'
p32464
sS'required'
p32465
I00
sS'group_name'
p32466
S'Advanced'
p32467
sa(dp32468
S'description'
p32469
S'The variable to be monitored\n'
p32470
sS'cpp_type'
p32471
S'VariableName'
p32472
sS'default'
p32473
g3
sS'name'
p32474
S'variable'
p32475
sS'required'
p32476
I01
sS'group_name'
p32477
NsasS'name'
p32478
S'/Postprocessors/NodalVariableValue'
p32479
sa(dp32480
S'description'
p32481
g3
sS'subblocks'
p32482
NsS'parameters'
p32483
(lp32484
(dp32485
S'description'
p32486
S'filename for Avrami analysis info (ln time and Avrami)\n'
p32487
sS'cpp_type'
p32488
S'FileName'
p32489
sS'default'
p32490
g3
sS'name'
p32491
S'Avrami_file'
p32492
sS'required'
p32493
I00
sS'group_name'
p32494
Nsa(dp32495
S'description'
p32496
S'An optional file name where bubble volumes can be output.\n'
p32497
sS'cpp_type'
p32498
S'FileName'
p32499
sS'default'
p32500
g3
sS'name'
p32501
S'bubble_volume_file'
p32502
sS'required'
p32503
I00
sS'group_name'
p32504
Nsa(dp32505
S'description'
p32506
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p32507
sS'cpp_type'
p32508
S'bool'
p32509
sS'default'
p32510
S'0'
p32511
sS'name'
p32512
S'compute_boundary_intersecting_volume'
p32513
sS'required'
p32514
I00
sS'group_name'
p32515
Nsa(dp32516
S'description'
p32517
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p32518
sS'cpp_type'
p32519
S'bool'
p32520
sS'default'
p32521
S'0'
p32522
sS'name'
p32523
S'condense_map_info'
p32524
sS'required'
p32525
I00
sS'group_name'
p32526
Nsa(dp32527
S'description'
p32528
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p32529
sS'cpp_type'
p32530
S'double'
p32531
sS'default'
p32532
g3
sS'name'
p32533
S'connecting_threshold'
p32534
sS'required'
p32535
I00
sS'group_name'
p32536
Nsa(dp32537
S'description'
p32538
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p32539
sS'cpp_type'
p32540
S'PostprocessorName'
p32541
sS'default'
p32542
g3
sS'name'
p32543
S'elem_avg_value'
p32544
sS'required'
p32545
I00
sS'group_name'
p32546
Nsa(dp32547
S'description'
p32548
S'Instruct the UO to populate the variable index map.\n'
p32549
sS'cpp_type'
p32550
S'bool'
p32551
sS'default'
p32552
S'0'
p32553
sS'name'
p32554
S'enable_var_coloring'
p32555
sS'required'
p32556
I00
sS'group_name'
p32557
Nsa(dp32558
S'description'
p32559
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p32560
sS'cpp_type'
p32561
S'double'
p32562
sS'default'
p32563
S'-1'
p32564
sS'name'
p32565
S'equil_fraction'
p32566
sS'required'
p32567
I00
sS'group_name'
p32568
Nsa(dp32569
S'name'
p32570
S'execute_on'
p32571
sS'cpp_type'
p32572
S'MultiMooseEnum'
p32573
sS'default'
p32574
S'TIMESTEP_END'
p32575
sS'description'
p32576
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32577
sS'required'
p32578
I00
sS'options'
p32579
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32580
sS'group_name'
p32581
Nsa(dp32582
S'name'
p32583
S'flood_entity_type'
p32584
sS'cpp_type'
p32585
S'MooseEnum'
p32586
sS'default'
p32587
S'NODAL'
p32588
sS'description'
p32589
S'Determines whether the flood algorithm runs on nodes or elements\n'
p32590
sS'required'
p32591
I00
sS'options'
p32592
S'NODAL ELEMENTAL'
p32593
sS'group_name'
p32594
Nsa(dp32595
S'description'
p32596
S'Postprocessor from which to get mesh volume\n'
p32597
sS'cpp_type'
p32598
S'PostprocessorName'
p32599
sS'default'
p32600
g3
sS'name'
p32601
S'mesh_volume'
p32602
sS'required'
p32603
I01
sS'group_name'
p32604
Nsa(dp32605
S'description'
p32606
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32607
sS'cpp_type'
p32608
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32609
sS'default'
p32610
g3
sS'name'
p32611
S'outputs'
p32612
sS'required'
p32613
I00
sS'group_name'
p32614
S'Advanced'
p32615
sa(dp32616
S'description'
p32617
S'The threshold value for which a new bubble may be started\n'
p32618
sS'cpp_type'
p32619
S'double'
p32620
sS'default'
p32621
S'0.5'
p32622
sS'name'
p32623
S'threshold'
p32624
sS'required'
p32625
I00
sS'group_name'
p32626
Nsa(dp32627
S'description'
p32628
S'Calculate memory usage\n'
p32629
sS'cpp_type'
p32630
S'bool'
p32631
sS'default'
p32632
S'0'
p32633
sS'name'
p32634
S'track_memory_usage'
p32635
sS'required'
p32636
I00
sS'group_name'
p32637
Nsa(dp32638
S'description'
p32639
g3
sS'cpp_type'
p32640
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32641
sS'default'
p32642
S'NodalVolumeFraction'
p32643
sS'name'
p32644
S'type'
p32645
sS'required'
p32646
I00
sS'group_name'
p32647
Nsa(dp32648
S'description'
p32649
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32650
sS'cpp_type'
p32651
S'bool'
p32652
sS'default'
p32653
S'0'
p32654
sS'name'
p32655
S'use_displaced_mesh'
p32656
sS'required'
p32657
I00
sS'group_name'
p32658
S'Advanced'
p32659
sa(dp32660
S'description'
p32661
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p32662
sS'cpp_type'
p32663
S'bool'
p32664
sS'default'
p32665
S'0'
p32666
sS'name'
p32667
S'use_global_numbering'
p32668
sS'required'
p32669
I00
sS'group_name'
p32670
Nsa(dp32671
S'description'
p32672
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p32673
sS'cpp_type'
p32674
S'bool'
p32675
sS'default'
p32676
S'1'
p32677
sS'name'
p32678
S'use_less_than_threshold_comparison'
p32679
sS'required'
p32680
I00
sS'group_name'
p32681
Nsa(dp32682
S'description'
p32683
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p32684
sS'cpp_type'
p32685
S'bool'
p32686
sS'default'
p32687
S'1'
p32688
sS'name'
p32689
S'use_single_map'
p32690
sS'required'
p32691
I00
sS'group_name'
p32692
Nsa(dp32693
S'description'
p32694
S'The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p32695
sS'cpp_type'
p32696
S'std::vector<VariableName>'
p32697
sS'default'
p32698
g3
sS'name'
p32699
S'variable'
p32700
sS'required'
p32701
I01
sS'group_name'
p32702
NsasS'name'
p32703
S'/Postprocessors/NodalVolumeFraction'
p32704
sa(dp32705
S'description'
p32706
g3
sS'subblocks'
p32707
NsS'parameters'
p32708
(lp32709
(dp32710
S'name'
p32711
S'execute_on'
p32712
sS'cpp_type'
p32713
S'MultiMooseEnum'
p32714
sS'default'
p32715
S'TIMESTEP_END'
p32716
sS'description'
p32717
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32718
sS'required'
p32719
I00
sS'options'
p32720
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32721
sS'group_name'
p32722
Nsa(dp32723
S'description'
p32724
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32725
sS'cpp_type'
p32726
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32727
sS'default'
p32728
g3
sS'name'
p32729
S'outputs'
p32730
sS'required'
p32731
I00
sS'group_name'
p32732
S'Advanced'
p32733
sa(dp32734
S'description'
p32735
g3
sS'cpp_type'
p32736
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32737
sS'default'
p32738
S'NumDOFs'
p32739
sS'name'
p32740
S'type'
p32741
sS'required'
p32742
I00
sS'group_name'
p32743
Nsa(dp32744
S'description'
p32745
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32746
sS'cpp_type'
p32747
S'bool'
p32748
sS'default'
p32749
S'0'
p32750
sS'name'
p32751
S'use_displaced_mesh'
p32752
sS'required'
p32753
I00
sS'group_name'
p32754
S'Advanced'
p32755
sasS'name'
p32756
S'/Postprocessors/NumDOFs'
p32757
sa(dp32758
S'description'
p32759
g3
sS'subblocks'
p32760
NsS'parameters'
p32761
(lp32762
(dp32763
S'name'
p32764
S'execute_on'
p32765
sS'cpp_type'
p32766
S'MultiMooseEnum'
p32767
sS'default'
p32768
S'TIMESTEP_END'
p32769
sS'description'
p32770
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32771
sS'required'
p32772
I00
sS'options'
p32773
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32774
sS'group_name'
p32775
Nsa(dp32776
S'description'
p32777
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32778
sS'cpp_type'
p32779
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32780
sS'default'
p32781
g3
sS'name'
p32782
S'outputs'
p32783
sS'required'
p32784
I00
sS'group_name'
p32785
S'Advanced'
p32786
sa(dp32787
S'description'
p32788
g3
sS'cpp_type'
p32789
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32790
sS'default'
p32791
S'NumElems'
p32792
sS'name'
p32793
S'type'
p32794
sS'required'
p32795
I00
sS'group_name'
p32796
Nsa(dp32797
S'description'
p32798
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32799
sS'cpp_type'
p32800
S'bool'
p32801
sS'default'
p32802
S'0'
p32803
sS'name'
p32804
S'use_displaced_mesh'
p32805
sS'required'
p32806
I00
sS'group_name'
p32807
S'Advanced'
p32808
sasS'name'
p32809
S'/Postprocessors/NumElems'
p32810
sa(dp32811
S'description'
p32812
g3
sS'subblocks'
p32813
NsS'parameters'
p32814
(lp32815
(dp32816
S'name'
p32817
S'execute_on'
p32818
sS'cpp_type'
p32819
S'MultiMooseEnum'
p32820
sS'default'
p32821
S'TIMESTEP_END'
p32822
sS'description'
p32823
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32824
sS'required'
p32825
I00
sS'options'
p32826
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32827
sS'group_name'
p32828
Nsa(dp32829
S'description'
p32830
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32831
sS'cpp_type'
p32832
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32833
sS'default'
p32834
g3
sS'name'
p32835
S'outputs'
p32836
sS'required'
p32837
I00
sS'group_name'
p32838
S'Advanced'
p32839
sa(dp32840
S'description'
p32841
g3
sS'cpp_type'
p32842
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32843
sS'default'
p32844
S'NumLinearIterations'
p32845
sS'name'
p32846
S'type'
p32847
sS'required'
p32848
I00
sS'group_name'
p32849
Nsa(dp32850
S'description'
p32851
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32852
sS'cpp_type'
p32853
S'bool'
p32854
sS'default'
p32855
S'0'
p32856
sS'name'
p32857
S'use_displaced_mesh'
p32858
sS'required'
p32859
I00
sS'group_name'
p32860
S'Advanced'
p32861
sasS'name'
p32862
S'/Postprocessors/NumLinearIterations'
p32863
sa(dp32864
S'description'
p32865
g3
sS'subblocks'
p32866
NsS'parameters'
p32867
(lp32868
(dp32869
S'name'
p32870
S'execute_on'
p32871
sS'cpp_type'
p32872
S'MultiMooseEnum'
p32873
sS'default'
p32874
S'TIMESTEP_END'
p32875
sS'description'
p32876
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32877
sS'required'
p32878
I00
sS'options'
p32879
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32880
sS'group_name'
p32881
Nsa(dp32882
S'description'
p32883
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32884
sS'cpp_type'
p32885
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32886
sS'default'
p32887
g3
sS'name'
p32888
S'outputs'
p32889
sS'required'
p32890
I00
sS'group_name'
p32891
S'Advanced'
p32892
sa(dp32893
S'description'
p32894
g3
sS'cpp_type'
p32895
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32896
sS'default'
p32897
S'NumNodes'
p32898
sS'name'
p32899
S'type'
p32900
sS'required'
p32901
I00
sS'group_name'
p32902
Nsa(dp32903
S'description'
p32904
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32905
sS'cpp_type'
p32906
S'bool'
p32907
sS'default'
p32908
S'0'
p32909
sS'name'
p32910
S'use_displaced_mesh'
p32911
sS'required'
p32912
I00
sS'group_name'
p32913
S'Advanced'
p32914
sasS'name'
p32915
S'/Postprocessors/NumNodes'
p32916
sa(dp32917
S'description'
p32918
g3
sS'subblocks'
p32919
NsS'parameters'
p32920
(lp32921
(dp32922
S'description'
p32923
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p32924
sS'cpp_type'
p32925
S'bool'
p32926
sS'default'
p32927
S'0'
p32928
sS'name'
p32929
S'accumulate_over_step'
p32930
sS'required'
p32931
I00
sS'group_name'
p32932
Nsa(dp32933
S'name'
p32934
S'execute_on'
p32935
sS'cpp_type'
p32936
S'MultiMooseEnum'
p32937
sS'default'
p32938
S'TIMESTEP_END'
p32939
sS'description'
p32940
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32941
sS'required'
p32942
I00
sS'options'
p32943
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32944
sS'group_name'
p32945
Nsa(dp32946
S'description'
p32947
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p32948
sS'cpp_type'
p32949
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p32950
sS'default'
p32951
g3
sS'name'
p32952
S'outputs'
p32953
sS'required'
p32954
I00
sS'group_name'
p32955
S'Advanced'
p32956
sa(dp32957
S'description'
p32958
g3
sS'cpp_type'
p32959
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p32960
sS'default'
p32961
S'NumNonlinearIterations'
p32962
sS'name'
p32963
S'type'
p32964
sS'required'
p32965
I00
sS'group_name'
p32966
Nsa(dp32967
S'description'
p32968
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p32969
sS'cpp_type'
p32970
S'bool'
p32971
sS'default'
p32972
S'0'
p32973
sS'name'
p32974
S'use_displaced_mesh'
p32975
sS'required'
p32976
I00
sS'group_name'
p32977
S'Advanced'
p32978
sasS'name'
p32979
S'/Postprocessors/NumNonlinearIterations'
p32980
sa(dp32981
S'description'
p32982
g3
sS'subblocks'
p32983
NsS'parameters'
p32984
(lp32985
(dp32986
S'name'
p32987
S'execute_on'
p32988
sS'cpp_type'
p32989
S'MultiMooseEnum'
p32990
sS'default'
p32991
S'TIMESTEP_END'
p32992
sS'description'
p32993
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p32994
sS'required'
p32995
I00
sS'options'
p32996
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p32997
sS'group_name'
p32998
Nsa(dp32999
S'description'
p33000
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33001
sS'cpp_type'
p33002
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33003
sS'default'
p33004
g3
sS'name'
p33005
S'outputs'
p33006
sS'required'
p33007
I00
sS'group_name'
p33008
S'Advanced'
p33009
sa(dp33010
S'description'
p33011
g3
sS'cpp_type'
p33012
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33013
sS'default'
p33014
S'NumPicardIterations'
p33015
sS'name'
p33016
S'type'
p33017
sS'required'
p33018
I00
sS'group_name'
p33019
Nsa(dp33020
S'description'
p33021
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33022
sS'cpp_type'
p33023
S'bool'
p33024
sS'default'
p33025
S'0'
p33026
sS'name'
p33027
S'use_displaced_mesh'
p33028
sS'required'
p33029
I00
sS'group_name'
p33030
S'Advanced'
p33031
sasS'name'
p33032
S'/Postprocessors/NumPicardIterations'
p33033
sa(dp33034
S'description'
p33035
g3
sS'subblocks'
p33036
NsS'parameters'
p33037
(lp33038
(dp33039
S'name'
p33040
S'execute_on'
p33041
sS'cpp_type'
p33042
S'MultiMooseEnum'
p33043
sS'default'
p33044
S'TIMESTEP_END'
p33045
sS'description'
p33046
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33047
sS'required'
p33048
I00
sS'options'
p33049
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33050
sS'group_name'
p33051
Nsa(dp33052
S'description'
p33053
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33054
sS'cpp_type'
p33055
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33056
sS'default'
p33057
g3
sS'name'
p33058
S'outputs'
p33059
sS'required'
p33060
I00
sS'group_name'
p33061
S'Advanced'
p33062
sa(dp33063
S'description'
p33064
g3
sS'cpp_type'
p33065
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33066
sS'default'
p33067
S'NumResidualEvaluations'
p33068
sS'name'
p33069
S'type'
p33070
sS'required'
p33071
I00
sS'group_name'
p33072
Nsa(dp33073
S'description'
p33074
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33075
sS'cpp_type'
p33076
S'bool'
p33077
sS'default'
p33078
S'0'
p33079
sS'name'
p33080
S'use_displaced_mesh'
p33081
sS'required'
p33082
I00
sS'group_name'
p33083
S'Advanced'
p33084
sasS'name'
p33085
S'/Postprocessors/NumResidualEvaluations'
p33086
sa(dp33087
S'description'
p33088
g3
sS'subblocks'
p33089
NsS'parameters'
p33090
(lp33091
(dp33092
S'name'
p33093
S'execute_on'
p33094
sS'cpp_type'
p33095
S'MultiMooseEnum'
p33096
sS'default'
p33097
S'TIMESTEP_END'
p33098
sS'description'
p33099
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33100
sS'required'
p33101
I00
sS'options'
p33102
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33103
sS'group_name'
p33104
Nsa(dp33105
S'description'
p33106
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33107
sS'cpp_type'
p33108
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33109
sS'default'
p33110
g3
sS'name'
p33111
S'outputs'
p33112
sS'required'
p33113
I00
sS'group_name'
p33114
S'Advanced'
p33115
sa(dp33116
S'name'
p33117
S'system'
p33118
sS'cpp_type'
p33119
S'MooseEnum'
p33120
sS'default'
p33121
S'nonlinear'
p33122
sS'description'
p33123
S'The system for which you want to print the number of variables.\n'
p33124
sS'required'
p33125
I00
sS'options'
p33126
S'nonlinear auxiliary'
p33127
sS'group_name'
p33128
Nsa(dp33129
S'description'
p33130
g3
sS'cpp_type'
p33131
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33132
sS'default'
p33133
S'NumVars'
p33134
sS'name'
p33135
S'type'
p33136
sS'required'
p33137
I00
sS'group_name'
p33138
Nsa(dp33139
S'description'
p33140
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33141
sS'cpp_type'
p33142
S'bool'
p33143
sS'default'
p33144
S'0'
p33145
sS'name'
p33146
S'use_displaced_mesh'
p33147
sS'required'
p33148
I00
sS'group_name'
p33149
S'Advanced'
p33150
sasS'name'
p33151
S'/Postprocessors/NumVars'
p33152
sa(dp33153
S'description'
p33154
g3
sS'subblocks'
p33155
NsS'parameters'
p33156
(lp33157
(dp33158
S'name'
p33159
S'execute_on'
p33160
sS'cpp_type'
p33161
S'MultiMooseEnum'
p33162
sS'default'
p33163
S'TIMESTEP_END'
p33164
sS'description'
p33165
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33166
sS'required'
p33167
I00
sS'options'
p33168
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33169
sS'group_name'
p33170
Nsa(dp33171
S'description'
p33172
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33173
sS'cpp_type'
p33174
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33175
sS'default'
p33176
g3
sS'name'
p33177
S'outputs'
p33178
sS'required'
p33179
I00
sS'group_name'
p33180
S'Advanced'
p33181
sa(dp33182
S'description'
p33183
S'The name of the postprocessor used for exit criterion\n'
p33184
sS'cpp_type'
p33185
S'PostprocessorName'
p33186
sS'default'
p33187
g3
sS'name'
p33188
S'postprocessor'
p33189
sS'required'
p33190
I01
sS'group_name'
p33191
Nsa(dp33192
S'description'
p33193
g3
sS'cpp_type'
p33194
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33195
sS'default'
p33196
S'PercentChangePostprocessor'
p33197
sS'name'
p33198
S'type'
p33199
sS'required'
p33200
I00
sS'group_name'
p33201
Nsa(dp33202
S'description'
p33203
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33204
sS'cpp_type'
p33205
S'bool'
p33206
sS'default'
p33207
S'0'
p33208
sS'name'
p33209
S'use_displaced_mesh'
p33210
sS'required'
p33211
I00
sS'group_name'
p33212
S'Advanced'
p33213
sasS'name'
p33214
S'/Postprocessors/PercentChangePostprocessor'
p33215
sa(dp33216
S'description'
p33217
g3
sS'subblocks'
p33218
NsS'parameters'
p33219
(lp33220
(dp33221
S'name'
p33222
S'column'
p33223
sS'cpp_type'
p33224
S'MooseEnum'
p33225
sS'default'
p33226
g3
sS'description'
p33227
S'The column you want the value of.\n'
p33228
sS'required'
p33229
I01
sS'options'
p33230
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p33231
sS'group_name'
p33232
Nsa(dp33233
S'description'
p33234
S'The name of the event.\n'
p33235
sS'cpp_type'
p33236
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33237
sS'default'
p33238
g3
sS'name'
p33239
S'event'
p33240
sS'required'
p33241
I01
sS'group_name'
p33242
Nsa(dp33243
S'name'
p33244
S'execute_on'
p33245
sS'cpp_type'
p33246
S'MultiMooseEnum'
p33247
sS'default'
p33248
S'TIMESTEP_END'
p33249
sS'description'
p33250
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33251
sS'required'
p33252
I00
sS'options'
p33253
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33254
sS'group_name'
p33255
Nsa(dp33256
S'description'
p33257
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33258
sS'cpp_type'
p33259
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33260
sS'default'
p33261
g3
sS'name'
p33262
S'outputs'
p33263
sS'required'
p33264
I00
sS'group_name'
p33265
S'Advanced'
p33266
sa(dp33267
S'description'
p33268
g3
sS'cpp_type'
p33269
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33270
sS'default'
p33271
S'PerformanceData'
p33272
sS'name'
p33273
S'type'
p33274
sS'required'
p33275
I00
sS'group_name'
p33276
Nsa(dp33277
S'description'
p33278
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33279
sS'cpp_type'
p33280
S'bool'
p33281
sS'default'
p33282
S'0'
p33283
sS'name'
p33284
S'use_displaced_mesh'
p33285
sS'required'
p33286
I00
sS'group_name'
p33287
S'Advanced'
p33288
sasS'name'
p33289
S'/Postprocessors/PerformanceData'
p33290
sa(dp33291
S'description'
p33292
g3
sS'subblocks'
p33293
NsS'parameters'
p33294
(lp33295
(dp33296
S'name'
p33297
S'execute_on'
p33298
sS'cpp_type'
p33299
S'MultiMooseEnum'
p33300
sS'default'
p33301
S'TIMESTEP_END'
p33302
sS'description'
p33303
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33304
sS'required'
p33305
I00
sS'options'
p33306
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33307
sS'group_name'
p33308
Nsa(dp33309
S'description'
p33310
S'Name of the function to plot (i.e. sample)\n'
p33311
sS'cpp_type'
p33312
S'FunctionName'
p33313
sS'default'
p33314
g3
sS'name'
p33315
S'function'
p33316
sS'required'
p33317
I01
sS'group_name'
p33318
Nsa(dp33319
S'description'
p33320
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33321
sS'cpp_type'
p33322
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33323
sS'default'
p33324
g3
sS'name'
p33325
S'outputs'
p33326
sS'required'
p33327
I00
sS'group_name'
p33328
S'Advanced'
p33329
sa(dp33330
S'description'
p33331
S'A point in space to be given to the function\n'
p33332
sS'cpp_type'
p33333
S'libMesh::Point'
p33334
sS'default'
p33335
S'0 0 0'
p33336
sS'name'
p33337
S'point'
p33338
sS'required'
p33339
I00
sS'group_name'
p33340
Nsa(dp33341
S'description'
p33342
S'A scale factor to be applied to the function\n'
p33343
sS'cpp_type'
p33344
S'double'
p33345
sS'default'
p33346
S'1'
p33347
sS'name'
p33348
S'scale_factor'
p33349
sS'required'
p33350
I00
sS'group_name'
p33351
Nsa(dp33352
S'description'
p33353
g3
sS'cpp_type'
p33354
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33355
sS'default'
p33356
S'PlotFunction'
p33357
sS'name'
p33358
S'type'
p33359
sS'required'
p33360
I00
sS'group_name'
p33361
Nsa(dp33362
S'description'
p33363
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33364
sS'cpp_type'
p33365
S'bool'
p33366
sS'default'
p33367
S'0'
p33368
sS'name'
p33369
S'use_displaced_mesh'
p33370
sS'required'
p33371
I00
sS'group_name'
p33372
S'Advanced'
p33373
sasS'name'
p33374
S'/Postprocessors/PlotFunction'
p33375
sa(dp33376
S'description'
p33377
g3
sS'subblocks'
p33378
NsS'parameters'
p33379
(lp33380
(dp33381
S'name'
p33382
S'execute_on'
p33383
sS'cpp_type'
p33384
S'MultiMooseEnum'
p33385
sS'default'
p33386
S'TIMESTEP_END'
p33387
sS'description'
p33388
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33389
sS'required'
p33390
I00
sS'options'
p33391
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33392
sS'group_name'
p33393
Nsa(dp33394
S'description'
p33395
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33396
sS'cpp_type'
p33397
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33398
sS'default'
p33399
g3
sS'name'
p33400
S'outputs'
p33401
sS'required'
p33402
I00
sS'group_name'
p33403
S'Advanced'
p33404
sa(dp33405
S'description'
p33406
S'The physical point where the solution will be evaluated.\n'
p33407
sS'cpp_type'
p33408
S'libMesh::Point'
p33409
sS'default'
p33410
g3
sS'name'
p33411
S'point'
p33412
sS'required'
p33413
I01
sS'group_name'
p33414
Nsa(dp33415
S'description'
p33416
g3
sS'cpp_type'
p33417
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33418
sS'default'
p33419
S'PointValue'
p33420
sS'name'
p33421
S'type'
p33422
sS'required'
p33423
I00
sS'group_name'
p33424
Nsa(dp33425
S'description'
p33426
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33427
sS'cpp_type'
p33428
S'bool'
p33429
sS'default'
p33430
S'0'
p33431
sS'name'
p33432
S'use_displaced_mesh'
p33433
sS'required'
p33434
I00
sS'group_name'
p33435
S'Advanced'
p33436
sa(dp33437
S'description'
p33438
S'The name of the variable that this postprocessor operates on.\n'
p33439
sS'cpp_type'
p33440
S'VariableName'
p33441
sS'default'
p33442
g3
sS'name'
p33443
S'variable'
p33444
sS'required'
p33445
I01
sS'group_name'
p33446
NsasS'name'
p33447
S'/Postprocessors/PointValue'
p33448
sa(dp33449
S'description'
p33450
g3
sS'subblocks'
p33451
NsS'parameters'
p33452
(lp33453
(dp33454
S'description'
p33455
S'The default value\n'
p33456
sS'cpp_type'
p33457
S'double'
p33458
sS'default'
p33459
g3
sS'name'
p33460
S'default'
p33461
sS'required'
p33462
I00
sS'group_name'
p33463
Nsa(dp33464
S'name'
p33465
S'execute_on'
p33466
sS'cpp_type'
p33467
S'MultiMooseEnum'
p33468
sS'default'
p33469
S'TIMESTEP_END'
p33470
sS'description'
p33471
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33472
sS'required'
p33473
I00
sS'options'
p33474
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33475
sS'group_name'
p33476
Nsa(dp33477
S'description'
p33478
S'Initialize the old postprocessor value with the default value\n'
p33479
sS'cpp_type'
p33480
S'bool'
p33481
sS'default'
p33482
S'1'
p33483
sS'name'
p33484
S'initialize_old'
p33485
sS'required'
p33486
I00
sS'group_name'
p33487
Nsa(dp33488
S'description'
p33489
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33490
sS'cpp_type'
p33491
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33492
sS'default'
p33493
g3
sS'name'
p33494
S'outputs'
p33495
sS'required'
p33496
I00
sS'group_name'
p33497
S'Advanced'
p33498
sa(dp33499
S'description'
p33500
g3
sS'cpp_type'
p33501
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33502
sS'default'
p33503
S'Receiver'
p33504
sS'name'
p33505
S'type'
p33506
sS'required'
p33507
I00
sS'group_name'
p33508
Nsa(dp33509
S'description'
p33510
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33511
sS'cpp_type'
p33512
S'bool'
p33513
sS'default'
p33514
S'0'
p33515
sS'name'
p33516
S'use_displaced_mesh'
p33517
sS'required'
p33518
I00
sS'group_name'
p33519
S'Advanced'
p33520
sasS'name'
p33521
S'/Postprocessors/Receiver'
p33522
sa(dp33523
S'description'
p33524
g3
sS'subblocks'
p33525
NsS'parameters'
p33526
(lp33527
(dp33528
S'name'
p33529
S'execute_on'
p33530
sS'cpp_type'
p33531
S'MultiMooseEnum'
p33532
sS'default'
p33533
S'TIMESTEP_END'
p33534
sS'description'
p33535
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33536
sS'required'
p33537
I00
sS'options'
p33538
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33539
sS'group_name'
p33540
Nsa(dp33541
S'description'
p33542
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33543
sS'cpp_type'
p33544
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33545
sS'default'
p33546
g3
sS'name'
p33547
S'outputs'
p33548
sS'required'
p33549
I00
sS'group_name'
p33550
S'Advanced'
p33551
sa(dp33552
S'description'
p33553
g3
sS'cpp_type'
p33554
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33555
sS'default'
p33556
S'Residual'
p33557
sS'name'
p33558
S'type'
p33559
sS'required'
p33560
I00
sS'group_name'
p33561
Nsa(dp33562
S'description'
p33563
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33564
sS'cpp_type'
p33565
S'bool'
p33566
sS'default'
p33567
S'0'
p33568
sS'name'
p33569
S'use_displaced_mesh'
p33570
sS'required'
p33571
I00
sS'group_name'
p33572
S'Advanced'
p33573
sasS'name'
p33574
S'/Postprocessors/Residual'
p33575
sa(dp33576
S'description'
p33577
g3
sS'subblocks'
p33578
NsS'parameters'
p33579
(lp33580
(dp33581
S'name'
p33582
S'execute_on'
p33583
sS'cpp_type'
p33584
S'MultiMooseEnum'
p33585
sS'default'
p33586
S'TIMESTEP_END'
p33587
sS'description'
p33588
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33589
sS'required'
p33590
I00
sS'options'
p33591
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33592
sS'group_name'
p33593
Nsa(dp33594
S'description'
p33595
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33596
sS'cpp_type'
p33597
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33598
sS'default'
p33599
g3
sS'name'
p33600
S'outputs'
p33601
sS'required'
p33602
I00
sS'group_name'
p33603
S'Advanced'
p33604
sa(dp33605
S'name'
p33606
S'time_type'
p33607
sS'cpp_type'
p33608
S'MooseEnum'
p33609
sS'default'
p33610
g3
sS'description'
p33611
S'Whether to output the total elapsed or just the active time\n'
p33612
sS'required'
p33613
I01
sS'options'
p33614
S'alive active'
p33615
sS'group_name'
p33616
Nsa(dp33617
S'description'
p33618
g3
sS'cpp_type'
p33619
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33620
sS'default'
p33621
S'RunTime'
p33622
sS'name'
p33623
S'type'
p33624
sS'required'
p33625
I00
sS'group_name'
p33626
Nsa(dp33627
S'description'
p33628
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33629
sS'cpp_type'
p33630
S'bool'
p33631
sS'default'
p33632
S'0'
p33633
sS'name'
p33634
S'use_displaced_mesh'
p33635
sS'required'
p33636
I00
sS'group_name'
p33637
S'Advanced'
p33638
sasS'name'
p33639
S'/Postprocessors/RunTime'
p33640
sa(dp33641
S'description'
p33642
g3
sS'subblocks'
p33643
NsS'parameters'
p33644
(lp33645
(dp33646
S'name'
p33647
S'execute_on'
p33648
sS'cpp_type'
p33649
S'MultiMooseEnum'
p33650
sS'default'
p33651
S'TIMESTEP_END'
p33652
sS'description'
p33653
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33654
sS'required'
p33655
I00
sS'options'
p33656
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33657
sS'group_name'
p33658
Nsa(dp33659
S'description'
p33660
S'The analytic solution to compare against\n'
p33661
sS'cpp_type'
p33662
S'FunctionName'
p33663
sS'default'
p33664
g3
sS'name'
p33665
S'function'
p33666
sS'required'
p33667
I01
sS'group_name'
p33668
Nsa(dp33669
S'description'
p33670
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33671
sS'cpp_type'
p33672
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33673
sS'default'
p33674
g3
sS'name'
p33675
S'outputs'
p33676
sS'required'
p33677
I00
sS'group_name'
p33678
S'Advanced'
p33679
sa(dp33680
S'description'
p33681
g3
sS'cpp_type'
p33682
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33683
sS'default'
p33684
S'ScalarL2Error'
p33685
sS'name'
p33686
S'type'
p33687
sS'required'
p33688
I00
sS'group_name'
p33689
Nsa(dp33690
S'description'
p33691
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33692
sS'cpp_type'
p33693
S'bool'
p33694
sS'default'
p33695
S'0'
p33696
sS'name'
p33697
S'use_displaced_mesh'
p33698
sS'required'
p33699
I00
sS'group_name'
p33700
S'Advanced'
p33701
sa(dp33702
S'description'
p33703
S'The name of the scalar variable\n'
p33704
sS'cpp_type'
p33705
S'VariableName'
p33706
sS'default'
p33707
g3
sS'name'
p33708
S'variable'
p33709
sS'required'
p33710
I01
sS'group_name'
p33711
NsasS'name'
p33712
S'/Postprocessors/ScalarL2Error'
p33713
sa(dp33714
S'description'
p33715
g3
sS'subblocks'
p33716
NsS'parameters'
p33717
(lp33718
(dp33719
S'description'
p33720
S'Component to output for this variable\n'
p33721
sS'cpp_type'
p33722
S'unsigned int'
p33723
sS'default'
p33724
S'0'
p33725
sS'name'
p33726
S'component'
p33727
sS'required'
p33728
I00
sS'group_name'
p33729
Nsa(dp33730
S'name'
p33731
S'execute_on'
p33732
sS'cpp_type'
p33733
S'MultiMooseEnum'
p33734
sS'default'
p33735
S'TIMESTEP_END'
p33736
sS'description'
p33737
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33738
sS'required'
p33739
I00
sS'options'
p33740
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33741
sS'group_name'
p33742
Nsa(dp33743
S'description'
p33744
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33745
sS'cpp_type'
p33746
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33747
sS'default'
p33748
g3
sS'name'
p33749
S'outputs'
p33750
sS'required'
p33751
I00
sS'group_name'
p33752
S'Advanced'
p33753
sa(dp33754
S'description'
p33755
g3
sS'cpp_type'
p33756
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33757
sS'default'
p33758
S'ScalarVariable'
p33759
sS'name'
p33760
S'type'
p33761
sS'required'
p33762
I00
sS'group_name'
p33763
Nsa(dp33764
S'description'
p33765
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33766
sS'cpp_type'
p33767
S'bool'
p33768
sS'default'
p33769
S'0'
p33770
sS'name'
p33771
S'use_displaced_mesh'
p33772
sS'required'
p33773
I00
sS'group_name'
p33774
S'Advanced'
p33775
sa(dp33776
S'description'
p33777
S'Name of the variable\n'
p33778
sS'cpp_type'
p33779
S'VariableName'
p33780
sS'default'
p33781
g3
sS'name'
p33782
S'variable'
p33783
sS'required'
p33784
I01
sS'group_name'
p33785
NsasS'name'
p33786
S'/Postprocessors/ScalarVariable'
p33787
sa(dp33788
S'description'
p33789
g3
sS'subblocks'
p33790
NsS'parameters'
p33791
(lp33792
(dp33793
S'description'
p33794
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33795
sS'cpp_type'
p33796
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p33797
sS'default'
p33798
g3
sS'name'
p33799
S'boundary'
p33800
sS'required'
p33801
I00
sS'group_name'
p33802
Nsa(dp33803
S'name'
p33804
S'execute_on'
p33805
sS'cpp_type'
p33806
S'MultiMooseEnum'
p33807
sS'default'
p33808
S'TIMESTEP_END'
p33809
sS'description'
p33810
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33811
sS'required'
p33812
I00
sS'options'
p33813
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33814
sS'group_name'
p33815
Nsa(dp33816
S'description'
p33817
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33818
sS'cpp_type'
p33819
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33820
sS'default'
p33821
g3
sS'name'
p33822
S'outputs'
p33823
sS'required'
p33824
I00
sS'group_name'
p33825
S'Advanced'
p33826
sa(dp33827
S'description'
p33828
g3
sS'cpp_type'
p33829
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33830
sS'default'
p33831
S'SideAverageValue'
p33832
sS'name'
p33833
S'type'
p33834
sS'required'
p33835
I00
sS'group_name'
p33836
Nsa(dp33837
S'description'
p33838
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33839
sS'cpp_type'
p33840
S'bool'
p33841
sS'default'
p33842
S'0'
p33843
sS'name'
p33844
S'use_displaced_mesh'
p33845
sS'required'
p33846
I00
sS'group_name'
p33847
S'Advanced'
p33848
sa(dp33849
S'description'
p33850
S'The name of the variable that this boundary condition applies to\n'
p33851
sS'cpp_type'
p33852
S'std::vector<VariableName>'
p33853
sS'default'
p33854
g3
sS'name'
p33855
S'variable'
p33856
sS'required'
p33857
I00
sS'group_name'
p33858
NsasS'name'
p33859
S'/Postprocessors/SideAverageValue'
p33860
sa(dp33861
S'description'
p33862
g3
sS'subblocks'
p33863
NsS'parameters'
p33864
(lp33865
(dp33866
S'description'
p33867
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33868
sS'cpp_type'
p33869
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p33870
sS'default'
p33871
g3
sS'name'
p33872
S'boundary'
p33873
sS'required'
p33874
I00
sS'group_name'
p33875
Nsa(dp33876
S'description'
p33877
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p33878
sS'cpp_type'
p33879
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33880
sS'default'
p33881
g3
sS'name'
p33882
S'diffusivity'
p33883
sS'required'
p33884
I01
sS'group_name'
p33885
Nsa(dp33886
S'name'
p33887
S'execute_on'
p33888
sS'cpp_type'
p33889
S'MultiMooseEnum'
p33890
sS'default'
p33891
S'TIMESTEP_END'
p33892
sS'description'
p33893
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33894
sS'required'
p33895
I00
sS'options'
p33896
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33897
sS'group_name'
p33898
Nsa(dp33899
S'description'
p33900
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33901
sS'cpp_type'
p33902
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33903
sS'default'
p33904
g3
sS'name'
p33905
S'outputs'
p33906
sS'required'
p33907
I00
sS'group_name'
p33908
S'Advanced'
p33909
sa(dp33910
S'description'
p33911
g3
sS'cpp_type'
p33912
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33913
sS'default'
p33914
S'SideFluxAverage'
p33915
sS'name'
p33916
S'type'
p33917
sS'required'
p33918
I00
sS'group_name'
p33919
Nsa(dp33920
S'description'
p33921
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p33922
sS'cpp_type'
p33923
S'bool'
p33924
sS'default'
p33925
S'0'
p33926
sS'name'
p33927
S'use_displaced_mesh'
p33928
sS'required'
p33929
I00
sS'group_name'
p33930
S'Advanced'
p33931
sa(dp33932
S'description'
p33933
S'The name of the variable that this boundary condition applies to\n'
p33934
sS'cpp_type'
p33935
S'std::vector<VariableName>'
p33936
sS'default'
p33937
g3
sS'name'
p33938
S'variable'
p33939
sS'required'
p33940
I00
sS'group_name'
p33941
NsasS'name'
p33942
S'/Postprocessors/SideFluxAverage'
p33943
sa(dp33944
S'description'
p33945
g3
sS'subblocks'
p33946
NsS'parameters'
p33947
(lp33948
(dp33949
S'description'
p33950
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p33951
sS'cpp_type'
p33952
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p33953
sS'default'
p33954
g3
sS'name'
p33955
S'boundary'
p33956
sS'required'
p33957
I00
sS'group_name'
p33958
Nsa(dp33959
S'description'
p33960
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p33961
sS'cpp_type'
p33962
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33963
sS'default'
p33964
g3
sS'name'
p33965
S'diffusivity'
p33966
sS'required'
p33967
I01
sS'group_name'
p33968
Nsa(dp33969
S'name'
p33970
S'execute_on'
p33971
sS'cpp_type'
p33972
S'MultiMooseEnum'
p33973
sS'default'
p33974
S'TIMESTEP_END'
p33975
sS'description'
p33976
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p33977
sS'required'
p33978
I00
sS'options'
p33979
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p33980
sS'group_name'
p33981
Nsa(dp33982
S'description'
p33983
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p33984
sS'cpp_type'
p33985
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p33986
sS'default'
p33987
g3
sS'name'
p33988
S'outputs'
p33989
sS'required'
p33990
I00
sS'group_name'
p33991
S'Advanced'
p33992
sa(dp33993
S'description'
p33994
g3
sS'cpp_type'
p33995
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p33996
sS'default'
p33997
S'SideFluxIntegral'
p33998
sS'name'
p33999
S'type'
p34000
sS'required'
p34001
I00
sS'group_name'
p34002
Nsa(dp34003
S'description'
p34004
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34005
sS'cpp_type'
p34006
S'bool'
p34007
sS'default'
p34008
S'0'
p34009
sS'name'
p34010
S'use_displaced_mesh'
p34011
sS'required'
p34012
I00
sS'group_name'
p34013
S'Advanced'
p34014
sa(dp34015
S'description'
p34016
S'The name of the variable that this boundary condition applies to\n'
p34017
sS'cpp_type'
p34018
S'std::vector<VariableName>'
p34019
sS'default'
p34020
g3
sS'name'
p34021
S'variable'
p34022
sS'required'
p34023
I00
sS'group_name'
p34024
NsasS'name'
p34025
S'/Postprocessors/SideFluxIntegral'
p34026
sa(dp34027
S'description'
p34028
g3
sS'subblocks'
p34029
NsS'parameters'
p34030
(lp34031
(dp34032
S'description'
p34033
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p34034
sS'cpp_type'
p34035
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p34036
sS'default'
p34037
g3
sS'name'
p34038
S'boundary'
p34039
sS'required'
p34040
I00
sS'group_name'
p34041
Nsa(dp34042
S'name'
p34043
S'execute_on'
p34044
sS'cpp_type'
p34045
S'MultiMooseEnum'
p34046
sS'default'
p34047
S'TIMESTEP_END'
p34048
sS'description'
p34049
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34050
sS'required'
p34051
I00
sS'options'
p34052
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34053
sS'group_name'
p34054
Nsa(dp34055
S'description'
p34056
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p34057
sS'cpp_type'
p34058
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p34059
sS'default'
p34060
g3
sS'name'
p34061
S'outputs'
p34062
sS'required'
p34063
I00
sS'group_name'
p34064
S'Advanced'
p34065
sa(dp34066
S'description'
p34067
g3
sS'cpp_type'
p34068
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34069
sS'default'
p34070
S'SideIntegralVariablePostprocessor'
p34071
sS'name'
p34072
S'type'
p34073
sS'required'
p34074
I00
sS'group_name'
p34075
Nsa(dp34076
S'description'
p34077
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34078
sS'cpp_type'
p34079
S'bool'
p34080
sS'default'
p34081
S'0'
p34082
sS'name'
p34083
S'use_displaced_mesh'
p34084
sS'required'
p34085
I00
sS'group_name'
p34086
S'Advanced'
p34087
sa(dp34088
S'description'
p34089
S'The name of the variable that this boundary condition applies to\n'
p34090
sS'cpp_type'
p34091
S'std::vector<VariableName>'
p34092
sS'default'
p34093
g3
sS'name'
p34094
S'variable'
p34095
sS'required'
p34096
I00
sS'group_name'
p34097
NsasS'name'
p34098
S'/Postprocessors/SideIntegralVariablePostprocessor'
p34099
sa(dp34100
S'description'
p34101
g3
sS'subblocks'
p34102
NsS'parameters'
p34103
(lp34104
(dp34105
S'name'
p34106
S'execute_on'
p34107
sS'cpp_type'
p34108
S'MultiMooseEnum'
p34109
sS'default'
p34110
S'TIMESTEP_END'
p34111
sS'description'
p34112
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34113
sS'required'
p34114
I00
sS'options'
p34115
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34116
sS'group_name'
p34117
Nsa(dp34118
S'description'
p34119
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p34120
sS'cpp_type'
p34121
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p34122
sS'default'
p34123
g3
sS'name'
p34124
S'outputs'
p34125
sS'required'
p34126
I00
sS'group_name'
p34127
S'Advanced'
p34128
sa(dp34129
S'description'
p34130
g3
sS'cpp_type'
p34131
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34132
sS'default'
p34133
S'TimestepSize'
p34134
sS'name'
p34135
S'type'
p34136
sS'required'
p34137
I00
sS'group_name'
p34138
Nsa(dp34139
S'description'
p34140
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34141
sS'cpp_type'
p34142
S'bool'
p34143
sS'default'
p34144
S'0'
p34145
sS'name'
p34146
S'use_displaced_mesh'
p34147
sS'required'
p34148
I00
sS'group_name'
p34149
S'Advanced'
p34150
sasS'name'
p34151
S'/Postprocessors/TimestepSize'
p34152
sa(dp34153
S'description'
p34154
g3
sS'subblocks'
p34155
NsS'parameters'
p34156
(lp34157
(dp34158
S'name'
p34159
S'execute_on'
p34160
sS'cpp_type'
p34161
S'MultiMooseEnum'
p34162
sS'default'
p34163
S'TIMESTEP_END'
p34164
sS'description'
p34165
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34166
sS'required'
p34167
I00
sS'options'
p34168
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34169
sS'group_name'
p34170
Nsa(dp34171
S'description'
p34172
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p34173
sS'cpp_type'
p34174
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p34175
sS'default'
p34176
g3
sS'name'
p34177
S'outputs'
p34178
sS'required'
p34179
I00
sS'group_name'
p34180
S'Advanced'
p34181
sa(dp34182
S'description'
p34183
g3
sS'cpp_type'
p34184
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34185
sS'default'
p34186
S'TotalVariableValue'
p34187
sS'name'
p34188
S'type'
p34189
sS'required'
p34190
I00
sS'group_name'
p34191
Nsa(dp34192
S'description'
p34193
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34194
sS'cpp_type'
p34195
S'bool'
p34196
sS'default'
p34197
S'0'
p34198
sS'name'
p34199
S'use_displaced_mesh'
p34200
sS'required'
p34201
I00
sS'group_name'
p34202
S'Advanced'
p34203
sa(dp34204
S'description'
p34205
S'The name of the postprocessor\n'
p34206
sS'cpp_type'
p34207
S'PostprocessorName'
p34208
sS'default'
p34209
g3
sS'name'
p34210
S'value'
p34211
sS'required'
p34212
I00
sS'group_name'
p34213
NsasS'name'
p34214
S'/Postprocessors/TotalVariableValue'
p34215
sa(dp34216
S'description'
p34217
g3
sS'subblocks'
p34218
NsS'parameters'
p34219
(lp34220
(dp34221
S'description'
p34222
S'The list of block ids (SubdomainID) that this object will be applied\n'
p34223
sS'cpp_type'
p34224
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p34225
sS'default'
p34226
g3
sS'name'
p34227
S'block'
p34228
sS'required'
p34229
I00
sS'group_name'
p34230
Nsa(dp34231
S'name'
p34232
S'execute_on'
p34233
sS'cpp_type'
p34234
S'MultiMooseEnum'
p34235
sS'default'
p34236
S'TIMESTEP_END'
p34237
sS'description'
p34238
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p34239
sS'required'
p34240
I00
sS'options'
p34241
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p34242
sS'group_name'
p34243
Nsa(dp34244
S'description'
p34245
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p34246
sS'cpp_type'
p34247
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p34248
sS'default'
p34249
g3
sS'name'
p34250
S'outputs'
p34251
sS'required'
p34252
I00
sS'group_name'
p34253
S'Advanced'
p34254
sa(dp34255
S'description'
p34256
S'The seed for the master random number generator\n'
p34257
sS'cpp_type'
p34258
S'unsigned int'
p34259
sS'default'
p34260
S'0'
p34261
sS'name'
p34262
S'seed'
p34263
sS'required'
p34264
I00
sS'group_name'
p34265
S'Advanced'
p34266
sa(dp34267
S'description'
p34268
g3
sS'cpp_type'
p34269
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34270
sS'default'
p34271
S'VolumePostprocessor'
p34272
sS'name'
p34273
S'type'
p34274
sS'required'
p34275
I00
sS'group_name'
p34276
Nsa(dp34277
S'description'
p34278
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p34279
sS'cpp_type'
p34280
S'bool'
p34281
sS'default'
p34282
S'0'
p34283
sS'name'
p34284
S'use_displaced_mesh'
p34285
sS'required'
p34286
I00
sS'group_name'
p34287
S'Advanced'
p34288
sasS'name'
p34289
S'/Postprocessors/VolumePostprocessor'
p34290
sasS'parameters'
p34291
NsS'name'
p34292
S'/Postprocessors'
p34293
sa(dp34294
S'description'
p34295
g3
sS'subblocks'
p34296
(lp34297
(dp34298
S'description'
p34299
g3
sS'subblocks'
p34300
NsS'parameters'
p34301
(lp34302
(dp34303
S'name'
p34304
S'line_search'
p34305
sS'cpp_type'
p34306
S'MooseEnum'
p34307
sS'default'
p34308
S'default'
p34309
sS'description'
p34310
S'Specifies the line search type (Note: none = basic)\n'
p34311
sS'required'
p34312
I00
sS'options'
p34313
S'default shell none basic l2 bt cp'
p34314
sS'group_name'
p34315
Nsa(dp34316
S'name'
p34317
S'petsc_options'
p34318
sS'cpp_type'
p34319
S'MultiMooseEnum'
p34320
sS'default'
p34321
g3
sS'description'
p34322
S'Singleton PETSc options\n'
p34323
sS'required'
p34324
I00
sS'options'
p34325
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p34326
sS'group_name'
p34327
Nsa(dp34328
S'name'
p34329
S'petsc_options_iname'
p34330
sS'cpp_type'
p34331
S'MultiMooseEnum'
p34332
sS'default'
p34333
g3
sS'description'
p34334
S'Names of PETSc name/value pairs\n'
p34335
sS'required'
p34336
I00
sS'options'
p34337
S'-ksp_atol -ksp_gmres_restart -ksp_grmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p34338
sS'group_name'
p34339
Nsa(dp34340
S'description'
p34341
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p34342
sS'cpp_type'
p34343
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34344
sS'default'
p34345
g3
sS'name'
p34346
S'petsc_options_value'
p34347
sS'required'
p34348
I00
sS'group_name'
p34349
Nsa(dp34350
S'name'
p34351
S'solve_type'
p34352
sS'cpp_type'
p34353
S'MooseEnum'
p34354
sS'default'
p34355
g3
sS'description'
p34356
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p34357
sS'required'
p34358
I00
sS'options'
p34359
S'PJFNK JFNK NEWTON FD LINEAR'
p34360
sS'group_name'
p34361
Nsa(dp34362
S'description'
p34363
S'A string representing the Moose Object that will be built by this Action\n'
p34364
sS'cpp_type'
p34365
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34366
sS'default'
p34367
g3
sS'name'
p34368
S'type'
p34369
sS'required'
p34370
I01
sS'group_name'
p34371
NsasS'name'
p34372
S'/Preconditioning/*'
p34373
sa(dp34374
S'description'
p34375
g3
sS'subblocks'
p34376
NsS'parameters'
p34377
(lp34378
(dp34379
S'description'
p34380
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p34381
sS'cpp_type'
p34382
S'bool'
p34383
sS'default'
p34384
S'0'
p34385
sS'name'
p34386
S'full'
p34387
sS'required'
p34388
I00
sS'group_name'
p34389
Nsa(dp34390
S'description'
p34391
S'Set to true if you want to add entries into the matrix for degrees of freedom that might be coupled by inspection of the geometric search objects.\n'
p34392
sS'cpp_type'
p34393
S'bool'
p34394
sS'default'
p34395
S'0'
p34396
sS'name'
p34397
S'implicit_geometric_coupling'
p34398
sS'required'
p34399
I00
sS'group_name'
p34400
Nsa(dp34401
S'name'
p34402
S'line_search'
p34403
sS'cpp_type'
p34404
S'MooseEnum'
p34405
sS'default'
p34406
S'default'
p34407
sS'description'
p34408
S'Specifies the line search type (Note: none = basic)\n'
p34409
sS'required'
p34410
I00
sS'options'
p34411
S'default shell none basic l2 bt cp'
p34412
sS'group_name'
p34413
Nsa(dp34414
S'description'
p34415
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p34416
sS'cpp_type'
p34417
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34418
sS'default'
p34419
g3
sS'name'
p34420
S'off_diag_column'
p34421
sS'required'
p34422
I00
sS'group_name'
p34423
Nsa(dp34424
S'description'
p34425
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p34426
sS'cpp_type'
p34427
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34428
sS'default'
p34429
g3
sS'name'
p34430
S'off_diag_row'
p34431
sS'required'
p34432
I00
sS'group_name'
p34433
Nsa(dp34434
S'name'
p34435
S'pc_side'
p34436
sS'cpp_type'
p34437
S'MooseEnum'
p34438
sS'default'
p34439
S'right'
p34440
sS'description'
p34441
S'Preconditioning side\n'
p34442
sS'required'
p34443
I00
sS'options'
p34444
S'left right symmetric'
p34445
sS'group_name'
p34446
Nsa(dp34447
S'name'
p34448
S'petsc_options'
p34449
sS'cpp_type'
p34450
S'MultiMooseEnum'
p34451
sS'default'
p34452
g3
sS'description'
p34453
S'Singleton PETSc options\n'
p34454
sS'required'
p34455
I00
sS'options'
p34456
NsS'group_name'
p34457
Nsa(dp34458
S'description'
p34459
S'Names of PETSc name/value pairs\n'
p34460
sS'cpp_type'
p34461
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34462
sS'default'
p34463
g3
sS'name'
p34464
S'petsc_options_iname'
p34465
sS'required'
p34466
I00
sS'group_name'
p34467
Nsa(dp34468
S'description'
p34469
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p34470
sS'cpp_type'
p34471
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34472
sS'default'
p34473
g3
sS'name'
p34474
S'petsc_options_value'
p34475
sS'required'
p34476
I00
sS'group_name'
p34477
Nsa(dp34478
S'name'
p34479
S'solve_type'
p34480
sS'cpp_type'
p34481
S'MooseEnum'
p34482
sS'default'
p34483
g3
sS'description'
p34484
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p34485
sS'required'
p34486
I00
sS'options'
p34487
S'PJFNK JFNK NEWTON FD LINEAR'
p34488
sS'group_name'
p34489
Nsa(dp34490
S'description'
p34491
g3
sS'cpp_type'
p34492
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34493
sS'default'
p34494
S'FDP'
p34495
sS'name'
p34496
S'type'
p34497
sS'required'
p34498
I00
sS'group_name'
p34499
NsasS'name'
p34500
S'/Preconditioning/FDP'
p34501
sa(dp34502
S'description'
p34503
g3
sS'subblocks'
p34504
NsS'parameters'
p34505
(lp34506
(dp34507
S'name'
p34508
S'line_search'
p34509
sS'cpp_type'
p34510
S'MooseEnum'
p34511
sS'default'
p34512
S'default'
p34513
sS'description'
p34514
S'Specifies the line search type (Note: none = basic)\n'
p34515
sS'required'
p34516
I00
sS'options'
p34517
S'default shell none basic l2 bt cp'
p34518
sS'group_name'
p34519
Nsa(dp34520
S'description'
p34521
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p34522
sS'cpp_type'
p34523
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34524
sS'default'
p34525
g3
sS'name'
p34526
S'off_diag_column'
p34527
sS'required'
p34528
I00
sS'group_name'
p34529
Nsa(dp34530
S'description'
p34531
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p34532
sS'cpp_type'
p34533
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34534
sS'default'
p34535
g3
sS'name'
p34536
S'off_diag_row'
p34537
sS'required'
p34538
I00
sS'group_name'
p34539
Nsa(dp34540
S'name'
p34541
S'pc_side'
p34542
sS'cpp_type'
p34543
S'MooseEnum'
p34544
sS'default'
p34545
S'right'
p34546
sS'description'
p34547
S'Preconditioning side\n'
p34548
sS'required'
p34549
I00
sS'options'
p34550
S'left right symmetric'
p34551
sS'group_name'
p34552
Nsa(dp34553
S'name'
p34554
S'petsc_options'
p34555
sS'cpp_type'
p34556
S'MultiMooseEnum'
p34557
sS'default'
p34558
g3
sS'description'
p34559
S'Singleton PETSc options\n'
p34560
sS'required'
p34561
I00
sS'options'
p34562
NsS'group_name'
p34563
Nsa(dp34564
S'description'
p34565
S'Names of PETSc name/value pairs\n'
p34566
sS'cpp_type'
p34567
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34568
sS'default'
p34569
g3
sS'name'
p34570
S'petsc_options_iname'
p34571
sS'required'
p34572
I00
sS'group_name'
p34573
Nsa(dp34574
S'description'
p34575
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p34576
sS'cpp_type'
p34577
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34578
sS'default'
p34579
g3
sS'name'
p34580
S'petsc_options_value'
p34581
sS'required'
p34582
I00
sS'group_name'
p34583
Nsa(dp34584
S'description'
p34585
S'TODO: docstring\n'
p34586
sS'cpp_type'
p34587
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34588
sS'default'
p34589
g3
sS'name'
p34590
S'preconditioner'
p34591
sS'required'
p34592
I01
sS'group_name'
p34593
Nsa(dp34594
S'description'
p34595
S"The order the block rows will be solved in.  Put the name of variables here to stand for solving that variable's block row.  A variable may appear more than once (to create cylces if you like).\n"
p34596
sS'cpp_type'
p34597
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34598
sS'default'
p34599
g3
sS'name'
p34600
S'solve_order'
p34601
sS'required'
p34602
I01
sS'group_name'
p34603
Nsa(dp34604
S'name'
p34605
S'solve_type'
p34606
sS'cpp_type'
p34607
S'MooseEnum'
p34608
sS'default'
p34609
g3
sS'description'
p34610
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p34611
sS'required'
p34612
I00
sS'options'
p34613
S'PJFNK JFNK NEWTON FD LINEAR'
p34614
sS'group_name'
p34615
Nsa(dp34616
S'description'
p34617
g3
sS'cpp_type'
p34618
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34619
sS'default'
p34620
S'PBP'
p34621
sS'name'
p34622
S'type'
p34623
sS'required'
p34624
I00
sS'group_name'
p34625
NsasS'name'
p34626
S'/Preconditioning/PBP'
p34627
sa(dp34628
S'description'
p34629
g3
sS'subblocks'
p34630
NsS'parameters'
p34631
(lp34632
(dp34633
S'description'
p34634
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p34635
sS'cpp_type'
p34636
S'bool'
p34637
sS'default'
p34638
S'0'
p34639
sS'name'
p34640
S'full'
p34641
sS'required'
p34642
I00
sS'group_name'
p34643
Nsa(dp34644
S'name'
p34645
S'line_search'
p34646
sS'cpp_type'
p34647
S'MooseEnum'
p34648
sS'default'
p34649
S'default'
p34650
sS'description'
p34651
S'Specifies the line search type (Note: none = basic)\n'
p34652
sS'required'
p34653
I00
sS'options'
p34654
S'default shell none basic l2 bt cp'
p34655
sS'group_name'
p34656
Nsa(dp34657
S'description'
p34658
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p34659
sS'cpp_type'
p34660
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34661
sS'default'
p34662
g3
sS'name'
p34663
S'off_diag_column'
p34664
sS'required'
p34665
I00
sS'group_name'
p34666
Nsa(dp34667
S'description'
p34668
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p34669
sS'cpp_type'
p34670
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34671
sS'default'
p34672
g3
sS'name'
p34673
S'off_diag_row'
p34674
sS'required'
p34675
I00
sS'group_name'
p34676
Nsa(dp34677
S'name'
p34678
S'pc_side'
p34679
sS'cpp_type'
p34680
S'MooseEnum'
p34681
sS'default'
p34682
S'right'
p34683
sS'description'
p34684
S'Preconditioning side\n'
p34685
sS'required'
p34686
I00
sS'options'
p34687
S'left right symmetric'
p34688
sS'group_name'
p34689
Nsa(dp34690
S'name'
p34691
S'petsc_options'
p34692
sS'cpp_type'
p34693
S'MultiMooseEnum'
p34694
sS'default'
p34695
g3
sS'description'
p34696
S'Singleton PETSc options\n'
p34697
sS'required'
p34698
I00
sS'options'
p34699
NsS'group_name'
p34700
Nsa(dp34701
S'description'
p34702
S'Names of PETSc name/value pairs\n'
p34703
sS'cpp_type'
p34704
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34705
sS'default'
p34706
g3
sS'name'
p34707
S'petsc_options_iname'
p34708
sS'required'
p34709
I00
sS'group_name'
p34710
Nsa(dp34711
S'description'
p34712
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p34713
sS'cpp_type'
p34714
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34715
sS'default'
p34716
g3
sS'name'
p34717
S'petsc_options_value'
p34718
sS'required'
p34719
I00
sS'group_name'
p34720
Nsa(dp34721
S'name'
p34722
S'solve_type'
p34723
sS'cpp_type'
p34724
S'MooseEnum'
p34725
sS'default'
p34726
g3
sS'description'
p34727
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p34728
sS'required'
p34729
I00
sS'options'
p34730
S'PJFNK JFNK NEWTON FD LINEAR'
p34731
sS'group_name'
p34732
Nsa(dp34733
S'description'
p34734
g3
sS'cpp_type'
p34735
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34736
sS'default'
p34737
S'SBP'
p34738
sS'name'
p34739
S'type'
p34740
sS'required'
p34741
I00
sS'group_name'
p34742
NsasS'name'
p34743
S'/Preconditioning/SBP'
p34744
sa(dp34745
S'description'
p34746
g3
sS'subblocks'
p34747
NsS'parameters'
p34748
(lp34749
(dp34750
S'description'
p34751
S"Set to true if you want the full set of couplings.  Simply for convenience so you don't have to set every off_diag_row and off_diag_column combination.\n"
p34752
sS'cpp_type'
p34753
S'bool'
p34754
sS'default'
p34755
S'0'
p34756
sS'name'
p34757
S'full'
p34758
sS'required'
p34759
I00
sS'group_name'
p34760
Nsa(dp34761
S'name'
p34762
S'line_search'
p34763
sS'cpp_type'
p34764
S'MooseEnum'
p34765
sS'default'
p34766
S'default'
p34767
sS'description'
p34768
S'Specifies the line search type (Note: none = basic)\n'
p34769
sS'required'
p34770
I00
sS'options'
p34771
S'default shell none basic l2 bt cp'
p34772
sS'group_name'
p34773
Nsa(dp34774
S'description'
p34775
S'The off diagonal column you want to add into the matrix, it will be associated with an off diagonal row from the same position in off_diag_row.\n'
p34776
sS'cpp_type'
p34777
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34778
sS'default'
p34779
g3
sS'name'
p34780
S'off_diag_column'
p34781
sS'required'
p34782
I00
sS'group_name'
p34783
Nsa(dp34784
S'description'
p34785
S'The off diagonal row you want to add into the matrix, it will be associated with an off diagonal column from the same position in off_diag_colum.\n'
p34786
sS'cpp_type'
p34787
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34788
sS'default'
p34789
g3
sS'name'
p34790
S'off_diag_row'
p34791
sS'required'
p34792
I00
sS'group_name'
p34793
Nsa(dp34794
S'name'
p34795
S'pc_side'
p34796
sS'cpp_type'
p34797
S'MooseEnum'
p34798
sS'default'
p34799
S'right'
p34800
sS'description'
p34801
S'Preconditioning side\n'
p34802
sS'required'
p34803
I00
sS'options'
p34804
S'left right symmetric'
p34805
sS'group_name'
p34806
Nsa(dp34807
S'name'
p34808
S'petsc_options'
p34809
sS'cpp_type'
p34810
S'MultiMooseEnum'
p34811
sS'default'
p34812
g3
sS'description'
p34813
S'Singleton PETSc options\n'
p34814
sS'required'
p34815
I00
sS'options'
p34816
NsS'group_name'
p34817
Nsa(dp34818
S'description'
p34819
S'Names of PETSc name/value pairs\n'
p34820
sS'cpp_type'
p34821
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34822
sS'default'
p34823
g3
sS'name'
p34824
S'petsc_options_iname'
p34825
sS'required'
p34826
I00
sS'group_name'
p34827
Nsa(dp34828
S'description'
p34829
S'Values of PETSc name/value pairs (must correspond with "petsc_options_iname"\n'
p34830
sS'cpp_type'
p34831
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p34832
sS'default'
p34833
g3
sS'name'
p34834
S'petsc_options_value'
p34835
sS'required'
p34836
I00
sS'group_name'
p34837
Nsa(dp34838
S'name'
p34839
S'solve_type'
p34840
sS'cpp_type'
p34841
S'MooseEnum'
p34842
sS'default'
p34843
g3
sS'description'
p34844
S'PJFNK: Preconditioned Jacobian-Free Newton Krylov JFNK: Jacobian-Free Newton Krylov NEWTON: Full Newton Solve FD: Use finite differences to compute Jacobian LINEAR: Solving a linear problem\n'
p34845
sS'required'
p34846
I00
sS'options'
p34847
S'PJFNK JFNK NEWTON FD LINEAR'
p34848
sS'group_name'
p34849
Nsa(dp34850
S'description'
p34851
g3
sS'cpp_type'
p34852
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34853
sS'default'
p34854
S'SMP'
p34855
sS'name'
p34856
S'type'
p34857
sS'required'
p34858
I00
sS'group_name'
p34859
NsasS'name'
p34860
S'/Preconditioning/SMP'
p34861
sasS'parameters'
p34862
NsS'name'
p34863
S'/Preconditioning'
p34864
sa(dp34865
S'description'
p34866
g3
sS'subblocks'
p34867
(lp34868
(dp34869
S'description'
p34870
g3
sS'subblocks'
p34871
(lp34872
(dp34873
S'description'
p34874
g3
sS'subblocks'
p34875
NsS'parameters'
p34876
(lp34877
(dp34878
S'description'
p34879
S'The dimension of the near nullspace\n'
p34880
sS'cpp_type'
p34881
S'unsigned int'
p34882
sS'default'
p34883
S'0'
p34884
sS'name'
p34885
S'dimNearNullSpace'
p34886
sS'required'
p34887
I00
sS'group_name'
p34888
Nsa(dp34889
S'description'
p34890
S'The dimension of the nullspace\n'
p34891
sS'cpp_type'
p34892
S'unsigned int'
p34893
sS'default'
p34894
S'0'
p34895
sS'name'
p34896
S'dimNullSpace'
p34897
sS'required'
p34898
I00
sS'group_name'
p34899
Nsa(dp34900
S'description'
p34901
S'This causes PETSc to error if it had to reallocate memory in the Jacobian matrix due to not having enough nonzeros\n'
p34902
sS'cpp_type'
p34903
S'bool'
p34904
sS'default'
p34905
S'0'
p34906
sS'name'
p34907
S'error_on_jacobian_nonzero_reallocation'
p34908
sS'required'
p34909
I00
sS'group_name'
p34910
Nsa(dp34911
S'description'
p34912
S'Whether or not to actually solve the Nonlinear system.  This is handy in the case that all you want to do is execute AuxKernels, Transfers, etc. without actually solving anything\n'
p34913
sS'cpp_type'
p34914
S'bool'
p34915
sS'default'
p34916
S'1'
p34917
sS'name'
p34918
S'solve'
p34919
sS'required'
p34920
I00
sS'group_name'
p34921
Nsa(dp34922
S'description'
p34923
g3
sS'cpp_type'
p34924
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p34925
sS'default'
p34926
S'FEProblem'
p34927
sS'name'
p34928
S'type'
p34929
sS'required'
p34930
I00
sS'group_name'
p34931
Nsa(dp34932
S'description'
p34933
S'Determines whether to use a Nonlinear vs a Eigenvalue system (Automatically determined based on executioner)\n'
p34934
sS'cpp_type'
p34935
S'bool'
p34936
sS'default'
p34937
S'1'
p34938
sS'name'
p34939
S'use_nonlinear'
p34940
sS'required'
p34941
I00
sS'group_name'
p34942
NsasS'name'
p34943
S'/Problem/<type>/FEProblem'
p34944
sasS'parameters'
p34945
NsS'name'
p34946
S'/Problem/<type>'
p34947
sasS'parameters'
p34948
(lp34949
(dp34950
S'description'
p34951
S'Block IDs for the coordinate systems\n'
p34952
sS'cpp_type'
p34953
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p34954
sS'default'
p34955
g3
sS'name'
p34956
S'block'
p34957
sS'required'
p34958
I00
sS'group_name'
p34959
Nsa(dp34960
S'name'
p34961
S'coord_type'
p34962
sS'cpp_type'
p34963
S'MultiMooseEnum'
p34964
sS'default'
p34965
S'XYZ'
p34966
sS'description'
p34967
S'Type of the coordinate system per block param\n'
p34968
sS'required'
p34969
I00
sS'options'
p34970
S'XYZ RZ RSPHERICAL'
p34971
sS'group_name'
p34972
Nsa(dp34973
S'description'
p34974
S'Whether or not to turn on the finite element shape function caching system.  This can increase speed with an associated memory cost.\n'
p34975
sS'cpp_type'
p34976
S'bool'
p34977
sS'default'
p34978
S'0'
p34979
sS'name'
p34980
S'fe_cache'
p34981
sS'required'
p34982
I00
sS'group_name'
p34983
Nsa(dp34984
S'description'
p34985
S'Set to false to disable kernel->subdomain coverage check\n'
p34986
sS'cpp_type'
p34987
S'bool'
p34988
sS'default'
p34989
S'1'
p34990
sS'name'
p34991
S'kernel_coverage_check'
p34992
sS'required'
p34993
I00
sS'group_name'
p34994
Nsa(dp34995
S'description'
p34996
S'Set to false to disable material->subdomain coverage check\n'
p34997
sS'cpp_type'
p34998
S'bool'
p34999
sS'default'
p35000
S'1'
p35001
sS'name'
p35002
S'material_coverage_check'
p35003
sS'required'
p35004
I00
sS'group_name'
p35005
Nsa(dp35006
S'description'
p35007
S'The name the problem\n'
p35008
sS'cpp_type'
p35009
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35010
sS'default'
p35011
S'MOOSE Problem'
p35012
sS'name'
p35013
S'name'
p35014
sS'required'
p35015
I00
sS'group_name'
p35016
Nsa(dp35017
S'name'
p35018
S'rz_coord_axis'
p35019
sS'cpp_type'
p35020
S'MooseEnum'
p35021
sS'default'
p35022
S'Y'
p35023
sS'description'
p35024
S'The rotation axis (X | Y) for axisymetric coordinates\n'
p35025
sS'required'
p35026
I00
sS'options'
p35027
S'X Y'
p35028
sS'group_name'
p35029
Nsa(dp35030
S'description'
p35031
S'A string representing the Moose Object that will be built by this Action\n'
p35032
sS'cpp_type'
p35033
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35034
sS'default'
p35035
S'FEProblem'
p35036
sS'name'
p35037
S'type'
p35038
sS'required'
p35039
I01
sS'group_name'
p35040
Nsa(dp35041
S'description'
p35042
S'Set to true to have MOOSE recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p35043
sS'cpp_type'
p35044
S'bool'
p35045
sS'default'
p35046
g3
sS'name'
p35047
S'use_legacy_uo_aux_computation'
p35048
sS'required'
p35049
I00
sS'group_name'
p35050
Nsa(dp35051
S'description'
p35052
S'Set to true to have MOOSE compute all UserObjects and Postprocessors during the initial setup phase of the problem recompute *all* AuxKernel types every time *any* UserObject type is executed. ... This behavior is non-intuitive and will be removed late fall 2014, The default is controlled through MooseApp\n'
p35053
sS'cpp_type'
p35054
S'bool'
p35055
sS'default'
p35056
g3
sS'name'
p35057
S'use_legacy_uo_initialization'
p35058
sS'required'
p35059
I00
sS'group_name'
p35060
Nsa(dp35061
S'description'
p35062
S'Path to search for dynamic libraries (please avoid committing absolute paths in addition to MOOSE_LIBRARY_PATH)\n'
p35063
sS'cpp_type'
p35064
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35065
sS'default'
p35066
g3
sS'name'
p35067
S'library_path'
p35068
sS'required'
p35069
I00
sS'group_name'
p35070
Nsa(dp35071
S'description'
p35072
S'The names of the objects to register (Default: register all).\n'
p35073
sS'cpp_type'
p35074
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35075
sS'default'
p35076
g3
sS'name'
p35077
S'object_names'
p35078
sS'required'
p35079
I00
sS'group_name'
p35080
Nsa(dp35081
S'description'
p35082
S'The names of other applications from which objects will be registered from (dynamic registration).\n'
p35083
sS'cpp_type'
p35084
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35085
sS'default'
p35086
g3
sS'name'
p35087
S'register_objects_from'
p35088
sS'required'
p35089
I00
sS'group_name'
p35090
NsasS'name'
p35091
S'/Problem'
p35092
sa(dp35093
S'description'
p35094
g3
sS'subblocks'
p35095
(lp35096
(dp35097
S'description'
p35098
g3
sS'subblocks'
p35099
NsS'parameters'
p35100
(lp35101
(dp35102
S'description'
p35103
S'A string representing the Moose Object that will be built by this Action\n'
p35104
sS'cpp_type'
p35105
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35106
sS'default'
p35107
g3
sS'name'
p35108
S'type'
p35109
sS'required'
p35110
I01
sS'group_name'
p35111
NsasS'name'
p35112
S'/ScalarKernels/*'
p35113
sa(dp35114
S'description'
p35115
g3
sS'subblocks'
p35116
NsS'parameters'
p35117
(lp35118
(dp35119
S'description'
p35120
S'Node ids\n'
p35121
sS'cpp_type'
p35122
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p35123
sS'default'
p35124
g3
sS'name'
p35125
S'nodes'
p35126
sS'required'
p35127
I01
sS'group_name'
p35128
Nsa(dp35129
S'description'
p35130
g3
sS'cpp_type'
p35131
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35132
sS'default'
p35133
S'NodalEqualValueConstraint'
p35134
sS'name'
p35135
S'type'
p35136
sS'required'
p35137
I00
sS'group_name'
p35138
Nsa(dp35139
S'description'
p35140
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35141
sS'cpp_type'
p35142
S'bool'
p35143
sS'default'
p35144
S'0'
p35145
sS'name'
p35146
S'use_displaced_mesh'
p35147
sS'required'
p35148
I00
sS'group_name'
p35149
S'Advanced'
p35150
sa(dp35151
S'description'
p35152
S'Variable(s) to put the constraint on\n'
p35153
sS'cpp_type'
p35154
S'std::vector<VariableName>'
p35155
sS'default'
p35156
g3
sS'name'
p35157
S'var'
p35158
sS'required'
p35159
I01
sS'group_name'
p35160
Nsa(dp35161
S'description'
p35162
S'The name of the variable that this kernel operates on\n'
p35163
sS'cpp_type'
p35164
S'NonlinearVariableName'
p35165
sS'default'
p35166
g3
sS'name'
p35167
S'variable'
p35168
sS'required'
p35169
I01
sS'group_name'
p35170
NsasS'name'
p35171
S'/ScalarKernels/NodalEqualValueConstraint'
p35172
sa(dp35173
S'description'
p35174
g3
sS'subblocks'
p35175
NsS'parameters'
p35176
(lp35177
(dp35178
S'description'
p35179
g3
sS'cpp_type'
p35180
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35181
sS'default'
p35182
S'ODETimeDerivative'
p35183
sS'name'
p35184
S'type'
p35185
sS'required'
p35186
I00
sS'group_name'
p35187
Nsa(dp35188
S'description'
p35189
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35190
sS'cpp_type'
p35191
S'bool'
p35192
sS'default'
p35193
S'0'
p35194
sS'name'
p35195
S'use_displaced_mesh'
p35196
sS'required'
p35197
I00
sS'group_name'
p35198
S'Advanced'
p35199
sa(dp35200
S'description'
p35201
S'The name of the variable that this kernel operates on\n'
p35202
sS'cpp_type'
p35203
S'NonlinearVariableName'
p35204
sS'default'
p35205
g3
sS'name'
p35206
S'variable'
p35207
sS'required'
p35208
I01
sS'group_name'
p35209
NsasS'name'
p35210
S'/ScalarKernels/ODETimeDerivative'
p35211
sa(dp35212
S'description'
p35213
S'Parsed ODE function kernel.\n'
p35214
sS'subblocks'
p35215
NsS'parameters'
p35216
(lp35217
(dp35218
S'description'
p35219
S'additional coupled variables\n'
p35220
sS'cpp_type'
p35221
S'std::vector<VariableName>'
p35222
sS'default'
p35223
g3
sS'name'
p35224
S'args'
p35225
sS'required'
p35226
I00
sS'group_name'
p35227
Nsa(dp35228
S'description'
p35229
S'Vector of values for the constants in constant_names (can be an FParser expression)\n'
p35230
sS'cpp_type'
p35231
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35232
sS'default'
p35233
g3
sS'name'
p35234
S'constant_expressions'
p35235
sS'required'
p35236
I00
sS'group_name'
p35237
Nsa(dp35238
S'description'
p35239
S'Vector of constants used in the parsed function (use this for kB etc.)\n'
p35240
sS'cpp_type'
p35241
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35242
sS'default'
p35243
g3
sS'name'
p35244
S'constant_names'
p35245
sS'required'
p35246
I00
sS'group_name'
p35247
Nsa(dp35248
S'description'
p35249
S'Disable the function parser algebraic optimizer\n'
p35250
sS'cpp_type'
p35251
S'bool'
p35252
sS'default'
p35253
S'0'
p35254
sS'name'
p35255
S'disable_fpoptimizer'
p35256
sS'required'
p35257
I00
sS'group_name'
p35258
Nsa(dp35259
S'description'
p35260
S'enable just-in-time compilation of function expressions for faster evaluation\n'
p35261
sS'cpp_type'
p35262
S'bool'
p35263
sS'default'
p35264
S'1'
p35265
sS'name'
p35266
S'enable_jit'
p35267
sS'required'
p35268
I00
sS'group_name'
p35269
Nsa(dp35270
S'description'
p35271
S'Fail fatally if a function evaluation returns an error code (otherwise just pass on NaN)\n'
p35272
sS'cpp_type'
p35273
S'bool'
p35274
sS'default'
p35275
S'0'
p35276
sS'name'
p35277
S'fail_on_evalerror'
p35278
sS'required'
p35279
I00
sS'group_name'
p35280
Nsa(dp35281
S'description'
p35282
S'function expression\n'
p35283
sS'cpp_type'
p35284
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35285
sS'default'
p35286
g3
sS'name'
p35287
S'function'
p35288
sS'required'
p35289
I01
sS'group_name'
p35290
Nsa(dp35291
S'description'
p35292
g3
sS'cpp_type'
p35293
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35294
sS'default'
p35295
S'ParsedODEKernel'
p35296
sS'name'
p35297
S'type'
p35298
sS'required'
p35299
I00
sS'group_name'
p35300
Nsa(dp35301
S'description'
p35302
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35303
sS'cpp_type'
p35304
S'bool'
p35305
sS'default'
p35306
S'0'
p35307
sS'name'
p35308
S'use_displaced_mesh'
p35309
sS'required'
p35310
I00
sS'group_name'
p35311
S'Advanced'
p35312
sa(dp35313
S'description'
p35314
S'The name of the variable that this kernel operates on\n'
p35315
sS'cpp_type'
p35316
S'NonlinearVariableName'
p35317
sS'default'
p35318
g3
sS'name'
p35319
S'variable'
p35320
sS'required'
p35321
I01
sS'group_name'
p35322
NsasS'name'
p35323
S'/ScalarKernels/ParsedODEKernel'
p35324
sasS'parameters'
p35325
NsS'name'
p35326
S'/ScalarKernels'
p35327
sa(dp35328
S'description'
p35329
g3
sS'subblocks'
p35330
(lp35331
(dp35332
S'description'
p35333
g3
sS'subblocks'
p35334
NsS'parameters'
p35335
(lp35336
(dp35337
S'description'
p35338
S'Classname of the split object\n'
p35339
sS'cpp_type'
p35340
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35341
sS'default'
p35342
S'Split'
p35343
sS'name'
p35344
S'type'
p35345
sS'required'
p35346
I01
sS'group_name'
p35347
NsasS'name'
p35348
S'/Splits/*'
p35349
sa(dp35350
S'description'
p35351
g3
sS'subblocks'
p35352
NsS'parameters'
p35353
(lp35354
(dp35355
S'description'
p35356
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p35357
sS'cpp_type'
p35358
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35359
sS'default'
p35360
g3
sS'name'
p35361
S'blocks'
p35362
sS'required'
p35363
I00
sS'group_name'
p35364
Nsa(dp35365
S'description'
p35366
S'List of indicators whether displaced mesh is used to define included contact\n'
p35367
sS'cpp_type'
p35368
S'std::__1::vector<bool, std::__1::allocator<bool> >'
p35369
sS'default'
p35370
g3
sS'name'
p35371
S'contact_displaced'
p35372
sS'required'
p35373
I00
sS'group_name'
p35374
Nsa(dp35375
S'description'
p35376
S'Master surface list for included contacts\n'
p35377
sS'cpp_type'
p35378
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35379
sS'default'
p35380
g3
sS'name'
p35381
S'contact_master'
p35382
sS'required'
p35383
I00
sS'group_name'
p35384
Nsa(dp35385
S'description'
p35386
S'Slave surface list for included contacts\n'
p35387
sS'cpp_type'
p35388
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35389
sS'default'
p35390
g3
sS'name'
p35391
S'contact_slave'
p35392
sS'required'
p35393
I00
sS'group_name'
p35394
Nsa(dp35395
S'name'
p35396
S'petsc_options'
p35397
sS'cpp_type'
p35398
S'MultiMooseEnum'
p35399
sS'default'
p35400
g3
sS'description'
p35401
S'PETSc flags for the FieldSplit solver\n'
p35402
sS'required'
p35403
I00
sS'options'
p35404
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p35405
sS'group_name'
p35406
Nsa(dp35407
S'name'
p35408
S'petsc_options_iname'
p35409
sS'cpp_type'
p35410
S'MultiMooseEnum'
p35411
sS'default'
p35412
g3
sS'description'
p35413
S'PETSc option names for the FieldSplit solver\n'
p35414
sS'required'
p35415
I00
sS'options'
p35416
S'-ksp_atol -ksp_gmres_restart -ksp_grmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p35417
sS'group_name'
p35418
Nsa(dp35419
S'description'
p35420
S'PETSc option values for the FieldSplit solver\n'
p35421
sS'cpp_type'
p35422
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35423
sS'default'
p35424
g3
sS'name'
p35425
S'petsc_options_value'
p35426
sS'required'
p35427
I00
sS'group_name'
p35428
Nsa(dp35429
S'name'
p35430
S'schur_ainv'
p35431
sS'cpp_type'
p35432
S'MooseEnum'
p35433
sS'default'
p35434
S'diag'
p35435
sS'description'
p35436
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p35437
sS'required'
p35438
I00
sS'options'
p35439
S'diag lump'
p35440
sS'group_name'
p35441
Nsa(dp35442
S'name'
p35443
S'schur_pre'
p35444
sS'cpp_type'
p35445
S'MooseEnum'
p35446
sS'default'
p35447
S'S'
p35448
sS'description'
p35449
S'Type of Schur complement preconditioner matrix\n'
p35450
sS'required'
p35451
I00
sS'options'
p35452
S'S Sp A11'
p35453
sS'group_name'
p35454
Nsa(dp35455
S'name'
p35456
S'schur_type'
p35457
sS'cpp_type'
p35458
S'MooseEnum'
p35459
sS'default'
p35460
S'full'
p35461
sS'description'
p35462
S'Type of Schur complement\n'
p35463
sS'required'
p35464
I00
sS'options'
p35465
S'full upper lower'
p35466
sS'group_name'
p35467
Nsa(dp35468
S'description'
p35469
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p35470
sS'cpp_type'
p35471
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35472
sS'default'
p35473
g3
sS'name'
p35474
S'sides'
p35475
sS'required'
p35476
I00
sS'group_name'
p35477
Nsa(dp35478
S'description'
p35479
S'The names of the splits (subsystems) in the decomposition of this split\n'
p35480
sS'cpp_type'
p35481
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35482
sS'default'
p35483
g3
sS'name'
p35484
S'splitting'
p35485
sS'required'
p35486
I00
sS'group_name'
p35487
Nsa(dp35488
S'name'
p35489
S'splitting_type'
p35490
sS'cpp_type'
p35491
S'MooseEnum'
p35492
sS'default'
p35493
S'additive'
p35494
sS'description'
p35495
S'Split decomposition type\n'
p35496
sS'required'
p35497
I00
sS'options'
p35498
S'additive multiplicative symmetric_multiplicative schur'
p35499
sS'group_name'
p35500
Nsa(dp35501
S'description'
p35502
g3
sS'cpp_type'
p35503
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35504
sS'default'
p35505
S'ContactSplit'
p35506
sS'name'
p35507
S'type'
p35508
sS'required'
p35509
I00
sS'group_name'
p35510
Nsa(dp35511
S'description'
p35512
S'List of indicators whether displaced mesh is used to define excluded contact\n'
p35513
sS'cpp_type'
p35514
S'std::__1::vector<bool, std::__1::allocator<bool> >'
p35515
sS'default'
p35516
g3
sS'name'
p35517
S'uncontact_displaced'
p35518
sS'required'
p35519
I00
sS'group_name'
p35520
Nsa(dp35521
S'description'
p35522
S'Master surface list for excluded contacts\n'
p35523
sS'cpp_type'
p35524
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35525
sS'default'
p35526
g3
sS'name'
p35527
S'uncontact_master'
p35528
sS'required'
p35529
I00
sS'group_name'
p35530
Nsa(dp35531
S'description'
p35532
S'Slave surface list for excluded contacts\n'
p35533
sS'cpp_type'
p35534
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35535
sS'default'
p35536
g3
sS'name'
p35537
S'uncontact_slave'
p35538
sS'required'
p35539
I00
sS'group_name'
p35540
Nsa(dp35541
S'description'
p35542
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p35543
sS'cpp_type'
p35544
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35545
sS'default'
p35546
g3
sS'name'
p35547
S'unsides'
p35548
sS'required'
p35549
I00
sS'group_name'
p35550
Nsa(dp35551
S'description'
p35552
S'Variables Split operates on (omitting this implies "all variables"\n'
p35553
sS'cpp_type'
p35554
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p35555
sS'default'
p35556
g3
sS'name'
p35557
S'vars'
p35558
sS'required'
p35559
I00
sS'group_name'
p35560
NsasS'name'
p35561
S'/Splits/ContactSplit'
p35562
sa(dp35563
S'description'
p35564
g3
sS'subblocks'
p35565
NsS'parameters'
p35566
(lp35567
(dp35568
S'description'
p35569
S'Mesh blocks Split operates on (omitting this implies "all blocks"\n'
p35570
sS'cpp_type'
p35571
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p35572
sS'default'
p35573
g3
sS'name'
p35574
S'blocks'
p35575
sS'required'
p35576
I00
sS'group_name'
p35577
Nsa(dp35578
S'name'
p35579
S'petsc_options'
p35580
sS'cpp_type'
p35581
S'MultiMooseEnum'
p35582
sS'default'
p35583
g3
sS'description'
p35584
S'PETSc flags for the FieldSplit solver\n'
p35585
sS'required'
p35586
I00
sS'options'
p35587
S'-dm_moose_print_embedding -dm_view -ksp_converged_reason -ksp_gmres_modifiedgramschmidt -ksp_monitor -ksp_monitor_snes_lg-snes_ksp_ew -ksp_snes_ew -snes_converged_reason -snes_ksp -snes_ksp_ew -snes_linesearch_monitor -snes_mf -snes_mf_operator -snes_monitor -snes_test_display -snes_view -snew_ksp_ew'
p35588
sS'group_name'
p35589
Nsa(dp35590
S'name'
p35591
S'petsc_options_iname'
p35592
sS'cpp_type'
p35593
S'MultiMooseEnum'
p35594
sS'default'
p35595
g3
sS'description'
p35596
S'PETSc option names for the FieldSplit solver\n'
p35597
sS'required'
p35598
I00
sS'options'
p35599
S'-ksp_atol -ksp_gmres_restart -ksp_grmres_restart -ksp_max_it -ksp_pc_side -ksp_rtol -ksp_type -mat_fd_coloring_err -mat_fd_type -mat_mffd_type -pc_asm_overlap -pc_factor_levels -pc_factor_mat_ordering_type -pc_hypre_boomeramg_grid_sweeps_all -pc_hypre_boomeramg_max_iter -pc_hypre_boomeramg_strong_threshold -pc_hypre_type -pc_type -snes_atol -snes_linesearch_type -snes_ls -snes_max_it -snes_rtol -snes_type -sub_ksp_type -sub_pc_type'
p35600
sS'group_name'
p35601
Nsa(dp35602
S'description'
p35603
S'PETSc option values for the FieldSplit solver\n'
p35604
sS'cpp_type'
p35605
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35606
sS'default'
p35607
g3
sS'name'
p35608
S'petsc_options_value'
p35609
sS'required'
p35610
I00
sS'group_name'
p35611
Nsa(dp35612
S'name'
p35613
S'schur_ainv'
p35614
sS'cpp_type'
p35615
S'MooseEnum'
p35616
sS'default'
p35617
S'diag'
p35618
sS'description'
p35619
S'Type of approximation to inv(A) used when forming S = D - C inv(A) B\n'
p35620
sS'required'
p35621
I00
sS'options'
p35622
S'diag lump'
p35623
sS'group_name'
p35624
Nsa(dp35625
S'name'
p35626
S'schur_pre'
p35627
sS'cpp_type'
p35628
S'MooseEnum'
p35629
sS'default'
p35630
S'S'
p35631
sS'description'
p35632
S'Type of Schur complement preconditioner matrix\n'
p35633
sS'required'
p35634
I00
sS'options'
p35635
S'S Sp A11'
p35636
sS'group_name'
p35637
Nsa(dp35638
S'name'
p35639
S'schur_type'
p35640
sS'cpp_type'
p35641
S'MooseEnum'
p35642
sS'default'
p35643
S'full'
p35644
sS'description'
p35645
S'Type of Schur complement\n'
p35646
sS'required'
p35647
I00
sS'options'
p35648
S'full upper lower'
p35649
sS'group_name'
p35650
Nsa(dp35651
S'description'
p35652
S'Sidesets Split operates on (omitting this implies "no sidesets"\n'
p35653
sS'cpp_type'
p35654
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35655
sS'default'
p35656
g3
sS'name'
p35657
S'sides'
p35658
sS'required'
p35659
I00
sS'group_name'
p35660
Nsa(dp35661
S'description'
p35662
S'The names of the splits (subsystems) in the decomposition of this split\n'
p35663
sS'cpp_type'
p35664
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p35665
sS'default'
p35666
g3
sS'name'
p35667
S'splitting'
p35668
sS'required'
p35669
I00
sS'group_name'
p35670
Nsa(dp35671
S'name'
p35672
S'splitting_type'
p35673
sS'cpp_type'
p35674
S'MooseEnum'
p35675
sS'default'
p35676
S'additive'
p35677
sS'description'
p35678
S'Split decomposition type\n'
p35679
sS'required'
p35680
I00
sS'options'
p35681
S'additive multiplicative symmetric_multiplicative schur'
p35682
sS'group_name'
p35683
Nsa(dp35684
S'description'
p35685
g3
sS'cpp_type'
p35686
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35687
sS'default'
p35688
S'Split'
p35689
sS'name'
p35690
S'type'
p35691
sS'required'
p35692
I00
sS'group_name'
p35693
Nsa(dp35694
S'description'
p35695
S'Sidesets Split excludes (omitting this implies "do not exclude any sidesets"\n'
p35696
sS'cpp_type'
p35697
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p35698
sS'default'
p35699
g3
sS'name'
p35700
S'unsides'
p35701
sS'required'
p35702
I00
sS'group_name'
p35703
Nsa(dp35704
S'description'
p35705
S'Variables Split operates on (omitting this implies "all variables"\n'
p35706
sS'cpp_type'
p35707
S'std::__1::vector<NonlinearVariableName, std::__1::allocator<NonlinearVariableName> >'
p35708
sS'default'
p35709
g3
sS'name'
p35710
S'vars'
p35711
sS'required'
p35712
I00
sS'group_name'
p35713
NsasS'name'
p35714
S'/Splits/Split'
p35715
sasS'parameters'
p35716
NsS'name'
p35717
S'/Splits'
p35718
sa(dp35719
S'description'
p35720
g3
sS'subblocks'
p35721
(lp35722
(dp35723
S'description'
p35724
g3
sS'subblocks'
p35725
NsS'parameters'
p35726
(lp35727
(dp35728
S'description'
p35729
S'A string representing the Moose Object that will be built by this Action\n'
p35730
sS'cpp_type'
p35731
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35732
sS'default'
p35733
g3
sS'name'
p35734
S'type'
p35735
sS'required'
p35736
I01
sS'group_name'
p35737
NsasS'name'
p35738
S'/Transfers/*'
p35739
sa(dp35740
S'description'
p35741
g3
sS'subblocks'
p35742
NsS'parameters'
p35743
(lp35744
(dp35745
S'name'
p35746
S'direction'
p35747
sS'cpp_type'
p35748
S'MooseEnum'
p35749
sS'default'
p35750
g3
sS'description'
p35751
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p35752
sS'required'
p35753
I01
sS'options'
p35754
S'to_multiapp from_multiapp'
p35755
sS'group_name'
p35756
Nsa(dp35757
S'description'
p35758
S'Whether or not to use the displaced mesh for the source mesh.\n'
p35759
sS'cpp_type'
p35760
S'bool'
p35761
sS'default'
p35762
S'0'
p35763
sS'name'
p35764
S'displaced_source_mesh'
p35765
sS'required'
p35766
I00
sS'group_name'
p35767
Nsa(dp35768
S'description'
p35769
S'Whether or not to use the displaced mesh for the target mesh.\n'
p35770
sS'cpp_type'
p35771
S'bool'
p35772
sS'default'
p35773
S'0'
p35774
sS'name'
p35775
S'displaced_target_mesh'
p35776
sS'required'
p35777
I00
sS'group_name'
p35778
Nsa(dp35779
S'name'
p35780
S'execute_on'
p35781
sS'cpp_type'
p35782
S'MultiMooseEnum'
p35783
sS'default'
p35784
S'SAME_AS_MULTIAPP'
p35785
sS'description'
p35786
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35787
sS'required'
p35788
I00
sS'options'
p35789
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p35790
sS'group_name'
p35791
Nsa(dp35792
S'description'
p35793
S'The name of the MultiApp to use.\n'
p35794
sS'cpp_type'
p35795
S'MultiAppName'
p35796
sS'default'
p35797
g3
sS'name'
p35798
S'multi_app'
p35799
sS'required'
p35800
I01
sS'group_name'
p35801
Nsa(dp35802
S'description'
p35803
S'The variable to transfer from.\n'
p35804
sS'cpp_type'
p35805
S'VariableName'
p35806
sS'default'
p35807
g3
sS'name'
p35808
S'source_variable'
p35809
sS'required'
p35810
I01
sS'group_name'
p35811
Nsa(dp35812
S'description'
p35813
g3
sS'cpp_type'
p35814
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35815
sS'default'
p35816
S'MultiAppCopyTransfer'
p35817
sS'name'
p35818
S'type'
p35819
sS'required'
p35820
I00
sS'group_name'
p35821
Nsa(dp35822
S'description'
p35823
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35824
sS'cpp_type'
p35825
S'bool'
p35826
sS'default'
p35827
S'0'
p35828
sS'name'
p35829
S'use_displaced_mesh'
p35830
sS'required'
p35831
I00
sS'group_name'
p35832
S'Advanced'
p35833
sa(dp35834
S'description'
p35835
S'The auxiliary variable to store the transferred values in.\n'
p35836
sS'cpp_type'
p35837
S'AuxVariableName'
p35838
sS'default'
p35839
g3
sS'name'
p35840
S'variable'
p35841
sS'required'
p35842
I01
sS'group_name'
p35843
NsasS'name'
p35844
S'/Transfers/MultiAppCopyTransfer'
p35845
sa(dp35846
S'description'
p35847
g3
sS'subblocks'
p35848
NsS'parameters'
p35849
(lp35850
(dp35851
S'name'
p35852
S'direction'
p35853
sS'cpp_type'
p35854
S'MooseEnum'
p35855
sS'default'
p35856
g3
sS'description'
p35857
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p35858
sS'required'
p35859
I01
sS'options'
p35860
S'to_multiapp from_multiapp'
p35861
sS'group_name'
p35862
Nsa(dp35863
S'description'
p35864
S'Whether or not to use the displaced mesh for the source mesh.\n'
p35865
sS'cpp_type'
p35866
S'bool'
p35867
sS'default'
p35868
S'0'
p35869
sS'name'
p35870
S'displaced_source_mesh'
p35871
sS'required'
p35872
I00
sS'group_name'
p35873
Nsa(dp35874
S'description'
p35875
S'Whether or not to use the displaced mesh for the target mesh.\n'
p35876
sS'cpp_type'
p35877
S'bool'
p35878
sS'default'
p35879
S'0'
p35880
sS'name'
p35881
S'displaced_target_mesh'
p35882
sS'required'
p35883
I00
sS'group_name'
p35884
Nsa(dp35885
S'name'
p35886
S'execute_on'
p35887
sS'cpp_type'
p35888
S'MultiMooseEnum'
p35889
sS'default'
p35890
S'SAME_AS_MULTIAPP'
p35891
sS'description'
p35892
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p35893
sS'required'
p35894
I00
sS'options'
p35895
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p35896
sS'group_name'
p35897
Nsa(dp35898
S'name'
p35899
S'interp_type'
p35900
sS'cpp_type'
p35901
S'MooseEnum'
p35902
sS'default'
p35903
S'inverse_distance'
p35904
sS'description'
p35905
S'The algorithm to use for interpolation.\n'
p35906
sS'required'
p35907
I00
sS'options'
p35908
S'inverse_distance radial_basis'
p35909
sS'group_name'
p35910
Nsa(dp35911
S'description'
p35912
S'The name of the MultiApp to use.\n'
p35913
sS'cpp_type'
p35914
S'MultiAppName'
p35915
sS'default'
p35916
g3
sS'name'
p35917
S'multi_app'
p35918
sS'required'
p35919
I01
sS'group_name'
p35920
Nsa(dp35921
S'description'
p35922
S'The number of nearest points to use for interpolation.\n'
p35923
sS'cpp_type'
p35924
S'unsigned int'
p35925
sS'default'
p35926
S'3'
p35927
sS'name'
p35928
S'num_points'
p35929
sS'required'
p35930
I00
sS'group_name'
p35931
Nsa(dp35932
S'description'
p35933
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p35934
sS'cpp_type'
p35935
S'double'
p35936
sS'default'
p35937
S'2'
p35938
sS'name'
p35939
S'power'
p35940
sS'required'
p35941
I00
sS'group_name'
p35942
Nsa(dp35943
S'description'
p35944
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p35945
sS'cpp_type'
p35946
S'double'
p35947
sS'default'
p35948
S'-1'
p35949
sS'name'
p35950
S'radius'
p35951
sS'required'
p35952
I00
sS'group_name'
p35953
Nsa(dp35954
S'description'
p35955
S'The variable to transfer from.\n'
p35956
sS'cpp_type'
p35957
S'VariableName'
p35958
sS'default'
p35959
g3
sS'name'
p35960
S'source_variable'
p35961
sS'required'
p35962
I01
sS'group_name'
p35963
Nsa(dp35964
S'description'
p35965
g3
sS'cpp_type'
p35966
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p35967
sS'default'
p35968
S'MultiAppInterpolationTransfer'
p35969
sS'name'
p35970
S'type'
p35971
sS'required'
p35972
I00
sS'group_name'
p35973
Nsa(dp35974
S'description'
p35975
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p35976
sS'cpp_type'
p35977
S'bool'
p35978
sS'default'
p35979
S'0'
p35980
sS'name'
p35981
S'use_displaced_mesh'
p35982
sS'required'
p35983
I00
sS'group_name'
p35984
S'Advanced'
p35985
sa(dp35986
S'description'
p35987
S'The auxiliary variable to store the transferred values in.\n'
p35988
sS'cpp_type'
p35989
S'AuxVariableName'
p35990
sS'default'
p35991
g3
sS'name'
p35992
S'variable'
p35993
sS'required'
p35994
I01
sS'group_name'
p35995
NsasS'name'
p35996
S'/Transfers/MultiAppInterpolationTransfer'
p35997
sa(dp35998
S'description'
p35999
g3
sS'subblocks'
p36000
NsS'parameters'
p36001
(lp36002
(dp36003
S'name'
p36004
S'direction'
p36005
sS'cpp_type'
p36006
S'MooseEnum'
p36007
sS'default'
p36008
g3
sS'description'
p36009
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36010
sS'required'
p36011
I01
sS'options'
p36012
S'to_multiapp from_multiapp'
p36013
sS'group_name'
p36014
Nsa(dp36015
S'description'
p36016
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36017
sS'cpp_type'
p36018
S'bool'
p36019
sS'default'
p36020
S'0'
p36021
sS'name'
p36022
S'displaced_source_mesh'
p36023
sS'required'
p36024
I00
sS'group_name'
p36025
Nsa(dp36026
S'description'
p36027
S'Whether or not to use the displaced mesh for the target mesh.\n'
p36028
sS'cpp_type'
p36029
S'bool'
p36030
sS'default'
p36031
S'0'
p36032
sS'name'
p36033
S'displaced_target_mesh'
p36034
sS'required'
p36035
I00
sS'group_name'
p36036
Nsa(dp36037
S'description'
p36038
S'Whether or not to error in the case that a target point is not found in the source domain.\n'
p36039
sS'cpp_type'
p36040
S'bool'
p36041
sS'default'
p36042
S'0'
p36043
sS'name'
p36044
S'error_on_miss'
p36045
sS'required'
p36046
I00
sS'group_name'
p36047
Nsa(dp36048
S'name'
p36049
S'execute_on'
p36050
sS'cpp_type'
p36051
S'MultiMooseEnum'
p36052
sS'default'
p36053
S'SAME_AS_MULTIAPP'
p36054
sS'description'
p36055
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36056
sS'required'
p36057
I00
sS'options'
p36058
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p36059
sS'group_name'
p36060
Nsa(dp36061
S'description'
p36062
S'The name of the MultiApp to use.\n'
p36063
sS'cpp_type'
p36064
S'MultiAppName'
p36065
sS'default'
p36066
g3
sS'name'
p36067
S'multi_app'
p36068
sS'required'
p36069
I01
sS'group_name'
p36070
Nsa(dp36071
S'description'
p36072
S'The variable to transfer from.\n'
p36073
sS'cpp_type'
p36074
S'VariableName'
p36075
sS'default'
p36076
g3
sS'name'
p36077
S'source_variable'
p36078
sS'required'
p36079
I01
sS'group_name'
p36080
Nsa(dp36081
S'description'
p36082
g3
sS'cpp_type'
p36083
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36084
sS'default'
p36085
S'MultiAppMeshFunctionTransfer'
p36086
sS'name'
p36087
S'type'
p36088
sS'required'
p36089
I00
sS'group_name'
p36090
Nsa(dp36091
S'description'
p36092
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36093
sS'cpp_type'
p36094
S'bool'
p36095
sS'default'
p36096
S'0'
p36097
sS'name'
p36098
S'use_displaced_mesh'
p36099
sS'required'
p36100
I00
sS'group_name'
p36101
S'Advanced'
p36102
sa(dp36103
S'description'
p36104
S'The auxiliary variable to store the transferred values in.\n'
p36105
sS'cpp_type'
p36106
S'AuxVariableName'
p36107
sS'default'
p36108
g3
sS'name'
p36109
S'variable'
p36110
sS'required'
p36111
I01
sS'group_name'
p36112
NsasS'name'
p36113
S'/Transfers/MultiAppMeshFunctionTransfer'
p36114
sa(dp36115
S'description'
p36116
g3
sS'subblocks'
p36117
NsS'parameters'
p36118
(lp36119
(dp36120
S'name'
p36121
S'direction'
p36122
sS'cpp_type'
p36123
S'MooseEnum'
p36124
sS'default'
p36125
g3
sS'description'
p36126
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36127
sS'required'
p36128
I01
sS'options'
p36129
S'to_multiapp from_multiapp'
p36130
sS'group_name'
p36131
Nsa(dp36132
S'description'
p36133
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36134
sS'cpp_type'
p36135
S'bool'
p36136
sS'default'
p36137
S'0'
p36138
sS'name'
p36139
S'displaced_source_mesh'
p36140
sS'required'
p36141
I00
sS'group_name'
p36142
Nsa(dp36143
S'description'
p36144
S'Whether or not to use the displaced mesh for the target mesh.\n'
p36145
sS'cpp_type'
p36146
S'bool'
p36147
sS'default'
p36148
S'0'
p36149
sS'name'
p36150
S'displaced_target_mesh'
p36151
sS'required'
p36152
I00
sS'group_name'
p36153
Nsa(dp36154
S'name'
p36155
S'execute_on'
p36156
sS'cpp_type'
p36157
S'MultiMooseEnum'
p36158
sS'default'
p36159
S'SAME_AS_MULTIAPP'
p36160
sS'description'
p36161
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36162
sS'required'
p36163
I00
sS'options'
p36164
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p36165
sS'group_name'
p36166
Nsa(dp36167
S'description'
p36168
S'Set to true when the meshes are not changing (ie, no movement or adaptivity).  This will cache nearest node neighbors to greatly speed up the transfer.\n'
p36169
sS'cpp_type'
p36170
S'bool'
p36171
sS'default'
p36172
S'0'
p36173
sS'name'
p36174
S'fixed_meshes'
p36175
sS'required'
p36176
I00
sS'group_name'
p36177
Nsa(dp36178
S'description'
p36179
S'The name of the MultiApp to use.\n'
p36180
sS'cpp_type'
p36181
S'MultiAppName'
p36182
sS'default'
p36183
g3
sS'name'
p36184
S'multi_app'
p36185
sS'required'
p36186
I01
sS'group_name'
p36187
Nsa(dp36188
S'description'
p36189
S'The boundary we are transferring from (if not specified, whole domain is used).\n'
p36190
sS'cpp_type'
p36191
S'BoundaryName'
p36192
sS'default'
p36193
g3
sS'name'
p36194
S'source_boundary'
p36195
sS'required'
p36196
I00
sS'group_name'
p36197
Nsa(dp36198
S'description'
p36199
S'The variable to transfer from.\n'
p36200
sS'cpp_type'
p36201
S'VariableName'
p36202
sS'default'
p36203
g3
sS'name'
p36204
S'source_variable'
p36205
sS'required'
p36206
I01
sS'group_name'
p36207
Nsa(dp36208
S'description'
p36209
g3
sS'cpp_type'
p36210
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36211
sS'default'
p36212
S'MultiAppNearestNodeTransfer'
p36213
sS'name'
p36214
S'type'
p36215
sS'required'
p36216
I00
sS'group_name'
p36217
Nsa(dp36218
S'description'
p36219
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36220
sS'cpp_type'
p36221
S'bool'
p36222
sS'default'
p36223
S'0'
p36224
sS'name'
p36225
S'use_displaced_mesh'
p36226
sS'required'
p36227
I00
sS'group_name'
p36228
S'Advanced'
p36229
sa(dp36230
S'description'
p36231
S'The auxiliary variable to store the transferred values in.\n'
p36232
sS'cpp_type'
p36233
S'AuxVariableName'
p36234
sS'default'
p36235
g3
sS'name'
p36236
S'variable'
p36237
sS'required'
p36238
I01
sS'group_name'
p36239
NsasS'name'
p36240
S'/Transfers/MultiAppNearestNodeTransfer'
p36241
sa(dp36242
S'description'
p36243
g3
sS'subblocks'
p36244
NsS'parameters'
p36245
(lp36246
(dp36247
S'name'
p36248
S'direction'
p36249
sS'cpp_type'
p36250
S'MooseEnum'
p36251
sS'default'
p36252
g3
sS'description'
p36253
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36254
sS'required'
p36255
I01
sS'options'
p36256
S'to_multiapp from_multiapp'
p36257
sS'group_name'
p36258
Nsa(dp36259
S'description'
p36260
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36261
sS'cpp_type'
p36262
S'bool'
p36263
sS'default'
p36264
S'0'
p36265
sS'name'
p36266
S'displaced_source_mesh'
p36267
sS'required'
p36268
I00
sS'group_name'
p36269
Nsa(dp36270
S'description'
p36271
S'Whether or not to use the displaced mesh for the target mesh.\n'
p36272
sS'cpp_type'
p36273
S'bool'
p36274
sS'default'
p36275
S'0'
p36276
sS'name'
p36277
S'displaced_target_mesh'
p36278
sS'required'
p36279
I00
sS'group_name'
p36280
Nsa(dp36281
S'name'
p36282
S'execute_on'
p36283
sS'cpp_type'
p36284
S'MultiMooseEnum'
p36285
sS'default'
p36286
S'SAME_AS_MULTIAPP'
p36287
sS'description'
p36288
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36289
sS'required'
p36290
I00
sS'options'
p36291
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p36292
sS'group_name'
p36293
Nsa(dp36294
S'name'
p36295
S'interp_type'
p36296
sS'cpp_type'
p36297
S'MooseEnum'
p36298
sS'default'
p36299
S'inverse_distance'
p36300
sS'description'
p36301
S'The algorithm to use for interpolation.\n'
p36302
sS'required'
p36303
I00
sS'options'
p36304
S'inverse_distance radial_basis'
p36305
sS'group_name'
p36306
Nsa(dp36307
S'description'
p36308
S'The name of the MultiApp to use.\n'
p36309
sS'cpp_type'
p36310
S'MultiAppName'
p36311
sS'default'
p36312
g3
sS'name'
p36313
S'multi_app'
p36314
sS'required'
p36315
I01
sS'group_name'
p36316
Nsa(dp36317
S'description'
p36318
S'The number of nearest points to use for interpolation.\n'
p36319
sS'cpp_type'
p36320
S'unsigned int'
p36321
sS'default'
p36322
S'3'
p36323
sS'name'
p36324
S'num_points'
p36325
sS'required'
p36326
I00
sS'group_name'
p36327
Nsa(dp36328
S'description'
p36329
S'The Postprocessor to interpolate.\n'
p36330
sS'cpp_type'
p36331
S'PostprocessorName'
p36332
sS'default'
p36333
g3
sS'name'
p36334
S'postprocessor'
p36335
sS'required'
p36336
I01
sS'group_name'
p36337
Nsa(dp36338
S'description'
p36339
S'The polynomial power to use for calculation of the decay in the interpolation.\n'
p36340
sS'cpp_type'
p36341
S'double'
p36342
sS'default'
p36343
S'2'
p36344
sS'name'
p36345
S'power'
p36346
sS'required'
p36347
I00
sS'group_name'
p36348
Nsa(dp36349
S'description'
p36350
S'Radius to use for radial_basis interpolation.  If negative then the radius is taken as the max distance between points.\n'
p36351
sS'cpp_type'
p36352
S'double'
p36353
sS'default'
p36354
S'-1'
p36355
sS'name'
p36356
S'radius'
p36357
sS'required'
p36358
I00
sS'group_name'
p36359
Nsa(dp36360
S'description'
p36361
g3
sS'cpp_type'
p36362
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36363
sS'default'
p36364
S'MultiAppPostprocessorInterpolationTransfer'
p36365
sS'name'
p36366
S'type'
p36367
sS'required'
p36368
I00
sS'group_name'
p36369
Nsa(dp36370
S'description'
p36371
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36372
sS'cpp_type'
p36373
S'bool'
p36374
sS'default'
p36375
S'0'
p36376
sS'name'
p36377
S'use_displaced_mesh'
p36378
sS'required'
p36379
I00
sS'group_name'
p36380
S'Advanced'
p36381
sa(dp36382
S'description'
p36383
S'The auxiliary variable to store the transferred values in.\n'
p36384
sS'cpp_type'
p36385
S'AuxVariableName'
p36386
sS'default'
p36387
g3
sS'name'
p36388
S'variable'
p36389
sS'required'
p36390
I01
sS'group_name'
p36391
NsasS'name'
p36392
S'/Transfers/MultiAppPostprocessorInterpolationTransfer'
p36393
sa(dp36394
S'description'
p36395
g3
sS'subblocks'
p36396
NsS'parameters'
p36397
(lp36398
(dp36399
S'name'
p36400
S'direction'
p36401
sS'cpp_type'
p36402
S'MooseEnum'
p36403
sS'default'
p36404
g3
sS'description'
p36405
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36406
sS'required'
p36407
I01
sS'options'
p36408
S'to_multiapp from_multiapp'
p36409
sS'group_name'
p36410
Nsa(dp36411
S'description'
p36412
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36413
sS'cpp_type'
p36414
S'bool'
p36415
sS'default'
p36416
S'0'
p36417
sS'name'
p36418
S'displaced_source_mesh'
p36419
sS'required'
p36420
I00
sS'group_name'
p36421
Nsa(dp36422
S'description'
p36423
S'Whether or not to use the displaced mesh for the target mesh.\n'
p36424
sS'cpp_type'
p36425
S'bool'
p36426
sS'default'
p36427
S'0'
p36428
sS'name'
p36429
S'displaced_target_mesh'
p36430
sS'required'
p36431
I00
sS'group_name'
p36432
Nsa(dp36433
S'name'
p36434
S'execute_on'
p36435
sS'cpp_type'
p36436
S'MultiMooseEnum'
p36437
sS'default'
p36438
S'SAME_AS_MULTIAPP'
p36439
sS'description'
p36440
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36441
sS'required'
p36442
I00
sS'options'
p36443
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p36444
sS'group_name'
p36445
Nsa(dp36446
S'description'
p36447
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p36448
sS'cpp_type'
p36449
S'PostprocessorName'
p36450
sS'default'
p36451
g3
sS'name'
p36452
S'from_postprocessor'
p36453
sS'required'
p36454
I01
sS'group_name'
p36455
Nsa(dp36456
S'description'
p36457
S'The name of the MultiApp to use.\n'
p36458
sS'cpp_type'
p36459
S'MultiAppName'
p36460
sS'default'
p36461
g3
sS'name'
p36462
S'multi_app'
p36463
sS'required'
p36464
I01
sS'group_name'
p36465
Nsa(dp36466
S'description'
p36467
S'The name of the scalar Aux variable in the MultiApp to transfer the value to.\n'
p36468
sS'cpp_type'
p36469
S'VariableName'
p36470
sS'default'
p36471
g3
sS'name'
p36472
S'to_aux_scalar'
p36473
sS'required'
p36474
I01
sS'group_name'
p36475
Nsa(dp36476
S'description'
p36477
g3
sS'cpp_type'
p36478
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36479
sS'default'
p36480
S'MultiAppPostprocessorToAuxScalarTransfer'
p36481
sS'name'
p36482
S'type'
p36483
sS'required'
p36484
I00
sS'group_name'
p36485
Nsa(dp36486
S'description'
p36487
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36488
sS'cpp_type'
p36489
S'bool'
p36490
sS'default'
p36491
S'0'
p36492
sS'name'
p36493
S'use_displaced_mesh'
p36494
sS'required'
p36495
I00
sS'group_name'
p36496
S'Advanced'
p36497
sasS'name'
p36498
S'/Transfers/MultiAppPostprocessorToAuxScalarTransfer'
p36499
sa(dp36500
S'description'
p36501
g3
sS'subblocks'
p36502
NsS'parameters'
p36503
(lp36504
(dp36505
S'name'
p36506
S'direction'
p36507
sS'cpp_type'
p36508
S'MooseEnum'
p36509
sS'default'
p36510
g3
sS'description'
p36511
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36512
sS'required'
p36513
I01
sS'options'
p36514
S'to_multiapp from_multiapp'
p36515
sS'group_name'
p36516
Nsa(dp36517
S'description'
p36518
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36519
sS'cpp_type'
p36520
S'bool'
p36521
sS'default'
p36522
S'0'
p36523
sS'name'
p36524
S'displaced_source_mesh'
p36525
sS'required'
p36526
I00
sS'group_name'
p36527
Nsa(dp36528
S'description'
p36529
S'Whether or not to use the displaced mesh for the target mesh.\n'
p36530
sS'cpp_type'
p36531
S'bool'
p36532
sS'default'
p36533
S'0'
p36534
sS'name'
p36535
S'displaced_target_mesh'
p36536
sS'required'
p36537
I00
sS'group_name'
p36538
Nsa(dp36539
S'name'
p36540
S'execute_on'
p36541
sS'cpp_type'
p36542
S'MultiMooseEnum'
p36543
sS'default'
p36544
S'SAME_AS_MULTIAPP'
p36545
sS'description'
p36546
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36547
sS'required'
p36548
I00
sS'options'
p36549
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p36550
sS'group_name'
p36551
Nsa(dp36552
S'description'
p36553
S'The name of the Postprocessor in the Master to transfer the value from.\n'
p36554
sS'cpp_type'
p36555
S'PostprocessorName'
p36556
sS'default'
p36557
g3
sS'name'
p36558
S'from_postprocessor'
p36559
sS'required'
p36560
I01
sS'group_name'
p36561
Nsa(dp36562
S'description'
p36563
S'The name of the MultiApp to use.\n'
p36564
sS'cpp_type'
p36565
S'MultiAppName'
p36566
sS'default'
p36567
g3
sS'name'
p36568
S'multi_app'
p36569
sS'required'
p36570
I01
sS'group_name'
p36571
Nsa(dp36572
S'name'
p36573
S'reduction_type'
p36574
sS'cpp_type'
p36575
S'MooseEnum'
p36576
sS'default'
p36577
g3
sS'description'
p36578
S'The type of reduction to perform to reduce postprocessor values from multiple SubApps to a single value\n'
p36579
sS'required'
p36580
I00
sS'options'
p36581
S'average sum maximum minimum'
p36582
sS'group_name'
p36583
Nsa(dp36584
S'description'
p36585
S'The name of the Postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p36586
sS'cpp_type'
p36587
S'PostprocessorName'
p36588
sS'default'
p36589
g3
sS'name'
p36590
S'to_postprocessor'
p36591
sS'required'
p36592
I01
sS'group_name'
p36593
Nsa(dp36594
S'description'
p36595
g3
sS'cpp_type'
p36596
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36597
sS'default'
p36598
S'MultiAppPostprocessorTransfer'
p36599
sS'name'
p36600
S'type'
p36601
sS'required'
p36602
I00
sS'group_name'
p36603
Nsa(dp36604
S'description'
p36605
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36606
sS'cpp_type'
p36607
S'bool'
p36608
sS'default'
p36609
S'0'
p36610
sS'name'
p36611
S'use_displaced_mesh'
p36612
sS'required'
p36613
I00
sS'group_name'
p36614
S'Advanced'
p36615
sasS'name'
p36616
S'/Transfers/MultiAppPostprocessorTransfer'
p36617
sa(dp36618
S'description'
p36619
g3
sS'subblocks'
p36620
NsS'parameters'
p36621
(lp36622
(dp36623
S'name'
p36624
S'direction'
p36625
sS'cpp_type'
p36626
S'MooseEnum'
p36627
sS'default'
p36628
g3
sS'description'
p36629
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36630
sS'required'
p36631
I01
sS'options'
p36632
S'to_multiapp from_multiapp'
p36633
sS'group_name'
p36634
Nsa(dp36635
S'description'
p36636
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36637
sS'cpp_type'
p36638
S'bool'
p36639
sS'default'
p36640
S'0'
p36641
sS'name'
p36642
S'displaced_source_mesh'
p36643
sS'required'
p36644
I00
sS'group_name'
p36645
Nsa(dp36646
S'description'
p36647
S'Whether or not to use the displaced mesh for the target mesh.\n'
p36648
sS'cpp_type'
p36649
S'bool'
p36650
sS'default'
p36651
S'0'
p36652
sS'name'
p36653
S'displaced_target_mesh'
p36654
sS'required'
p36655
I00
sS'group_name'
p36656
Nsa(dp36657
S'name'
p36658
S'execute_on'
p36659
sS'cpp_type'
p36660
S'MultiMooseEnum'
p36661
sS'default'
p36662
S'SAME_AS_MULTIAPP'
p36663
sS'description'
p36664
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36665
sS'required'
p36666
I00
sS'options'
p36667
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p36668
sS'group_name'
p36669
Nsa(dp36670
S'name'
p36671
S'family'
p36672
sS'cpp_type'
p36673
S'MooseEnum'
p36674
sS'default'
p36675
S'LAGRANGE'
p36676
sS'description'
p36677
S'Specifies the family of FE shape functions to use for this variable\n'
p36678
sS'required'
p36679
I00
sS'options'
p36680
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p36681
sS'group_name'
p36682
Nsa(dp36683
S'description'
p36684
S'The name of the MultiApp to use.\n'
p36685
sS'cpp_type'
p36686
S'MultiAppName'
p36687
sS'default'
p36688
g3
sS'name'
p36689
S'multi_app'
p36690
sS'required'
p36691
I01
sS'group_name'
p36692
Nsa(dp36693
S'name'
p36694
S'order'
p36695
sS'cpp_type'
p36696
S'MooseEnum'
p36697
sS'default'
p36698
S'FIRST'
p36699
sS'description'
p36700
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p36701
sS'required'
p36702
I00
sS'options'
p36703
S'CONSTANT FIRST SECOND THIRD FOURTH'
p36704
sS'group_name'
p36705
Nsa(dp36706
S'name'
p36707
S'proj_type'
p36708
sS'cpp_type'
p36709
S'MooseEnum'
p36710
sS'default'
p36711
S'l2'
p36712
sS'description'
p36713
S'The type of the projection.\n'
p36714
sS'required'
p36715
I00
sS'options'
p36716
S'l2'
p36717
sS'group_name'
p36718
Nsa(dp36719
S'description'
p36720
S'The variable to transfer from.\n'
p36721
sS'cpp_type'
p36722
S'VariableName'
p36723
sS'default'
p36724
g3
sS'name'
p36725
S'source_variable'
p36726
sS'required'
p36727
I01
sS'group_name'
p36728
Nsa(dp36729
S'description'
p36730
g3
sS'cpp_type'
p36731
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36732
sS'default'
p36733
S'MultiAppProjectionTransfer'
p36734
sS'name'
p36735
S'type'
p36736
sS'required'
p36737
I00
sS'group_name'
p36738
Nsa(dp36739
S'description'
p36740
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36741
sS'cpp_type'
p36742
S'bool'
p36743
sS'default'
p36744
S'0'
p36745
sS'name'
p36746
S'use_displaced_mesh'
p36747
sS'required'
p36748
I00
sS'group_name'
p36749
S'Advanced'
p36750
sa(dp36751
S'description'
p36752
S'The auxiliary variable to store the transferred values in.\n'
p36753
sS'cpp_type'
p36754
S'AuxVariableName'
p36755
sS'default'
p36756
g3
sS'name'
p36757
S'variable'
p36758
sS'required'
p36759
I01
sS'group_name'
p36760
NsasS'name'
p36761
S'/Transfers/MultiAppProjectionTransfer'
p36762
sa(dp36763
S'description'
p36764
g3
sS'subblocks'
p36765
NsS'parameters'
p36766
(lp36767
(dp36768
S'name'
p36769
S'direction'
p36770
sS'cpp_type'
p36771
S'MooseEnum'
p36772
sS'default'
p36773
g3
sS'description'
p36774
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36775
sS'required'
p36776
I01
sS'options'
p36777
S'to_multiapp from_multiapp'
p36778
sS'group_name'
p36779
Nsa(dp36780
S'description'
p36781
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36782
sS'cpp_type'
p36783
S'bool'
p36784
sS'default'
p36785
S'0'
p36786
sS'name'
p36787
S'displaced_source_mesh'
p36788
sS'required'
p36789
I00
sS'group_name'
p36790
Nsa(dp36791
S'description'
p36792
S'Whether or not to use the displaced mesh for the target mesh.\n'
p36793
sS'cpp_type'
p36794
S'bool'
p36795
sS'default'
p36796
S'0'
p36797
sS'name'
p36798
S'displaced_target_mesh'
p36799
sS'required'
p36800
I00
sS'group_name'
p36801
Nsa(dp36802
S'name'
p36803
S'execute_on'
p36804
sS'cpp_type'
p36805
S'MultiMooseEnum'
p36806
sS'default'
p36807
S'SAME_AS_MULTIAPP'
p36808
sS'description'
p36809
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36810
sS'required'
p36811
I00
sS'options'
p36812
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p36813
sS'group_name'
p36814
Nsa(dp36815
S'description'
p36816
S'The name of the MultiApp to use.\n'
p36817
sS'cpp_type'
p36818
S'MultiAppName'
p36819
sS'default'
p36820
g3
sS'name'
p36821
S'multi_app'
p36822
sS'required'
p36823
I01
sS'group_name'
p36824
Nsa(dp36825
S'description'
p36826
g3
sS'cpp_type'
p36827
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36828
sS'default'
p36829
S'MultiAppUserObjectTransfer'
p36830
sS'name'
p36831
S'type'
p36832
sS'required'
p36833
I00
sS'group_name'
p36834
Nsa(dp36835
S'description'
p36836
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36837
sS'cpp_type'
p36838
S'bool'
p36839
sS'default'
p36840
S'0'
p36841
sS'name'
p36842
S'use_displaced_mesh'
p36843
sS'required'
p36844
I00
sS'group_name'
p36845
S'Advanced'
p36846
sa(dp36847
S'description'
p36848
S"The UserObject you want to transfer values from.  Note: This might be a UserObject from your MultiApp's input file!\n"
p36849
sS'cpp_type'
p36850
S'UserObjectName'
p36851
sS'default'
p36852
g3
sS'name'
p36853
S'user_object'
p36854
sS'required'
p36855
I01
sS'group_name'
p36856
Nsa(dp36857
S'description'
p36858
S'The auxiliary variable to store the transferred values in.\n'
p36859
sS'cpp_type'
p36860
S'AuxVariableName'
p36861
sS'default'
p36862
g3
sS'name'
p36863
S'variable'
p36864
sS'required'
p36865
I01
sS'group_name'
p36866
NsasS'name'
p36867
S'/Transfers/MultiAppUserObjectTransfer'
p36868
sa(dp36869
S'description'
p36870
g3
sS'subblocks'
p36871
NsS'parameters'
p36872
(lp36873
(dp36874
S'name'
p36875
S'direction'
p36876
sS'cpp_type'
p36877
S'MooseEnum'
p36878
sS'default'
p36879
g3
sS'description'
p36880
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36881
sS'required'
p36882
I01
sS'options'
p36883
S'to_multiapp from_multiapp'
p36884
sS'group_name'
p36885
Nsa(dp36886
S'description'
p36887
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36888
sS'cpp_type'
p36889
S'bool'
p36890
sS'default'
p36891
S'0'
p36892
sS'name'
p36893
S'displaced_source_mesh'
p36894
sS'required'
p36895
I00
sS'group_name'
p36896
Nsa(dp36897
S'description'
p36898
S'Whether or not to use the displaced mesh for the target mesh.\n'
p36899
sS'cpp_type'
p36900
S'bool'
p36901
sS'default'
p36902
S'0'
p36903
sS'name'
p36904
S'displaced_target_mesh'
p36905
sS'required'
p36906
I00
sS'group_name'
p36907
Nsa(dp36908
S'name'
p36909
S'execute_on'
p36910
sS'cpp_type'
p36911
S'MultiMooseEnum'
p36912
sS'default'
p36913
S'SAME_AS_MULTIAPP'
p36914
sS'description'
p36915
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p36916
sS'required'
p36917
I00
sS'options'
p36918
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p36919
sS'group_name'
p36920
Nsa(dp36921
S'description'
p36922
S'The name of the MultiApp to use.\n'
p36923
sS'cpp_type'
p36924
S'MultiAppName'
p36925
sS'default'
p36926
g3
sS'name'
p36927
S'multi_app'
p36928
sS'required'
p36929
I01
sS'group_name'
p36930
Nsa(dp36931
S'description'
p36932
S'The name of the postprocessor in the MultiApp to transfer the value to.  This should most likely be a Reporter Postprocessor.\n'
p36933
sS'cpp_type'
p36934
S'PostprocessorName'
p36935
sS'default'
p36936
g3
sS'name'
p36937
S'postprocessor'
p36938
sS'required'
p36939
I01
sS'group_name'
p36940
Nsa(dp36941
S'description'
p36942
S'The variable to transfer from.\n'
p36943
sS'cpp_type'
p36944
S'VariableName'
p36945
sS'default'
p36946
g3
sS'name'
p36947
S'source_variable'
p36948
sS'required'
p36949
I01
sS'group_name'
p36950
Nsa(dp36951
S'description'
p36952
g3
sS'cpp_type'
p36953
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p36954
sS'default'
p36955
S'MultiAppVariableValueSamplePostprocessorTransfer'
p36956
sS'name'
p36957
S'type'
p36958
sS'required'
p36959
I00
sS'group_name'
p36960
Nsa(dp36961
S'description'
p36962
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p36963
sS'cpp_type'
p36964
S'bool'
p36965
sS'default'
p36966
S'0'
p36967
sS'name'
p36968
S'use_displaced_mesh'
p36969
sS'required'
p36970
I00
sS'group_name'
p36971
S'Advanced'
p36972
sasS'name'
p36973
S'/Transfers/MultiAppVariableValueSamplePostprocessorTransfer'
p36974
sa(dp36975
S'description'
p36976
g3
sS'subblocks'
p36977
NsS'parameters'
p36978
(lp36979
(dp36980
S'name'
p36981
S'direction'
p36982
sS'cpp_type'
p36983
S'MooseEnum'
p36984
sS'default'
p36985
g3
sS'description'
p36986
S"Whether this Transfer will be 'to' or 'from' a MultiApp.\n"
p36987
sS'required'
p36988
I01
sS'options'
p36989
S'to_multiapp from_multiapp'
p36990
sS'group_name'
p36991
Nsa(dp36992
S'description'
p36993
S'Whether or not to use the displaced mesh for the source mesh.\n'
p36994
sS'cpp_type'
p36995
S'bool'
p36996
sS'default'
p36997
S'0'
p36998
sS'name'
p36999
S'displaced_source_mesh'
p37000
sS'required'
p37001
I00
sS'group_name'
p37002
Nsa(dp37003
S'description'
p37004
S'Whether or not to use the displaced mesh for the target mesh.\n'
p37005
sS'cpp_type'
p37006
S'bool'
p37007
sS'default'
p37008
S'0'
p37009
sS'name'
p37010
S'displaced_target_mesh'
p37011
sS'required'
p37012
I00
sS'group_name'
p37013
Nsa(dp37014
S'name'
p37015
S'execute_on'
p37016
sS'cpp_type'
p37017
S'MultiMooseEnum'
p37018
sS'default'
p37019
S'SAME_AS_MULTIAPP'
p37020
sS'description'
p37021
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37022
sS'required'
p37023
I00
sS'options'
p37024
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep same_as_multiapp'
p37025
sS'group_name'
p37026
Nsa(dp37027
S'description'
p37028
S'The name of the MultiApp to use.\n'
p37029
sS'cpp_type'
p37030
S'MultiAppName'
p37031
sS'default'
p37032
g3
sS'name'
p37033
S'multi_app'
p37034
sS'required'
p37035
I01
sS'group_name'
p37036
Nsa(dp37037
S'description'
p37038
S'The variable to transfer from.\n'
p37039
sS'cpp_type'
p37040
S'VariableName'
p37041
sS'default'
p37042
g3
sS'name'
p37043
S'source_variable'
p37044
sS'required'
p37045
I01
sS'group_name'
p37046
Nsa(dp37047
S'description'
p37048
g3
sS'cpp_type'
p37049
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37050
sS'default'
p37051
S'MultiAppVariableValueSampleTransfer'
p37052
sS'name'
p37053
S'type'
p37054
sS'required'
p37055
I00
sS'group_name'
p37056
Nsa(dp37057
S'description'
p37058
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37059
sS'cpp_type'
p37060
S'bool'
p37061
sS'default'
p37062
S'0'
p37063
sS'name'
p37064
S'use_displaced_mesh'
p37065
sS'required'
p37066
I00
sS'group_name'
p37067
S'Advanced'
p37068
sa(dp37069
S'description'
p37070
S'The auxiliary variable to store the transferred values in.\n'
p37071
sS'cpp_type'
p37072
S'AuxVariableName'
p37073
sS'default'
p37074
g3
sS'name'
p37075
S'variable'
p37076
sS'required'
p37077
I01
sS'group_name'
p37078
NsasS'name'
p37079
S'/Transfers/MultiAppVariableValueSampleTransfer'
p37080
sasS'parameters'
p37081
NsS'name'
p37082
S'/Transfers'
p37083
sa(dp37084
S'description'
p37085
g3
sS'subblocks'
p37086
(lp37087
(dp37088
S'description'
p37089
g3
sS'subblocks'
p37090
NsS'parameters'
p37091
(lp37092
(dp37093
S'description'
p37094
S'A string representing the Moose Object that will be built by this Action\n'
p37095
sS'cpp_type'
p37096
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37097
sS'default'
p37098
g3
sS'name'
p37099
S'type'
p37100
sS'required'
p37101
I01
sS'group_name'
p37102
NsasS'name'
p37103
S'/UserObjects/*'
p37104
sa(dp37105
S'description'
p37106
g3
sS'subblocks'
p37107
NsS'parameters'
p37108
(lp37109
(dp37110
S'description'
p37111
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37112
sS'cpp_type'
p37113
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p37114
sS'default'
p37115
g3
sS'name'
p37116
S'boundary'
p37117
sS'required'
p37118
I00
sS'group_name'
p37119
Nsa(dp37120
S'name'
p37121
S'execute_on'
p37122
sS'cpp_type'
p37123
S'MultiMooseEnum'
p37124
sS'default'
p37125
S'TIMESTEP_END'
p37126
sS'description'
p37127
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37128
sS'required'
p37129
I00
sS'options'
p37130
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37131
sS'group_name'
p37132
Nsa(dp37133
S'description'
p37134
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37135
sS'cpp_type'
p37136
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37137
sS'default'
p37138
g3
sS'name'
p37139
S'outputs'
p37140
sS'required'
p37141
I00
sS'group_name'
p37142
S'Advanced'
p37143
sa(dp37144
S'description'
p37145
g3
sS'cpp_type'
p37146
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37147
sS'default'
p37148
S'AreaPostprocessor'
p37149
sS'name'
p37150
S'type'
p37151
sS'required'
p37152
I00
sS'group_name'
p37153
Nsa(dp37154
S'description'
p37155
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37156
sS'cpp_type'
p37157
S'bool'
p37158
sS'default'
p37159
S'0'
p37160
sS'name'
p37161
S'use_displaced_mesh'
p37162
sS'required'
p37163
I00
sS'group_name'
p37164
S'Advanced'
p37165
sasS'name'
p37166
S'/UserObjects/AreaPostprocessor'
p37167
sa(dp37168
S'description'
p37169
g3
sS'subblocks'
p37170
NsS'parameters'
p37171
(lp37172
(dp37173
S'description'
p37174
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37175
sS'cpp_type'
p37176
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37177
sS'default'
p37178
g3
sS'name'
p37179
S'block'
p37180
sS'required'
p37181
I00
sS'group_name'
p37182
Nsa(dp37183
S'name'
p37184
S'execute_on'
p37185
sS'cpp_type'
p37186
S'MultiMooseEnum'
p37187
sS'default'
p37188
S'TIMESTEP_END'
p37189
sS'description'
p37190
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37191
sS'required'
p37192
I00
sS'options'
p37193
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37194
sS'group_name'
p37195
Nsa(dp37196
S'description'
p37197
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37198
sS'cpp_type'
p37199
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37200
sS'default'
p37201
g3
sS'name'
p37202
S'outputs'
p37203
sS'required'
p37204
I00
sS'group_name'
p37205
S'Advanced'
p37206
sa(dp37207
S'description'
p37208
S'The seed for the master random number generator\n'
p37209
sS'cpp_type'
p37210
S'unsigned int'
p37211
sS'default'
p37212
S'0'
p37213
sS'name'
p37214
S'seed'
p37215
sS'required'
p37216
I00
sS'group_name'
p37217
S'Advanced'
p37218
sa(dp37219
S'description'
p37220
g3
sS'cpp_type'
p37221
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37222
sS'default'
p37223
S'AverageElementSize'
p37224
sS'name'
p37225
S'type'
p37226
sS'required'
p37227
I00
sS'group_name'
p37228
Nsa(dp37229
S'description'
p37230
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37231
sS'cpp_type'
p37232
S'bool'
p37233
sS'default'
p37234
S'0'
p37235
sS'name'
p37236
S'use_displaced_mesh'
p37237
sS'required'
p37238
I00
sS'group_name'
p37239
S'Advanced'
p37240
sa(dp37241
S'description'
p37242
S'The name of the variable that this object operates on\n'
p37243
sS'cpp_type'
p37244
S'std::vector<VariableName>'
p37245
sS'default'
p37246
g3
sS'name'
p37247
S'variable'
p37248
sS'required'
p37249
I00
sS'group_name'
p37250
NsasS'name'
p37251
S'/UserObjects/AverageElementSize'
p37252
sa(dp37253
S'description'
p37254
g3
sS'subblocks'
p37255
NsS'parameters'
p37256
(lp37257
(dp37258
S'description'
p37259
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37260
sS'cpp_type'
p37261
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37262
sS'default'
p37263
g3
sS'name'
p37264
S'block'
p37265
sS'required'
p37266
I00
sS'group_name'
p37267
Nsa(dp37268
S'description'
p37269
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p37270
sS'cpp_type'
p37271
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p37272
sS'default'
p37273
g3
sS'name'
p37274
S'boundary'
p37275
sS'required'
p37276
I00
sS'group_name'
p37277
Nsa(dp37278
S'name'
p37279
S'execute_on'
p37280
sS'cpp_type'
p37281
S'MultiMooseEnum'
p37282
sS'default'
p37283
S'TIMESTEP_END'
p37284
sS'description'
p37285
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37286
sS'required'
p37287
I00
sS'options'
p37288
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37289
sS'group_name'
p37290
Nsa(dp37291
S'description'
p37292
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37293
sS'cpp_type'
p37294
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37295
sS'default'
p37296
g3
sS'name'
p37297
S'outputs'
p37298
sS'required'
p37299
I00
sS'group_name'
p37300
S'Advanced'
p37301
sa(dp37302
S'description'
p37303
S'The seed for the master random number generator\n'
p37304
sS'cpp_type'
p37305
S'unsigned int'
p37306
sS'default'
p37307
S'0'
p37308
sS'name'
p37309
S'seed'
p37310
sS'required'
p37311
I00
sS'group_name'
p37312
S'Advanced'
p37313
sa(dp37314
S'description'
p37315
g3
sS'cpp_type'
p37316
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37317
sS'default'
p37318
S'AverageNodalVariableValue'
p37319
sS'name'
p37320
S'type'
p37321
sS'required'
p37322
I00
sS'group_name'
p37323
Nsa(dp37324
S'description'
p37325
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37326
sS'cpp_type'
p37327
S'bool'
p37328
sS'default'
p37329
S'0'
p37330
sS'name'
p37331
S'use_displaced_mesh'
p37332
sS'required'
p37333
I00
sS'group_name'
p37334
S'Advanced'
p37335
sa(dp37336
S'description'
p37337
S'The name of the variable that this postprocessor operates on\n'
p37338
sS'cpp_type'
p37339
S'std::vector<VariableName>'
p37340
sS'default'
p37341
g3
sS'name'
p37342
S'variable'
p37343
sS'required'
p37344
I00
sS'group_name'
p37345
NsasS'name'
p37346
S'/UserObjects/AverageNodalVariableValue'
p37347
sa(dp37348
S'description'
p37349
g3
sS'subblocks'
p37350
NsS'parameters'
p37351
(lp37352
(dp37353
S'name'
p37354
S'execute_on'
p37355
sS'cpp_type'
p37356
S'MultiMooseEnum'
p37357
sS'default'
p37358
S'TIMESTEP_END'
p37359
sS'description'
p37360
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37361
sS'required'
p37362
I00
sS'options'
p37363
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37364
sS'group_name'
p37365
Nsa(dp37366
S'description'
p37367
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37368
sS'cpp_type'
p37369
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37370
sS'default'
p37371
g3
sS'name'
p37372
S'outputs'
p37373
sS'required'
p37374
I00
sS'group_name'
p37375
S'Advanced'
p37376
sa(dp37377
S'description'
p37378
g3
sS'cpp_type'
p37379
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37380
sS'default'
p37381
S'DifferencePostprocessor'
p37382
sS'name'
p37383
S'type'
p37384
sS'required'
p37385
I00
sS'group_name'
p37386
Nsa(dp37387
S'description'
p37388
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37389
sS'cpp_type'
p37390
S'bool'
p37391
sS'default'
p37392
S'0'
p37393
sS'name'
p37394
S'use_displaced_mesh'
p37395
sS'required'
p37396
I00
sS'group_name'
p37397
S'Advanced'
p37398
sa(dp37399
S'description'
p37400
S'First value\n'
p37401
sS'cpp_type'
p37402
S'PostprocessorName'
p37403
sS'default'
p37404
g3
sS'name'
p37405
S'value1'
p37406
sS'required'
p37407
I01
sS'group_name'
p37408
Nsa(dp37409
S'description'
p37410
S'Second value\n'
p37411
sS'cpp_type'
p37412
S'PostprocessorName'
p37413
sS'default'
p37414
g3
sS'name'
p37415
S'value2'
p37416
sS'required'
p37417
I01
sS'group_name'
p37418
NsasS'name'
p37419
S'/UserObjects/DifferencePostprocessor'
p37420
sa(dp37421
S'description'
p37422
g3
sS'subblocks'
p37423
NsS'parameters'
p37424
(lp37425
(dp37426
S'description'
p37427
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37428
sS'cpp_type'
p37429
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37430
sS'default'
p37431
g3
sS'name'
p37432
S'block'
p37433
sS'required'
p37434
I00
sS'group_name'
p37435
Nsa(dp37436
S'name'
p37437
S'execute_on'
p37438
sS'cpp_type'
p37439
S'MultiMooseEnum'
p37440
sS'default'
p37441
S'TIMESTEP_END'
p37442
sS'description'
p37443
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37444
sS'required'
p37445
I00
sS'options'
p37446
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37447
sS'group_name'
p37448
Nsa(dp37449
S'description'
p37450
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37451
sS'cpp_type'
p37452
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37453
sS'default'
p37454
g3
sS'name'
p37455
S'outputs'
p37456
sS'required'
p37457
I00
sS'group_name'
p37458
S'Advanced'
p37459
sa(dp37460
S'description'
p37461
S'The seed for the master random number generator\n'
p37462
sS'cpp_type'
p37463
S'unsigned int'
p37464
sS'default'
p37465
S'0'
p37466
sS'name'
p37467
S'seed'
p37468
sS'required'
p37469
I00
sS'group_name'
p37470
S'Advanced'
p37471
sa(dp37472
S'description'
p37473
g3
sS'cpp_type'
p37474
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37475
sS'default'
p37476
S'ElementAverageTimeDerivative'
p37477
sS'name'
p37478
S'type'
p37479
sS'required'
p37480
I00
sS'group_name'
p37481
Nsa(dp37482
S'description'
p37483
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37484
sS'cpp_type'
p37485
S'bool'
p37486
sS'default'
p37487
S'0'
p37488
sS'name'
p37489
S'use_displaced_mesh'
p37490
sS'required'
p37491
I00
sS'group_name'
p37492
S'Advanced'
p37493
sa(dp37494
S'description'
p37495
S'The name of the variable that this object operates on\n'
p37496
sS'cpp_type'
p37497
S'std::vector<VariableName>'
p37498
sS'default'
p37499
g3
sS'name'
p37500
S'variable'
p37501
sS'required'
p37502
I00
sS'group_name'
p37503
NsasS'name'
p37504
S'/UserObjects/ElementAverageTimeDerivative'
p37505
sa(dp37506
S'description'
p37507
g3
sS'subblocks'
p37508
NsS'parameters'
p37509
(lp37510
(dp37511
S'description'
p37512
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37513
sS'cpp_type'
p37514
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37515
sS'default'
p37516
g3
sS'name'
p37517
S'block'
p37518
sS'required'
p37519
I00
sS'group_name'
p37520
Nsa(dp37521
S'name'
p37522
S'execute_on'
p37523
sS'cpp_type'
p37524
S'MultiMooseEnum'
p37525
sS'default'
p37526
S'TIMESTEP_END'
p37527
sS'description'
p37528
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37529
sS'required'
p37530
I00
sS'options'
p37531
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37532
sS'group_name'
p37533
Nsa(dp37534
S'description'
p37535
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37536
sS'cpp_type'
p37537
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37538
sS'default'
p37539
g3
sS'name'
p37540
S'outputs'
p37541
sS'required'
p37542
I00
sS'group_name'
p37543
S'Advanced'
p37544
sa(dp37545
S'description'
p37546
S'The seed for the master random number generator\n'
p37547
sS'cpp_type'
p37548
S'unsigned int'
p37549
sS'default'
p37550
S'0'
p37551
sS'name'
p37552
S'seed'
p37553
sS'required'
p37554
I00
sS'group_name'
p37555
S'Advanced'
p37556
sa(dp37557
S'description'
p37558
g3
sS'cpp_type'
p37559
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37560
sS'default'
p37561
S'ElementAverageValue'
p37562
sS'name'
p37563
S'type'
p37564
sS'required'
p37565
I00
sS'group_name'
p37566
Nsa(dp37567
S'description'
p37568
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37569
sS'cpp_type'
p37570
S'bool'
p37571
sS'default'
p37572
S'0'
p37573
sS'name'
p37574
S'use_displaced_mesh'
p37575
sS'required'
p37576
I00
sS'group_name'
p37577
S'Advanced'
p37578
sa(dp37579
S'description'
p37580
S'The name of the variable that this object operates on\n'
p37581
sS'cpp_type'
p37582
S'std::vector<VariableName>'
p37583
sS'default'
p37584
g3
sS'name'
p37585
S'variable'
p37586
sS'required'
p37587
I00
sS'group_name'
p37588
NsasS'name'
p37589
S'/UserObjects/ElementAverageValue'
p37590
sa(dp37591
S'description'
p37592
g3
sS'subblocks'
p37593
NsS'parameters'
p37594
(lp37595
(dp37596
S'description'
p37597
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37598
sS'cpp_type'
p37599
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37600
sS'default'
p37601
g3
sS'name'
p37602
S'block'
p37603
sS'required'
p37604
I00
sS'group_name'
p37605
Nsa(dp37606
S'name'
p37607
S'execute_on'
p37608
sS'cpp_type'
p37609
S'MultiMooseEnum'
p37610
sS'default'
p37611
S'TIMESTEP_END'
p37612
sS'description'
p37613
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37614
sS'required'
p37615
I00
sS'options'
p37616
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37617
sS'group_name'
p37618
Nsa(dp37619
S'description'
p37620
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37621
sS'cpp_type'
p37622
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37623
sS'default'
p37624
g3
sS'name'
p37625
S'outputs'
p37626
sS'required'
p37627
I00
sS'group_name'
p37628
S'Advanced'
p37629
sa(dp37630
S'description'
p37631
S'The seed for the master random number generator\n'
p37632
sS'cpp_type'
p37633
S'unsigned int'
p37634
sS'default'
p37635
S'0'
p37636
sS'name'
p37637
S'seed'
p37638
sS'required'
p37639
I00
sS'group_name'
p37640
S'Advanced'
p37641
sa(dp37642
S'description'
p37643
g3
sS'cpp_type'
p37644
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37645
sS'default'
p37646
S'ElementExtremeValue'
p37647
sS'name'
p37648
S'type'
p37649
sS'required'
p37650
I00
sS'group_name'
p37651
Nsa(dp37652
S'description'
p37653
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37654
sS'cpp_type'
p37655
S'bool'
p37656
sS'default'
p37657
S'0'
p37658
sS'name'
p37659
S'use_displaced_mesh'
p37660
sS'required'
p37661
I00
sS'group_name'
p37662
S'Advanced'
p37663
sa(dp37664
S'name'
p37665
S'value_type'
p37666
sS'cpp_type'
p37667
S'MooseEnum'
p37668
sS'default'
p37669
S'max'
p37670
sS'description'
p37671
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p37672
sS'required'
p37673
I00
sS'options'
p37674
S'max min'
p37675
sS'group_name'
p37676
Nsa(dp37677
S'description'
p37678
S'The name of the variable that this postprocessor operates on\n'
p37679
sS'cpp_type'
p37680
S'std::vector<VariableName>'
p37681
sS'default'
p37682
g3
sS'name'
p37683
S'variable'
p37684
sS'required'
p37685
I00
sS'group_name'
p37686
NsasS'name'
p37687
S'/UserObjects/ElementExtremeValue'
p37688
sa(dp37689
S'description'
p37690
g3
sS'subblocks'
p37691
NsS'parameters'
p37692
(lp37693
(dp37694
S'description'
p37695
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37696
sS'cpp_type'
p37697
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37698
sS'default'
p37699
g3
sS'name'
p37700
S'block'
p37701
sS'required'
p37702
I00
sS'group_name'
p37703
Nsa(dp37704
S'name'
p37705
S'execute_on'
p37706
sS'cpp_type'
p37707
S'MultiMooseEnum'
p37708
sS'default'
p37709
S'TIMESTEP_END'
p37710
sS'description'
p37711
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37712
sS'required'
p37713
I00
sS'options'
p37714
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37715
sS'group_name'
p37716
Nsa(dp37717
S'description'
p37718
S'The analytic solution to compare against\n'
p37719
sS'cpp_type'
p37720
S'FunctionName'
p37721
sS'default'
p37722
g3
sS'name'
p37723
S'function'
p37724
sS'required'
p37725
I01
sS'group_name'
p37726
Nsa(dp37727
S'description'
p37728
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37729
sS'cpp_type'
p37730
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37731
sS'default'
p37732
g3
sS'name'
p37733
S'outputs'
p37734
sS'required'
p37735
I00
sS'group_name'
p37736
S'Advanced'
p37737
sa(dp37738
S'description'
p37739
S'The exponent used in the norm.\n'
p37740
sS'cpp_type'
p37741
S'double'
p37742
sS'default'
p37743
S'2'
p37744
sS'name'
p37745
S'p'
p37746
sS'required'
p37747
I00
sS'group_name'
p37748
Nsa(dp37749
S'description'
p37750
S'The seed for the master random number generator\n'
p37751
sS'cpp_type'
p37752
S'unsigned int'
p37753
sS'default'
p37754
S'0'
p37755
sS'name'
p37756
S'seed'
p37757
sS'required'
p37758
I00
sS'group_name'
p37759
S'Advanced'
p37760
sa(dp37761
S'description'
p37762
g3
sS'cpp_type'
p37763
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37764
sS'default'
p37765
S'ElementH1Error'
p37766
sS'name'
p37767
S'type'
p37768
sS'required'
p37769
I00
sS'group_name'
p37770
Nsa(dp37771
S'description'
p37772
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37773
sS'cpp_type'
p37774
S'bool'
p37775
sS'default'
p37776
S'0'
p37777
sS'name'
p37778
S'use_displaced_mesh'
p37779
sS'required'
p37780
I00
sS'group_name'
p37781
S'Advanced'
p37782
sa(dp37783
S'description'
p37784
S'The name of the variable that this object operates on\n'
p37785
sS'cpp_type'
p37786
S'std::vector<VariableName>'
p37787
sS'default'
p37788
g3
sS'name'
p37789
S'variable'
p37790
sS'required'
p37791
I00
sS'group_name'
p37792
NsasS'name'
p37793
S'/UserObjects/ElementH1Error'
p37794
sa(dp37795
S'description'
p37796
g3
sS'subblocks'
p37797
NsS'parameters'
p37798
(lp37799
(dp37800
S'description'
p37801
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37802
sS'cpp_type'
p37803
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37804
sS'default'
p37805
g3
sS'name'
p37806
S'block'
p37807
sS'required'
p37808
I00
sS'group_name'
p37809
Nsa(dp37810
S'name'
p37811
S'execute_on'
p37812
sS'cpp_type'
p37813
S'MultiMooseEnum'
p37814
sS'default'
p37815
S'TIMESTEP_END'
p37816
sS'description'
p37817
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37818
sS'required'
p37819
I00
sS'options'
p37820
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37821
sS'group_name'
p37822
Nsa(dp37823
S'description'
p37824
S'The analytic solution to compare against\n'
p37825
sS'cpp_type'
p37826
S'FunctionName'
p37827
sS'default'
p37828
g3
sS'name'
p37829
S'function'
p37830
sS'required'
p37831
I01
sS'group_name'
p37832
Nsa(dp37833
S'description'
p37834
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37835
sS'cpp_type'
p37836
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37837
sS'default'
p37838
g3
sS'name'
p37839
S'outputs'
p37840
sS'required'
p37841
I00
sS'group_name'
p37842
S'Advanced'
p37843
sa(dp37844
S'description'
p37845
S'The seed for the master random number generator\n'
p37846
sS'cpp_type'
p37847
S'unsigned int'
p37848
sS'default'
p37849
S'0'
p37850
sS'name'
p37851
S'seed'
p37852
sS'required'
p37853
I00
sS'group_name'
p37854
S'Advanced'
p37855
sa(dp37856
S'description'
p37857
g3
sS'cpp_type'
p37858
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37859
sS'default'
p37860
S'ElementH1SemiError'
p37861
sS'name'
p37862
S'type'
p37863
sS'required'
p37864
I00
sS'group_name'
p37865
Nsa(dp37866
S'description'
p37867
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37868
sS'cpp_type'
p37869
S'bool'
p37870
sS'default'
p37871
S'0'
p37872
sS'name'
p37873
S'use_displaced_mesh'
p37874
sS'required'
p37875
I00
sS'group_name'
p37876
S'Advanced'
p37877
sa(dp37878
S'description'
p37879
S'The name of the variable that this object operates on\n'
p37880
sS'cpp_type'
p37881
S'std::vector<VariableName>'
p37882
sS'default'
p37883
g3
sS'name'
p37884
S'variable'
p37885
sS'required'
p37886
I00
sS'group_name'
p37887
NsasS'name'
p37888
S'/UserObjects/ElementH1SemiError'
p37889
sa(dp37890
S'description'
p37891
g3
sS'subblocks'
p37892
NsS'parameters'
p37893
(lp37894
(dp37895
S'description'
p37896
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37897
sS'cpp_type'
p37898
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37899
sS'default'
p37900
g3
sS'name'
p37901
S'block'
p37902
sS'required'
p37903
I00
sS'group_name'
p37904
Nsa(dp37905
S'name'
p37906
S'execute_on'
p37907
sS'cpp_type'
p37908
S'MultiMooseEnum'
p37909
sS'default'
p37910
S'TIMESTEP_END'
p37911
sS'description'
p37912
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37913
sS'required'
p37914
I00
sS'options'
p37915
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p37916
sS'group_name'
p37917
Nsa(dp37918
S'description'
p37919
S'The name of the material property\n'
p37920
sS'cpp_type'
p37921
S'MaterialPropertyName'
p37922
sS'default'
p37923
g3
sS'name'
p37924
S'mat_prop'
p37925
sS'required'
p37926
I01
sS'group_name'
p37927
Nsa(dp37928
S'description'
p37929
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p37930
sS'cpp_type'
p37931
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p37932
sS'default'
p37933
g3
sS'name'
p37934
S'outputs'
p37935
sS'required'
p37936
I00
sS'group_name'
p37937
S'Advanced'
p37938
sa(dp37939
S'description'
p37940
S'The seed for the master random number generator\n'
p37941
sS'cpp_type'
p37942
S'unsigned int'
p37943
sS'default'
p37944
S'0'
p37945
sS'name'
p37946
S'seed'
p37947
sS'required'
p37948
I00
sS'group_name'
p37949
S'Advanced'
p37950
sa(dp37951
S'description'
p37952
g3
sS'cpp_type'
p37953
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p37954
sS'default'
p37955
S'ElementIntegralMaterialProperty'
p37956
sS'name'
p37957
S'type'
p37958
sS'required'
p37959
I00
sS'group_name'
p37960
Nsa(dp37961
S'description'
p37962
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p37963
sS'cpp_type'
p37964
S'bool'
p37965
sS'default'
p37966
S'0'
p37967
sS'name'
p37968
S'use_displaced_mesh'
p37969
sS'required'
p37970
I00
sS'group_name'
p37971
S'Advanced'
p37972
sasS'name'
p37973
S'/UserObjects/ElementIntegralMaterialProperty'
p37974
sa(dp37975
S'description'
p37976
g3
sS'subblocks'
p37977
NsS'parameters'
p37978
(lp37979
(dp37980
S'description'
p37981
S'The list of block ids (SubdomainID) that this object will be applied\n'
p37982
sS'cpp_type'
p37983
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p37984
sS'default'
p37985
g3
sS'name'
p37986
S'block'
p37987
sS'required'
p37988
I00
sS'group_name'
p37989
Nsa(dp37990
S'name'
p37991
S'execute_on'
p37992
sS'cpp_type'
p37993
S'MultiMooseEnum'
p37994
sS'default'
p37995
S'TIMESTEP_END'
p37996
sS'description'
p37997
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p37998
sS'required'
p37999
I00
sS'options'
p38000
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38001
sS'group_name'
p38002
Nsa(dp38003
S'description'
p38004
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38005
sS'cpp_type'
p38006
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38007
sS'default'
p38008
g3
sS'name'
p38009
S'outputs'
p38010
sS'required'
p38011
I00
sS'group_name'
p38012
S'Advanced'
p38013
sa(dp38014
S'description'
p38015
S'The seed for the master random number generator\n'
p38016
sS'cpp_type'
p38017
S'unsigned int'
p38018
sS'default'
p38019
S'0'
p38020
sS'name'
p38021
S'seed'
p38022
sS'required'
p38023
I00
sS'group_name'
p38024
S'Advanced'
p38025
sa(dp38026
S'description'
p38027
g3
sS'cpp_type'
p38028
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38029
sS'default'
p38030
S'ElementIntegralVariablePostprocessor'
p38031
sS'name'
p38032
S'type'
p38033
sS'required'
p38034
I00
sS'group_name'
p38035
Nsa(dp38036
S'description'
p38037
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38038
sS'cpp_type'
p38039
S'bool'
p38040
sS'default'
p38041
S'0'
p38042
sS'name'
p38043
S'use_displaced_mesh'
p38044
sS'required'
p38045
I00
sS'group_name'
p38046
S'Advanced'
p38047
sa(dp38048
S'description'
p38049
S'The name of the variable that this object operates on\n'
p38050
sS'cpp_type'
p38051
S'std::vector<VariableName>'
p38052
sS'default'
p38053
g3
sS'name'
p38054
S'variable'
p38055
sS'required'
p38056
I00
sS'group_name'
p38057
NsasS'name'
p38058
S'/UserObjects/ElementIntegralVariablePostprocessor'
p38059
sa(dp38060
S'description'
p38061
g3
sS'subblocks'
p38062
NsS'parameters'
p38063
(lp38064
(dp38065
S'description'
p38066
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38067
sS'cpp_type'
p38068
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38069
sS'default'
p38070
g3
sS'name'
p38071
S'block'
p38072
sS'required'
p38073
I00
sS'group_name'
p38074
Nsa(dp38075
S'name'
p38076
S'execute_on'
p38077
sS'cpp_type'
p38078
S'MultiMooseEnum'
p38079
sS'default'
p38080
S'TIMESTEP_END'
p38081
sS'description'
p38082
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38083
sS'required'
p38084
I00
sS'options'
p38085
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38086
sS'group_name'
p38087
Nsa(dp38088
S'description'
p38089
S'The seed for the master random number generator\n'
p38090
sS'cpp_type'
p38091
S'unsigned int'
p38092
sS'default'
p38093
S'0'
p38094
sS'name'
p38095
S'seed'
p38096
sS'required'
p38097
I00
sS'group_name'
p38098
S'Advanced'
p38099
sa(dp38100
S'description'
p38101
g3
sS'cpp_type'
p38102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38103
sS'default'
p38104
S'ElementIntegralVariableUserObject'
p38105
sS'name'
p38106
S'type'
p38107
sS'required'
p38108
I00
sS'group_name'
p38109
Nsa(dp38110
S'description'
p38111
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38112
sS'cpp_type'
p38113
S'bool'
p38114
sS'default'
p38115
S'0'
p38116
sS'name'
p38117
S'use_displaced_mesh'
p38118
sS'required'
p38119
I00
sS'group_name'
p38120
S'Advanced'
p38121
sa(dp38122
S'description'
p38123
S'The name of the variable that this object operates on\n'
p38124
sS'cpp_type'
p38125
S'std::vector<VariableName>'
p38126
sS'default'
p38127
g3
sS'name'
p38128
S'variable'
p38129
sS'required'
p38130
I00
sS'group_name'
p38131
NsasS'name'
p38132
S'/UserObjects/ElementIntegralVariableUserObject'
p38133
sa(dp38134
S'description'
p38135
g3
sS'subblocks'
p38136
NsS'parameters'
p38137
(lp38138
(dp38139
S'description'
p38140
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38141
sS'cpp_type'
p38142
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38143
sS'default'
p38144
g3
sS'name'
p38145
S'block'
p38146
sS'required'
p38147
I00
sS'group_name'
p38148
Nsa(dp38149
S'name'
p38150
S'execute_on'
p38151
sS'cpp_type'
p38152
S'MultiMooseEnum'
p38153
sS'default'
p38154
S'TIMESTEP_END'
p38155
sS'description'
p38156
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38157
sS'required'
p38158
I00
sS'options'
p38159
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38160
sS'group_name'
p38161
Nsa(dp38162
S'description'
p38163
S'The analytic solution to compare against\n'
p38164
sS'cpp_type'
p38165
S'FunctionName'
p38166
sS'default'
p38167
g3
sS'name'
p38168
S'function'
p38169
sS'required'
p38170
I01
sS'group_name'
p38171
Nsa(dp38172
S'description'
p38173
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38174
sS'cpp_type'
p38175
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38176
sS'default'
p38177
g3
sS'name'
p38178
S'outputs'
p38179
sS'required'
p38180
I00
sS'group_name'
p38181
S'Advanced'
p38182
sa(dp38183
S'description'
p38184
S'The seed for the master random number generator\n'
p38185
sS'cpp_type'
p38186
S'unsigned int'
p38187
sS'default'
p38188
S'0'
p38189
sS'name'
p38190
S'seed'
p38191
sS'required'
p38192
I00
sS'group_name'
p38193
S'Advanced'
p38194
sa(dp38195
S'description'
p38196
g3
sS'cpp_type'
p38197
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38198
sS'default'
p38199
S'ElementL2Error'
p38200
sS'name'
p38201
S'type'
p38202
sS'required'
p38203
I00
sS'group_name'
p38204
Nsa(dp38205
S'description'
p38206
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38207
sS'cpp_type'
p38208
S'bool'
p38209
sS'default'
p38210
S'0'
p38211
sS'name'
p38212
S'use_displaced_mesh'
p38213
sS'required'
p38214
I00
sS'group_name'
p38215
S'Advanced'
p38216
sa(dp38217
S'description'
p38218
S'The name of the variable that this object operates on\n'
p38219
sS'cpp_type'
p38220
S'std::vector<VariableName>'
p38221
sS'default'
p38222
g3
sS'name'
p38223
S'variable'
p38224
sS'required'
p38225
I00
sS'group_name'
p38226
NsasS'name'
p38227
S'/UserObjects/ElementL2Error'
p38228
sa(dp38229
S'description'
p38230
g3
sS'subblocks'
p38231
NsS'parameters'
p38232
(lp38233
(dp38234
S'description'
p38235
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38236
sS'cpp_type'
p38237
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38238
sS'default'
p38239
g3
sS'name'
p38240
S'block'
p38241
sS'required'
p38242
I00
sS'group_name'
p38243
Nsa(dp38244
S'name'
p38245
S'execute_on'
p38246
sS'cpp_type'
p38247
S'MultiMooseEnum'
p38248
sS'default'
p38249
S'TIMESTEP_END'
p38250
sS'description'
p38251
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38252
sS'required'
p38253
I00
sS'options'
p38254
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38255
sS'group_name'
p38256
Nsa(dp38257
S'description'
p38258
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38259
sS'cpp_type'
p38260
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38261
sS'default'
p38262
g3
sS'name'
p38263
S'outputs'
p38264
sS'required'
p38265
I00
sS'group_name'
p38266
S'Advanced'
p38267
sa(dp38268
S'description'
p38269
S'The seed for the master random number generator\n'
p38270
sS'cpp_type'
p38271
S'unsigned int'
p38272
sS'default'
p38273
S'0'
p38274
sS'name'
p38275
S'seed'
p38276
sS'required'
p38277
I00
sS'group_name'
p38278
S'Advanced'
p38279
sa(dp38280
S'description'
p38281
g3
sS'cpp_type'
p38282
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38283
sS'default'
p38284
S'ElementL2Norm'
p38285
sS'name'
p38286
S'type'
p38287
sS'required'
p38288
I00
sS'group_name'
p38289
Nsa(dp38290
S'description'
p38291
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38292
sS'cpp_type'
p38293
S'bool'
p38294
sS'default'
p38295
S'0'
p38296
sS'name'
p38297
S'use_displaced_mesh'
p38298
sS'required'
p38299
I00
sS'group_name'
p38300
S'Advanced'
p38301
sa(dp38302
S'description'
p38303
S'The name of the variable that this object operates on\n'
p38304
sS'cpp_type'
p38305
S'std::vector<VariableName>'
p38306
sS'default'
p38307
g3
sS'name'
p38308
S'variable'
p38309
sS'required'
p38310
I00
sS'group_name'
p38311
NsasS'name'
p38312
S'/UserObjects/ElementL2Norm'
p38313
sa(dp38314
S'description'
p38315
g3
sS'subblocks'
p38316
NsS'parameters'
p38317
(lp38318
(dp38319
S'description'
p38320
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38321
sS'cpp_type'
p38322
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38323
sS'default'
p38324
g3
sS'name'
p38325
S'block'
p38326
sS'required'
p38327
I00
sS'group_name'
p38328
Nsa(dp38329
S'name'
p38330
S'execute_on'
p38331
sS'cpp_type'
p38332
S'MultiMooseEnum'
p38333
sS'default'
p38334
S'TIMESTEP_END'
p38335
sS'description'
p38336
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38337
sS'required'
p38338
I00
sS'options'
p38339
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38340
sS'group_name'
p38341
Nsa(dp38342
S'description'
p38343
S'The analytic solution to compare against\n'
p38344
sS'cpp_type'
p38345
S'FunctionName'
p38346
sS'default'
p38347
g3
sS'name'
p38348
S'function_x'
p38349
sS'required'
p38350
I01
sS'group_name'
p38351
Nsa(dp38352
S'description'
p38353
S'The analytic solution to compare against\n'
p38354
sS'cpp_type'
p38355
S'FunctionName'
p38356
sS'default'
p38357
S'0'
p38358
sS'name'
p38359
S'function_y'
p38360
sS'required'
p38361
I00
sS'group_name'
p38362
Nsa(dp38363
S'description'
p38364
S'The analytic solution to compare against\n'
p38365
sS'cpp_type'
p38366
S'FunctionName'
p38367
sS'default'
p38368
S'0'
p38369
sS'name'
p38370
S'function_z'
p38371
sS'required'
p38372
I00
sS'group_name'
p38373
Nsa(dp38374
S'description'
p38375
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38376
sS'cpp_type'
p38377
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38378
sS'default'
p38379
g3
sS'name'
p38380
S'outputs'
p38381
sS'required'
p38382
I00
sS'group_name'
p38383
S'Advanced'
p38384
sa(dp38385
S'description'
p38386
S'The seed for the master random number generator\n'
p38387
sS'cpp_type'
p38388
S'unsigned int'
p38389
sS'default'
p38390
S'0'
p38391
sS'name'
p38392
S'seed'
p38393
sS'required'
p38394
I00
sS'group_name'
p38395
S'Advanced'
p38396
sa(dp38397
S'description'
p38398
g3
sS'cpp_type'
p38399
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38400
sS'default'
p38401
S'ElementVectorL2Error'
p38402
sS'name'
p38403
S'type'
p38404
sS'required'
p38405
I00
sS'group_name'
p38406
Nsa(dp38407
S'description'
p38408
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38409
sS'cpp_type'
p38410
S'bool'
p38411
sS'default'
p38412
S'0'
p38413
sS'name'
p38414
S'use_displaced_mesh'
p38415
sS'required'
p38416
I00
sS'group_name'
p38417
S'Advanced'
p38418
sa(dp38419
S'description'
p38420
S'The FE solution in x direction\n'
p38421
sS'cpp_type'
p38422
S'std::vector<VariableName>'
p38423
sS'default'
p38424
g3
sS'name'
p38425
S'var_x'
p38426
sS'required'
p38427
I01
sS'group_name'
p38428
Nsa(dp38429
S'description'
p38430
S'The FE solution in y direction\n'
p38431
sS'cpp_type'
p38432
S'std::vector<VariableName>'
p38433
sS'default'
p38434
S'0'
p38435
sS'name'
p38436
S'var_y'
p38437
sS'required'
p38438
I00
sS'group_name'
p38439
Nsa(dp38440
S'description'
p38441
S'The FE solution in z direction\n'
p38442
sS'cpp_type'
p38443
S'std::vector<VariableName>'
p38444
sS'default'
p38445
S'0'
p38446
sS'name'
p38447
S'var_z'
p38448
sS'required'
p38449
I00
sS'group_name'
p38450
NsasS'name'
p38451
S'/UserObjects/ElementVectorL2Error'
p38452
sa(dp38453
S'description'
p38454
g3
sS'subblocks'
p38455
NsS'parameters'
p38456
(lp38457
(dp38458
S'description'
p38459
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38460
sS'cpp_type'
p38461
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38462
sS'default'
p38463
g3
sS'name'
p38464
S'block'
p38465
sS'required'
p38466
I00
sS'group_name'
p38467
Nsa(dp38468
S'name'
p38469
S'execute_on'
p38470
sS'cpp_type'
p38471
S'MultiMooseEnum'
p38472
sS'default'
p38473
S'TIMESTEP_END'
p38474
sS'description'
p38475
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38476
sS'required'
p38477
I00
sS'options'
p38478
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38479
sS'group_name'
p38480
Nsa(dp38481
S'description'
p38482
S'The analytic solution to compare against\n'
p38483
sS'cpp_type'
p38484
S'FunctionName'
p38485
sS'default'
p38486
g3
sS'name'
p38487
S'function'
p38488
sS'required'
p38489
I01
sS'group_name'
p38490
Nsa(dp38491
S'description'
p38492
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38493
sS'cpp_type'
p38494
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38495
sS'default'
p38496
g3
sS'name'
p38497
S'outputs'
p38498
sS'required'
p38499
I00
sS'group_name'
p38500
S'Advanced'
p38501
sa(dp38502
S'description'
p38503
S'The exponent used in the norm.\n'
p38504
sS'cpp_type'
p38505
S'double'
p38506
sS'default'
p38507
S'2'
p38508
sS'name'
p38509
S'p'
p38510
sS'required'
p38511
I00
sS'group_name'
p38512
Nsa(dp38513
S'description'
p38514
S'The seed for the master random number generator\n'
p38515
sS'cpp_type'
p38516
S'unsigned int'
p38517
sS'default'
p38518
S'0'
p38519
sS'name'
p38520
S'seed'
p38521
sS'required'
p38522
I00
sS'group_name'
p38523
S'Advanced'
p38524
sa(dp38525
S'description'
p38526
g3
sS'cpp_type'
p38527
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38528
sS'default'
p38529
S'ElementW1pError'
p38530
sS'name'
p38531
S'type'
p38532
sS'required'
p38533
I00
sS'group_name'
p38534
Nsa(dp38535
S'description'
p38536
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38537
sS'cpp_type'
p38538
S'bool'
p38539
sS'default'
p38540
S'0'
p38541
sS'name'
p38542
S'use_displaced_mesh'
p38543
sS'required'
p38544
I00
sS'group_name'
p38545
S'Advanced'
p38546
sa(dp38547
S'description'
p38548
S'The name of the variable that this object operates on\n'
p38549
sS'cpp_type'
p38550
S'std::vector<VariableName>'
p38551
sS'default'
p38552
g3
sS'name'
p38553
S'variable'
p38554
sS'required'
p38555
I00
sS'group_name'
p38556
NsasS'name'
p38557
S'/UserObjects/ElementW1pError'
p38558
sa(dp38559
S'description'
p38560
g3
sS'subblocks'
p38561
NsS'parameters'
p38562
(lp38563
(dp38564
S'description'
p38565
S'The ID of the element where we monitor\n'
p38566
sS'cpp_type'
p38567
S'unsigned int'
p38568
sS'default'
p38569
g3
sS'name'
p38570
S'elementid'
p38571
sS'required'
p38572
I01
sS'group_name'
p38573
Nsa(dp38574
S'name'
p38575
S'execute_on'
p38576
sS'cpp_type'
p38577
S'MultiMooseEnum'
p38578
sS'default'
p38579
S'TIMESTEP_END'
p38580
sS'description'
p38581
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38582
sS'required'
p38583
I00
sS'options'
p38584
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38585
sS'group_name'
p38586
Nsa(dp38587
S'description'
p38588
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38589
sS'cpp_type'
p38590
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38591
sS'default'
p38592
g3
sS'name'
p38593
S'outputs'
p38594
sS'required'
p38595
I00
sS'group_name'
p38596
S'Advanced'
p38597
sa(dp38598
S'description'
p38599
g3
sS'cpp_type'
p38600
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38601
sS'default'
p38602
S'ElementalVariableValue'
p38603
sS'name'
p38604
S'type'
p38605
sS'required'
p38606
I00
sS'group_name'
p38607
Nsa(dp38608
S'description'
p38609
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38610
sS'cpp_type'
p38611
S'bool'
p38612
sS'default'
p38613
S'0'
p38614
sS'name'
p38615
S'use_displaced_mesh'
p38616
sS'required'
p38617
I00
sS'group_name'
p38618
S'Advanced'
p38619
sa(dp38620
S'description'
p38621
S'The variable to be monitored\n'
p38622
sS'cpp_type'
p38623
S'VariableName'
p38624
sS'default'
p38625
g3
sS'name'
p38626
S'variable'
p38627
sS'required'
p38628
I01
sS'group_name'
p38629
NsasS'name'
p38630
S'/UserObjects/ElementalVariableValue'
p38631
sa(dp38632
S'description'
p38633
g3
sS'subblocks'
p38634
NsS'parameters'
p38635
(lp38636
(dp38637
S'name'
p38638
S'execute_on'
p38639
sS'cpp_type'
p38640
S'MultiMooseEnum'
p38641
sS'default'
p38642
S'TIMESTEP_END'
p38643
sS'description'
p38644
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38645
sS'required'
p38646
I00
sS'options'
p38647
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38648
sS'group_name'
p38649
Nsa(dp38650
S'description'
p38651
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38652
sS'cpp_type'
p38653
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38654
sS'default'
p38655
g3
sS'name'
p38656
S'outputs'
p38657
sS'required'
p38658
I00
sS'group_name'
p38659
S'Advanced'
p38660
sa(dp38661
S'description'
p38662
g3
sS'cpp_type'
p38663
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38664
sS'default'
p38665
S'EmptyPostprocessor'
p38666
sS'name'
p38667
S'type'
p38668
sS'required'
p38669
I00
sS'group_name'
p38670
Nsa(dp38671
S'description'
p38672
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38673
sS'cpp_type'
p38674
S'bool'
p38675
sS'default'
p38676
S'0'
p38677
sS'name'
p38678
S'use_displaced_mesh'
p38679
sS'required'
p38680
I00
sS'group_name'
p38681
S'Advanced'
p38682
sasS'name'
p38683
S'/UserObjects/EmptyPostprocessor'
p38684
sa(dp38685
S'description'
p38686
g3
sS'subblocks'
p38687
NsS'parameters'
p38688
(lp38689
(dp38690
S'name'
p38691
S'execute_on'
p38692
sS'cpp_type'
p38693
S'MultiMooseEnum'
p38694
sS'default'
p38695
S'TIMESTEP_END'
p38696
sS'description'
p38697
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38698
sS'required'
p38699
I00
sS'options'
p38700
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38701
sS'group_name'
p38702
Nsa(dp38703
S'description'
p38704
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38705
sS'cpp_type'
p38706
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38707
sS'default'
p38708
g3
sS'name'
p38709
S'outputs'
p38710
sS'required'
p38711
I00
sS'group_name'
p38712
S'Advanced'
p38713
sa(dp38714
S'description'
p38715
g3
sS'cpp_type'
p38716
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38717
sS'default'
p38718
S'ExecutionerAttributeReporter'
p38719
sS'name'
p38720
S'type'
p38721
sS'required'
p38722
I00
sS'group_name'
p38723
Nsa(dp38724
S'description'
p38725
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38726
sS'cpp_type'
p38727
S'bool'
p38728
sS'default'
p38729
S'0'
p38730
sS'name'
p38731
S'use_displaced_mesh'
p38732
sS'required'
p38733
I00
sS'group_name'
p38734
S'Advanced'
p38735
sasS'name'
p38736
S'/UserObjects/ExecutionerAttributeReporter'
p38737
sa(dp38738
S'description'
p38739
g3
sS'subblocks'
p38740
NsS'parameters'
p38741
(lp38742
(dp38743
S'description'
p38744
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p38745
sS'cpp_type'
p38746
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p38747
sS'default'
p38748
g3
sS'name'
p38749
S'boundary'
p38750
sS'required'
p38751
I00
sS'group_name'
p38752
Nsa(dp38753
S'name'
p38754
S'execute_on'
p38755
sS'cpp_type'
p38756
S'MultiMooseEnum'
p38757
sS'default'
p38758
S'TIMESTEP_END'
p38759
sS'description'
p38760
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38761
sS'required'
p38762
I00
sS'options'
p38763
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38764
sS'group_name'
p38765
Nsa(dp38766
S'description'
p38767
S'This postprocessor will return the integral of this function over the boundary\n'
p38768
sS'cpp_type'
p38769
S'FunctionName'
p38770
sS'default'
p38771
S'1'
p38772
sS'name'
p38773
S'function'
p38774
sS'required'
p38775
I00
sS'group_name'
p38776
Nsa(dp38777
S'description'
p38778
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38779
sS'cpp_type'
p38780
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38781
sS'default'
p38782
g3
sS'name'
p38783
S'outputs'
p38784
sS'required'
p38785
I00
sS'group_name'
p38786
S'Advanced'
p38787
sa(dp38788
S'description'
p38789
g3
sS'cpp_type'
p38790
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38791
sS'default'
p38792
S'FunctionSideIntegral'
p38793
sS'name'
p38794
S'type'
p38795
sS'required'
p38796
I00
sS'group_name'
p38797
Nsa(dp38798
S'description'
p38799
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38800
sS'cpp_type'
p38801
S'bool'
p38802
sS'default'
p38803
S'0'
p38804
sS'name'
p38805
S'use_displaced_mesh'
p38806
sS'required'
p38807
I00
sS'group_name'
p38808
S'Advanced'
p38809
sasS'name'
p38810
S'/UserObjects/FunctionSideIntegral'
p38811
sa(dp38812
S'description'
p38813
g3
sS'subblocks'
p38814
NsS'parameters'
p38815
(lp38816
(dp38817
S'name'
p38818
S'execute_on'
p38819
sS'cpp_type'
p38820
S'MultiMooseEnum'
p38821
sS'default'
p38822
S'TIMESTEP_END'
p38823
sS'description'
p38824
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38825
sS'required'
p38826
I00
sS'options'
p38827
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38828
sS'group_name'
p38829
Nsa(dp38830
S'description'
p38831
S'The function which supplies the postprocessor value.\n'
p38832
sS'cpp_type'
p38833
S'FunctionName'
p38834
sS'default'
p38835
g3
sS'name'
p38836
S'function'
p38837
sS'required'
p38838
I01
sS'group_name'
p38839
Nsa(dp38840
S'description'
p38841
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p38842
sS'cpp_type'
p38843
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p38844
sS'default'
p38845
g3
sS'name'
p38846
S'outputs'
p38847
sS'required'
p38848
I00
sS'group_name'
p38849
S'Advanced'
p38850
sa(dp38851
S'description'
p38852
g3
sS'cpp_type'
p38853
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38854
sS'default'
p38855
S'FunctionValuePostprocessor'
p38856
sS'name'
p38857
S'type'
p38858
sS'required'
p38859
I00
sS'group_name'
p38860
Nsa(dp38861
S'description'
p38862
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38863
sS'cpp_type'
p38864
S'bool'
p38865
sS'default'
p38866
S'0'
p38867
sS'name'
p38868
S'use_displaced_mesh'
p38869
sS'required'
p38870
I00
sS'group_name'
p38871
S'Advanced'
p38872
sasS'name'
p38873
S'/UserObjects/FunctionValuePostprocessor'
p38874
sa(dp38875
S'description'
p38876
g3
sS'subblocks'
p38877
NsS'parameters'
p38878
(lp38879
(dp38880
S'description'
p38881
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p38882
sS'cpp_type'
p38883
S'unsigned int'
p38884
sS'default'
p38885
S'1'
p38886
sS'name'
p38887
S'average_radius'
p38888
sS'required'
p38889
I00
sS'group_name'
p38890
Nsa(dp38891
S'description'
p38892
S'The list of block ids (SubdomainID) that this object will be applied\n'
p38893
sS'cpp_type'
p38894
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p38895
sS'default'
p38896
g3
sS'name'
p38897
S'block'
p38898
sS'required'
p38899
I00
sS'group_name'
p38900
Nsa(dp38901
S'description'
p38902
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p38903
sS'cpp_type'
p38904
S'std::__1::vector<double, std::__1::allocator<double> >'
p38905
sS'default'
p38906
g3
sS'name'
p38907
S'bounds'
p38908
sS'required'
p38909
I00
sS'group_name'
p38910
Nsa(dp38911
S'name'
p38912
S'direction'
p38913
sS'cpp_type'
p38914
S'MooseEnum'
p38915
sS'default'
p38916
g3
sS'description'
p38917
S'The direction of the layers.\n'
p38918
sS'required'
p38919
I01
sS'options'
p38920
S'x y z'
p38921
sS'group_name'
p38922
Nsa(dp38923
S'name'
p38924
S'execute_on'
p38925
sS'cpp_type'
p38926
S'MultiMooseEnum'
p38927
sS'default'
p38928
S'TIMESTEP_END'
p38929
sS'description'
p38930
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p38931
sS'required'
p38932
I00
sS'options'
p38933
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p38934
sS'group_name'
p38935
Nsa(dp38936
S'description'
p38937
S'The number of layers.\n'
p38938
sS'cpp_type'
p38939
S'unsigned int'
p38940
sS'default'
p38941
g3
sS'name'
p38942
S'num_layers'
p38943
sS'required'
p38944
I00
sS'group_name'
p38945
Nsa(dp38946
S'name'
p38947
S'sample_type'
p38948
sS'cpp_type'
p38949
S'MooseEnum'
p38950
sS'default'
p38951
S'direct'
p38952
sS'description'
p38953
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p38954
sS'required'
p38955
I00
sS'options'
p38956
S'direct interpolate average'
p38957
sS'group_name'
p38958
Nsa(dp38959
S'description'
p38960
S'The seed for the master random number generator\n'
p38961
sS'cpp_type'
p38962
S'unsigned int'
p38963
sS'default'
p38964
S'0'
p38965
sS'name'
p38966
S'seed'
p38967
sS'required'
p38968
I00
sS'group_name'
p38969
S'Advanced'
p38970
sa(dp38971
S'description'
p38972
g3
sS'cpp_type'
p38973
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p38974
sS'default'
p38975
S'LayeredAverage'
p38976
sS'name'
p38977
S'type'
p38978
sS'required'
p38979
I00
sS'group_name'
p38980
Nsa(dp38981
S'description'
p38982
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p38983
sS'cpp_type'
p38984
S'bool'
p38985
sS'default'
p38986
S'0'
p38987
sS'name'
p38988
S'use_displaced_mesh'
p38989
sS'required'
p38990
I00
sS'group_name'
p38991
S'Advanced'
p38992
sa(dp38993
S'description'
p38994
S'The name of the variable that this object operates on\n'
p38995
sS'cpp_type'
p38996
S'std::vector<VariableName>'
p38997
sS'default'
p38998
g3
sS'name'
p38999
S'variable'
p39000
sS'required'
p39001
I00
sS'group_name'
p39002
NsasS'name'
p39003
S'/UserObjects/LayeredAverage'
p39004
sa(dp39005
S'description'
p39006
g3
sS'subblocks'
p39007
NsS'parameters'
p39008
(lp39009
(dp39010
S'description'
p39011
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p39012
sS'cpp_type'
p39013
S'unsigned int'
p39014
sS'default'
p39015
S'1'
p39016
sS'name'
p39017
S'average_radius'
p39018
sS'required'
p39019
I00
sS'group_name'
p39020
Nsa(dp39021
S'description'
p39022
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39023
sS'cpp_type'
p39024
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p39025
sS'default'
p39026
g3
sS'name'
p39027
S'block'
p39028
sS'required'
p39029
I00
sS'group_name'
p39030
Nsa(dp39031
S'description'
p39032
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p39033
sS'cpp_type'
p39034
S'std::__1::vector<double, std::__1::allocator<double> >'
p39035
sS'default'
p39036
g3
sS'name'
p39037
S'bounds'
p39038
sS'required'
p39039
I00
sS'group_name'
p39040
Nsa(dp39041
S'name'
p39042
S'direction'
p39043
sS'cpp_type'
p39044
S'MooseEnum'
p39045
sS'default'
p39046
g3
sS'description'
p39047
S'The direction of the layers.\n'
p39048
sS'required'
p39049
I01
sS'options'
p39050
S'x y z'
p39051
sS'group_name'
p39052
Nsa(dp39053
S'name'
p39054
S'execute_on'
p39055
sS'cpp_type'
p39056
S'MultiMooseEnum'
p39057
sS'default'
p39058
S'TIMESTEP_END'
p39059
sS'description'
p39060
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39061
sS'required'
p39062
I00
sS'options'
p39063
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39064
sS'group_name'
p39065
Nsa(dp39066
S'description'
p39067
S'The number of layers.\n'
p39068
sS'cpp_type'
p39069
S'unsigned int'
p39070
sS'default'
p39071
g3
sS'name'
p39072
S'num_layers'
p39073
sS'required'
p39074
I00
sS'group_name'
p39075
Nsa(dp39076
S'name'
p39077
S'sample_type'
p39078
sS'cpp_type'
p39079
S'MooseEnum'
p39080
sS'default'
p39081
S'direct'
p39082
sS'description'
p39083
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p39084
sS'required'
p39085
I00
sS'options'
p39086
S'direct interpolate average'
p39087
sS'group_name'
p39088
Nsa(dp39089
S'description'
p39090
S'The seed for the master random number generator\n'
p39091
sS'cpp_type'
p39092
S'unsigned int'
p39093
sS'default'
p39094
S'0'
p39095
sS'name'
p39096
S'seed'
p39097
sS'required'
p39098
I00
sS'group_name'
p39099
S'Advanced'
p39100
sa(dp39101
S'description'
p39102
g3
sS'cpp_type'
p39103
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39104
sS'default'
p39105
S'LayeredIntegral'
p39106
sS'name'
p39107
S'type'
p39108
sS'required'
p39109
I00
sS'group_name'
p39110
Nsa(dp39111
S'description'
p39112
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39113
sS'cpp_type'
p39114
S'bool'
p39115
sS'default'
p39116
S'0'
p39117
sS'name'
p39118
S'use_displaced_mesh'
p39119
sS'required'
p39120
I00
sS'group_name'
p39121
S'Advanced'
p39122
sa(dp39123
S'description'
p39124
S'The name of the variable that this object operates on\n'
p39125
sS'cpp_type'
p39126
S'std::vector<VariableName>'
p39127
sS'default'
p39128
g3
sS'name'
p39129
S'variable'
p39130
sS'required'
p39131
I00
sS'group_name'
p39132
NsasS'name'
p39133
S'/UserObjects/LayeredIntegral'
p39134
sa(dp39135
S'description'
p39136
g3
sS'subblocks'
p39137
NsS'parameters'
p39138
(lp39139
(dp39140
S'description'
p39141
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p39142
sS'cpp_type'
p39143
S'unsigned int'
p39144
sS'default'
p39145
S'1'
p39146
sS'name'
p39147
S'average_radius'
p39148
sS'required'
p39149
I00
sS'group_name'
p39150
Nsa(dp39151
S'description'
p39152
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39153
sS'cpp_type'
p39154
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p39155
sS'default'
p39156
g3
sS'name'
p39157
S'boundary'
p39158
sS'required'
p39159
I00
sS'group_name'
p39160
Nsa(dp39161
S'description'
p39162
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p39163
sS'cpp_type'
p39164
S'std::__1::vector<double, std::__1::allocator<double> >'
p39165
sS'default'
p39166
g3
sS'name'
p39167
S'bounds'
p39168
sS'required'
p39169
I00
sS'group_name'
p39170
Nsa(dp39171
S'name'
p39172
S'direction'
p39173
sS'cpp_type'
p39174
S'MooseEnum'
p39175
sS'default'
p39176
g3
sS'description'
p39177
S'The direction of the layers.\n'
p39178
sS'required'
p39179
I01
sS'options'
p39180
S'x y z'
p39181
sS'group_name'
p39182
Nsa(dp39183
S'name'
p39184
S'execute_on'
p39185
sS'cpp_type'
p39186
S'MultiMooseEnum'
p39187
sS'default'
p39188
S'TIMESTEP_END'
p39189
sS'description'
p39190
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39191
sS'required'
p39192
I00
sS'options'
p39193
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39194
sS'group_name'
p39195
Nsa(dp39196
S'description'
p39197
S'The number of layers.\n'
p39198
sS'cpp_type'
p39199
S'unsigned int'
p39200
sS'default'
p39201
g3
sS'name'
p39202
S'num_layers'
p39203
sS'required'
p39204
I00
sS'group_name'
p39205
Nsa(dp39206
S'name'
p39207
S'sample_type'
p39208
sS'cpp_type'
p39209
S'MooseEnum'
p39210
sS'default'
p39211
S'direct'
p39212
sS'description'
p39213
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p39214
sS'required'
p39215
I00
sS'options'
p39216
S'direct interpolate average'
p39217
sS'group_name'
p39218
Nsa(dp39219
S'description'
p39220
g3
sS'cpp_type'
p39221
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39222
sS'default'
p39223
S'LayeredSideAverage'
p39224
sS'name'
p39225
S'type'
p39226
sS'required'
p39227
I00
sS'group_name'
p39228
Nsa(dp39229
S'description'
p39230
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39231
sS'cpp_type'
p39232
S'bool'
p39233
sS'default'
p39234
S'0'
p39235
sS'name'
p39236
S'use_displaced_mesh'
p39237
sS'required'
p39238
I00
sS'group_name'
p39239
S'Advanced'
p39240
sa(dp39241
S'description'
p39242
S'The name of the variable that this boundary condition applies to\n'
p39243
sS'cpp_type'
p39244
S'std::vector<VariableName>'
p39245
sS'default'
p39246
g3
sS'name'
p39247
S'variable'
p39248
sS'required'
p39249
I00
sS'group_name'
p39250
NsasS'name'
p39251
S'/UserObjects/LayeredSideAverage'
p39252
sa(dp39253
S'description'
p39254
g3
sS'subblocks'
p39255
NsS'parameters'
p39256
(lp39257
(dp39258
S'description'
p39259
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p39260
sS'cpp_type'
p39261
S'unsigned int'
p39262
sS'default'
p39263
S'1'
p39264
sS'name'
p39265
S'average_radius'
p39266
sS'required'
p39267
I00
sS'group_name'
p39268
Nsa(dp39269
S'description'
p39270
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39271
sS'cpp_type'
p39272
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p39273
sS'default'
p39274
g3
sS'name'
p39275
S'boundary'
p39276
sS'required'
p39277
I00
sS'group_name'
p39278
Nsa(dp39279
S'description'
p39280
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p39281
sS'cpp_type'
p39282
S'std::__1::vector<double, std::__1::allocator<double> >'
p39283
sS'default'
p39284
g3
sS'name'
p39285
S'bounds'
p39286
sS'required'
p39287
I00
sS'group_name'
p39288
Nsa(dp39289
S'description'
p39290
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p39291
sS'cpp_type'
p39292
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39293
sS'default'
p39294
g3
sS'name'
p39295
S'diffusivity'
p39296
sS'required'
p39297
I01
sS'group_name'
p39298
Nsa(dp39299
S'name'
p39300
S'direction'
p39301
sS'cpp_type'
p39302
S'MooseEnum'
p39303
sS'default'
p39304
g3
sS'description'
p39305
S'The direction of the layers.\n'
p39306
sS'required'
p39307
I01
sS'options'
p39308
S'x y z'
p39309
sS'group_name'
p39310
Nsa(dp39311
S'name'
p39312
S'execute_on'
p39313
sS'cpp_type'
p39314
S'MultiMooseEnum'
p39315
sS'default'
p39316
S'TIMESTEP_END'
p39317
sS'description'
p39318
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39319
sS'required'
p39320
I00
sS'options'
p39321
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39322
sS'group_name'
p39323
Nsa(dp39324
S'description'
p39325
S'The number of layers.\n'
p39326
sS'cpp_type'
p39327
S'unsigned int'
p39328
sS'default'
p39329
g3
sS'name'
p39330
S'num_layers'
p39331
sS'required'
p39332
I00
sS'group_name'
p39333
Nsa(dp39334
S'name'
p39335
S'sample_type'
p39336
sS'cpp_type'
p39337
S'MooseEnum'
p39338
sS'default'
p39339
S'direct'
p39340
sS'description'
p39341
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p39342
sS'required'
p39343
I00
sS'options'
p39344
S'direct interpolate average'
p39345
sS'group_name'
p39346
Nsa(dp39347
S'description'
p39348
g3
sS'cpp_type'
p39349
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39350
sS'default'
p39351
S'LayeredSideFluxAverage'
p39352
sS'name'
p39353
S'type'
p39354
sS'required'
p39355
I00
sS'group_name'
p39356
Nsa(dp39357
S'description'
p39358
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39359
sS'cpp_type'
p39360
S'bool'
p39361
sS'default'
p39362
S'0'
p39363
sS'name'
p39364
S'use_displaced_mesh'
p39365
sS'required'
p39366
I00
sS'group_name'
p39367
S'Advanced'
p39368
sa(dp39369
S'description'
p39370
S'The name of the variable that this boundary condition applies to\n'
p39371
sS'cpp_type'
p39372
S'std::vector<VariableName>'
p39373
sS'default'
p39374
g3
sS'name'
p39375
S'variable'
p39376
sS'required'
p39377
I00
sS'group_name'
p39378
NsasS'name'
p39379
S'/UserObjects/LayeredSideFluxAverage'
p39380
sa(dp39381
S'description'
p39382
g3
sS'subblocks'
p39383
NsS'parameters'
p39384
(lp39385
(dp39386
S'description'
p39387
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p39388
sS'cpp_type'
p39389
S'unsigned int'
p39390
sS'default'
p39391
S'1'
p39392
sS'name'
p39393
S'average_radius'
p39394
sS'required'
p39395
I00
sS'group_name'
p39396
Nsa(dp39397
S'description'
p39398
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39399
sS'cpp_type'
p39400
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p39401
sS'default'
p39402
g3
sS'name'
p39403
S'boundary'
p39404
sS'required'
p39405
I00
sS'group_name'
p39406
Nsa(dp39407
S'description'
p39408
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p39409
sS'cpp_type'
p39410
S'std::__1::vector<double, std::__1::allocator<double> >'
p39411
sS'default'
p39412
g3
sS'name'
p39413
S'bounds'
p39414
sS'required'
p39415
I00
sS'group_name'
p39416
Nsa(dp39417
S'name'
p39418
S'direction'
p39419
sS'cpp_type'
p39420
S'MooseEnum'
p39421
sS'default'
p39422
g3
sS'description'
p39423
S'The direction of the layers.\n'
p39424
sS'required'
p39425
I01
sS'options'
p39426
S'x y z'
p39427
sS'group_name'
p39428
Nsa(dp39429
S'name'
p39430
S'execute_on'
p39431
sS'cpp_type'
p39432
S'MultiMooseEnum'
p39433
sS'default'
p39434
S'TIMESTEP_END'
p39435
sS'description'
p39436
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39437
sS'required'
p39438
I00
sS'options'
p39439
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39440
sS'group_name'
p39441
Nsa(dp39442
S'description'
p39443
S'The number of layers.\n'
p39444
sS'cpp_type'
p39445
S'unsigned int'
p39446
sS'default'
p39447
g3
sS'name'
p39448
S'num_layers'
p39449
sS'required'
p39450
I00
sS'group_name'
p39451
Nsa(dp39452
S'name'
p39453
S'sample_type'
p39454
sS'cpp_type'
p39455
S'MooseEnum'
p39456
sS'default'
p39457
S'direct'
p39458
sS'description'
p39459
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p39460
sS'required'
p39461
I00
sS'options'
p39462
S'direct interpolate average'
p39463
sS'group_name'
p39464
Nsa(dp39465
S'description'
p39466
g3
sS'cpp_type'
p39467
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39468
sS'default'
p39469
S'LayeredSideIntegral'
p39470
sS'name'
p39471
S'type'
p39472
sS'required'
p39473
I00
sS'group_name'
p39474
Nsa(dp39475
S'description'
p39476
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39477
sS'cpp_type'
p39478
S'bool'
p39479
sS'default'
p39480
S'0'
p39481
sS'name'
p39482
S'use_displaced_mesh'
p39483
sS'required'
p39484
I00
sS'group_name'
p39485
S'Advanced'
p39486
sa(dp39487
S'description'
p39488
S'The name of the variable that this boundary condition applies to\n'
p39489
sS'cpp_type'
p39490
S'std::vector<VariableName>'
p39491
sS'default'
p39492
g3
sS'name'
p39493
S'variable'
p39494
sS'required'
p39495
I00
sS'group_name'
p39496
NsasS'name'
p39497
S'/UserObjects/LayeredSideIntegral'
p39498
sa(dp39499
S'description'
p39500
g3
sS'subblocks'
p39501
NsS'parameters'
p39502
(lp39503
(dp39504
S'description'
p39505
S"When using 'average' sampling this is how the number of values both above and below the layer that will be averaged.\n"
p39506
sS'cpp_type'
p39507
S'unsigned int'
p39508
sS'default'
p39509
S'1'
p39510
sS'name'
p39511
S'average_radius'
p39512
sS'required'
p39513
I00
sS'group_name'
p39514
Nsa(dp39515
S'description'
p39516
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39517
sS'cpp_type'
p39518
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p39519
sS'default'
p39520
g3
sS'name'
p39521
S'block'
p39522
sS'required'
p39523
I00
sS'group_name'
p39524
Nsa(dp39525
S'description'
p39526
S"The 'bounding' positions of the layers i.e.: '0, 1.2, 3.7, 4.2' will mean 3 layers between those positions.\n"
p39527
sS'cpp_type'
p39528
S'std::__1::vector<double, std::__1::allocator<double> >'
p39529
sS'default'
p39530
g3
sS'name'
p39531
S'bounds'
p39532
sS'required'
p39533
I00
sS'group_name'
p39534
Nsa(dp39535
S'name'
p39536
S'direction'
p39537
sS'cpp_type'
p39538
S'MooseEnum'
p39539
sS'default'
p39540
g3
sS'description'
p39541
S'The direction of the layers.\n'
p39542
sS'required'
p39543
I01
sS'options'
p39544
S'x y z'
p39545
sS'group_name'
p39546
Nsa(dp39547
S'name'
p39548
S'execute_on'
p39549
sS'cpp_type'
p39550
S'MultiMooseEnum'
p39551
sS'default'
p39552
S'TIMESTEP_END'
p39553
sS'description'
p39554
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39555
sS'required'
p39556
I00
sS'options'
p39557
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39558
sS'group_name'
p39559
Nsa(dp39560
S'description'
p39561
S'The number of layers.\n'
p39562
sS'cpp_type'
p39563
S'unsigned int'
p39564
sS'default'
p39565
g3
sS'name'
p39566
S'num_layers'
p39567
sS'required'
p39568
I00
sS'group_name'
p39569
Nsa(dp39570
S'description'
p39571
S'Layered averages will be computed in space closest to these points.\n'
p39572
sS'cpp_type'
p39573
S'std::__1::vector<double, std::__1::allocator<double> >'
p39574
sS'default'
p39575
g3
sS'name'
p39576
S'points'
p39577
sS'required'
p39578
I01
sS'group_name'
p39579
Nsa(dp39580
S'name'
p39581
S'sample_type'
p39582
sS'cpp_type'
p39583
S'MooseEnum'
p39584
sS'default'
p39585
S'direct'
p39586
sS'description'
p39587
S"How to sample the layers.  'direct' means get the value of the layer the point falls in directly (or average if that layer has no value).  'interpolate' does a linear interpolation between the two closest layers.  'average' averages the two closest layers.\n"
p39588
sS'required'
p39589
I00
sS'options'
p39590
S'direct interpolate average'
p39591
sS'group_name'
p39592
Nsa(dp39593
S'description'
p39594
S'The seed for the master random number generator\n'
p39595
sS'cpp_type'
p39596
S'unsigned int'
p39597
sS'default'
p39598
S'0'
p39599
sS'name'
p39600
S'seed'
p39601
sS'required'
p39602
I00
sS'group_name'
p39603
S'Advanced'
p39604
sa(dp39605
S'description'
p39606
g3
sS'cpp_type'
p39607
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39608
sS'default'
p39609
S'NearestPointLayeredAverage'
p39610
sS'name'
p39611
S'type'
p39612
sS'required'
p39613
I00
sS'group_name'
p39614
Nsa(dp39615
S'description'
p39616
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39617
sS'cpp_type'
p39618
S'bool'
p39619
sS'default'
p39620
S'0'
p39621
sS'name'
p39622
S'use_displaced_mesh'
p39623
sS'required'
p39624
I00
sS'group_name'
p39625
S'Advanced'
p39626
sa(dp39627
S'description'
p39628
S'The name of the variable that this object operates on\n'
p39629
sS'cpp_type'
p39630
S'std::vector<VariableName>'
p39631
sS'default'
p39632
g3
sS'name'
p39633
S'variable'
p39634
sS'required'
p39635
I00
sS'group_name'
p39636
NsasS'name'
p39637
S'/UserObjects/NearestPointLayeredAverage'
p39638
sa(dp39639
S'description'
p39640
g3
sS'subblocks'
p39641
NsS'parameters'
p39642
(lp39643
(dp39644
S'description'
p39645
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39646
sS'cpp_type'
p39647
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p39648
sS'default'
p39649
g3
sS'name'
p39650
S'block'
p39651
sS'required'
p39652
I00
sS'group_name'
p39653
Nsa(dp39654
S'description'
p39655
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39656
sS'cpp_type'
p39657
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p39658
sS'default'
p39659
g3
sS'name'
p39660
S'boundary'
p39661
sS'required'
p39662
I00
sS'group_name'
p39663
Nsa(dp39664
S'name'
p39665
S'execute_on'
p39666
sS'cpp_type'
p39667
S'MultiMooseEnum'
p39668
sS'default'
p39669
S'TIMESTEP_END'
p39670
sS'description'
p39671
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39672
sS'required'
p39673
I00
sS'options'
p39674
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39675
sS'group_name'
p39676
Nsa(dp39677
S'description'
p39678
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39679
sS'cpp_type'
p39680
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39681
sS'default'
p39682
g3
sS'name'
p39683
S'outputs'
p39684
sS'required'
p39685
I00
sS'group_name'
p39686
S'Advanced'
p39687
sa(dp39688
S'description'
p39689
S'The seed for the master random number generator\n'
p39690
sS'cpp_type'
p39691
S'unsigned int'
p39692
sS'default'
p39693
S'0'
p39694
sS'name'
p39695
S'seed'
p39696
sS'required'
p39697
I00
sS'group_name'
p39698
S'Advanced'
p39699
sa(dp39700
S'description'
p39701
g3
sS'cpp_type'
p39702
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39703
sS'default'
p39704
S'NodalExtremeValue'
p39705
sS'name'
p39706
S'type'
p39707
sS'required'
p39708
I00
sS'group_name'
p39709
Nsa(dp39710
S'description'
p39711
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39712
sS'cpp_type'
p39713
S'bool'
p39714
sS'default'
p39715
S'0'
p39716
sS'name'
p39717
S'use_displaced_mesh'
p39718
sS'required'
p39719
I00
sS'group_name'
p39720
S'Advanced'
p39721
sa(dp39722
S'name'
p39723
S'value_type'
p39724
sS'cpp_type'
p39725
S'MooseEnum'
p39726
sS'default'
p39727
S'max'
p39728
sS'description'
p39729
S"Type of extreme value to return. 'max' returns the maximum value. 'min' returns the minimum value.\n"
p39730
sS'required'
p39731
I00
sS'options'
p39732
S'max min'
p39733
sS'group_name'
p39734
Nsa(dp39735
S'description'
p39736
S'The name of the variable that this postprocessor operates on\n'
p39737
sS'cpp_type'
p39738
S'std::vector<VariableName>'
p39739
sS'default'
p39740
g3
sS'name'
p39741
S'variable'
p39742
sS'required'
p39743
I00
sS'group_name'
p39744
NsasS'name'
p39745
S'/UserObjects/NodalExtremeValue'
p39746
sa(dp39747
S'description'
p39748
g3
sS'subblocks'
p39749
NsS'parameters'
p39750
(lp39751
(dp39752
S'description'
p39753
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39754
sS'cpp_type'
p39755
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p39756
sS'default'
p39757
g3
sS'name'
p39758
S'block'
p39759
sS'required'
p39760
I00
sS'group_name'
p39761
Nsa(dp39762
S'description'
p39763
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39764
sS'cpp_type'
p39765
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p39766
sS'default'
p39767
g3
sS'name'
p39768
S'boundary'
p39769
sS'required'
p39770
I00
sS'group_name'
p39771
Nsa(dp39772
S'name'
p39773
S'execute_on'
p39774
sS'cpp_type'
p39775
S'MultiMooseEnum'
p39776
sS'default'
p39777
S'TIMESTEP_END'
p39778
sS'description'
p39779
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39780
sS'required'
p39781
I00
sS'options'
p39782
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39783
sS'group_name'
p39784
Nsa(dp39785
S'description'
p39786
S'The analytic solution to compare against\n'
p39787
sS'cpp_type'
p39788
S'FunctionName'
p39789
sS'default'
p39790
g3
sS'name'
p39791
S'function'
p39792
sS'required'
p39793
I01
sS'group_name'
p39794
Nsa(dp39795
S'description'
p39796
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39797
sS'cpp_type'
p39798
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39799
sS'default'
p39800
g3
sS'name'
p39801
S'outputs'
p39802
sS'required'
p39803
I00
sS'group_name'
p39804
S'Advanced'
p39805
sa(dp39806
S'description'
p39807
S'The seed for the master random number generator\n'
p39808
sS'cpp_type'
p39809
S'unsigned int'
p39810
sS'default'
p39811
S'0'
p39812
sS'name'
p39813
S'seed'
p39814
sS'required'
p39815
I00
sS'group_name'
p39816
S'Advanced'
p39817
sa(dp39818
S'description'
p39819
g3
sS'cpp_type'
p39820
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39821
sS'default'
p39822
S'NodalL2Error'
p39823
sS'name'
p39824
S'type'
p39825
sS'required'
p39826
I00
sS'group_name'
p39827
Nsa(dp39828
S'description'
p39829
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39830
sS'cpp_type'
p39831
S'bool'
p39832
sS'default'
p39833
S'0'
p39834
sS'name'
p39835
S'use_displaced_mesh'
p39836
sS'required'
p39837
I00
sS'group_name'
p39838
S'Advanced'
p39839
sa(dp39840
S'description'
p39841
S'The name of the variable that this postprocessor operates on\n'
p39842
sS'cpp_type'
p39843
S'std::vector<VariableName>'
p39844
sS'default'
p39845
g3
sS'name'
p39846
S'variable'
p39847
sS'required'
p39848
I00
sS'group_name'
p39849
NsasS'name'
p39850
S'/UserObjects/NodalL2Error'
p39851
sa(dp39852
S'description'
p39853
g3
sS'subblocks'
p39854
NsS'parameters'
p39855
(lp39856
(dp39857
S'description'
p39858
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39859
sS'cpp_type'
p39860
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p39861
sS'default'
p39862
g3
sS'name'
p39863
S'block'
p39864
sS'required'
p39865
I00
sS'group_name'
p39866
Nsa(dp39867
S'description'
p39868
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39869
sS'cpp_type'
p39870
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p39871
sS'default'
p39872
g3
sS'name'
p39873
S'boundary'
p39874
sS'required'
p39875
I00
sS'group_name'
p39876
Nsa(dp39877
S'name'
p39878
S'execute_on'
p39879
sS'cpp_type'
p39880
S'MultiMooseEnum'
p39881
sS'default'
p39882
S'TIMESTEP_END'
p39883
sS'description'
p39884
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39885
sS'required'
p39886
I00
sS'options'
p39887
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39888
sS'group_name'
p39889
Nsa(dp39890
S'description'
p39891
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39892
sS'cpp_type'
p39893
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39894
sS'default'
p39895
g3
sS'name'
p39896
S'outputs'
p39897
sS'required'
p39898
I00
sS'group_name'
p39899
S'Advanced'
p39900
sa(dp39901
S'description'
p39902
S'The seed for the master random number generator\n'
p39903
sS'cpp_type'
p39904
S'unsigned int'
p39905
sS'default'
p39906
S'0'
p39907
sS'name'
p39908
S'seed'
p39909
sS'required'
p39910
I00
sS'group_name'
p39911
S'Advanced'
p39912
sa(dp39913
S'description'
p39914
g3
sS'cpp_type'
p39915
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p39916
sS'default'
p39917
S'NodalL2Norm'
p39918
sS'name'
p39919
S'type'
p39920
sS'required'
p39921
I00
sS'group_name'
p39922
Nsa(dp39923
S'description'
p39924
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p39925
sS'cpp_type'
p39926
S'bool'
p39927
sS'default'
p39928
S'0'
p39929
sS'name'
p39930
S'use_displaced_mesh'
p39931
sS'required'
p39932
I00
sS'group_name'
p39933
S'Advanced'
p39934
sa(dp39935
S'description'
p39936
S'The name of the variable that this postprocessor operates on\n'
p39937
sS'cpp_type'
p39938
S'std::vector<VariableName>'
p39939
sS'default'
p39940
g3
sS'name'
p39941
S'variable'
p39942
sS'required'
p39943
I00
sS'group_name'
p39944
NsasS'name'
p39945
S'/UserObjects/NodalL2Norm'
p39946
sa(dp39947
S'description'
p39948
g3
sS'subblocks'
p39949
NsS'parameters'
p39950
(lp39951
(dp39952
S'description'
p39953
S'The list of block ids (SubdomainID) that this object will be applied\n'
p39954
sS'cpp_type'
p39955
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p39956
sS'default'
p39957
g3
sS'name'
p39958
S'block'
p39959
sS'required'
p39960
I00
sS'group_name'
p39961
Nsa(dp39962
S'description'
p39963
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p39964
sS'cpp_type'
p39965
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p39966
sS'default'
p39967
g3
sS'name'
p39968
S'boundary'
p39969
sS'required'
p39970
I00
sS'group_name'
p39971
Nsa(dp39972
S'name'
p39973
S'execute_on'
p39974
sS'cpp_type'
p39975
S'MultiMooseEnum'
p39976
sS'default'
p39977
S'TIMESTEP_END'
p39978
sS'description'
p39979
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p39980
sS'required'
p39981
I00
sS'options'
p39982
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p39983
sS'group_name'
p39984
Nsa(dp39985
S'description'
p39986
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p39987
sS'cpp_type'
p39988
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p39989
sS'default'
p39990
g3
sS'name'
p39991
S'outputs'
p39992
sS'required'
p39993
I00
sS'group_name'
p39994
S'Advanced'
p39995
sa(dp39996
S'description'
p39997
S'The seed for the master random number generator\n'
p39998
sS'cpp_type'
p39999
S'unsigned int'
p40000
sS'default'
p40001
S'0'
p40002
sS'name'
p40003
S'seed'
p40004
sS'required'
p40005
I00
sS'group_name'
p40006
S'Advanced'
p40007
sa(dp40008
S'description'
p40009
g3
sS'cpp_type'
p40010
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40011
sS'default'
p40012
S'NodalMaxValue'
p40013
sS'name'
p40014
S'type'
p40015
sS'required'
p40016
I00
sS'group_name'
p40017
Nsa(dp40018
S'description'
p40019
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40020
sS'cpp_type'
p40021
S'bool'
p40022
sS'default'
p40023
S'0'
p40024
sS'name'
p40025
S'use_displaced_mesh'
p40026
sS'required'
p40027
I00
sS'group_name'
p40028
S'Advanced'
p40029
sa(dp40030
S'description'
p40031
S'The name of the variable that this postprocessor operates on\n'
p40032
sS'cpp_type'
p40033
S'std::vector<VariableName>'
p40034
sS'default'
p40035
g3
sS'name'
p40036
S'variable'
p40037
sS'required'
p40038
I00
sS'group_name'
p40039
NsasS'name'
p40040
S'/UserObjects/NodalMaxValue'
p40041
sa(dp40042
S'description'
p40043
g3
sS'subblocks'
p40044
NsS'parameters'
p40045
(lp40046
(dp40047
S'description'
p40048
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40049
sS'cpp_type'
p40050
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40051
sS'default'
p40052
g3
sS'name'
p40053
S'boundary'
p40054
sS'required'
p40055
I00
sS'group_name'
p40056
Nsa(dp40057
S'description'
p40058
S"Node set ID which contains the nodes that are in 'corners'.\n"
p40059
sS'cpp_type'
p40060
S'BoundaryName'
p40061
sS'default'
p40062
g3
sS'name'
p40063
S'corner_boundary'
p40064
sS'required'
p40065
I01
sS'group_name'
p40066
Nsa(dp40067
S'name'
p40068
S'execute_on'
p40069
sS'cpp_type'
p40070
S'MultiMooseEnum'
p40071
sS'default'
p40072
S'TIMESTEP_END'
p40073
sS'description'
p40074
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40075
sS'required'
p40076
I00
sS'options'
p40077
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40078
sS'group_name'
p40079
Nsa(dp40080
S'description'
p40081
g3
sS'cpp_type'
p40082
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40083
sS'default'
p40084
S'NodalNormalsCorner'
p40085
sS'name'
p40086
S'type'
p40087
sS'required'
p40088
I00
sS'group_name'
p40089
Nsa(dp40090
S'description'
p40091
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40092
sS'cpp_type'
p40093
S'bool'
p40094
sS'default'
p40095
S'0'
p40096
sS'name'
p40097
S'use_displaced_mesh'
p40098
sS'required'
p40099
I00
sS'group_name'
p40100
S'Advanced'
p40101
sasS'name'
p40102
S'/UserObjects/NodalNormalsCorner'
p40103
sa(dp40104
S'description'
p40105
g3
sS'subblocks'
p40106
NsS'parameters'
p40107
(lp40108
(dp40109
S'description'
p40110
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40111
sS'cpp_type'
p40112
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p40113
sS'default'
p40114
g3
sS'name'
p40115
S'block'
p40116
sS'required'
p40117
I00
sS'group_name'
p40118
Nsa(dp40119
S'description'
p40120
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40121
sS'cpp_type'
p40122
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40123
sS'default'
p40124
g3
sS'name'
p40125
S'boundary'
p40126
sS'required'
p40127
I00
sS'group_name'
p40128
Nsa(dp40129
S'name'
p40130
S'execute_on'
p40131
sS'cpp_type'
p40132
S'MultiMooseEnum'
p40133
sS'default'
p40134
S'TIMESTEP_END'
p40135
sS'description'
p40136
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40137
sS'required'
p40138
I00
sS'options'
p40139
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40140
sS'group_name'
p40141
Nsa(dp40142
S'description'
p40143
S'The seed for the master random number generator\n'
p40144
sS'cpp_type'
p40145
S'unsigned int'
p40146
sS'default'
p40147
S'0'
p40148
sS'name'
p40149
S'seed'
p40150
sS'required'
p40151
I00
sS'group_name'
p40152
S'Advanced'
p40153
sa(dp40154
S'description'
p40155
g3
sS'cpp_type'
p40156
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40157
sS'default'
p40158
S'NodalNormalsEvaluator'
p40159
sS'name'
p40160
S'type'
p40161
sS'required'
p40162
I00
sS'group_name'
p40163
Nsa(dp40164
S'description'
p40165
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40166
sS'cpp_type'
p40167
S'bool'
p40168
sS'default'
p40169
S'0'
p40170
sS'name'
p40171
S'use_displaced_mesh'
p40172
sS'required'
p40173
I00
sS'group_name'
p40174
S'Advanced'
p40175
sasS'name'
p40176
S'/UserObjects/NodalNormalsEvaluator'
p40177
sa(dp40178
S'description'
p40179
g3
sS'subblocks'
p40180
NsS'parameters'
p40181
(lp40182
(dp40183
S'description'
p40184
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40185
sS'cpp_type'
p40186
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p40187
sS'default'
p40188
g3
sS'name'
p40189
S'block'
p40190
sS'required'
p40191
I00
sS'group_name'
p40192
Nsa(dp40193
S'description'
p40194
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40195
sS'cpp_type'
p40196
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40197
sS'default'
p40198
g3
sS'name'
p40199
S'boundary'
p40200
sS'required'
p40201
I00
sS'group_name'
p40202
Nsa(dp40203
S'description'
p40204
S"Node set ID which contains the nodes that are in 'corners'.\n"
p40205
sS'cpp_type'
p40206
S'BoundaryName'
p40207
sS'default'
p40208
g3
sS'name'
p40209
S'corner_boundary'
p40210
sS'required'
p40211
I00
sS'group_name'
p40212
Nsa(dp40213
S'name'
p40214
S'execute_on'
p40215
sS'cpp_type'
p40216
S'MultiMooseEnum'
p40217
sS'default'
p40218
S'TIMESTEP_END'
p40219
sS'description'
p40220
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40221
sS'required'
p40222
I00
sS'options'
p40223
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40224
sS'group_name'
p40225
Nsa(dp40226
S'description'
p40227
S'The seed for the master random number generator\n'
p40228
sS'cpp_type'
p40229
S'unsigned int'
p40230
sS'default'
p40231
S'0'
p40232
sS'name'
p40233
S'seed'
p40234
sS'required'
p40235
I00
sS'group_name'
p40236
S'Advanced'
p40237
sa(dp40238
S'description'
p40239
g3
sS'cpp_type'
p40240
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40241
sS'default'
p40242
S'NodalNormalsPreprocessor'
p40243
sS'name'
p40244
S'type'
p40245
sS'required'
p40246
I00
sS'group_name'
p40247
Nsa(dp40248
S'description'
p40249
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40250
sS'cpp_type'
p40251
S'bool'
p40252
sS'default'
p40253
S'0'
p40254
sS'name'
p40255
S'use_displaced_mesh'
p40256
sS'required'
p40257
I00
sS'group_name'
p40258
S'Advanced'
p40259
sasS'name'
p40260
S'/UserObjects/NodalNormalsPreprocessor'
p40261
sa(dp40262
S'description'
p40263
g3
sS'subblocks'
p40264
NsS'parameters'
p40265
(lp40266
(dp40267
S'description'
p40268
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40269
sS'cpp_type'
p40270
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p40271
sS'default'
p40272
g3
sS'name'
p40273
S'block'
p40274
sS'required'
p40275
I00
sS'group_name'
p40276
Nsa(dp40277
S'description'
p40278
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40279
sS'cpp_type'
p40280
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40281
sS'default'
p40282
g3
sS'name'
p40283
S'boundary'
p40284
sS'required'
p40285
I00
sS'group_name'
p40286
Nsa(dp40287
S'name'
p40288
S'execute_on'
p40289
sS'cpp_type'
p40290
S'MultiMooseEnum'
p40291
sS'default'
p40292
S'TIMESTEP_END'
p40293
sS'description'
p40294
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40295
sS'required'
p40296
I00
sS'options'
p40297
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40298
sS'group_name'
p40299
Nsa(dp40300
S'description'
p40301
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40302
sS'cpp_type'
p40303
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40304
sS'default'
p40305
g3
sS'name'
p40306
S'outputs'
p40307
sS'required'
p40308
I00
sS'group_name'
p40309
S'Advanced'
p40310
sa(dp40311
S'description'
p40312
S'The seed for the master random number generator\n'
p40313
sS'cpp_type'
p40314
S'unsigned int'
p40315
sS'default'
p40316
S'0'
p40317
sS'name'
p40318
S'seed'
p40319
sS'required'
p40320
I00
sS'group_name'
p40321
S'Advanced'
p40322
sa(dp40323
S'description'
p40324
g3
sS'cpp_type'
p40325
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40326
sS'default'
p40327
S'NodalProxyMaxValue'
p40328
sS'name'
p40329
S'type'
p40330
sS'required'
p40331
I00
sS'group_name'
p40332
Nsa(dp40333
S'description'
p40334
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40335
sS'cpp_type'
p40336
S'bool'
p40337
sS'default'
p40338
S'0'
p40339
sS'name'
p40340
S'use_displaced_mesh'
p40341
sS'required'
p40342
I00
sS'group_name'
p40343
S'Advanced'
p40344
sa(dp40345
S'description'
p40346
S'The name of the variable that this postprocessor operates on\n'
p40347
sS'cpp_type'
p40348
S'std::vector<VariableName>'
p40349
sS'default'
p40350
g3
sS'name'
p40351
S'variable'
p40352
sS'required'
p40353
I00
sS'group_name'
p40354
NsasS'name'
p40355
S'/UserObjects/NodalProxyMaxValue'
p40356
sa(dp40357
S'description'
p40358
g3
sS'subblocks'
p40359
NsS'parameters'
p40360
(lp40361
(dp40362
S'description'
p40363
S'The list of block ids (SubdomainID) that this object will be applied\n'
p40364
sS'cpp_type'
p40365
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p40366
sS'default'
p40367
g3
sS'name'
p40368
S'block'
p40369
sS'required'
p40370
I00
sS'group_name'
p40371
Nsa(dp40372
S'description'
p40373
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p40374
sS'cpp_type'
p40375
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p40376
sS'default'
p40377
g3
sS'name'
p40378
S'boundary'
p40379
sS'required'
p40380
I00
sS'group_name'
p40381
Nsa(dp40382
S'name'
p40383
S'execute_on'
p40384
sS'cpp_type'
p40385
S'MultiMooseEnum'
p40386
sS'default'
p40387
S'TIMESTEP_END'
p40388
sS'description'
p40389
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40390
sS'required'
p40391
I00
sS'options'
p40392
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40393
sS'group_name'
p40394
Nsa(dp40395
S'description'
p40396
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40397
sS'cpp_type'
p40398
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40399
sS'default'
p40400
g3
sS'name'
p40401
S'outputs'
p40402
sS'required'
p40403
I00
sS'group_name'
p40404
S'Advanced'
p40405
sa(dp40406
S'description'
p40407
S'The seed for the master random number generator\n'
p40408
sS'cpp_type'
p40409
S'unsigned int'
p40410
sS'default'
p40411
S'0'
p40412
sS'name'
p40413
S'seed'
p40414
sS'required'
p40415
I00
sS'group_name'
p40416
S'Advanced'
p40417
sa(dp40418
S'description'
p40419
g3
sS'cpp_type'
p40420
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40421
sS'default'
p40422
S'NodalSum'
p40423
sS'name'
p40424
S'type'
p40425
sS'required'
p40426
I00
sS'group_name'
p40427
Nsa(dp40428
S'description'
p40429
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40430
sS'cpp_type'
p40431
S'bool'
p40432
sS'default'
p40433
S'0'
p40434
sS'name'
p40435
S'use_displaced_mesh'
p40436
sS'required'
p40437
I00
sS'group_name'
p40438
S'Advanced'
p40439
sa(dp40440
S'description'
p40441
S'The name of the variable that this postprocessor operates on\n'
p40442
sS'cpp_type'
p40443
S'std::vector<VariableName>'
p40444
sS'default'
p40445
g3
sS'name'
p40446
S'variable'
p40447
sS'required'
p40448
I00
sS'group_name'
p40449
NsasS'name'
p40450
S'/UserObjects/NodalSum'
p40451
sa(dp40452
S'description'
p40453
g3
sS'subblocks'
p40454
NsS'parameters'
p40455
(lp40456
(dp40457
S'name'
p40458
S'execute_on'
p40459
sS'cpp_type'
p40460
S'MultiMooseEnum'
p40461
sS'default'
p40462
S'TIMESTEP_END'
p40463
sS'description'
p40464
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40465
sS'required'
p40466
I00
sS'options'
p40467
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40468
sS'group_name'
p40469
Nsa(dp40470
S'description'
p40471
S'The ID of the node where we monitor\n'
p40472
sS'cpp_type'
p40473
S'unsigned int'
p40474
sS'default'
p40475
g3
sS'name'
p40476
S'nodeid'
p40477
sS'required'
p40478
I01
sS'group_name'
p40479
Nsa(dp40480
S'description'
p40481
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40482
sS'cpp_type'
p40483
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40484
sS'default'
p40485
g3
sS'name'
p40486
S'outputs'
p40487
sS'required'
p40488
I00
sS'group_name'
p40489
S'Advanced'
p40490
sa(dp40491
S'description'
p40492
S'A scale factor to be applied to the variable\n'
p40493
sS'cpp_type'
p40494
S'double'
p40495
sS'default'
p40496
S'1'
p40497
sS'name'
p40498
S'scale_factor'
p40499
sS'required'
p40500
I00
sS'group_name'
p40501
Nsa(dp40502
S'description'
p40503
g3
sS'cpp_type'
p40504
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40505
sS'default'
p40506
S'NodalVariableValue'
p40507
sS'name'
p40508
S'type'
p40509
sS'required'
p40510
I00
sS'group_name'
p40511
Nsa(dp40512
S'description'
p40513
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40514
sS'cpp_type'
p40515
S'bool'
p40516
sS'default'
p40517
S'0'
p40518
sS'name'
p40519
S'use_displaced_mesh'
p40520
sS'required'
p40521
I00
sS'group_name'
p40522
S'Advanced'
p40523
sa(dp40524
S'description'
p40525
S'The variable to be monitored\n'
p40526
sS'cpp_type'
p40527
S'VariableName'
p40528
sS'default'
p40529
g3
sS'name'
p40530
S'variable'
p40531
sS'required'
p40532
I01
sS'group_name'
p40533
NsasS'name'
p40534
S'/UserObjects/NodalVariableValue'
p40535
sa(dp40536
S'description'
p40537
g3
sS'subblocks'
p40538
NsS'parameters'
p40539
(lp40540
(dp40541
S'description'
p40542
S'filename for Avrami analysis info (ln time and Avrami)\n'
p40543
sS'cpp_type'
p40544
S'FileName'
p40545
sS'default'
p40546
g3
sS'name'
p40547
S'Avrami_file'
p40548
sS'required'
p40549
I00
sS'group_name'
p40550
Nsa(dp40551
S'description'
p40552
S'An optional file name where bubble volumes can be output.\n'
p40553
sS'cpp_type'
p40554
S'FileName'
p40555
sS'default'
p40556
g3
sS'name'
p40557
S'bubble_volume_file'
p40558
sS'required'
p40559
I00
sS'group_name'
p40560
Nsa(dp40561
S'description'
p40562
S'If true, also compute the (normalized) volume of bubbles which intersect the boundary\n'
p40563
sS'cpp_type'
p40564
S'bool'
p40565
sS'default'
p40566
S'0'
p40567
sS'name'
p40568
S'compute_boundary_intersecting_volume'
p40569
sS'required'
p40570
I00
sS'group_name'
p40571
Nsa(dp40572
S'description'
p40573
S'Determines whether we condense all the node values when in multimap mode (default: false)\n'
p40574
sS'cpp_type'
p40575
S'bool'
p40576
sS'default'
p40577
S'0'
p40578
sS'name'
p40579
S'condense_map_info'
p40580
sS'required'
p40581
I00
sS'group_name'
p40582
Nsa(dp40583
S'description'
p40584
S'The threshold for which an existing bubble may be extended (defaults to "threshold")\n'
p40585
sS'cpp_type'
p40586
S'double'
p40587
sS'default'
p40588
g3
sS'name'
p40589
S'connecting_threshold'
p40590
sS'required'
p40591
I00
sS'group_name'
p40592
Nsa(dp40593
S'description'
p40594
S'If supplied, will be used to find the scaled threshold of the bubble edges\n'
p40595
sS'cpp_type'
p40596
S'PostprocessorName'
p40597
sS'default'
p40598
g3
sS'name'
p40599
S'elem_avg_value'
p40600
sS'required'
p40601
I00
sS'group_name'
p40602
Nsa(dp40603
S'description'
p40604
S'Instruct the UO to populate the variable index map.\n'
p40605
sS'cpp_type'
p40606
S'bool'
p40607
sS'default'
p40608
S'0'
p40609
sS'name'
p40610
S'enable_var_coloring'
p40611
sS'required'
p40612
I00
sS'group_name'
p40613
Nsa(dp40614
S'description'
p40615
S'Equilibrium volume fraction of 2nd phase for Avrami analysis\n'
p40616
sS'cpp_type'
p40617
S'double'
p40618
sS'default'
p40619
S'-1'
p40620
sS'name'
p40621
S'equil_fraction'
p40622
sS'required'
p40623
I00
sS'group_name'
p40624
Nsa(dp40625
S'name'
p40626
S'execute_on'
p40627
sS'cpp_type'
p40628
S'MultiMooseEnum'
p40629
sS'default'
p40630
S'TIMESTEP_END'
p40631
sS'description'
p40632
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40633
sS'required'
p40634
I00
sS'options'
p40635
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40636
sS'group_name'
p40637
Nsa(dp40638
S'name'
p40639
S'flood_entity_type'
p40640
sS'cpp_type'
p40641
S'MooseEnum'
p40642
sS'default'
p40643
S'NODAL'
p40644
sS'description'
p40645
S'Determines whether the flood algorithm runs on nodes or elements\n'
p40646
sS'required'
p40647
I00
sS'options'
p40648
S'NODAL ELEMENTAL'
p40649
sS'group_name'
p40650
Nsa(dp40651
S'description'
p40652
S'Postprocessor from which to get mesh volume\n'
p40653
sS'cpp_type'
p40654
S'PostprocessorName'
p40655
sS'default'
p40656
g3
sS'name'
p40657
S'mesh_volume'
p40658
sS'required'
p40659
I01
sS'group_name'
p40660
Nsa(dp40661
S'description'
p40662
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40663
sS'cpp_type'
p40664
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40665
sS'default'
p40666
g3
sS'name'
p40667
S'outputs'
p40668
sS'required'
p40669
I00
sS'group_name'
p40670
S'Advanced'
p40671
sa(dp40672
S'description'
p40673
S'The threshold value for which a new bubble may be started\n'
p40674
sS'cpp_type'
p40675
S'double'
p40676
sS'default'
p40677
S'0.5'
p40678
sS'name'
p40679
S'threshold'
p40680
sS'required'
p40681
I00
sS'group_name'
p40682
Nsa(dp40683
S'description'
p40684
S'Calculate memory usage\n'
p40685
sS'cpp_type'
p40686
S'bool'
p40687
sS'default'
p40688
S'0'
p40689
sS'name'
p40690
S'track_memory_usage'
p40691
sS'required'
p40692
I00
sS'group_name'
p40693
Nsa(dp40694
S'description'
p40695
g3
sS'cpp_type'
p40696
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40697
sS'default'
p40698
S'NodalVolumeFraction'
p40699
sS'name'
p40700
S'type'
p40701
sS'required'
p40702
I00
sS'group_name'
p40703
Nsa(dp40704
S'description'
p40705
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40706
sS'cpp_type'
p40707
S'bool'
p40708
sS'default'
p40709
S'0'
p40710
sS'name'
p40711
S'use_displaced_mesh'
p40712
sS'required'
p40713
I00
sS'group_name'
p40714
S'Advanced'
p40715
sa(dp40716
S'description'
p40717
S'Determine whether or not global numbers are used to label bubbles on multiple maps (default: false)\n'
p40718
sS'cpp_type'
p40719
S'bool'
p40720
sS'default'
p40721
S'0'
p40722
sS'name'
p40723
S'use_global_numbering'
p40724
sS'required'
p40725
I00
sS'group_name'
p40726
Nsa(dp40727
S'description'
p40728
S'Controls whether bubbles are defined to be less than or greater than the threshold value.\n'
p40729
sS'cpp_type'
p40730
S'bool'
p40731
sS'default'
p40732
S'1'
p40733
sS'name'
p40734
S'use_less_than_threshold_comparison'
p40735
sS'required'
p40736
I00
sS'group_name'
p40737
Nsa(dp40738
S'description'
p40739
S'Determine whether information is tracked per coupled variable or consolidated into one (default: true)\n'
p40740
sS'cpp_type'
p40741
S'bool'
p40742
sS'default'
p40743
S'1'
p40744
sS'name'
p40745
S'use_single_map'
p40746
sS'required'
p40747
I00
sS'group_name'
p40748
Nsa(dp40749
S'description'
p40750
S'The variable(s) for which to find connected regions of interests, i.e. "bubbles".\n'
p40751
sS'cpp_type'
p40752
S'std::vector<VariableName>'
p40753
sS'default'
p40754
g3
sS'name'
p40755
S'variable'
p40756
sS'required'
p40757
I01
sS'group_name'
p40758
NsasS'name'
p40759
S'/UserObjects/NodalVolumeFraction'
p40760
sa(dp40761
S'description'
p40762
g3
sS'subblocks'
p40763
NsS'parameters'
p40764
(lp40765
(dp40766
S'name'
p40767
S'execute_on'
p40768
sS'cpp_type'
p40769
S'MultiMooseEnum'
p40770
sS'default'
p40771
S'TIMESTEP_END'
p40772
sS'description'
p40773
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40774
sS'required'
p40775
I00
sS'options'
p40776
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40777
sS'group_name'
p40778
Nsa(dp40779
S'description'
p40780
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40781
sS'cpp_type'
p40782
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40783
sS'default'
p40784
g3
sS'name'
p40785
S'outputs'
p40786
sS'required'
p40787
I00
sS'group_name'
p40788
S'Advanced'
p40789
sa(dp40790
S'description'
p40791
g3
sS'cpp_type'
p40792
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40793
sS'default'
p40794
S'NumDOFs'
p40795
sS'name'
p40796
S'type'
p40797
sS'required'
p40798
I00
sS'group_name'
p40799
Nsa(dp40800
S'description'
p40801
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40802
sS'cpp_type'
p40803
S'bool'
p40804
sS'default'
p40805
S'0'
p40806
sS'name'
p40807
S'use_displaced_mesh'
p40808
sS'required'
p40809
I00
sS'group_name'
p40810
S'Advanced'
p40811
sasS'name'
p40812
S'/UserObjects/NumDOFs'
p40813
sa(dp40814
S'description'
p40815
g3
sS'subblocks'
p40816
NsS'parameters'
p40817
(lp40818
(dp40819
S'name'
p40820
S'execute_on'
p40821
sS'cpp_type'
p40822
S'MultiMooseEnum'
p40823
sS'default'
p40824
S'TIMESTEP_END'
p40825
sS'description'
p40826
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40827
sS'required'
p40828
I00
sS'options'
p40829
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40830
sS'group_name'
p40831
Nsa(dp40832
S'description'
p40833
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40834
sS'cpp_type'
p40835
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40836
sS'default'
p40837
g3
sS'name'
p40838
S'outputs'
p40839
sS'required'
p40840
I00
sS'group_name'
p40841
S'Advanced'
p40842
sa(dp40843
S'description'
p40844
g3
sS'cpp_type'
p40845
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40846
sS'default'
p40847
S'NumElems'
p40848
sS'name'
p40849
S'type'
p40850
sS'required'
p40851
I00
sS'group_name'
p40852
Nsa(dp40853
S'description'
p40854
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40855
sS'cpp_type'
p40856
S'bool'
p40857
sS'default'
p40858
S'0'
p40859
sS'name'
p40860
S'use_displaced_mesh'
p40861
sS'required'
p40862
I00
sS'group_name'
p40863
S'Advanced'
p40864
sasS'name'
p40865
S'/UserObjects/NumElems'
p40866
sa(dp40867
S'description'
p40868
g3
sS'subblocks'
p40869
NsS'parameters'
p40870
(lp40871
(dp40872
S'name'
p40873
S'execute_on'
p40874
sS'cpp_type'
p40875
S'MultiMooseEnum'
p40876
sS'default'
p40877
S'TIMESTEP_END'
p40878
sS'description'
p40879
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40880
sS'required'
p40881
I00
sS'options'
p40882
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40883
sS'group_name'
p40884
Nsa(dp40885
S'description'
p40886
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40887
sS'cpp_type'
p40888
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40889
sS'default'
p40890
g3
sS'name'
p40891
S'outputs'
p40892
sS'required'
p40893
I00
sS'group_name'
p40894
S'Advanced'
p40895
sa(dp40896
S'description'
p40897
g3
sS'cpp_type'
p40898
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40899
sS'default'
p40900
S'NumLinearIterations'
p40901
sS'name'
p40902
S'type'
p40903
sS'required'
p40904
I00
sS'group_name'
p40905
Nsa(dp40906
S'description'
p40907
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40908
sS'cpp_type'
p40909
S'bool'
p40910
sS'default'
p40911
S'0'
p40912
sS'name'
p40913
S'use_displaced_mesh'
p40914
sS'required'
p40915
I00
sS'group_name'
p40916
S'Advanced'
p40917
sasS'name'
p40918
S'/UserObjects/NumLinearIterations'
p40919
sa(dp40920
S'description'
p40921
g3
sS'subblocks'
p40922
NsS'parameters'
p40923
(lp40924
(dp40925
S'name'
p40926
S'execute_on'
p40927
sS'cpp_type'
p40928
S'MultiMooseEnum'
p40929
sS'default'
p40930
S'TIMESTEP_END'
p40931
sS'description'
p40932
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40933
sS'required'
p40934
I00
sS'options'
p40935
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p40936
sS'group_name'
p40937
Nsa(dp40938
S'description'
p40939
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p40940
sS'cpp_type'
p40941
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p40942
sS'default'
p40943
g3
sS'name'
p40944
S'outputs'
p40945
sS'required'
p40946
I00
sS'group_name'
p40947
S'Advanced'
p40948
sa(dp40949
S'description'
p40950
g3
sS'cpp_type'
p40951
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p40952
sS'default'
p40953
S'NumNodes'
p40954
sS'name'
p40955
S'type'
p40956
sS'required'
p40957
I00
sS'group_name'
p40958
Nsa(dp40959
S'description'
p40960
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p40961
sS'cpp_type'
p40962
S'bool'
p40963
sS'default'
p40964
S'0'
p40965
sS'name'
p40966
S'use_displaced_mesh'
p40967
sS'required'
p40968
I00
sS'group_name'
p40969
S'Advanced'
p40970
sasS'name'
p40971
S'/UserObjects/NumNodes'
p40972
sa(dp40973
S'description'
p40974
g3
sS'subblocks'
p40975
NsS'parameters'
p40976
(lp40977
(dp40978
S'description'
p40979
S'When set to true, accumulates to count the total over all Picard iterations for each step\n'
p40980
sS'cpp_type'
p40981
S'bool'
p40982
sS'default'
p40983
S'0'
p40984
sS'name'
p40985
S'accumulate_over_step'
p40986
sS'required'
p40987
I00
sS'group_name'
p40988
Nsa(dp40989
S'name'
p40990
S'execute_on'
p40991
sS'cpp_type'
p40992
S'MultiMooseEnum'
p40993
sS'default'
p40994
S'TIMESTEP_END'
p40995
sS'description'
p40996
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p40997
sS'required'
p40998
I00
sS'options'
p40999
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41000
sS'group_name'
p41001
Nsa(dp41002
S'description'
p41003
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41004
sS'cpp_type'
p41005
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41006
sS'default'
p41007
g3
sS'name'
p41008
S'outputs'
p41009
sS'required'
p41010
I00
sS'group_name'
p41011
S'Advanced'
p41012
sa(dp41013
S'description'
p41014
g3
sS'cpp_type'
p41015
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41016
sS'default'
p41017
S'NumNonlinearIterations'
p41018
sS'name'
p41019
S'type'
p41020
sS'required'
p41021
I00
sS'group_name'
p41022
Nsa(dp41023
S'description'
p41024
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41025
sS'cpp_type'
p41026
S'bool'
p41027
sS'default'
p41028
S'0'
p41029
sS'name'
p41030
S'use_displaced_mesh'
p41031
sS'required'
p41032
I00
sS'group_name'
p41033
S'Advanced'
p41034
sasS'name'
p41035
S'/UserObjects/NumNonlinearIterations'
p41036
sa(dp41037
S'description'
p41038
g3
sS'subblocks'
p41039
NsS'parameters'
p41040
(lp41041
(dp41042
S'name'
p41043
S'execute_on'
p41044
sS'cpp_type'
p41045
S'MultiMooseEnum'
p41046
sS'default'
p41047
S'TIMESTEP_END'
p41048
sS'description'
p41049
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41050
sS'required'
p41051
I00
sS'options'
p41052
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41053
sS'group_name'
p41054
Nsa(dp41055
S'description'
p41056
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41057
sS'cpp_type'
p41058
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41059
sS'default'
p41060
g3
sS'name'
p41061
S'outputs'
p41062
sS'required'
p41063
I00
sS'group_name'
p41064
S'Advanced'
p41065
sa(dp41066
S'description'
p41067
g3
sS'cpp_type'
p41068
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41069
sS'default'
p41070
S'NumPicardIterations'
p41071
sS'name'
p41072
S'type'
p41073
sS'required'
p41074
I00
sS'group_name'
p41075
Nsa(dp41076
S'description'
p41077
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41078
sS'cpp_type'
p41079
S'bool'
p41080
sS'default'
p41081
S'0'
p41082
sS'name'
p41083
S'use_displaced_mesh'
p41084
sS'required'
p41085
I00
sS'group_name'
p41086
S'Advanced'
p41087
sasS'name'
p41088
S'/UserObjects/NumPicardIterations'
p41089
sa(dp41090
S'description'
p41091
g3
sS'subblocks'
p41092
NsS'parameters'
p41093
(lp41094
(dp41095
S'name'
p41096
S'execute_on'
p41097
sS'cpp_type'
p41098
S'MultiMooseEnum'
p41099
sS'default'
p41100
S'TIMESTEP_END'
p41101
sS'description'
p41102
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41103
sS'required'
p41104
I00
sS'options'
p41105
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41106
sS'group_name'
p41107
Nsa(dp41108
S'description'
p41109
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41110
sS'cpp_type'
p41111
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41112
sS'default'
p41113
g3
sS'name'
p41114
S'outputs'
p41115
sS'required'
p41116
I00
sS'group_name'
p41117
S'Advanced'
p41118
sa(dp41119
S'description'
p41120
g3
sS'cpp_type'
p41121
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41122
sS'default'
p41123
S'NumResidualEvaluations'
p41124
sS'name'
p41125
S'type'
p41126
sS'required'
p41127
I00
sS'group_name'
p41128
Nsa(dp41129
S'description'
p41130
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41131
sS'cpp_type'
p41132
S'bool'
p41133
sS'default'
p41134
S'0'
p41135
sS'name'
p41136
S'use_displaced_mesh'
p41137
sS'required'
p41138
I00
sS'group_name'
p41139
S'Advanced'
p41140
sasS'name'
p41141
S'/UserObjects/NumResidualEvaluations'
p41142
sa(dp41143
S'description'
p41144
g3
sS'subblocks'
p41145
NsS'parameters'
p41146
(lp41147
(dp41148
S'name'
p41149
S'execute_on'
p41150
sS'cpp_type'
p41151
S'MultiMooseEnum'
p41152
sS'default'
p41153
S'TIMESTEP_END'
p41154
sS'description'
p41155
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41156
sS'required'
p41157
I00
sS'options'
p41158
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41159
sS'group_name'
p41160
Nsa(dp41161
S'description'
p41162
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41163
sS'cpp_type'
p41164
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41165
sS'default'
p41166
g3
sS'name'
p41167
S'outputs'
p41168
sS'required'
p41169
I00
sS'group_name'
p41170
S'Advanced'
p41171
sa(dp41172
S'name'
p41173
S'system'
p41174
sS'cpp_type'
p41175
S'MooseEnum'
p41176
sS'default'
p41177
S'nonlinear'
p41178
sS'description'
p41179
S'The system for which you want to print the number of variables.\n'
p41180
sS'required'
p41181
I00
sS'options'
p41182
S'nonlinear auxiliary'
p41183
sS'group_name'
p41184
Nsa(dp41185
S'description'
p41186
g3
sS'cpp_type'
p41187
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41188
sS'default'
p41189
S'NumVars'
p41190
sS'name'
p41191
S'type'
p41192
sS'required'
p41193
I00
sS'group_name'
p41194
Nsa(dp41195
S'description'
p41196
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41197
sS'cpp_type'
p41198
S'bool'
p41199
sS'default'
p41200
S'0'
p41201
sS'name'
p41202
S'use_displaced_mesh'
p41203
sS'required'
p41204
I00
sS'group_name'
p41205
S'Advanced'
p41206
sasS'name'
p41207
S'/UserObjects/NumVars'
p41208
sa(dp41209
S'description'
p41210
g3
sS'subblocks'
p41211
NsS'parameters'
p41212
(lp41213
(dp41214
S'name'
p41215
S'execute_on'
p41216
sS'cpp_type'
p41217
S'MultiMooseEnum'
p41218
sS'default'
p41219
S'TIMESTEP_END'
p41220
sS'description'
p41221
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41222
sS'required'
p41223
I00
sS'options'
p41224
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41225
sS'group_name'
p41226
Nsa(dp41227
S'description'
p41228
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41229
sS'cpp_type'
p41230
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41231
sS'default'
p41232
g3
sS'name'
p41233
S'outputs'
p41234
sS'required'
p41235
I00
sS'group_name'
p41236
S'Advanced'
p41237
sa(dp41238
S'description'
p41239
S'The name of the postprocessor used for exit criterion\n'
p41240
sS'cpp_type'
p41241
S'PostprocessorName'
p41242
sS'default'
p41243
g3
sS'name'
p41244
S'postprocessor'
p41245
sS'required'
p41246
I01
sS'group_name'
p41247
Nsa(dp41248
S'description'
p41249
g3
sS'cpp_type'
p41250
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41251
sS'default'
p41252
S'PercentChangePostprocessor'
p41253
sS'name'
p41254
S'type'
p41255
sS'required'
p41256
I00
sS'group_name'
p41257
Nsa(dp41258
S'description'
p41259
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41260
sS'cpp_type'
p41261
S'bool'
p41262
sS'default'
p41263
S'0'
p41264
sS'name'
p41265
S'use_displaced_mesh'
p41266
sS'required'
p41267
I00
sS'group_name'
p41268
S'Advanced'
p41269
sasS'name'
p41270
S'/UserObjects/PercentChangePostprocessor'
p41271
sa(dp41272
S'description'
p41273
g3
sS'subblocks'
p41274
NsS'parameters'
p41275
(lp41276
(dp41277
S'name'
p41278
S'column'
p41279
sS'cpp_type'
p41280
S'MooseEnum'
p41281
sS'default'
p41282
g3
sS'description'
p41283
S'The column you want the value of.\n'
p41284
sS'required'
p41285
I01
sS'options'
p41286
S'n_calls total_time average_time total_time_with_sub average_time_with_sub percent_of_active_time percent_of_active_time_with_sub'
p41287
sS'group_name'
p41288
Nsa(dp41289
S'description'
p41290
S'The name of the event.\n'
p41291
sS'cpp_type'
p41292
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41293
sS'default'
p41294
g3
sS'name'
p41295
S'event'
p41296
sS'required'
p41297
I01
sS'group_name'
p41298
Nsa(dp41299
S'name'
p41300
S'execute_on'
p41301
sS'cpp_type'
p41302
S'MultiMooseEnum'
p41303
sS'default'
p41304
S'TIMESTEP_END'
p41305
sS'description'
p41306
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41307
sS'required'
p41308
I00
sS'options'
p41309
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41310
sS'group_name'
p41311
Nsa(dp41312
S'description'
p41313
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41314
sS'cpp_type'
p41315
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41316
sS'default'
p41317
g3
sS'name'
p41318
S'outputs'
p41319
sS'required'
p41320
I00
sS'group_name'
p41321
S'Advanced'
p41322
sa(dp41323
S'description'
p41324
g3
sS'cpp_type'
p41325
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41326
sS'default'
p41327
S'PerformanceData'
p41328
sS'name'
p41329
S'type'
p41330
sS'required'
p41331
I00
sS'group_name'
p41332
Nsa(dp41333
S'description'
p41334
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41335
sS'cpp_type'
p41336
S'bool'
p41337
sS'default'
p41338
S'0'
p41339
sS'name'
p41340
S'use_displaced_mesh'
p41341
sS'required'
p41342
I00
sS'group_name'
p41343
S'Advanced'
p41344
sasS'name'
p41345
S'/UserObjects/PerformanceData'
p41346
sa(dp41347
S'description'
p41348
g3
sS'subblocks'
p41349
NsS'parameters'
p41350
(lp41351
(dp41352
S'name'
p41353
S'execute_on'
p41354
sS'cpp_type'
p41355
S'MultiMooseEnum'
p41356
sS'default'
p41357
S'TIMESTEP_END'
p41358
sS'description'
p41359
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41360
sS'required'
p41361
I00
sS'options'
p41362
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41363
sS'group_name'
p41364
Nsa(dp41365
S'description'
p41366
S'Name of the function to plot (i.e. sample)\n'
p41367
sS'cpp_type'
p41368
S'FunctionName'
p41369
sS'default'
p41370
g3
sS'name'
p41371
S'function'
p41372
sS'required'
p41373
I01
sS'group_name'
p41374
Nsa(dp41375
S'description'
p41376
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41377
sS'cpp_type'
p41378
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41379
sS'default'
p41380
g3
sS'name'
p41381
S'outputs'
p41382
sS'required'
p41383
I00
sS'group_name'
p41384
S'Advanced'
p41385
sa(dp41386
S'description'
p41387
S'A point in space to be given to the function\n'
p41388
sS'cpp_type'
p41389
S'libMesh::Point'
p41390
sS'default'
p41391
S'0 0 0'
p41392
sS'name'
p41393
S'point'
p41394
sS'required'
p41395
I00
sS'group_name'
p41396
Nsa(dp41397
S'description'
p41398
S'A scale factor to be applied to the function\n'
p41399
sS'cpp_type'
p41400
S'double'
p41401
sS'default'
p41402
S'1'
p41403
sS'name'
p41404
S'scale_factor'
p41405
sS'required'
p41406
I00
sS'group_name'
p41407
Nsa(dp41408
S'description'
p41409
g3
sS'cpp_type'
p41410
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41411
sS'default'
p41412
S'PlotFunction'
p41413
sS'name'
p41414
S'type'
p41415
sS'required'
p41416
I00
sS'group_name'
p41417
Nsa(dp41418
S'description'
p41419
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41420
sS'cpp_type'
p41421
S'bool'
p41422
sS'default'
p41423
S'0'
p41424
sS'name'
p41425
S'use_displaced_mesh'
p41426
sS'required'
p41427
I00
sS'group_name'
p41428
S'Advanced'
p41429
sasS'name'
p41430
S'/UserObjects/PlotFunction'
p41431
sa(dp41432
S'description'
p41433
g3
sS'subblocks'
p41434
NsS'parameters'
p41435
(lp41436
(dp41437
S'name'
p41438
S'execute_on'
p41439
sS'cpp_type'
p41440
S'MultiMooseEnum'
p41441
sS'default'
p41442
S'TIMESTEP_END'
p41443
sS'description'
p41444
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41445
sS'required'
p41446
I00
sS'options'
p41447
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41448
sS'group_name'
p41449
Nsa(dp41450
S'description'
p41451
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41452
sS'cpp_type'
p41453
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41454
sS'default'
p41455
g3
sS'name'
p41456
S'outputs'
p41457
sS'required'
p41458
I00
sS'group_name'
p41459
S'Advanced'
p41460
sa(dp41461
S'description'
p41462
S'The physical point where the solution will be evaluated.\n'
p41463
sS'cpp_type'
p41464
S'libMesh::Point'
p41465
sS'default'
p41466
g3
sS'name'
p41467
S'point'
p41468
sS'required'
p41469
I01
sS'group_name'
p41470
Nsa(dp41471
S'description'
p41472
g3
sS'cpp_type'
p41473
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41474
sS'default'
p41475
S'PointValue'
p41476
sS'name'
p41477
S'type'
p41478
sS'required'
p41479
I00
sS'group_name'
p41480
Nsa(dp41481
S'description'
p41482
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41483
sS'cpp_type'
p41484
S'bool'
p41485
sS'default'
p41486
S'0'
p41487
sS'name'
p41488
S'use_displaced_mesh'
p41489
sS'required'
p41490
I00
sS'group_name'
p41491
S'Advanced'
p41492
sa(dp41493
S'description'
p41494
S'The name of the variable that this postprocessor operates on.\n'
p41495
sS'cpp_type'
p41496
S'VariableName'
p41497
sS'default'
p41498
g3
sS'name'
p41499
S'variable'
p41500
sS'required'
p41501
I01
sS'group_name'
p41502
NsasS'name'
p41503
S'/UserObjects/PointValue'
p41504
sa(dp41505
S'description'
p41506
g3
sS'subblocks'
p41507
NsS'parameters'
p41508
(lp41509
(dp41510
S'description'
p41511
S'The default value\n'
p41512
sS'cpp_type'
p41513
S'double'
p41514
sS'default'
p41515
g3
sS'name'
p41516
S'default'
p41517
sS'required'
p41518
I00
sS'group_name'
p41519
Nsa(dp41520
S'name'
p41521
S'execute_on'
p41522
sS'cpp_type'
p41523
S'MultiMooseEnum'
p41524
sS'default'
p41525
S'TIMESTEP_END'
p41526
sS'description'
p41527
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41528
sS'required'
p41529
I00
sS'options'
p41530
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41531
sS'group_name'
p41532
Nsa(dp41533
S'description'
p41534
S'Initialize the old postprocessor value with the default value\n'
p41535
sS'cpp_type'
p41536
S'bool'
p41537
sS'default'
p41538
S'1'
p41539
sS'name'
p41540
S'initialize_old'
p41541
sS'required'
p41542
I00
sS'group_name'
p41543
Nsa(dp41544
S'description'
p41545
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41546
sS'cpp_type'
p41547
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41548
sS'default'
p41549
g3
sS'name'
p41550
S'outputs'
p41551
sS'required'
p41552
I00
sS'group_name'
p41553
S'Advanced'
p41554
sa(dp41555
S'description'
p41556
g3
sS'cpp_type'
p41557
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41558
sS'default'
p41559
S'Receiver'
p41560
sS'name'
p41561
S'type'
p41562
sS'required'
p41563
I00
sS'group_name'
p41564
Nsa(dp41565
S'description'
p41566
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41567
sS'cpp_type'
p41568
S'bool'
p41569
sS'default'
p41570
S'0'
p41571
sS'name'
p41572
S'use_displaced_mesh'
p41573
sS'required'
p41574
I00
sS'group_name'
p41575
S'Advanced'
p41576
sasS'name'
p41577
S'/UserObjects/Receiver'
p41578
sa(dp41579
S'description'
p41580
g3
sS'subblocks'
p41581
NsS'parameters'
p41582
(lp41583
(dp41584
S'name'
p41585
S'execute_on'
p41586
sS'cpp_type'
p41587
S'MultiMooseEnum'
p41588
sS'default'
p41589
S'TIMESTEP_END'
p41590
sS'description'
p41591
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41592
sS'required'
p41593
I00
sS'options'
p41594
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41595
sS'group_name'
p41596
Nsa(dp41597
S'description'
p41598
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41599
sS'cpp_type'
p41600
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41601
sS'default'
p41602
g3
sS'name'
p41603
S'outputs'
p41604
sS'required'
p41605
I00
sS'group_name'
p41606
S'Advanced'
p41607
sa(dp41608
S'description'
p41609
g3
sS'cpp_type'
p41610
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41611
sS'default'
p41612
S'Residual'
p41613
sS'name'
p41614
S'type'
p41615
sS'required'
p41616
I00
sS'group_name'
p41617
Nsa(dp41618
S'description'
p41619
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41620
sS'cpp_type'
p41621
S'bool'
p41622
sS'default'
p41623
S'0'
p41624
sS'name'
p41625
S'use_displaced_mesh'
p41626
sS'required'
p41627
I00
sS'group_name'
p41628
S'Advanced'
p41629
sasS'name'
p41630
S'/UserObjects/Residual'
p41631
sa(dp41632
S'description'
p41633
g3
sS'subblocks'
p41634
NsS'parameters'
p41635
(lp41636
(dp41637
S'name'
p41638
S'execute_on'
p41639
sS'cpp_type'
p41640
S'MultiMooseEnum'
p41641
sS'default'
p41642
S'TIMESTEP_END'
p41643
sS'description'
p41644
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41645
sS'required'
p41646
I00
sS'options'
p41647
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41648
sS'group_name'
p41649
Nsa(dp41650
S'description'
p41651
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41652
sS'cpp_type'
p41653
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41654
sS'default'
p41655
g3
sS'name'
p41656
S'outputs'
p41657
sS'required'
p41658
I00
sS'group_name'
p41659
S'Advanced'
p41660
sa(dp41661
S'name'
p41662
S'time_type'
p41663
sS'cpp_type'
p41664
S'MooseEnum'
p41665
sS'default'
p41666
g3
sS'description'
p41667
S'Whether to output the total elapsed or just the active time\n'
p41668
sS'required'
p41669
I01
sS'options'
p41670
S'alive active'
p41671
sS'group_name'
p41672
Nsa(dp41673
S'description'
p41674
g3
sS'cpp_type'
p41675
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41676
sS'default'
p41677
S'RunTime'
p41678
sS'name'
p41679
S'type'
p41680
sS'required'
p41681
I00
sS'group_name'
p41682
Nsa(dp41683
S'description'
p41684
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41685
sS'cpp_type'
p41686
S'bool'
p41687
sS'default'
p41688
S'0'
p41689
sS'name'
p41690
S'use_displaced_mesh'
p41691
sS'required'
p41692
I00
sS'group_name'
p41693
S'Advanced'
p41694
sasS'name'
p41695
S'/UserObjects/RunTime'
p41696
sa(dp41697
S'description'
p41698
g3
sS'subblocks'
p41699
NsS'parameters'
p41700
(lp41701
(dp41702
S'name'
p41703
S'execute_on'
p41704
sS'cpp_type'
p41705
S'MultiMooseEnum'
p41706
sS'default'
p41707
S'TIMESTEP_END'
p41708
sS'description'
p41709
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41710
sS'required'
p41711
I00
sS'options'
p41712
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41713
sS'group_name'
p41714
Nsa(dp41715
S'description'
p41716
S'The analytic solution to compare against\n'
p41717
sS'cpp_type'
p41718
S'FunctionName'
p41719
sS'default'
p41720
g3
sS'name'
p41721
S'function'
p41722
sS'required'
p41723
I01
sS'group_name'
p41724
Nsa(dp41725
S'description'
p41726
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41727
sS'cpp_type'
p41728
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41729
sS'default'
p41730
g3
sS'name'
p41731
S'outputs'
p41732
sS'required'
p41733
I00
sS'group_name'
p41734
S'Advanced'
p41735
sa(dp41736
S'description'
p41737
g3
sS'cpp_type'
p41738
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41739
sS'default'
p41740
S'ScalarL2Error'
p41741
sS'name'
p41742
S'type'
p41743
sS'required'
p41744
I00
sS'group_name'
p41745
Nsa(dp41746
S'description'
p41747
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41748
sS'cpp_type'
p41749
S'bool'
p41750
sS'default'
p41751
S'0'
p41752
sS'name'
p41753
S'use_displaced_mesh'
p41754
sS'required'
p41755
I00
sS'group_name'
p41756
S'Advanced'
p41757
sa(dp41758
S'description'
p41759
S'The name of the scalar variable\n'
p41760
sS'cpp_type'
p41761
S'VariableName'
p41762
sS'default'
p41763
g3
sS'name'
p41764
S'variable'
p41765
sS'required'
p41766
I01
sS'group_name'
p41767
NsasS'name'
p41768
S'/UserObjects/ScalarL2Error'
p41769
sa(dp41770
S'description'
p41771
g3
sS'subblocks'
p41772
NsS'parameters'
p41773
(lp41774
(dp41775
S'description'
p41776
S'Component to output for this variable\n'
p41777
sS'cpp_type'
p41778
S'unsigned int'
p41779
sS'default'
p41780
S'0'
p41781
sS'name'
p41782
S'component'
p41783
sS'required'
p41784
I00
sS'group_name'
p41785
Nsa(dp41786
S'name'
p41787
S'execute_on'
p41788
sS'cpp_type'
p41789
S'MultiMooseEnum'
p41790
sS'default'
p41791
S'TIMESTEP_END'
p41792
sS'description'
p41793
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41794
sS'required'
p41795
I00
sS'options'
p41796
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41797
sS'group_name'
p41798
Nsa(dp41799
S'description'
p41800
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41801
sS'cpp_type'
p41802
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41803
sS'default'
p41804
g3
sS'name'
p41805
S'outputs'
p41806
sS'required'
p41807
I00
sS'group_name'
p41808
S'Advanced'
p41809
sa(dp41810
S'description'
p41811
g3
sS'cpp_type'
p41812
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41813
sS'default'
p41814
S'ScalarVariable'
p41815
sS'name'
p41816
S'type'
p41817
sS'required'
p41818
I00
sS'group_name'
p41819
Nsa(dp41820
S'description'
p41821
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41822
sS'cpp_type'
p41823
S'bool'
p41824
sS'default'
p41825
S'0'
p41826
sS'name'
p41827
S'use_displaced_mesh'
p41828
sS'required'
p41829
I00
sS'group_name'
p41830
S'Advanced'
p41831
sa(dp41832
S'description'
p41833
S'Name of the variable\n'
p41834
sS'cpp_type'
p41835
S'VariableName'
p41836
sS'default'
p41837
g3
sS'name'
p41838
S'variable'
p41839
sS'required'
p41840
I01
sS'group_name'
p41841
NsasS'name'
p41842
S'/UserObjects/ScalarVariable'
p41843
sa(dp41844
S'description'
p41845
g3
sS'subblocks'
p41846
NsS'parameters'
p41847
(lp41848
(dp41849
S'description'
p41850
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p41851
sS'cpp_type'
p41852
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p41853
sS'default'
p41854
g3
sS'name'
p41855
S'boundary'
p41856
sS'required'
p41857
I00
sS'group_name'
p41858
Nsa(dp41859
S'name'
p41860
S'execute_on'
p41861
sS'cpp_type'
p41862
S'MultiMooseEnum'
p41863
sS'default'
p41864
S'TIMESTEP_END'
p41865
sS'description'
p41866
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41867
sS'required'
p41868
I00
sS'options'
p41869
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41870
sS'group_name'
p41871
Nsa(dp41872
S'description'
p41873
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41874
sS'cpp_type'
p41875
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41876
sS'default'
p41877
g3
sS'name'
p41878
S'outputs'
p41879
sS'required'
p41880
I00
sS'group_name'
p41881
S'Advanced'
p41882
sa(dp41883
S'description'
p41884
g3
sS'cpp_type'
p41885
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41886
sS'default'
p41887
S'SideAverageValue'
p41888
sS'name'
p41889
S'type'
p41890
sS'required'
p41891
I00
sS'group_name'
p41892
Nsa(dp41893
S'description'
p41894
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41895
sS'cpp_type'
p41896
S'bool'
p41897
sS'default'
p41898
S'0'
p41899
sS'name'
p41900
S'use_displaced_mesh'
p41901
sS'required'
p41902
I00
sS'group_name'
p41903
S'Advanced'
p41904
sa(dp41905
S'description'
p41906
S'The name of the variable that this boundary condition applies to\n'
p41907
sS'cpp_type'
p41908
S'std::vector<VariableName>'
p41909
sS'default'
p41910
g3
sS'name'
p41911
S'variable'
p41912
sS'required'
p41913
I00
sS'group_name'
p41914
NsasS'name'
p41915
S'/UserObjects/SideAverageValue'
p41916
sa(dp41917
S'description'
p41918
g3
sS'subblocks'
p41919
NsS'parameters'
p41920
(lp41921
(dp41922
S'description'
p41923
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p41924
sS'cpp_type'
p41925
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p41926
sS'default'
p41927
g3
sS'name'
p41928
S'boundary'
p41929
sS'required'
p41930
I00
sS'group_name'
p41931
Nsa(dp41932
S'description'
p41933
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p41934
sS'cpp_type'
p41935
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41936
sS'default'
p41937
g3
sS'name'
p41938
S'diffusivity'
p41939
sS'required'
p41940
I01
sS'group_name'
p41941
Nsa(dp41942
S'name'
p41943
S'execute_on'
p41944
sS'cpp_type'
p41945
S'MultiMooseEnum'
p41946
sS'default'
p41947
S'TIMESTEP_END'
p41948
sS'description'
p41949
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p41950
sS'required'
p41951
I00
sS'options'
p41952
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p41953
sS'group_name'
p41954
Nsa(dp41955
S'description'
p41956
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p41957
sS'cpp_type'
p41958
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p41959
sS'default'
p41960
g3
sS'name'
p41961
S'outputs'
p41962
sS'required'
p41963
I00
sS'group_name'
p41964
S'Advanced'
p41965
sa(dp41966
S'description'
p41967
g3
sS'cpp_type'
p41968
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p41969
sS'default'
p41970
S'SideFluxAverage'
p41971
sS'name'
p41972
S'type'
p41973
sS'required'
p41974
I00
sS'group_name'
p41975
Nsa(dp41976
S'description'
p41977
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p41978
sS'cpp_type'
p41979
S'bool'
p41980
sS'default'
p41981
S'0'
p41982
sS'name'
p41983
S'use_displaced_mesh'
p41984
sS'required'
p41985
I00
sS'group_name'
p41986
S'Advanced'
p41987
sa(dp41988
S'description'
p41989
S'The name of the variable that this boundary condition applies to\n'
p41990
sS'cpp_type'
p41991
S'std::vector<VariableName>'
p41992
sS'default'
p41993
g3
sS'name'
p41994
S'variable'
p41995
sS'required'
p41996
I00
sS'group_name'
p41997
NsasS'name'
p41998
S'/UserObjects/SideFluxAverage'
p41999
sa(dp42000
S'description'
p42001
g3
sS'subblocks'
p42002
NsS'parameters'
p42003
(lp42004
(dp42005
S'description'
p42006
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42007
sS'cpp_type'
p42008
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p42009
sS'default'
p42010
g3
sS'name'
p42011
S'boundary'
p42012
sS'required'
p42013
I00
sS'group_name'
p42014
Nsa(dp42015
S'description'
p42016
S'The name of the diffusivity material property that will be used in the flux computation.\n'
p42017
sS'cpp_type'
p42018
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42019
sS'default'
p42020
g3
sS'name'
p42021
S'diffusivity'
p42022
sS'required'
p42023
I01
sS'group_name'
p42024
Nsa(dp42025
S'name'
p42026
S'execute_on'
p42027
sS'cpp_type'
p42028
S'MultiMooseEnum'
p42029
sS'default'
p42030
S'TIMESTEP_END'
p42031
sS'description'
p42032
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p42033
sS'required'
p42034
I00
sS'options'
p42035
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p42036
sS'group_name'
p42037
Nsa(dp42038
S'description'
p42039
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p42040
sS'cpp_type'
p42041
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p42042
sS'default'
p42043
g3
sS'name'
p42044
S'outputs'
p42045
sS'required'
p42046
I00
sS'group_name'
p42047
S'Advanced'
p42048
sa(dp42049
S'description'
p42050
g3
sS'cpp_type'
p42051
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42052
sS'default'
p42053
S'SideFluxIntegral'
p42054
sS'name'
p42055
S'type'
p42056
sS'required'
p42057
I00
sS'group_name'
p42058
Nsa(dp42059
S'description'
p42060
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42061
sS'cpp_type'
p42062
S'bool'
p42063
sS'default'
p42064
S'0'
p42065
sS'name'
p42066
S'use_displaced_mesh'
p42067
sS'required'
p42068
I00
sS'group_name'
p42069
S'Advanced'
p42070
sa(dp42071
S'description'
p42072
S'The name of the variable that this boundary condition applies to\n'
p42073
sS'cpp_type'
p42074
S'std::vector<VariableName>'
p42075
sS'default'
p42076
g3
sS'name'
p42077
S'variable'
p42078
sS'required'
p42079
I00
sS'group_name'
p42080
NsasS'name'
p42081
S'/UserObjects/SideFluxIntegral'
p42082
sa(dp42083
S'description'
p42084
g3
sS'subblocks'
p42085
NsS'parameters'
p42086
(lp42087
(dp42088
S'description'
p42089
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42090
sS'cpp_type'
p42091
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p42092
sS'default'
p42093
g3
sS'name'
p42094
S'boundary'
p42095
sS'required'
p42096
I00
sS'group_name'
p42097
Nsa(dp42098
S'name'
p42099
S'execute_on'
p42100
sS'cpp_type'
p42101
S'MultiMooseEnum'
p42102
sS'default'
p42103
S'TIMESTEP_END'
p42104
sS'description'
p42105
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p42106
sS'required'
p42107
I00
sS'options'
p42108
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p42109
sS'group_name'
p42110
Nsa(dp42111
S'description'
p42112
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p42113
sS'cpp_type'
p42114
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p42115
sS'default'
p42116
g3
sS'name'
p42117
S'outputs'
p42118
sS'required'
p42119
I00
sS'group_name'
p42120
S'Advanced'
p42121
sa(dp42122
S'description'
p42123
g3
sS'cpp_type'
p42124
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42125
sS'default'
p42126
S'SideIntegralVariablePostprocessor'
p42127
sS'name'
p42128
S'type'
p42129
sS'required'
p42130
I00
sS'group_name'
p42131
Nsa(dp42132
S'description'
p42133
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42134
sS'cpp_type'
p42135
S'bool'
p42136
sS'default'
p42137
S'0'
p42138
sS'name'
p42139
S'use_displaced_mesh'
p42140
sS'required'
p42141
I00
sS'group_name'
p42142
S'Advanced'
p42143
sa(dp42144
S'description'
p42145
S'The name of the variable that this boundary condition applies to\n'
p42146
sS'cpp_type'
p42147
S'std::vector<VariableName>'
p42148
sS'default'
p42149
g3
sS'name'
p42150
S'variable'
p42151
sS'required'
p42152
I00
sS'group_name'
p42153
NsasS'name'
p42154
S'/UserObjects/SideIntegralVariablePostprocessor'
p42155
sa(dp42156
S'description'
p42157
g3
sS'subblocks'
p42158
NsS'parameters'
p42159
(lp42160
(dp42161
S'description'
p42162
S'This name has been deprecated.\n'
p42163
sS'cpp_type'
p42164
S'std::__1::vector<double, std::__1::allocator<double> >'
p42165
sS'default'
p42166
g3
sS'name'
p42167
S'coord_factor'
p42168
sS'required'
p42169
I00
sS'group_name'
p42170
Nsa(dp42171
S'description'
p42172
S'This name has been deprecated.\n'
p42173
sS'cpp_type'
p42174
S'std::__1::vector<double, std::__1::allocator<double> >'
p42175
sS'default'
p42176
g3
sS'name'
p42177
S'coord_scale'
p42178
sS'required'
p42179
I00
sS'group_name'
p42180
Nsa(dp42181
S'description'
p42182
S'The name of the file holding the equation system info in xda format (xda only).\n'
p42183
sS'cpp_type'
p42184
S'FileName'
p42185
sS'default'
p42186
S'<not supplied>'
p42187
sS'name'
p42188
S'es'
p42189
sS'required'
p42190
I00
sS'group_name'
p42191
Nsa(dp42192
S'name'
p42193
S'execute_on'
p42194
sS'cpp_type'
p42195
S'MultiMooseEnum'
p42196
sS'default'
p42197
S'TIMESTEP_END'
p42198
sS'description'
p42199
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p42200
sS'required'
p42201
I00
sS'options'
p42202
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p42203
sS'group_name'
p42204
Nsa(dp42205
S'description'
p42206
S'The name of the mesh file (must be xda or exodusII file).\n'
p42207
sS'cpp_type'
p42208
S'MeshFileName'
p42209
sS'default'
p42210
g3
sS'name'
p42211
S'mesh'
p42212
sS'required'
p42213
I01
sS'group_name'
p42214
Nsa(dp42215
S'description'
p42216
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation0_vector.\n'
p42217
sS'cpp_type'
p42218
S'double'
p42219
sS'default'
p42220
S'0'
p42221
sS'name'
p42222
S'rotation0_angle'
p42223
sS'required'
p42224
I00
sS'group_name'
p42225
Nsa(dp42226
S'description'
p42227
S'Vector about which to rotate points of the simulation.\n'
p42228
sS'cpp_type'
p42229
S'libMesh::VectorValue<double>'
p42230
sS'default'
p42231
S'0 0 1'
p42232
sS'name'
p42233
S'rotation0_vector'
p42234
sS'required'
p42235
I00
sS'group_name'
p42236
Nsa(dp42237
S'description'
p42238
S'Anticlockwise rotation angle (in degrees) to use for rotation about rotation1_vector.\n'
p42239
sS'cpp_type'
p42240
S'double'
p42241
sS'default'
p42242
S'0'
p42243
sS'name'
p42244
S'rotation1_angle'
p42245
sS'required'
p42246
I00
sS'group_name'
p42247
Nsa(dp42248
S'description'
p42249
S'Vector about which to rotate points of the simulation.\n'
p42250
sS'cpp_type'
p42251
S'libMesh::VectorValue<double>'
p42252
sS'default'
p42253
S'0 0 1'
p42254
sS'name'
p42255
S'rotation1_vector'
p42256
sS'required'
p42257
I00
sS'group_name'
p42258
Nsa(dp42259
S'description'
p42260
S'Scale factor for points in the simulation\n'
p42261
sS'cpp_type'
p42262
S'std::__1::vector<double, std::__1::allocator<double> >'
p42263
sS'default'
p42264
S'1 1 1'
p42265
sS'name'
p42266
S'scale'
p42267
sS'required'
p42268
I00
sS'group_name'
p42269
Nsa(dp42270
S'description'
p42271
S'Scale multiplying factor for points in the simulation\n'
p42272
sS'cpp_type'
p42273
S'std::__1::vector<double, std::__1::allocator<double> >'
p42274
sS'default'
p42275
S'1 1 1'
p42276
sS'name'
p42277
S'scale_multiplier'
p42278
sS'required'
p42279
I00
sS'group_name'
p42280
Nsa(dp42281
S'description'
p42282
S'The name of the system to pull values out of (xda only).\n'
p42283
sS'cpp_type'
p42284
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42285
sS'default'
p42286
S'nl0'
p42287
sS'name'
p42288
S'system'
p42289
sS'required'
p42290
I00
sS'group_name'
p42291
Nsa(dp42292
S'description'
p42293
S'The name of the nodal and elemental variables from the file you want to use for values\n'
p42294
sS'cpp_type'
p42295
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p42296
sS'default'
p42297
g3
sS'name'
p42298
S'system_variables'
p42299
sS'required'
p42300
I00
sS'group_name'
p42301
Nsa(dp42302
S'description'
p42303
S'Index of the single timestep used (exodusII only).  If not supplied, time interpolation will occur.\n'
p42304
sS'cpp_type'
p42305
S'int'
p42306
sS'default'
p42307
S'-1'
p42308
sS'name'
p42309
S'timestep'
p42310
sS'required'
p42311
I00
sS'group_name'
p42312
Nsa(dp42313
S'name'
p42314
S'transformation_order'
p42315
sS'cpp_type'
p42316
S'MultiMooseEnum'
p42317
sS'default'
p42318
S'SCALE TRANSLATION'
p42319
sS'description'
p42320
S"The order to perform the operations in.  Define R0 to be the rotation matrix encoded by rotation0_vector and rotation0_angle.  Similarly for R1.  Denote the scale by s, the scale_multiplier by m, and the translation by t.  Then, given a point x in the simulation, if transformation_order = 'rotation0 scale_multiplier translation scale rotation1' then form p = R1*(R0*x*m - t)/s.  Then the values provided by the SolutionUserObject at point x in the simulation are the variable values at point p in the mesh.\n"
p42321
sS'required'
p42322
I00
sS'options'
p42323
S'rotation0 translation scale rotation1 scale_multiplier'
p42324
sS'group_name'
p42325
Nsa(dp42326
S'description'
p42327
S'Translation factors for x,y,z coordinates of the simulation\n'
p42328
sS'cpp_type'
p42329
S'std::__1::vector<double, std::__1::allocator<double> >'
p42330
sS'default'
p42331
S'0 0 0'
p42332
sS'name'
p42333
S'translation'
p42334
sS'required'
p42335
I00
sS'group_name'
p42336
Nsa(dp42337
S'description'
p42338
g3
sS'cpp_type'
p42339
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42340
sS'default'
p42341
S'SolutionUserObject'
p42342
sS'name'
p42343
S'type'
p42344
sS'required'
p42345
I00
sS'group_name'
p42346
Nsa(dp42347
S'description'
p42348
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42349
sS'cpp_type'
p42350
S'bool'
p42351
sS'default'
p42352
S'0'
p42353
sS'name'
p42354
S'use_displaced_mesh'
p42355
sS'required'
p42356
I00
sS'group_name'
p42357
S'Advanced'
p42358
sasS'name'
p42359
S'/UserObjects/SolutionUserObject'
p42360
sa(dp42361
S'description'
p42362
g3
sS'subblocks'
p42363
NsS'parameters'
p42364
(lp42365
(dp42366
S'name'
p42367
S'execute_on'
p42368
sS'cpp_type'
p42369
S'MultiMooseEnum'
p42370
sS'default'
p42371
S'TIMESTEP_END'
p42372
sS'description'
p42373
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p42374
sS'required'
p42375
I00
sS'options'
p42376
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p42377
sS'group_name'
p42378
Nsa(dp42379
S'description'
p42380
S'FParser expression to process Postprocessor values into a boolean value. Termination of the simulation occurs when this returns true.\n'
p42381
sS'cpp_type'
p42382
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42383
sS'default'
p42384
g3
sS'name'
p42385
S'expression'
p42386
sS'required'
p42387
I01
sS'group_name'
p42388
Nsa(dp42389
S'description'
p42390
g3
sS'cpp_type'
p42391
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42392
sS'default'
p42393
S'Terminator'
p42394
sS'name'
p42395
S'type'
p42396
sS'required'
p42397
I00
sS'group_name'
p42398
Nsa(dp42399
S'description'
p42400
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42401
sS'cpp_type'
p42402
S'bool'
p42403
sS'default'
p42404
S'0'
p42405
sS'name'
p42406
S'use_displaced_mesh'
p42407
sS'required'
p42408
I00
sS'group_name'
p42409
S'Advanced'
p42410
sasS'name'
p42411
S'/UserObjects/Terminator'
p42412
sa(dp42413
S'description'
p42414
g3
sS'subblocks'
p42415
NsS'parameters'
p42416
(lp42417
(dp42418
S'name'
p42419
S'execute_on'
p42420
sS'cpp_type'
p42421
S'MultiMooseEnum'
p42422
sS'default'
p42423
S'TIMESTEP_END'
p42424
sS'description'
p42425
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p42426
sS'required'
p42427
I00
sS'options'
p42428
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p42429
sS'group_name'
p42430
Nsa(dp42431
S'description'
p42432
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p42433
sS'cpp_type'
p42434
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p42435
sS'default'
p42436
g3
sS'name'
p42437
S'outputs'
p42438
sS'required'
p42439
I00
sS'group_name'
p42440
S'Advanced'
p42441
sa(dp42442
S'description'
p42443
g3
sS'cpp_type'
p42444
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42445
sS'default'
p42446
S'TimestepSize'
p42447
sS'name'
p42448
S'type'
p42449
sS'required'
p42450
I00
sS'group_name'
p42451
Nsa(dp42452
S'description'
p42453
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42454
sS'cpp_type'
p42455
S'bool'
p42456
sS'default'
p42457
S'0'
p42458
sS'name'
p42459
S'use_displaced_mesh'
p42460
sS'required'
p42461
I00
sS'group_name'
p42462
S'Advanced'
p42463
sasS'name'
p42464
S'/UserObjects/TimestepSize'
p42465
sa(dp42466
S'description'
p42467
g3
sS'subblocks'
p42468
NsS'parameters'
p42469
(lp42470
(dp42471
S'name'
p42472
S'execute_on'
p42473
sS'cpp_type'
p42474
S'MultiMooseEnum'
p42475
sS'default'
p42476
S'TIMESTEP_END'
p42477
sS'description'
p42478
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p42479
sS'required'
p42480
I00
sS'options'
p42481
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p42482
sS'group_name'
p42483
Nsa(dp42484
S'description'
p42485
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p42486
sS'cpp_type'
p42487
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p42488
sS'default'
p42489
g3
sS'name'
p42490
S'outputs'
p42491
sS'required'
p42492
I00
sS'group_name'
p42493
S'Advanced'
p42494
sa(dp42495
S'description'
p42496
g3
sS'cpp_type'
p42497
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42498
sS'default'
p42499
S'TotalVariableValue'
p42500
sS'name'
p42501
S'type'
p42502
sS'required'
p42503
I00
sS'group_name'
p42504
Nsa(dp42505
S'description'
p42506
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42507
sS'cpp_type'
p42508
S'bool'
p42509
sS'default'
p42510
S'0'
p42511
sS'name'
p42512
S'use_displaced_mesh'
p42513
sS'required'
p42514
I00
sS'group_name'
p42515
S'Advanced'
p42516
sa(dp42517
S'description'
p42518
S'The name of the postprocessor\n'
p42519
sS'cpp_type'
p42520
S'PostprocessorName'
p42521
sS'default'
p42522
g3
sS'name'
p42523
S'value'
p42524
sS'required'
p42525
I00
sS'group_name'
p42526
NsasS'name'
p42527
S'/UserObjects/TotalVariableValue'
p42528
sa(dp42529
S'description'
p42530
g3
sS'subblocks'
p42531
NsS'parameters'
p42532
(lp42533
(dp42534
S'description'
p42535
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42536
sS'cpp_type'
p42537
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p42538
sS'default'
p42539
g3
sS'name'
p42540
S'block'
p42541
sS'required'
p42542
I00
sS'group_name'
p42543
Nsa(dp42544
S'name'
p42545
S'execute_on'
p42546
sS'cpp_type'
p42547
S'MultiMooseEnum'
p42548
sS'default'
p42549
S'TIMESTEP_END'
p42550
sS'description'
p42551
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p42552
sS'required'
p42553
I00
sS'options'
p42554
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p42555
sS'group_name'
p42556
Nsa(dp42557
S'description'
p42558
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p42559
sS'cpp_type'
p42560
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p42561
sS'default'
p42562
g3
sS'name'
p42563
S'outputs'
p42564
sS'required'
p42565
I00
sS'group_name'
p42566
S'Advanced'
p42567
sa(dp42568
S'description'
p42569
S'The seed for the master random number generator\n'
p42570
sS'cpp_type'
p42571
S'unsigned int'
p42572
sS'default'
p42573
S'0'
p42574
sS'name'
p42575
S'seed'
p42576
sS'required'
p42577
I00
sS'group_name'
p42578
S'Advanced'
p42579
sa(dp42580
S'description'
p42581
g3
sS'cpp_type'
p42582
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42583
sS'default'
p42584
S'VolumePostprocessor'
p42585
sS'name'
p42586
S'type'
p42587
sS'required'
p42588
I00
sS'group_name'
p42589
Nsa(dp42590
S'description'
p42591
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p42592
sS'cpp_type'
p42593
S'bool'
p42594
sS'default'
p42595
S'0'
p42596
sS'name'
p42597
S'use_displaced_mesh'
p42598
sS'required'
p42599
I00
sS'group_name'
p42600
S'Advanced'
p42601
sasS'name'
p42602
S'/UserObjects/VolumePostprocessor'
p42603
sasS'parameters'
p42604
NsS'name'
p42605
S'/UserObjects'
p42606
sa(dp42607
S'description'
p42608
g3
sS'subblocks'
p42609
(lp42610
(dp42611
S'description'
p42612
g3
sS'subblocks'
p42613
(lp42614
(dp42615
S'description'
p42616
g3
sS'subblocks'
p42617
(lp42618
(dp42619
S'description'
p42620
g3
sS'subblocks'
p42621
(lp42622
(dp42623
S'description'
p42624
g3
sS'subblocks'
p42625
NsS'parameters'
p42626
(lp42627
(dp42628
S'description'
p42629
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42630
sS'cpp_type'
p42631
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p42632
sS'default'
p42633
g3
sS'name'
p42634
S'block'
p42635
sS'required'
p42636
I00
sS'group_name'
p42637
Nsa(dp42638
S'description'
p42639
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42640
sS'cpp_type'
p42641
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p42642
sS'default'
p42643
g3
sS'name'
p42644
S'boundary'
p42645
sS'required'
p42646
I00
sS'group_name'
p42647
Nsa(dp42648
S'description'
p42649
S'The value of the variable inside the box\n'
p42650
sS'cpp_type'
p42651
S'double'
p42652
sS'default'
p42653
S'0'
p42654
sS'name'
p42655
S'inside'
p42656
sS'required'
p42657
I00
sS'group_name'
p42658
Nsa(dp42659
S'description'
p42660
S'The value of the variable outside the box\n'
p42661
sS'cpp_type'
p42662
S'double'
p42663
sS'default'
p42664
S'0'
p42665
sS'name'
p42666
S'outside'
p42667
sS'required'
p42668
I00
sS'group_name'
p42669
Nsa(dp42670
S'description'
p42671
g3
sS'cpp_type'
p42672
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42673
sS'default'
p42674
S'BoundingBoxIC'
p42675
sS'name'
p42676
S'type'
p42677
sS'required'
p42678
I00
sS'group_name'
p42679
Nsa(dp42680
S'description'
p42681
S'The variable this initial condition is supposed to provide values for.\n'
p42682
sS'cpp_type'
p42683
S'VariableName'
p42684
sS'default'
p42685
g3
sS'name'
p42686
S'variable'
p42687
sS'required'
p42688
I01
sS'group_name'
p42689
Nsa(dp42690
S'description'
p42691
S'The x coordinate of the lower left-hand corner of the box\n'
p42692
sS'cpp_type'
p42693
S'double'
p42694
sS'default'
p42695
g3
sS'name'
p42696
S'x1'
p42697
sS'required'
p42698
I01
sS'group_name'
p42699
Nsa(dp42700
S'description'
p42701
S'The x coordinate of the upper right-hand corner of the box\n'
p42702
sS'cpp_type'
p42703
S'double'
p42704
sS'default'
p42705
g3
sS'name'
p42706
S'x2'
p42707
sS'required'
p42708
I01
sS'group_name'
p42709
Nsa(dp42710
S'description'
p42711
S'The y coordinate of the lower left-hand corner of the box\n'
p42712
sS'cpp_type'
p42713
S'double'
p42714
sS'default'
p42715
g3
sS'name'
p42716
S'y1'
p42717
sS'required'
p42718
I01
sS'group_name'
p42719
Nsa(dp42720
S'description'
p42721
S'The y coordinate of the upper right-hand corner of the box\n'
p42722
sS'cpp_type'
p42723
S'double'
p42724
sS'default'
p42725
g3
sS'name'
p42726
S'y2'
p42727
sS'required'
p42728
I01
sS'group_name'
p42729
Nsa(dp42730
S'description'
p42731
S'The z coordinate of the lower left-hand corner of the box\n'
p42732
sS'cpp_type'
p42733
S'double'
p42734
sS'default'
p42735
S'0'
p42736
sS'name'
p42737
S'z1'
p42738
sS'required'
p42739
I00
sS'group_name'
p42740
Nsa(dp42741
S'description'
p42742
S'The z coordinate of the upper right-hand corner of the box\n'
p42743
sS'cpp_type'
p42744
S'double'
p42745
sS'default'
p42746
S'0'
p42747
sS'name'
p42748
S'z2'
p42749
sS'required'
p42750
I00
sS'group_name'
p42751
NsasS'name'
p42752
S'/Variables/*/InitialCondition/<type>/BoundingBoxIC'
p42753
sa(dp42754
S'description'
p42755
g3
sS'subblocks'
p42756
NsS'parameters'
p42757
(lp42758
(dp42759
S'description'
p42760
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42761
sS'cpp_type'
p42762
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p42763
sS'default'
p42764
g3
sS'name'
p42765
S'block'
p42766
sS'required'
p42767
I00
sS'group_name'
p42768
Nsa(dp42769
S'description'
p42770
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42771
sS'cpp_type'
p42772
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p42773
sS'default'
p42774
g3
sS'name'
p42775
S'boundary'
p42776
sS'required'
p42777
I00
sS'group_name'
p42778
Nsa(dp42779
S'description'
p42780
g3
sS'cpp_type'
p42781
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42782
sS'default'
p42783
S'ConstantIC'
p42784
sS'name'
p42785
S'type'
p42786
sS'required'
p42787
I00
sS'group_name'
p42788
Nsa(dp42789
S'description'
p42790
S'The value to be set in IC\n'
p42791
sS'cpp_type'
p42792
S'double'
p42793
sS'default'
p42794
g3
sS'name'
p42795
S'value'
p42796
sS'required'
p42797
I01
sS'group_name'
p42798
Nsa(dp42799
S'description'
p42800
S'The variable this initial condition is supposed to provide values for.\n'
p42801
sS'cpp_type'
p42802
S'VariableName'
p42803
sS'default'
p42804
g3
sS'name'
p42805
S'variable'
p42806
sS'required'
p42807
I01
sS'group_name'
p42808
NsasS'name'
p42809
S'/Variables/*/InitialCondition/<type>/ConstantIC'
p42810
sa(dp42811
S'description'
p42812
S'Cross-shaped initial condition\n'
p42813
sS'subblocks'
p42814
NsS'parameters'
p42815
(lp42816
(dp42817
S'description'
p42818
S'The amplitude\n'
p42819
sS'cpp_type'
p42820
S'double'
p42821
sS'default'
p42822
S'1'
p42823
sS'name'
p42824
S'amplitude'
p42825
sS'required'
p42826
I00
sS'group_name'
p42827
Nsa(dp42828
S'description'
p42829
S'The average value\n'
p42830
sS'cpp_type'
p42831
S'double'
p42832
sS'default'
p42833
S'0'
p42834
sS'name'
p42835
S'average'
p42836
sS'required'
p42837
I00
sS'group_name'
p42838
Nsa(dp42839
S'description'
p42840
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42841
sS'cpp_type'
p42842
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p42843
sS'default'
p42844
g3
sS'name'
p42845
S'block'
p42846
sS'required'
p42847
I00
sS'group_name'
p42848
Nsa(dp42849
S'description'
p42850
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42851
sS'cpp_type'
p42852
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p42853
sS'default'
p42854
g3
sS'name'
p42855
S'boundary'
p42856
sS'required'
p42857
I00
sS'group_name'
p42858
Nsa(dp42859
S'description'
p42860
S'A small area between the max value and the interface\n'
p42861
sS'cpp_type'
p42862
S'double'
p42863
sS'default'
p42864
S'0.03125'
p42865
sS'name'
p42866
S'buffer'
p42867
sS'required'
p42868
I00
sS'group_name'
p42869
Nsa(dp42870
S'description'
p42871
S'The interface width\n'
p42872
sS'cpp_type'
p42873
S'double'
p42874
sS'default'
p42875
S'0.03125'
p42876
sS'name'
p42877
S'interface'
p42878
sS'required'
p42879
I00
sS'group_name'
p42880
Nsa(dp42881
S'description'
p42882
S'The length\n'
p42883
sS'cpp_type'
p42884
S'double'
p42885
sS'default'
p42886
S'0.75'
p42887
sS'name'
p42888
S'length'
p42889
sS'required'
p42890
I00
sS'group_name'
p42891
Nsa(dp42892
S'description'
p42893
g3
sS'cpp_type'
p42894
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p42895
sS'default'
p42896
S'CrossIC'
p42897
sS'name'
p42898
S'type'
p42899
sS'required'
p42900
I00
sS'group_name'
p42901
Nsa(dp42902
S'description'
p42903
S'The variable this initial condition is supposed to provide values for.\n'
p42904
sS'cpp_type'
p42905
S'VariableName'
p42906
sS'default'
p42907
g3
sS'name'
p42908
S'variable'
p42909
sS'required'
p42910
I01
sS'group_name'
p42911
Nsa(dp42912
S'description'
p42913
S'The width\n'
p42914
sS'cpp_type'
p42915
S'double'
p42916
sS'default'
p42917
S'0.125'
p42918
sS'name'
p42919
S'width'
p42920
sS'required'
p42921
I00
sS'group_name'
p42922
Nsa(dp42923
S'description'
p42924
S'The x coordinate of the lower left-hand corner of the box\n'
p42925
sS'cpp_type'
p42926
S'double'
p42927
sS'default'
p42928
S'0'
p42929
sS'name'
p42930
S'x1'
p42931
sS'required'
p42932
I00
sS'group_name'
p42933
Nsa(dp42934
S'description'
p42935
S'The x coordinate of the upper right-hand corner of the box\n'
p42936
sS'cpp_type'
p42937
S'double'
p42938
sS'default'
p42939
S'1'
p42940
sS'name'
p42941
S'x2'
p42942
sS'required'
p42943
I00
sS'group_name'
p42944
Nsa(dp42945
S'description'
p42946
S'The y coordinate of the lower left-hand corner of the box\n'
p42947
sS'cpp_type'
p42948
S'double'
p42949
sS'default'
p42950
S'0'
p42951
sS'name'
p42952
S'y1'
p42953
sS'required'
p42954
I00
sS'group_name'
p42955
Nsa(dp42956
S'description'
p42957
S'The y coordinate of the upper right-hand corner of the box\n'
p42958
sS'cpp_type'
p42959
S'double'
p42960
sS'default'
p42961
S'1'
p42962
sS'name'
p42963
S'y2'
p42964
sS'required'
p42965
I00
sS'group_name'
p42966
NsasS'name'
p42967
S'/Variables/*/InitialCondition/<type>/CrossIC'
p42968
sa(dp42969
S'description'
p42970
g3
sS'subblocks'
p42971
NsS'parameters'
p42972
(lp42973
(dp42974
S'description'
p42975
S'The list of block ids (SubdomainID) that this object will be applied\n'
p42976
sS'cpp_type'
p42977
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p42978
sS'default'
p42979
g3
sS'name'
p42980
S'block'
p42981
sS'required'
p42982
I00
sS'group_name'
p42983
Nsa(dp42984
S'description'
p42985
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p42986
sS'cpp_type'
p42987
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p42988
sS'default'
p42989
g3
sS'name'
p42990
S'boundary'
p42991
sS'required'
p42992
I00
sS'group_name'
p42993
Nsa(dp42994
S'description'
p42995
S'The initial condition function.\n'
p42996
sS'cpp_type'
p42997
S'FunctionName'
p42998
sS'default'
p42999
g3
sS'name'
p43000
S'function'
p43001
sS'required'
p43002
I01
sS'group_name'
p43003
Nsa(dp43004
S'description'
p43005
g3
sS'cpp_type'
p43006
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43007
sS'default'
p43008
S'FunctionIC'
p43009
sS'name'
p43010
S'type'
p43011
sS'required'
p43012
I00
sS'group_name'
p43013
Nsa(dp43014
S'description'
p43015
S'The variable this initial condition is supposed to provide values for.\n'
p43016
sS'cpp_type'
p43017
S'VariableName'
p43018
sS'default'
p43019
g3
sS'name'
p43020
S'variable'
p43021
sS'required'
p43022
I01
sS'group_name'
p43023
NsasS'name'
p43024
S'/Variables/*/InitialCondition/<type>/FunctionIC'
p43025
sa(dp43026
S'description'
p43027
S'Perturbed hexagonal polycrystal\n'
p43028
sS'subblocks'
p43029
NsS'parameters'
p43030
(lp43031
(dp43032
S'description'
p43033
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43034
sS'cpp_type'
p43035
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p43036
sS'default'
p43037
g3
sS'name'
p43038
S'block'
p43039
sS'required'
p43040
I00
sS'group_name'
p43041
Nsa(dp43042
S'description'
p43043
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43044
sS'cpp_type'
p43045
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p43046
sS'default'
p43047
g3
sS'name'
p43048
S'boundary'
p43049
sS'required'
p43050
I00
sS'group_name'
p43051
Nsa(dp43052
S'description'
p43053
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p43054
sS'cpp_type'
p43055
S'bool'
p43056
sS'default'
p43057
S'0'
p43058
sS'name'
p43059
S'cody_test'
p43060
sS'required'
p43061
I00
sS'group_name'
p43062
Nsa(dp43063
S'description'
p43064
S'3D microstructure will be columnar in the z-direction?\n'
p43065
sS'cpp_type'
p43066
S'bool'
p43067
sS'default'
p43068
S'0'
p43069
sS'name'
p43070
S'columnar_3D'
p43071
sS'required'
p43072
I00
sS'group_name'
p43073
Nsa(dp43074
S'description'
p43075
S'Number of grains being represented by the order parameters\n'
p43076
sS'cpp_type'
p43077
S'unsigned int'
p43078
sS'default'
p43079
g3
sS'name'
p43080
S'grain_num'
p43081
sS'required'
p43082
I01
sS'group_name'
p43083
Nsa(dp43084
S'description'
p43085
S'The index for the current order parameter\n'
p43086
sS'cpp_type'
p43087
S'unsigned int'
p43088
sS'default'
p43089
g3
sS'name'
p43090
S'op_index'
p43091
sS'required'
p43092
I01
sS'group_name'
p43093
Nsa(dp43094
S'description'
p43095
S'Number of order parameters\n'
p43096
sS'cpp_type'
p43097
S'unsigned int'
p43098
sS'default'
p43099
g3
sS'name'
p43100
S'op_num'
p43101
sS'required'
p43102
I01
sS'group_name'
p43103
Nsa(dp43104
S'description'
p43105
S'The percent to randomly perturbate centers of grains relative to the size of the grain\n'
p43106
sS'cpp_type'
p43107
S'double'
p43108
sS'default'
p43109
S'0'
p43110
sS'name'
p43111
S'perturbation_percent'
p43112
sS'required'
p43113
I00
sS'group_name'
p43114
Nsa(dp43115
S'description'
p43116
S'The random seed\n'
p43117
sS'cpp_type'
p43118
S'unsigned int'
p43119
sS'default'
p43120
S'12444'
p43121
sS'name'
p43122
S'rand_seed'
p43123
sS'required'
p43124
I00
sS'group_name'
p43125
Nsa(dp43126
S'description'
p43127
g3
sS'cpp_type'
p43128
S'int'
p43129
sS'default'
p43130
S'1'
p43131
sS'name'
p43132
S'typ'
p43133
sS'required'
p43134
I00
sS'group_name'
p43135
Nsa(dp43136
S'description'
p43137
g3
sS'cpp_type'
p43138
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43139
sS'default'
p43140
S'HexPolycrystalIC'
p43141
sS'name'
p43142
S'type'
p43143
sS'required'
p43144
I00
sS'group_name'
p43145
Nsa(dp43146
S'description'
p43147
S'The variable this initial condition is supposed to provide values for.\n'
p43148
sS'cpp_type'
p43149
S'VariableName'
p43150
sS'default'
p43151
g3
sS'name'
p43152
S'variable'
p43153
sS'required'
p43154
I01
sS'group_name'
p43155
Nsa(dp43156
S'description'
p43157
S'Specifies offset of hexagon grid in x-direction\n'
p43158
sS'cpp_type'
p43159
S'double'
p43160
sS'default'
p43161
S'0.5'
p43162
sS'name'
p43163
S'x_offset'
p43164
sS'required'
p43165
I00
sS'group_name'
p43166
NsasS'name'
p43167
S'/Variables/*/InitialCondition/<type>/HexPolycrystalIC'
p43168
sa(dp43169
S'description'
p43170
S'Perturbed square lattice of smooth circles\n'
p43171
sS'subblocks'
p43172
NsS'parameters'
p43173
(lp43174
(dp43175
S'description'
p43176
S'in 3D, whether the objects are spheres or columns\n'
p43177
sS'cpp_type'
p43178
S'bool'
p43179
sS'default'
p43180
S'1'
p43181
sS'name'
p43182
S'3D_spheres'
p43183
sS'required'
p43184
I00
sS'group_name'
p43185
Nsa(dp43186
S'description'
p43187
S'Variation from central lattice position\n'
p43188
sS'cpp_type'
p43189
S'double'
p43190
sS'default'
p43191
S'0'
p43192
sS'name'
p43193
S'Rnd_variation'
p43194
sS'required'
p43195
I00
sS'group_name'
p43196
Nsa(dp43197
S'description'
p43198
S"Don't place any bubbles on the simulation cell boundaries\n"
p43199
sS'cpp_type'
p43200
S'bool'
p43201
sS'default'
p43202
S'1'
p43203
sS'name'
p43204
S'avoid_bounds'
p43205
sS'required'
p43206
I00
sS'group_name'
p43207
Nsa(dp43208
S'description'
p43209
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43210
sS'cpp_type'
p43211
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p43212
sS'default'
p43213
g3
sS'name'
p43214
S'block'
p43215
sS'required'
p43216
I00
sS'group_name'
p43217
Nsa(dp43218
S'description'
p43219
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43220
sS'cpp_type'
p43221
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p43222
sS'default'
p43223
g3
sS'name'
p43224
S'boundary'
p43225
sS'required'
p43226
I00
sS'group_name'
p43227
Nsa(dp43228
S'description'
p43229
S'Vector containing the number of bubbles along each side\n'
p43230
sS'cpp_type'
p43231
S'std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >'
p43232
sS'default'
p43233
g3
sS'name'
p43234
S'circles_per_side'
p43235
sS'required'
p43236
I01
sS'group_name'
p43237
Nsa(dp43238
S'description'
p43239
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p43240
sS'cpp_type'
p43241
S'double'
p43242
sS'default'
p43243
S'0'
p43244
sS'name'
p43245
S'int_width'
p43246
sS'required'
p43247
I00
sS'group_name'
p43248
Nsa(dp43249
S'description'
p43250
S'The variable value inside the circle\n'
p43251
sS'cpp_type'
p43252
S'double'
p43253
sS'default'
p43254
g3
sS'name'
p43255
S'invalue'
p43256
sS'required'
p43257
I01
sS'group_name'
p43258
Nsa(dp43259
S'description'
p43260
S'The variable value outside the circle\n'
p43261
sS'cpp_type'
p43262
S'double'
p43263
sS'default'
p43264
g3
sS'name'
p43265
S'outvalue'
p43266
sS'required'
p43267
I01
sS'group_name'
p43268
Nsa(dp43269
S'description'
p43270
S'Mean radius value for the circels\n'
p43271
sS'cpp_type'
p43272
S'double'
p43273
sS'default'
p43274
g3
sS'name'
p43275
S'radius'
p43276
sS'required'
p43277
I01
sS'group_name'
p43278
Nsa(dp43279
S'description'
p43280
S'Plus or minus fraction of random variation in the bubble radius\n'
p43281
sS'cpp_type'
p43282
S'double'
p43283
sS'default'
p43284
S'0'
p43285
sS'name'
p43286
S'radius_variation'
p43287
sS'required'
p43288
I00
sS'group_name'
p43289
Nsa(dp43290
S'name'
p43291
S'radius_variation_type'
p43292
sS'cpp_type'
p43293
S'MooseEnum'
p43294
sS'default'
p43295
S'none'
p43296
sS'description'
p43297
S'Type of distribution that random circle radii will follow\n'
p43298
sS'required'
p43299
I00
sS'options'
p43300
S'uniform normal none'
p43301
sS'group_name'
p43302
Nsa(dp43303
S'description'
p43304
S'random seed\n'
p43305
sS'cpp_type'
p43306
S'unsigned int'
p43307
sS'default'
p43308
S'2000'
p43309
sS'name'
p43310
S'rand_seed'
p43311
sS'required'
p43312
I00
sS'group_name'
p43313
Nsa(dp43314
S'description'
p43315
g3
sS'cpp_type'
p43316
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43317
sS'default'
p43318
S'LatticeSmoothCircleIC'
p43319
sS'name'
p43320
S'type'
p43321
sS'required'
p43322
I00
sS'group_name'
p43323
Nsa(dp43324
S'description'
p43325
S'The variable this initial condition is supposed to provide values for.\n'
p43326
sS'cpp_type'
p43327
S'VariableName'
p43328
sS'default'
p43329
g3
sS'name'
p43330
S'variable'
p43331
sS'required'
p43332
I01
sS'group_name'
p43333
Nsa(dp43334
S'description'
p43335
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p43336
sS'cpp_type'
p43337
S'bool'
p43338
sS'default'
p43339
S'0'
p43340
sS'name'
p43341
S'zero_gradient'
p43342
sS'required'
p43343
I00
sS'group_name'
p43344
NsasS'name'
p43345
S'/Variables/*/InitialCondition/<type>/LatticeSmoothCircleIC'
p43346
sa(dp43347
S'description'
p43348
S'Random distribution of smooth circles with given minimum spacing\n'
p43349
sS'subblocks'
p43350
NsS'parameters'
p43351
(lp43352
(dp43353
S'description'
p43354
S'in 3D, whether the objects are spheres or columns\n'
p43355
sS'cpp_type'
p43356
S'bool'
p43357
sS'default'
p43358
S'1'
p43359
sS'name'
p43360
S'3D_spheres'
p43361
sS'required'
p43362
I00
sS'group_name'
p43363
Nsa(dp43364
S'description'
p43365
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43366
sS'cpp_type'
p43367
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p43368
sS'default'
p43369
g3
sS'name'
p43370
S'block'
p43371
sS'required'
p43372
I00
sS'group_name'
p43373
Nsa(dp43374
S'description'
p43375
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43376
sS'cpp_type'
p43377
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p43378
sS'default'
p43379
g3
sS'name'
p43380
S'boundary'
p43381
sS'required'
p43382
I00
sS'group_name'
p43383
Nsa(dp43384
S'description'
p43385
S'minimum spacing of bubbles, measured from center to center\n'
p43386
sS'cpp_type'
p43387
S'double'
p43388
sS'default'
p43389
g3
sS'name'
p43390
S'bubspac'
p43391
sS'required'
p43392
I01
sS'group_name'
p43393
Nsa(dp43394
S'description'
p43395
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p43396
sS'cpp_type'
p43397
S'double'
p43398
sS'default'
p43399
S'0'
p43400
sS'name'
p43401
S'int_width'
p43402
sS'required'
p43403
I00
sS'group_name'
p43404
Nsa(dp43405
S'description'
p43406
S'The variable value inside the circle\n'
p43407
sS'cpp_type'
p43408
S'double'
p43409
sS'default'
p43410
g3
sS'name'
p43411
S'invalue'
p43412
sS'required'
p43413
I01
sS'group_name'
p43414
Nsa(dp43415
S'description'
p43416
S'The number of bubbles to place\n'
p43417
sS'cpp_type'
p43418
S'unsigned int'
p43419
sS'default'
p43420
g3
sS'name'
p43421
S'numbub'
p43422
sS'required'
p43423
I01
sS'group_name'
p43424
Nsa(dp43425
S'description'
p43426
S'The number of tries\n'
p43427
sS'cpp_type'
p43428
S'unsigned int'
p43429
sS'default'
p43430
S'1000'
p43431
sS'name'
p43432
S'numtries'
p43433
sS'required'
p43434
I00
sS'group_name'
p43435
Nsa(dp43436
S'description'
p43437
S'The variable value outside the circle\n'
p43438
sS'cpp_type'
p43439
S'double'
p43440
sS'default'
p43441
g3
sS'name'
p43442
S'outvalue'
p43443
sS'required'
p43444
I01
sS'group_name'
p43445
Nsa(dp43446
S'description'
p43447
S'Mean radius value for the circels\n'
p43448
sS'cpp_type'
p43449
S'double'
p43450
sS'default'
p43451
g3
sS'name'
p43452
S'radius'
p43453
sS'required'
p43454
I01
sS'group_name'
p43455
Nsa(dp43456
S'description'
p43457
S'Plus or minus fraction of random variation in the bubble radius for uniform, standard deviation for normal\n'
p43458
sS'cpp_type'
p43459
S'double'
p43460
sS'default'
p43461
S'0'
p43462
sS'name'
p43463
S'radius_variation'
p43464
sS'required'
p43465
I00
sS'group_name'
p43466
Nsa(dp43467
S'name'
p43468
S'radius_variation_type'
p43469
sS'cpp_type'
p43470
S'MooseEnum'
p43471
sS'default'
p43472
S'none'
p43473
sS'description'
p43474
S'Type of distribution that random circle radii will follow\n'
p43475
sS'required'
p43476
I00
sS'options'
p43477
S'uniform normal none'
p43478
sS'group_name'
p43479
Nsa(dp43480
S'description'
p43481
S'random seed\n'
p43482
sS'cpp_type'
p43483
S'unsigned int'
p43484
sS'default'
p43485
S'2000'
p43486
sS'name'
p43487
S'rand_seed'
p43488
sS'required'
p43489
I00
sS'group_name'
p43490
Nsa(dp43491
S'description'
p43492
g3
sS'cpp_type'
p43493
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43494
sS'default'
p43495
S'MultiSmoothCircleIC'
p43496
sS'name'
p43497
S'type'
p43498
sS'required'
p43499
I00
sS'group_name'
p43500
Nsa(dp43501
S'description'
p43502
S'The variable this initial condition is supposed to provide values for.\n'
p43503
sS'cpp_type'
p43504
S'VariableName'
p43505
sS'default'
p43506
g3
sS'name'
p43507
S'variable'
p43508
sS'required'
p43509
I01
sS'group_name'
p43510
Nsa(dp43511
S'description'
p43512
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p43513
sS'cpp_type'
p43514
S'bool'
p43515
sS'default'
p43516
S'0'
p43517
sS'name'
p43518
S'zero_gradient'
p43519
sS'required'
p43520
I00
sS'group_name'
p43521
NsasS'name'
p43522
S'/Variables/*/InitialCondition/<type>/MultiSmoothCircleIC'
p43523
sa(dp43524
S'description'
p43525
g3
sS'subblocks'
p43526
NsS'parameters'
p43527
(lp43528
(dp43529
S'description'
p43530
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43531
sS'cpp_type'
p43532
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p43533
sS'default'
p43534
g3
sS'name'
p43535
S'block'
p43536
sS'required'
p43537
I00
sS'group_name'
p43538
Nsa(dp43539
S'description'
p43540
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43541
sS'cpp_type'
p43542
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p43543
sS'default'
p43544
g3
sS'name'
p43545
S'boundary'
p43546
sS'required'
p43547
I00
sS'group_name'
p43548
Nsa(dp43549
S'description'
p43550
S'The index for the current order parameter\n'
p43551
sS'cpp_type'
p43552
S'unsigned int'
p43553
sS'default'
p43554
g3
sS'name'
p43555
S'op_index'
p43556
sS'required'
p43557
I01
sS'group_name'
p43558
Nsa(dp43559
S'description'
p43560
S'Number of order parameters\n'
p43561
sS'cpp_type'
p43562
S'unsigned int'
p43563
sS'default'
p43564
g3
sS'name'
p43565
S'op_num'
p43566
sS'required'
p43567
I01
sS'group_name'
p43568
Nsa(dp43569
S'description'
p43570
S'Type of random grain structure\n'
p43571
sS'cpp_type'
p43572
S'unsigned int'
p43573
sS'default'
p43574
g3
sS'name'
p43575
S'typ'
p43576
sS'required'
p43577
I01
sS'group_name'
p43578
Nsa(dp43579
S'description'
p43580
g3
sS'cpp_type'
p43581
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43582
sS'default'
p43583
S'PolycrystalRandomIC'
p43584
sS'name'
p43585
S'type'
p43586
sS'required'
p43587
I00
sS'group_name'
p43588
Nsa(dp43589
S'description'
p43590
S'The variable this initial condition is supposed to provide values for.\n'
p43591
sS'cpp_type'
p43592
S'VariableName'
p43593
sS'default'
p43594
g3
sS'name'
p43595
S'variable'
p43596
sS'required'
p43597
I01
sS'group_name'
p43598
NsasS'name'
p43599
S'/Variables/*/InitialCondition/<type>/PolycrystalRandomIC'
p43600
sa(dp43601
S'description'
p43602
S'Random Voronoi tesselation polycrystal (used by PolycrystalVoronoiICAction)\n'
p43603
sS'subblocks'
p43604
NsS'parameters'
p43605
(lp43606
(dp43607
S'description'
p43608
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43609
sS'cpp_type'
p43610
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p43611
sS'default'
p43612
g3
sS'name'
p43613
S'block'
p43614
sS'required'
p43615
I00
sS'group_name'
p43616
Nsa(dp43617
S'description'
p43618
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43619
sS'cpp_type'
p43620
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p43621
sS'default'
p43622
g3
sS'name'
p43623
S'boundary'
p43624
sS'required'
p43625
I00
sS'group_name'
p43626
Nsa(dp43627
S'description'
p43628
S"Use set grain center points for Cody's test. Grain num MUST equal 10\n"
p43629
sS'cpp_type'
p43630
S'bool'
p43631
sS'default'
p43632
S'0'
p43633
sS'name'
p43634
S'cody_test'
p43635
sS'required'
p43636
I00
sS'group_name'
p43637
Nsa(dp43638
S'description'
p43639
S'3D microstructure will be columnar in the z-direction?\n'
p43640
sS'cpp_type'
p43641
S'bool'
p43642
sS'default'
p43643
S'0'
p43644
sS'name'
p43645
S'columnar_3D'
p43646
sS'required'
p43647
I00
sS'group_name'
p43648
Nsa(dp43649
S'description'
p43650
S'Number of grains being represented by the order parameters\n'
p43651
sS'cpp_type'
p43652
S'unsigned int'
p43653
sS'default'
p43654
g3
sS'name'
p43655
S'grain_num'
p43656
sS'required'
p43657
I01
sS'group_name'
p43658
Nsa(dp43659
S'description'
p43660
S'The index for the current order parameter\n'
p43661
sS'cpp_type'
p43662
S'unsigned int'
p43663
sS'default'
p43664
g3
sS'name'
p43665
S'op_index'
p43666
sS'required'
p43667
I01
sS'group_name'
p43668
Nsa(dp43669
S'description'
p43670
S'Number of order parameters\n'
p43671
sS'cpp_type'
p43672
S'unsigned int'
p43673
sS'default'
p43674
g3
sS'name'
p43675
S'op_num'
p43676
sS'required'
p43677
I01
sS'group_name'
p43678
Nsa(dp43679
S'description'
p43680
S'The random seed\n'
p43681
sS'cpp_type'
p43682
S'unsigned int'
p43683
sS'default'
p43684
S'12444'
p43685
sS'name'
p43686
S'rand_seed'
p43687
sS'required'
p43688
I00
sS'group_name'
p43689
Nsa(dp43690
S'description'
p43691
g3
sS'cpp_type'
p43692
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43693
sS'default'
p43694
S'PolycrystalReducedIC'
p43695
sS'name'
p43696
S'type'
p43697
sS'required'
p43698
I00
sS'group_name'
p43699
Nsa(dp43700
S'description'
p43701
S'The variable this initial condition is supposed to provide values for.\n'
p43702
sS'cpp_type'
p43703
S'VariableName'
p43704
sS'default'
p43705
g3
sS'name'
p43706
S'variable'
p43707
sS'required'
p43708
I01
sS'group_name'
p43709
NsasS'name'
p43710
S'/Variables/*/InitialCondition/<type>/PolycrystalReducedIC'
p43711
sa(dp43712
S'description'
p43713
g3
sS'subblocks'
p43714
NsS'parameters'
p43715
(lp43716
(dp43717
S'description'
p43718
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43719
sS'cpp_type'
p43720
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p43721
sS'default'
p43722
g3
sS'name'
p43723
S'block'
p43724
sS'required'
p43725
I00
sS'group_name'
p43726
Nsa(dp43727
S'description'
p43728
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43729
sS'cpp_type'
p43730
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p43731
sS'default'
p43732
g3
sS'name'
p43733
S'boundary'
p43734
sS'required'
p43735
I00
sS'group_name'
p43736
Nsa(dp43737
S'description'
p43738
S'Upper bound of the randomly generated values\n'
p43739
sS'cpp_type'
p43740
S'double'
p43741
sS'default'
p43742
S'1'
p43743
sS'name'
p43744
S'max'
p43745
sS'required'
p43746
I00
sS'group_name'
p43747
Nsa(dp43748
S'description'
p43749
S'Lower bound of the randomly generated values\n'
p43750
sS'cpp_type'
p43751
S'double'
p43752
sS'default'
p43753
S'0'
p43754
sS'name'
p43755
S'min'
p43756
sS'required'
p43757
I00
sS'group_name'
p43758
Nsa(dp43759
S'description'
p43760
S'Seed value for the random number generator\n'
p43761
sS'cpp_type'
p43762
S'unsigned int'
p43763
sS'default'
p43764
S'0'
p43765
sS'name'
p43766
S'seed'
p43767
sS'required'
p43768
I00
sS'group_name'
p43769
Nsa(dp43770
S'description'
p43771
g3
sS'cpp_type'
p43772
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43773
sS'default'
p43774
S'RandomIC'
p43775
sS'name'
p43776
S'type'
p43777
sS'required'
p43778
I00
sS'group_name'
p43779
Nsa(dp43780
S'description'
p43781
S'The variable this initial condition is supposed to provide values for.\n'
p43782
sS'cpp_type'
p43783
S'VariableName'
p43784
sS'default'
p43785
g3
sS'name'
p43786
S'variable'
p43787
sS'required'
p43788
I01
sS'group_name'
p43789
NsasS'name'
p43790
S'/Variables/*/InitialCondition/<type>/RandomIC'
p43791
sa(dp43792
S'description'
p43793
S'Random noise with different min/max inside/outside of a bounding box\n'
p43794
sS'subblocks'
p43795
NsS'parameters'
p43796
(lp43797
(dp43798
S'description'
p43799
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43800
sS'cpp_type'
p43801
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p43802
sS'default'
p43803
g3
sS'name'
p43804
S'block'
p43805
sS'required'
p43806
I00
sS'group_name'
p43807
Nsa(dp43808
S'description'
p43809
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43810
sS'cpp_type'
p43811
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p43812
sS'default'
p43813
g3
sS'name'
p43814
S'boundary'
p43815
sS'required'
p43816
I00
sS'group_name'
p43817
Nsa(dp43818
S'description'
p43819
S'The min value of the variable invalue the box\n'
p43820
sS'cpp_type'
p43821
S'double'
p43822
sS'default'
p43823
S'0'
p43824
sS'name'
p43825
S'mn_invalue'
p43826
sS'required'
p43827
I00
sS'group_name'
p43828
Nsa(dp43829
S'description'
p43830
S'The min value of the variable outvalue the box\n'
p43831
sS'cpp_type'
p43832
S'double'
p43833
sS'default'
p43834
S'0'
p43835
sS'name'
p43836
S'mn_outvalue'
p43837
sS'required'
p43838
I00
sS'group_name'
p43839
Nsa(dp43840
S'description'
p43841
S'The max value of the variable invalue the box\n'
p43842
sS'cpp_type'
p43843
S'double'
p43844
sS'default'
p43845
g3
sS'name'
p43846
S'mx_invalue'
p43847
sS'required'
p43848
I01
sS'group_name'
p43849
Nsa(dp43850
S'description'
p43851
S'The max value of the variable outvalue the box\n'
p43852
sS'cpp_type'
p43853
S'double'
p43854
sS'default'
p43855
g3
sS'name'
p43856
S'mx_outvalue'
p43857
sS'required'
p43858
I01
sS'group_name'
p43859
Nsa(dp43860
S'description'
p43861
g3
sS'cpp_type'
p43862
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p43863
sS'default'
p43864
S'RndBoundingBoxIC'
p43865
sS'name'
p43866
S'type'
p43867
sS'required'
p43868
I00
sS'group_name'
p43869
Nsa(dp43870
S'description'
p43871
S'The variable this initial condition is supposed to provide values for.\n'
p43872
sS'cpp_type'
p43873
S'VariableName'
p43874
sS'default'
p43875
g3
sS'name'
p43876
S'variable'
p43877
sS'required'
p43878
I01
sS'group_name'
p43879
Nsa(dp43880
S'description'
p43881
S'The x coordinate of the lower left-hand corner of the box\n'
p43882
sS'cpp_type'
p43883
S'double'
p43884
sS'default'
p43885
g3
sS'name'
p43886
S'x1'
p43887
sS'required'
p43888
I01
sS'group_name'
p43889
Nsa(dp43890
S'description'
p43891
S'The x coordinate of the upper right-hand corner of the box\n'
p43892
sS'cpp_type'
p43893
S'double'
p43894
sS'default'
p43895
g3
sS'name'
p43896
S'x2'
p43897
sS'required'
p43898
I01
sS'group_name'
p43899
Nsa(dp43900
S'description'
p43901
S'The y coordinate of the lower left-hand corner of the box\n'
p43902
sS'cpp_type'
p43903
S'double'
p43904
sS'default'
p43905
g3
sS'name'
p43906
S'y1'
p43907
sS'required'
p43908
I01
sS'group_name'
p43909
Nsa(dp43910
S'description'
p43911
S'The y coordinate of the upper right-hand corner of the box\n'
p43912
sS'cpp_type'
p43913
S'double'
p43914
sS'default'
p43915
g3
sS'name'
p43916
S'y2'
p43917
sS'required'
p43918
I01
sS'group_name'
p43919
Nsa(dp43920
S'description'
p43921
S'The z coordinate of the lower left-hand corner of the box\n'
p43922
sS'cpp_type'
p43923
S'double'
p43924
sS'default'
p43925
S'0'
p43926
sS'name'
p43927
S'z1'
p43928
sS'required'
p43929
I00
sS'group_name'
p43930
Nsa(dp43931
S'description'
p43932
S'The z coordinate of the upper right-hand corner of the box\n'
p43933
sS'cpp_type'
p43934
S'double'
p43935
sS'default'
p43936
S'0'
p43937
sS'name'
p43938
S'z2'
p43939
sS'required'
p43940
I00
sS'group_name'
p43941
NsasS'name'
p43942
S'/Variables/*/InitialCondition/<type>/RndBoundingBoxIC'
p43943
sa(dp43944
S'description'
p43945
S'Random noise with different min/max inside/outside of a smooth circle\n'
p43946
sS'subblocks'
p43947
NsS'parameters'
p43948
(lp43949
(dp43950
S'description'
p43951
S'in 3D, whether the objects are spheres or columns\n'
p43952
sS'cpp_type'
p43953
S'bool'
p43954
sS'default'
p43955
S'1'
p43956
sS'name'
p43957
S'3D_spheres'
p43958
sS'required'
p43959
I00
sS'group_name'
p43960
Nsa(dp43961
S'description'
p43962
S'The list of block ids (SubdomainID) that this object will be applied\n'
p43963
sS'cpp_type'
p43964
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p43965
sS'default'
p43966
g3
sS'name'
p43967
S'block'
p43968
sS'required'
p43969
I00
sS'group_name'
p43970
Nsa(dp43971
S'description'
p43972
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p43973
sS'cpp_type'
p43974
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p43975
sS'default'
p43976
g3
sS'name'
p43977
S'boundary'
p43978
sS'required'
p43979
I00
sS'group_name'
p43980
Nsa(dp43981
S'description'
p43982
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p43983
sS'cpp_type'
p43984
S'double'
p43985
sS'default'
p43986
S'0'
p43987
sS'name'
p43988
S'int_width'
p43989
sS'required'
p43990
I00
sS'group_name'
p43991
Nsa(dp43992
S'description'
p43993
S'The variable value inside the circle\n'
p43994
sS'cpp_type'
p43995
S'double'
p43996
sS'default'
p43997
g3
sS'name'
p43998
S'invalue'
p43999
sS'required'
p44000
I01
sS'group_name'
p44001
Nsa(dp44002
S'description'
p44003
S'The variable value outside the circle\n'
p44004
sS'cpp_type'
p44005
S'double'
p44006
sS'default'
p44007
g3
sS'name'
p44008
S'outvalue'
p44009
sS'required'
p44010
I01
sS'group_name'
p44011
Nsa(dp44012
S'description'
p44013
S'The radius of a circle\n'
p44014
sS'cpp_type'
p44015
S'double'
p44016
sS'default'
p44017
g3
sS'name'
p44018
S'radius'
p44019
sS'required'
p44020
I01
sS'group_name'
p44021
Nsa(dp44022
S'description'
p44023
S'Seed value for the random number generator\n'
p44024
sS'cpp_type'
p44025
S'unsigned int'
p44026
sS'default'
p44027
S'12345'
p44028
sS'name'
p44029
S'rand_seed'
p44030
sS'required'
p44031
I00
sS'group_name'
p44032
Nsa(dp44033
S'description'
p44034
g3
sS'cpp_type'
p44035
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44036
sS'default'
p44037
S'RndSmoothCircleIC'
p44038
sS'name'
p44039
S'type'
p44040
sS'required'
p44041
I00
sS'group_name'
p44042
Nsa(dp44043
S'description'
p44044
S'The variable this initial condition is supposed to provide values for.\n'
p44045
sS'cpp_type'
p44046
S'VariableName'
p44047
sS'default'
p44048
g3
sS'name'
p44049
S'variable'
p44050
sS'required'
p44051
I01
sS'group_name'
p44052
Nsa(dp44053
S'description'
p44054
S'Plus or minus this amount on the invalue\n'
p44055
sS'cpp_type'
p44056
S'double'
p44057
sS'default'
p44058
g3
sS'name'
p44059
S'variation_invalue'
p44060
sS'required'
p44061
I01
sS'group_name'
p44062
Nsa(dp44063
S'description'
p44064
S'Plus or minus this amount on the outvalue\n'
p44065
sS'cpp_type'
p44066
S'double'
p44067
sS'default'
p44068
g3
sS'name'
p44069
S'variation_outvalue'
p44070
sS'required'
p44071
I01
sS'group_name'
p44072
Nsa(dp44073
S'description'
p44074
S'The x coordinate of the circle center\n'
p44075
sS'cpp_type'
p44076
S'double'
p44077
sS'default'
p44078
g3
sS'name'
p44079
S'x1'
p44080
sS'required'
p44081
I01
sS'group_name'
p44082
Nsa(dp44083
S'description'
p44084
S'The y coordinate of the circle center\n'
p44085
sS'cpp_type'
p44086
S'double'
p44087
sS'default'
p44088
g3
sS'name'
p44089
S'y1'
p44090
sS'required'
p44091
I01
sS'group_name'
p44092
Nsa(dp44093
S'description'
p44094
S'The z coordinate of the circle center\n'
p44095
sS'cpp_type'
p44096
S'double'
p44097
sS'default'
p44098
S'0'
p44099
sS'name'
p44100
S'z1'
p44101
sS'required'
p44102
I00
sS'group_name'
p44103
Nsa(dp44104
S'description'
p44105
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p44106
sS'cpp_type'
p44107
S'bool'
p44108
sS'default'
p44109
S'0'
p44110
sS'name'
p44111
S'zero_gradient'
p44112
sS'required'
p44113
I00
sS'group_name'
p44114
NsasS'name'
p44115
S'/Variables/*/InitialCondition/<type>/RndSmoothCircleIC'
p44116
sa(dp44117
S'description'
p44118
g3
sS'subblocks'
p44119
NsS'parameters'
p44120
(lp44121
(dp44122
S'description'
p44123
g3
sS'cpp_type'
p44124
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44125
sS'default'
p44126
S'ScalarComponentIC'
p44127
sS'name'
p44128
S'type'
p44129
sS'required'
p44130
I00
sS'group_name'
p44131
Nsa(dp44132
S'description'
p44133
S'Initial values to initialize the scalar variable.\n'
p44134
sS'cpp_type'
p44135
S'std::__1::vector<double, std::__1::allocator<double> >'
p44136
sS'default'
p44137
g3
sS'name'
p44138
S'values'
p44139
sS'required'
p44140
I01
sS'group_name'
p44141
Nsa(dp44142
S'description'
p44143
S'The variable this initial condition is supposed to provide values for.\n'
p44144
sS'cpp_type'
p44145
S'VariableName'
p44146
sS'default'
p44147
g3
sS'name'
p44148
S'variable'
p44149
sS'required'
p44150
I00
sS'group_name'
p44151
NsasS'name'
p44152
S'/Variables/*/InitialCondition/<type>/ScalarComponentIC'
p44153
sa(dp44154
S'description'
p44155
g3
sS'subblocks'
p44156
NsS'parameters'
p44157
(lp44158
(dp44159
S'description'
p44160
g3
sS'cpp_type'
p44161
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44162
sS'default'
p44163
S'ScalarConstantIC'
p44164
sS'name'
p44165
S'type'
p44166
sS'required'
p44167
I00
sS'group_name'
p44168
Nsa(dp44169
S'description'
p44170
g3
sS'cpp_type'
p44171
S'double'
p44172
sS'default'
p44173
S'0'
p44174
sS'name'
p44175
S'value'
p44176
sS'required'
p44177
I00
sS'group_name'
p44178
Nsa(dp44179
S'description'
p44180
S'The variable this initial condition is supposed to provide values for.\n'
p44181
sS'cpp_type'
p44182
S'VariableName'
p44183
sS'default'
p44184
g3
sS'name'
p44185
S'variable'
p44186
sS'required'
p44187
I00
sS'group_name'
p44188
NsasS'name'
p44189
S'/Variables/*/InitialCondition/<type>/ScalarConstantIC'
p44190
sa(dp44191
S'description'
p44192
S'Circle with a smooth interface\n'
p44193
sS'subblocks'
p44194
NsS'parameters'
p44195
(lp44196
(dp44197
S'description'
p44198
S'in 3D, whether the objects are spheres or columns\n'
p44199
sS'cpp_type'
p44200
S'bool'
p44201
sS'default'
p44202
S'1'
p44203
sS'name'
p44204
S'3D_spheres'
p44205
sS'required'
p44206
I00
sS'group_name'
p44207
Nsa(dp44208
S'description'
p44209
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44210
sS'cpp_type'
p44211
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44212
sS'default'
p44213
g3
sS'name'
p44214
S'block'
p44215
sS'required'
p44216
I00
sS'group_name'
p44217
Nsa(dp44218
S'description'
p44219
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44220
sS'cpp_type'
p44221
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44222
sS'default'
p44223
g3
sS'name'
p44224
S'boundary'
p44225
sS'required'
p44226
I00
sS'group_name'
p44227
Nsa(dp44228
S'description'
p44229
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p44230
sS'cpp_type'
p44231
S'double'
p44232
sS'default'
p44233
S'0'
p44234
sS'name'
p44235
S'int_width'
p44236
sS'required'
p44237
I00
sS'group_name'
p44238
Nsa(dp44239
S'description'
p44240
S'The variable value inside the circle\n'
p44241
sS'cpp_type'
p44242
S'double'
p44243
sS'default'
p44244
g3
sS'name'
p44245
S'invalue'
p44246
sS'required'
p44247
I01
sS'group_name'
p44248
Nsa(dp44249
S'description'
p44250
S'The variable value outside the circle\n'
p44251
sS'cpp_type'
p44252
S'double'
p44253
sS'default'
p44254
g3
sS'name'
p44255
S'outvalue'
p44256
sS'required'
p44257
I01
sS'group_name'
p44258
Nsa(dp44259
S'description'
p44260
S'The radius of a circle\n'
p44261
sS'cpp_type'
p44262
S'double'
p44263
sS'default'
p44264
g3
sS'name'
p44265
S'radius'
p44266
sS'required'
p44267
I01
sS'group_name'
p44268
Nsa(dp44269
S'description'
p44270
g3
sS'cpp_type'
p44271
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44272
sS'default'
p44273
S'SmoothCircleIC'
p44274
sS'name'
p44275
S'type'
p44276
sS'required'
p44277
I00
sS'group_name'
p44278
Nsa(dp44279
S'description'
p44280
S'The variable this initial condition is supposed to provide values for.\n'
p44281
sS'cpp_type'
p44282
S'VariableName'
p44283
sS'default'
p44284
g3
sS'name'
p44285
S'variable'
p44286
sS'required'
p44287
I01
sS'group_name'
p44288
Nsa(dp44289
S'description'
p44290
S'The x coordinate of the circle center\n'
p44291
sS'cpp_type'
p44292
S'double'
p44293
sS'default'
p44294
g3
sS'name'
p44295
S'x1'
p44296
sS'required'
p44297
I01
sS'group_name'
p44298
Nsa(dp44299
S'description'
p44300
S'The y coordinate of the circle center\n'
p44301
sS'cpp_type'
p44302
S'double'
p44303
sS'default'
p44304
g3
sS'name'
p44305
S'y1'
p44306
sS'required'
p44307
I01
sS'group_name'
p44308
Nsa(dp44309
S'description'
p44310
S'The z coordinate of the circle center\n'
p44311
sS'cpp_type'
p44312
S'double'
p44313
sS'default'
p44314
S'0'
p44315
sS'name'
p44316
S'z1'
p44317
sS'required'
p44318
I00
sS'group_name'
p44319
Nsa(dp44320
S'description'
p44321
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p44322
sS'cpp_type'
p44323
S'bool'
p44324
sS'default'
p44325
S'0'
p44326
sS'name'
p44327
S'zero_gradient'
p44328
sS'required'
p44329
I00
sS'group_name'
p44330
NsasS'name'
p44331
S'/Variables/*/InitialCondition/<type>/SmoothCircleIC'
p44332
sa(dp44333
S'description'
p44334
S'Multiple smooth circles with manually specified radii and center points\n'
p44335
sS'subblocks'
p44336
NsS'parameters'
p44337
(lp44338
(dp44339
S'description'
p44340
S'in 3D, whether the objects are spheres or columns\n'
p44341
sS'cpp_type'
p44342
S'bool'
p44343
sS'default'
p44344
S'1'
p44345
sS'name'
p44346
S'3D_spheres'
p44347
sS'required'
p44348
I00
sS'group_name'
p44349
Nsa(dp44350
S'description'
p44351
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44352
sS'cpp_type'
p44353
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44354
sS'default'
p44355
g3
sS'name'
p44356
S'block'
p44357
sS'required'
p44358
I00
sS'group_name'
p44359
Nsa(dp44360
S'description'
p44361
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44362
sS'cpp_type'
p44363
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44364
sS'default'
p44365
g3
sS'name'
p44366
S'boundary'
p44367
sS'required'
p44368
I00
sS'group_name'
p44369
Nsa(dp44370
S'description'
p44371
S'The interfacial width of the void surface.  Defaults to sharp interface\n'
p44372
sS'cpp_type'
p44373
S'double'
p44374
sS'default'
p44375
S'0'
p44376
sS'name'
p44377
S'int_width'
p44378
sS'required'
p44379
I00
sS'group_name'
p44380
Nsa(dp44381
S'description'
p44382
S'The variable value inside the circle\n'
p44383
sS'cpp_type'
p44384
S'double'
p44385
sS'default'
p44386
g3
sS'name'
p44387
S'invalue'
p44388
sS'required'
p44389
I01
sS'group_name'
p44390
Nsa(dp44391
S'description'
p44392
S'The variable value outside the circle\n'
p44393
sS'cpp_type'
p44394
S'double'
p44395
sS'default'
p44396
g3
sS'name'
p44397
S'outvalue'
p44398
sS'required'
p44399
I01
sS'group_name'
p44400
Nsa(dp44401
S'description'
p44402
S'The radius for each circle\n'
p44403
sS'cpp_type'
p44404
S'std::__1::vector<double, std::__1::allocator<double> >'
p44405
sS'default'
p44406
g3
sS'name'
p44407
S'radii'
p44408
sS'required'
p44409
I01
sS'group_name'
p44410
Nsa(dp44411
S'description'
p44412
g3
sS'cpp_type'
p44413
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44414
sS'default'
p44415
S'SpecifiedSmoothCircleIC'
p44416
sS'name'
p44417
S'type'
p44418
sS'required'
p44419
I00
sS'group_name'
p44420
Nsa(dp44421
S'description'
p44422
S'The variable this initial condition is supposed to provide values for.\n'
p44423
sS'cpp_type'
p44424
S'VariableName'
p44425
sS'default'
p44426
g3
sS'name'
p44427
S'variable'
p44428
sS'required'
p44429
I01
sS'group_name'
p44430
Nsa(dp44431
S'description'
p44432
S'The x-coordinate for each circle center\n'
p44433
sS'cpp_type'
p44434
S'std::__1::vector<double, std::__1::allocator<double> >'
p44435
sS'default'
p44436
g3
sS'name'
p44437
S'x_positions'
p44438
sS'required'
p44439
I01
sS'group_name'
p44440
Nsa(dp44441
S'description'
p44442
S'The y-coordinate for each circle center\n'
p44443
sS'cpp_type'
p44444
S'std::__1::vector<double, std::__1::allocator<double> >'
p44445
sS'default'
p44446
g3
sS'name'
p44447
S'y_positions'
p44448
sS'required'
p44449
I01
sS'group_name'
p44450
Nsa(dp44451
S'description'
p44452
S'The z-coordinate for each circle center\n'
p44453
sS'cpp_type'
p44454
S'std::__1::vector<double, std::__1::allocator<double> >'
p44455
sS'default'
p44456
g3
sS'name'
p44457
S'z_positions'
p44458
sS'required'
p44459
I01
sS'group_name'
p44460
Nsa(dp44461
S'description'
p44462
S'Set the gradient DOFs to zero. This can avoid numerical problems with higher order shape functions and overlapping circles.\n'
p44463
sS'cpp_type'
p44464
S'bool'
p44465
sS'default'
p44466
S'0'
p44467
sS'name'
p44468
S'zero_gradient'
p44469
sS'required'
p44470
I00
sS'group_name'
p44471
NsasS'name'
p44472
S'/Variables/*/InitialCondition/<type>/SpecifiedSmoothCircleIC'
p44473
sa(dp44474
S'description'
p44475
S'Thumb shaped bicrystal for grain boundary mobility tests\n'
p44476
sS'subblocks'
p44477
NsS'parameters'
p44478
(lp44479
(dp44480
S'description'
p44481
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44482
sS'cpp_type'
p44483
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44484
sS'default'
p44485
g3
sS'name'
p44486
S'block'
p44487
sS'required'
p44488
I00
sS'group_name'
p44489
Nsa(dp44490
S'description'
p44491
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44492
sS'cpp_type'
p44493
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44494
sS'default'
p44495
g3
sS'name'
p44496
S'boundary'
p44497
sS'required'
p44498
I00
sS'group_name'
p44499
Nsa(dp44500
S'description'
p44501
S'The z coordinate of the circle center\n'
p44502
sS'cpp_type'
p44503
S'double'
p44504
sS'default'
p44505
g3
sS'name'
p44506
S'height'
p44507
sS'required'
p44508
I01
sS'group_name'
p44509
Nsa(dp44510
S'description'
p44511
S'The variable value inside the circle\n'
p44512
sS'cpp_type'
p44513
S'double'
p44514
sS'default'
p44515
g3
sS'name'
p44516
S'invalue'
p44517
sS'required'
p44518
I01
sS'group_name'
p44519
Nsa(dp44520
S'description'
p44521
S'The variable value outside the circle\n'
p44522
sS'cpp_type'
p44523
S'double'
p44524
sS'default'
p44525
g3
sS'name'
p44526
S'outvalue'
p44527
sS'required'
p44528
I01
sS'group_name'
p44529
Nsa(dp44530
S'description'
p44531
g3
sS'cpp_type'
p44532
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44533
sS'default'
p44534
S'ThumbIC'
p44535
sS'name'
p44536
S'type'
p44537
sS'required'
p44538
I00
sS'group_name'
p44539
Nsa(dp44540
S'description'
p44541
S'The variable this initial condition is supposed to provide values for.\n'
p44542
sS'cpp_type'
p44543
S'VariableName'
p44544
sS'default'
p44545
g3
sS'name'
p44546
S'variable'
p44547
sS'required'
p44548
I01
sS'group_name'
p44549
Nsa(dp44550
S'description'
p44551
S'The y coordinate of the circle center\n'
p44552
sS'cpp_type'
p44553
S'double'
p44554
sS'default'
p44555
g3
sS'name'
p44556
S'width'
p44557
sS'required'
p44558
I01
sS'group_name'
p44559
Nsa(dp44560
S'description'
p44561
S'The x coordinate of the circle center\n'
p44562
sS'cpp_type'
p44563
S'double'
p44564
sS'default'
p44565
g3
sS'name'
p44566
S'xcoord'
p44567
sS'required'
p44568
I01
sS'group_name'
p44569
NsasS'name'
p44570
S'/Variables/*/InitialCondition/<type>/ThumbIC'
p44571
sa(dp44572
S'description'
p44573
S'Tricrystal with two circles/bubbles\n'
p44574
sS'subblocks'
p44575
NsS'parameters'
p44576
(lp44577
(dp44578
S'description'
p44579
S'The list of block ids (SubdomainID) that this object will be applied\n'
p44580
sS'cpp_type'
p44581
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44582
sS'default'
p44583
g3
sS'name'
p44584
S'block'
p44585
sS'required'
p44586
I00
sS'group_name'
p44587
Nsa(dp44588
S'description'
p44589
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p44590
sS'cpp_type'
p44591
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p44592
sS'default'
p44593
g3
sS'name'
p44594
S'boundary'
p44595
sS'required'
p44596
I00
sS'group_name'
p44597
Nsa(dp44598
S'description'
p44599
S'Index for the current grain order parameter\n'
p44600
sS'cpp_type'
p44601
S'unsigned int'
p44602
sS'default'
p44603
g3
sS'name'
p44604
S'op_index'
p44605
sS'required'
p44606
I01
sS'group_name'
p44607
Nsa(dp44608
S'description'
p44609
S'Number of grain order parameters\n'
p44610
sS'cpp_type'
p44611
S'unsigned int'
p44612
sS'default'
p44613
g3
sS'name'
p44614
S'op_num'
p44615
sS'required'
p44616
I01
sS'group_name'
p44617
Nsa(dp44618
S'description'
p44619
g3
sS'cpp_type'
p44620
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44621
sS'default'
p44622
S'Tricrystal2CircleGrainsIC'
p44623
sS'name'
p44624
S'type'
p44625
sS'required'
p44626
I00
sS'group_name'
p44627
Nsa(dp44628
S'description'
p44629
S'The variable this initial condition is supposed to provide values for.\n'
p44630
sS'cpp_type'
p44631
S'VariableName'
p44632
sS'default'
p44633
g3
sS'name'
p44634
S'variable'
p44635
sS'required'
p44636
I01
sS'group_name'
p44637
NsasS'name'
p44638
S'/Variables/*/InitialCondition/<type>/Tricrystal2CircleGrainsIC'
p44639
sasS'parameters'
p44640
NsS'name'
p44641
S'/Variables/*/InitialCondition/<type>'
p44642
sasS'parameters'
p44643
(lp44644
(dp44645
S'description'
p44646
S'A string representing the Moose Object that will be built by this Action\n'
p44647
sS'cpp_type'
p44648
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44649
sS'default'
p44650
g3
sS'name'
p44651
S'type'
p44652
sS'required'
p44653
I01
sS'group_name'
p44654
NsasS'name'
p44655
S'/Variables/*/InitialCondition'
p44656
sasS'parameters'
p44657
(lp44658
(dp44659
S'description'
p44660
S'The block id where this variable lives\n'
p44661
sS'cpp_type'
p44662
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p44663
sS'default'
p44664
g3
sS'name'
p44665
S'block'
p44666
sS'required'
p44667
I00
sS'group_name'
p44668
Nsa(dp44669
S'description'
p44670
S'True to make this variable an eigen variable\n'
p44671
sS'cpp_type'
p44672
S'bool'
p44673
sS'default'
p44674
S'0'
p44675
sS'name'
p44676
S'eigen'
p44677
sS'required'
p44678
I00
sS'group_name'
p44679
S'Advanced'
p44680
sa(dp44681
S'name'
p44682
S'family'
p44683
sS'cpp_type'
p44684
S'MooseEnum'
p44685
sS'default'
p44686
S'LAGRANGE'
p44687
sS'description'
p44688
S'Specifies the family of FE shape functions to use for this variable\n'
p44689
sS'required'
p44690
I00
sS'options'
p44691
S'LAGRANGE MONOMIAL HERMITE SCALAR HIERARCHIC CLOUGH XYZ SZABAB BERNSTEIN L2_LAGRANGE L2_HIERARCHIC'
p44692
sS'group_name'
p44693
Nsa(dp44694
S'description'
p44695
S'Specifies the initial condition for this variable\n'
p44696
sS'cpp_type'
p44697
S'double'
p44698
sS'default'
p44699
g3
sS'name'
p44700
S'initial_condition'
p44701
sS'required'
p44702
I00
sS'group_name'
p44703
Nsa(dp44704
S'name'
p44705
S'order'
p44706
sS'cpp_type'
p44707
S'MooseEnum'
p44708
sS'default'
p44709
S'FIRST'
p44710
sS'description'
p44711
S'Specifies the order of the FE shape function to use for this variable (additional orders not listed are allowed)\n'
p44712
sS'required'
p44713
I00
sS'options'
p44714
S'CONSTANT FIRST SECOND THIRD FOURTH'
p44715
sS'group_name'
p44716
Nsa(dp44717
S'description'
p44718
S'Vector of output names were you would like to restrict the output of variables(s) associated with this object\n'
p44719
sS'cpp_type'
p44720
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44721
sS'default'
p44722
g3
sS'name'
p44723
S'outputs'
p44724
sS'required'
p44725
I00
sS'group_name'
p44726
Nsa(dp44727
S'description'
p44728
S'Specifies a scaling factor to apply to this variable\n'
p44729
sS'cpp_type'
p44730
S'double'
p44731
sS'default'
p44732
S'1'
p44733
sS'name'
p44734
S'scaling'
p44735
sS'required'
p44736
I00
sS'group_name'
p44737
S'Advanced'
p44738
sa(dp44739
S'description'
p44740
S'Gives the timestep for which to read a solution from a file for a given variable\n'
p44741
sS'cpp_type'
p44742
S'int'
p44743
sS'default'
p44744
S'2'
p44745
sS'name'
p44746
S'initial_from_file_timestep'
p44747
sS'required'
p44748
I00
sS'group_name'
p44749
S'Initial From File'
p44750
sa(dp44751
S'description'
p44752
S'Gives the name of a variable for which to read an initial condition from a mesh file\n'
p44753
sS'cpp_type'
p44754
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44755
sS'default'
p44756
g3
sS'name'
p44757
S'initial_from_file_var'
p44758
sS'required'
p44759
I00
sS'group_name'
p44760
S'Initial From File'
p44761
sasS'name'
p44762
S'/Variables/*'
p44763
sa(dp44764
S'description'
p44765
g3
sS'subblocks'
p44766
NsS'parameters'
p44767
(lp44768
(dp44769
S'description'
p44770
S'Specifies the family of FE shape functions to use for this variable\n'
p44771
sS'cpp_type'
p44772
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44773
sS'default'
p44774
S'LAGRANGE'
p44775
sS'name'
p44776
S'family'
p44777
sS'required'
p44778
I00
sS'group_name'
p44779
Nsa(dp44780
S'description'
p44781
S'specifies the number of order parameters to create\n'
p44782
sS'cpp_type'
p44783
S'unsigned int'
p44784
sS'default'
p44785
g3
sS'name'
p44786
S'op_num'
p44787
sS'required'
p44788
I01
sS'group_name'
p44789
Nsa(dp44790
S'description'
p44791
S'Specifies the order of the FE shape function to use for this variable\n'
p44792
sS'cpp_type'
p44793
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44794
sS'default'
p44795
S'FIRST'
p44796
sS'name'
p44797
S'order'
p44798
sS'required'
p44799
I00
sS'group_name'
p44800
Nsa(dp44801
S'description'
p44802
S'Specifies a scaling factor to apply to this variable\n'
p44803
sS'cpp_type'
p44804
S'double'
p44805
sS'default'
p44806
S'1'
p44807
sS'name'
p44808
S'scaling'
p44809
sS'required'
p44810
I00
sS'group_name'
p44811
Nsa(dp44812
S'description'
p44813
S'specifies the base name of the variables\n'
p44814
sS'cpp_type'
p44815
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44816
sS'default'
p44817
g3
sS'name'
p44818
S'var_name_base'
p44819
sS'required'
p44820
I01
sS'group_name'
p44821
NsasS'name'
p44822
S'/Variables/PolycrystalVariables'
p44823
sasS'parameters'
p44824
NsS'name'
p44825
S'/Variables'
p44826
sa(dp44827
S'description'
p44828
g3
sS'subblocks'
p44829
(lp44830
(dp44831
S'description'
p44832
g3
sS'subblocks'
p44833
NsS'parameters'
p44834
(lp44835
(dp44836
S'description'
p44837
S'A string representing the Moose Object that will be built by this Action\n'
p44838
sS'cpp_type'
p44839
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44840
sS'default'
p44841
g3
sS'name'
p44842
S'type'
p44843
sS'required'
p44844
I01
sS'group_name'
p44845
NsasS'name'
p44846
S'/VectorPostprocessors/*'
p44847
sa(dp44848
S'description'
p44849
g3
sS'subblocks'
p44850
NsS'parameters'
p44851
(lp44852
(dp44853
S'name'
p44854
S'execute_on'
p44855
sS'cpp_type'
p44856
S'MultiMooseEnum'
p44857
sS'default'
p44858
S'TIMESTEP_END'
p44859
sS'description'
p44860
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44861
sS'required'
p44862
I00
sS'options'
p44863
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p44864
sS'group_name'
p44865
Nsa(dp44866
S'description'
p44867
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p44868
sS'cpp_type'
p44869
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44870
sS'default'
p44871
g3
sS'name'
p44872
S'outputs'
p44873
sS'required'
p44874
I00
sS'group_name'
p44875
S'Advanced'
p44876
sa(dp44877
S'description'
p44878
g3
sS'cpp_type'
p44879
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44880
sS'default'
p44881
S'ConstantVectorPostprocessor'
p44882
sS'name'
p44883
S'type'
p44884
sS'required'
p44885
I00
sS'group_name'
p44886
Nsa(dp44887
S'description'
p44888
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44889
sS'cpp_type'
p44890
S'bool'
p44891
sS'default'
p44892
S'0'
p44893
sS'name'
p44894
S'use_displaced_mesh'
p44895
sS'required'
p44896
I00
sS'group_name'
p44897
S'Advanced'
p44898
sa(dp44899
S'description'
p44900
S'The vector value this object will have.\n'
p44901
sS'cpp_type'
p44902
S'std::__1::vector<double, std::__1::allocator<double> >'
p44903
sS'default'
p44904
g3
sS'name'
p44905
S'value'
p44906
sS'required'
p44907
I01
sS'group_name'
p44908
NsasS'name'
p44909
S'/VectorPostprocessors/ConstantVectorPostprocessor'
p44910
sa(dp44911
S'description'
p44912
g3
sS'subblocks'
p44913
NsS'parameters'
p44914
(lp44915
(dp44916
S'description'
p44917
S'The end of the line\n'
p44918
sS'cpp_type'
p44919
S'libMesh::Point'
p44920
sS'default'
p44921
g3
sS'name'
p44922
S'end'
p44923
sS'required'
p44924
I01
sS'group_name'
p44925
Nsa(dp44926
S'name'
p44927
S'execute_on'
p44928
sS'cpp_type'
p44929
S'MultiMooseEnum'
p44930
sS'default'
p44931
S'TIMESTEP_END'
p44932
sS'description'
p44933
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44934
sS'required'
p44935
I00
sS'options'
p44936
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p44937
sS'group_name'
p44938
Nsa(dp44939
S'description'
p44940
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p44941
sS'cpp_type'
p44942
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p44943
sS'default'
p44944
g3
sS'name'
p44945
S'outputs'
p44946
sS'required'
p44947
I00
sS'group_name'
p44948
S'Advanced'
p44949
sa(dp44950
S'description'
p44951
S'The beginning of the line\n'
p44952
sS'cpp_type'
p44953
S'libMesh::Point'
p44954
sS'default'
p44955
g3
sS'name'
p44956
S'start'
p44957
sS'required'
p44958
I01
sS'group_name'
p44959
Nsa(dp44960
S'description'
p44961
g3
sS'cpp_type'
p44962
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p44963
sS'default'
p44964
S'ElementsAlongLine'
p44965
sS'name'
p44966
S'type'
p44967
sS'required'
p44968
I00
sS'group_name'
p44969
Nsa(dp44970
S'description'
p44971
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p44972
sS'cpp_type'
p44973
S'bool'
p44974
sS'default'
p44975
S'0'
p44976
sS'name'
p44977
S'use_displaced_mesh'
p44978
sS'required'
p44979
I00
sS'group_name'
p44980
S'Advanced'
p44981
sasS'name'
p44982
S'/VectorPostprocessors/ElementsAlongLine'
p44983
sa(dp44984
S'description'
p44985
S'Performs a polynomial least squares fit on the data contained in another VectorPostprocessor\n'
p44986
sS'subblocks'
p44987
NsS'parameters'
p44988
(lp44989
(dp44990
S'name'
p44991
S'execute_on'
p44992
sS'cpp_type'
p44993
S'MultiMooseEnum'
p44994
sS'default'
p44995
S'TIMESTEP_END'
p44996
sS'description'
p44997
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p44998
sS'required'
p44999
I00
sS'options'
p45000
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p45001
sS'group_name'
p45002
Nsa(dp45003
S'description'
p45004
S'The number of samples to be output\n'
p45005
sS'cpp_type'
p45006
S'unsigned int'
p45007
sS'default'
p45008
g3
sS'name'
p45009
S'num_samples'
p45010
sS'required'
p45011
I00
sS'group_name'
p45012
Nsa(dp45013
S'description'
p45014
S'The order of the polynomial fit\n'
p45015
sS'cpp_type'
p45016
S'unsigned int'
p45017
sS'default'
p45018
g3
sS'name'
p45019
S'order'
p45020
sS'required'
p45021
I01
sS'group_name'
p45022
Nsa(dp45023
S'name'
p45024
S'output'
p45025
sS'cpp_type'
p45026
S'MooseEnum'
p45027
sS'default'
p45028
S'Coefficients'
p45029
sS'description'
p45030
S'The quantity to output.  Options are: Coefficients Samples\n'
p45031
sS'required'
p45032
I00
sS'options'
p45033
S'Coefficients Samples'
p45034
sS'group_name'
p45035
Nsa(dp45036
S'description'
p45037
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p45038
sS'cpp_type'
p45039
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45040
sS'default'
p45041
g3
sS'name'
p45042
S'outputs'
p45043
sS'required'
p45044
I00
sS'group_name'
p45045
S'Advanced'
p45046
sa(dp45047
S'description'
p45048
S'The maximum x value of the of samples to be output\n'
p45049
sS'cpp_type'
p45050
S'double'
p45051
sS'default'
p45052
g3
sS'name'
p45053
S'sample_x_max'
p45054
sS'required'
p45055
I00
sS'group_name'
p45056
Nsa(dp45057
S'description'
p45058
S'The minimum x value of the of samples to be output\n'
p45059
sS'cpp_type'
p45060
S'double'
p45061
sS'default'
p45062
g3
sS'name'
p45063
S'sample_x_min'
p45064
sS'required'
p45065
I00
sS'group_name'
p45066
Nsa(dp45067
S'description'
p45068
g3
sS'cpp_type'
p45069
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45070
sS'default'
p45071
S'LeastSquaresFit'
p45072
sS'name'
p45073
S'type'
p45074
sS'required'
p45075
I00
sS'group_name'
p45076
Nsa(dp45077
S'description'
p45078
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45079
sS'cpp_type'
p45080
S'bool'
p45081
sS'default'
p45082
S'0'
p45083
sS'name'
p45084
S'use_displaced_mesh'
p45085
sS'required'
p45086
I00
sS'group_name'
p45087
S'Advanced'
p45088
sa(dp45089
S'description'
p45090
S'The vectorpostprocessor on whose values we perform a least squares fit\n'
p45091
sS'cpp_type'
p45092
S'VectorPostprocessorName'
p45093
sS'default'
p45094
g3
sS'name'
p45095
S'vectorpostprocessor'
p45096
sS'required'
p45097
I01
sS'group_name'
p45098
Nsa(dp45099
S'description'
p45100
S'The name of the independent variable\n'
p45101
sS'cpp_type'
p45102
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45103
sS'default'
p45104
g3
sS'name'
p45105
S'x_name'
p45106
sS'required'
p45107
I01
sS'group_name'
p45108
Nsa(dp45109
S'description'
p45110
S'The name of the dependent variable\n'
p45111
sS'cpp_type'
p45112
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45113
sS'default'
p45114
g3
sS'name'
p45115
S'y_name'
p45116
sS'required'
p45117
I01
sS'group_name'
p45118
NsasS'name'
p45119
S'/VectorPostprocessors/LeastSquaresFit'
p45120
sa(dp45121
S'description'
p45122
g3
sS'subblocks'
p45123
NsS'parameters'
p45124
(lp45125
(dp45126
S'description'
p45127
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45128
sS'cpp_type'
p45129
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45130
sS'default'
p45131
g3
sS'name'
p45132
S'block'
p45133
sS'required'
p45134
I00
sS'group_name'
p45135
Nsa(dp45136
S'description'
p45137
S'The end of the line\n'
p45138
sS'cpp_type'
p45139
S'libMesh::Point'
p45140
sS'default'
p45141
g3
sS'name'
p45142
S'end'
p45143
sS'required'
p45144
I01
sS'group_name'
p45145
Nsa(dp45146
S'name'
p45147
S'execute_on'
p45148
sS'cpp_type'
p45149
S'MultiMooseEnum'
p45150
sS'default'
p45151
S'TIMESTEP_END'
p45152
sS'description'
p45153
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45154
sS'required'
p45155
I00
sS'options'
p45156
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p45157
sS'group_name'
p45158
Nsa(dp45159
S'description'
p45160
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p45161
sS'cpp_type'
p45162
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45163
sS'default'
p45164
g3
sS'name'
p45165
S'outputs'
p45166
sS'required'
p45167
I00
sS'group_name'
p45168
S'Advanced'
p45169
sa(dp45170
S'description'
p45171
S'Name of the material property to be output along a line\n'
p45172
sS'cpp_type'
p45173
S'std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >'
p45174
sS'default'
p45175
g3
sS'name'
p45176
S'property'
p45177
sS'required'
p45178
I01
sS'group_name'
p45179
Nsa(dp45180
S'name'
p45181
S'sort_by'
p45182
sS'cpp_type'
p45183
S'MooseEnum'
p45184
sS'default'
p45185
g3
sS'description'
p45186
S'What to sort the samples by\n'
p45187
sS'required'
p45188
I01
sS'options'
p45189
S'x y z id'
p45190
sS'group_name'
p45191
Nsa(dp45192
S'description'
p45193
S'The beginning of the line\n'
p45194
sS'cpp_type'
p45195
S'libMesh::Point'
p45196
sS'default'
p45197
g3
sS'name'
p45198
S'start'
p45199
sS'required'
p45200
I01
sS'group_name'
p45201
Nsa(dp45202
S'description'
p45203
g3
sS'cpp_type'
p45204
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45205
sS'default'
p45206
S'LineMaterialRealSampler'
p45207
sS'name'
p45208
S'type'
p45209
sS'required'
p45210
I00
sS'group_name'
p45211
Nsa(dp45212
S'description'
p45213
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45214
sS'cpp_type'
p45215
S'bool'
p45216
sS'default'
p45217
S'0'
p45218
sS'name'
p45219
S'use_displaced_mesh'
p45220
sS'required'
p45221
I00
sS'group_name'
p45222
S'Advanced'
p45223
sasS'name'
p45224
S'/VectorPostprocessors/LineMaterialRealSampler'
p45225
sa(dp45226
S'description'
p45227
g3
sS'subblocks'
p45228
NsS'parameters'
p45229
(lp45230
(dp45231
S'description'
p45232
S'The ending of the line\n'
p45233
sS'cpp_type'
p45234
S'libMesh::Point'
p45235
sS'default'
p45236
g3
sS'name'
p45237
S'end_point'
p45238
sS'required'
p45239
I01
sS'group_name'
p45240
Nsa(dp45241
S'name'
p45242
S'execute_on'
p45243
sS'cpp_type'
p45244
S'MultiMooseEnum'
p45245
sS'default'
p45246
S'TIMESTEP_END'
p45247
sS'description'
p45248
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45249
sS'required'
p45250
I00
sS'options'
p45251
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p45252
sS'group_name'
p45253
Nsa(dp45254
S'description'
p45255
S'The number of points to sample along the line\n'
p45256
sS'cpp_type'
p45257
S'unsigned int'
p45258
sS'default'
p45259
g3
sS'name'
p45260
S'num_points'
p45261
sS'required'
p45262
I01
sS'group_name'
p45263
Nsa(dp45264
S'description'
p45265
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p45266
sS'cpp_type'
p45267
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45268
sS'default'
p45269
g3
sS'name'
p45270
S'outputs'
p45271
sS'required'
p45272
I00
sS'group_name'
p45273
S'Advanced'
p45274
sa(dp45275
S'name'
p45276
S'sort_by'
p45277
sS'cpp_type'
p45278
S'MooseEnum'
p45279
sS'default'
p45280
g3
sS'description'
p45281
S'What to sort the samples by\n'
p45282
sS'required'
p45283
I01
sS'options'
p45284
S'x y z id'
p45285
sS'group_name'
p45286
Nsa(dp45287
S'description'
p45288
S'The beginning of the line\n'
p45289
sS'cpp_type'
p45290
S'libMesh::Point'
p45291
sS'default'
p45292
g3
sS'name'
p45293
S'start_point'
p45294
sS'required'
p45295
I01
sS'group_name'
p45296
Nsa(dp45297
S'description'
p45298
g3
sS'cpp_type'
p45299
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45300
sS'default'
p45301
S'LineValueSampler'
p45302
sS'name'
p45303
S'type'
p45304
sS'required'
p45305
I00
sS'group_name'
p45306
Nsa(dp45307
S'description'
p45308
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45309
sS'cpp_type'
p45310
S'bool'
p45311
sS'default'
p45312
S'0'
p45313
sS'name'
p45314
S'use_displaced_mesh'
p45315
sS'required'
p45316
I00
sS'group_name'
p45317
S'Advanced'
p45318
sa(dp45319
S'description'
p45320
S'The names of the variables that this VectorPostprocessor operates on\n'
p45321
sS'cpp_type'
p45322
S'std::vector<VariableName>'
p45323
sS'default'
p45324
g3
sS'name'
p45325
S'variable'
p45326
sS'required'
p45327
I01
sS'group_name'
p45328
NsasS'name'
p45329
S'/VectorPostprocessors/LineValueSampler'
p45330
sa(dp45331
S'description'
p45332
g3
sS'subblocks'
p45333
NsS'parameters'
p45334
(lp45335
(dp45336
S'description'
p45337
S'The list of block ids (SubdomainID) that this object will be applied\n'
p45338
sS'cpp_type'
p45339
S'std::__1::vector<SubdomainName, std::__1::allocator<SubdomainName> >'
p45340
sS'default'
p45341
g3
sS'name'
p45342
S'block'
p45343
sS'required'
p45344
I00
sS'group_name'
p45345
Nsa(dp45346
S'description'
p45347
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p45348
sS'cpp_type'
p45349
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p45350
sS'default'
p45351
g3
sS'name'
p45352
S'boundary'
p45353
sS'required'
p45354
I00
sS'group_name'
p45355
Nsa(dp45356
S'name'
p45357
S'execute_on'
p45358
sS'cpp_type'
p45359
S'MultiMooseEnum'
p45360
sS'default'
p45361
S'TIMESTEP_END'
p45362
sS'description'
p45363
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45364
sS'required'
p45365
I00
sS'options'
p45366
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p45367
sS'group_name'
p45368
Nsa(dp45369
S'description'
p45370
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p45371
sS'cpp_type'
p45372
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45373
sS'default'
p45374
g3
sS'name'
p45375
S'outputs'
p45376
sS'required'
p45377
I00
sS'group_name'
p45378
S'Advanced'
p45379
sa(dp45380
S'description'
p45381
S'The seed for the master random number generator\n'
p45382
sS'cpp_type'
p45383
S'unsigned int'
p45384
sS'default'
p45385
S'0'
p45386
sS'name'
p45387
S'seed'
p45388
sS'required'
p45389
I00
sS'group_name'
p45390
S'Advanced'
p45391
sa(dp45392
S'name'
p45393
S'sort_by'
p45394
sS'cpp_type'
p45395
S'MooseEnum'
p45396
sS'default'
p45397
g3
sS'description'
p45398
S'What to sort the samples by\n'
p45399
sS'required'
p45400
I01
sS'options'
p45401
S'x y z id'
p45402
sS'group_name'
p45403
Nsa(dp45404
S'description'
p45405
g3
sS'cpp_type'
p45406
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45407
sS'default'
p45408
S'NodalValueSampler'
p45409
sS'name'
p45410
S'type'
p45411
sS'required'
p45412
I00
sS'group_name'
p45413
Nsa(dp45414
S'description'
p45415
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45416
sS'cpp_type'
p45417
S'bool'
p45418
sS'default'
p45419
S'0'
p45420
sS'name'
p45421
S'use_displaced_mesh'
p45422
sS'required'
p45423
I00
sS'group_name'
p45424
S'Advanced'
p45425
sa(dp45426
S'description'
p45427
S'The names of the variables that this VectorPostprocessor operates on\n'
p45428
sS'cpp_type'
p45429
S'std::vector<VariableName>'
p45430
sS'default'
p45431
g3
sS'name'
p45432
S'variable'
p45433
sS'required'
p45434
I01
sS'group_name'
p45435
NsasS'name'
p45436
S'/VectorPostprocessors/NodalValueSampler'
p45437
sa(dp45438
S'description'
p45439
g3
sS'subblocks'
p45440
NsS'parameters'
p45441
(lp45442
(dp45443
S'name'
p45444
S'execute_on'
p45445
sS'cpp_type'
p45446
S'MultiMooseEnum'
p45447
sS'default'
p45448
S'TIMESTEP_END'
p45449
sS'description'
p45450
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45451
sS'required'
p45452
I00
sS'options'
p45453
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p45454
sS'group_name'
p45455
Nsa(dp45456
S'description'
p45457
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p45458
sS'cpp_type'
p45459
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45460
sS'default'
p45461
g3
sS'name'
p45462
S'outputs'
p45463
sS'required'
p45464
I00
sS'group_name'
p45465
S'Advanced'
p45466
sa(dp45467
S'description'
p45468
S'The points where you want to evaluate the variables\n'
p45469
sS'cpp_type'
p45470
S'std::__1::vector<libMesh::Point, std::__1::allocator<libMesh::Point> >'
p45471
sS'default'
p45472
g3
sS'name'
p45473
S'points'
p45474
sS'required'
p45475
I01
sS'group_name'
p45476
Nsa(dp45477
S'name'
p45478
S'sort_by'
p45479
sS'cpp_type'
p45480
S'MooseEnum'
p45481
sS'default'
p45482
g3
sS'description'
p45483
S'What to sort the samples by\n'
p45484
sS'required'
p45485
I01
sS'options'
p45486
S'x y z id'
p45487
sS'group_name'
p45488
Nsa(dp45489
S'description'
p45490
g3
sS'cpp_type'
p45491
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45492
sS'default'
p45493
S'PointValueSampler'
p45494
sS'name'
p45495
S'type'
p45496
sS'required'
p45497
I00
sS'group_name'
p45498
Nsa(dp45499
S'description'
p45500
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45501
sS'cpp_type'
p45502
S'bool'
p45503
sS'default'
p45504
S'0'
p45505
sS'name'
p45506
S'use_displaced_mesh'
p45507
sS'required'
p45508
I00
sS'group_name'
p45509
S'Advanced'
p45510
sa(dp45511
S'description'
p45512
S'The names of the variables that this VectorPostprocessor operates on\n'
p45513
sS'cpp_type'
p45514
S'std::vector<VariableName>'
p45515
sS'default'
p45516
g3
sS'name'
p45517
S'variable'
p45518
sS'required'
p45519
I01
sS'group_name'
p45520
NsasS'name'
p45521
S'/VectorPostprocessors/PointValueSampler'
p45522
sa(dp45523
S'description'
p45524
g3
sS'subblocks'
p45525
NsS'parameters'
p45526
(lp45527
(dp45528
S'description'
p45529
S'The list of boundary IDs from the mesh where this boundary condition applies\n'
p45530
sS'cpp_type'
p45531
S'std::__1::vector<BoundaryName, std::__1::allocator<BoundaryName> >'
p45532
sS'default'
p45533
g3
sS'name'
p45534
S'boundary'
p45535
sS'required'
p45536
I00
sS'group_name'
p45537
Nsa(dp45538
S'name'
p45539
S'execute_on'
p45540
sS'cpp_type'
p45541
S'MultiMooseEnum'
p45542
sS'default'
p45543
S'TIMESTEP_END'
p45544
sS'description'
p45545
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45546
sS'required'
p45547
I00
sS'options'
p45548
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p45549
sS'group_name'
p45550
Nsa(dp45551
S'description'
p45552
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p45553
sS'cpp_type'
p45554
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45555
sS'default'
p45556
g3
sS'name'
p45557
S'outputs'
p45558
sS'required'
p45559
I00
sS'group_name'
p45560
S'Advanced'
p45561
sa(dp45562
S'name'
p45563
S'sort_by'
p45564
sS'cpp_type'
p45565
S'MooseEnum'
p45566
sS'default'
p45567
g3
sS'description'
p45568
S'What to sort the samples by\n'
p45569
sS'required'
p45570
I01
sS'options'
p45571
S'x y z id'
p45572
sS'group_name'
p45573
Nsa(dp45574
S'description'
p45575
g3
sS'cpp_type'
p45576
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45577
sS'default'
p45578
S'SideValueSampler'
p45579
sS'name'
p45580
S'type'
p45581
sS'required'
p45582
I00
sS'group_name'
p45583
Nsa(dp45584
S'description'
p45585
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45586
sS'cpp_type'
p45587
S'bool'
p45588
sS'default'
p45589
S'0'
p45590
sS'name'
p45591
S'use_displaced_mesh'
p45592
sS'required'
p45593
I00
sS'group_name'
p45594
S'Advanced'
p45595
sa(dp45596
S'description'
p45597
S'The names of the variables that this VectorPostprocessor operates on\n'
p45598
sS'cpp_type'
p45599
S'std::vector<VariableName>'
p45600
sS'default'
p45601
g3
sS'name'
p45602
S'variable'
p45603
sS'required'
p45604
I01
sS'group_name'
p45605
NsasS'name'
p45606
S'/VectorPostprocessors/SideValueSampler'
p45607
sa(dp45608
S'description'
p45609
S'Outputs the values of an arbitrary user-specified set of postprocessors as a vector in the order specified by the user\n'
p45610
sS'subblocks'
p45611
NsS'parameters'
p45612
(lp45613
(dp45614
S'name'
p45615
S'execute_on'
p45616
sS'cpp_type'
p45617
S'MultiMooseEnum'
p45618
sS'default'
p45619
S'TIMESTEP_END'
p45620
sS'description'
p45621
S'Set to (nonlinear|linear|timestep_end|timestep_begin|custom) to execute only at that moment\n'
p45622
sS'required'
p45623
I00
sS'options'
p45624
S'initial linear nonlinear timestep_end timestep_begin custom residual jacobian timestep'
p45625
sS'group_name'
p45626
Nsa(dp45627
S'description'
p45628
S'Vector of output names were you would like to restrict the output of this VectorPostprocessor (empty outputs to all)\n'
p45629
sS'cpp_type'
p45630
S'std::__1::vector<OutputName, std::__1::allocator<OutputName> >'
p45631
sS'default'
p45632
g3
sS'name'
p45633
S'outputs'
p45634
sS'required'
p45635
I00
sS'group_name'
p45636
S'Advanced'
p45637
sa(dp45638
S'description'
p45639
S'The postprocessors whose values are to be reported\n'
p45640
sS'cpp_type'
p45641
S'std::__1::vector<PostprocessorName, std::__1::allocator<PostprocessorName> >'
p45642
sS'default'
p45643
g3
sS'name'
p45644
S'postprocessors'
p45645
sS'required'
p45646
I01
sS'group_name'
p45647
Nsa(dp45648
S'description'
p45649
g3
sS'cpp_type'
p45650
S'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >'
p45651
sS'default'
p45652
S'VectorOfPostprocessors'
p45653
sS'name'
p45654
S'type'
p45655
sS'required'
p45656
I00
sS'group_name'
p45657
Nsa(dp45658
S'description'
p45659
S'Whether or not this object should use the displaced mesh for computation.  Note that in the case this is true but no displacements are provided in the Mesh block the undisplaced mesh will still be used.\n'
p45660
sS'cpp_type'
p45661
S'bool'
p45662
sS'default'
p45663
S'0'
p45664
sS'name'
p45665
S'use_displaced_mesh'
p45666
sS'required'
p45667
I00
sS'group_name'
p45668
S'Advanced'
p45669
sasS'name'
p45670
S'/VectorPostprocessors/VectorOfPostprocessors'
p45671
sasS'parameters'
p45672
NsS'name'
p45673
S'/VectorPostprocessors'
p45674
sa.